Opal.modules["active_support/core_ext/array/extract_options"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_of?', '$is_a?', '$last', '$extractable_options?', '$pop']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_extractable_options$ques$1;

    return (Opal.def(self, '$extractable_options?', $Hash_extractable_options$ques$1 = function() {
      var self = this;

      return self['$instance_of?']($$($nesting, 'Hash'))
    }, $Hash_extractable_options$ques$1.$$arity = 0), nil) && 'extractable_options?'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_extract_options$excl$2;

    return (Opal.def(self, '$extract_options!', $Array_extract_options$excl$2 = function() {
      var self = this, $ret_or_1 = nil;

      if ($truthy((function() {if ($truthy(($ret_or_1 = self.$last()['$is_a?']($$($nesting, 'Hash'))))) {
        return self.$last()['$extractable_options?']()
      } else {
        return $ret_or_1
      }; return nil; })())) {
        return self.$pop()
      } else {
        return $hash2([], {})
      }
    }, $Array_extract_options$excl$2.$$arity = 0), nil) && 'extract_options!'
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/core_ext/array/wrap"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$respond_to?', '$to_ary']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_wrap$1;

    return (Opal.defs(self, '$wrap', $Array_wrap$1 = function $$wrap(object) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(object['$nil?']())) {
        return []
      } else if ($truthy(object['$respond_to?']("to_ary"))) {
        if ($truthy(($ret_or_1 = object.$to_ary()))) {
          return $ret_or_1
        } else {
          return [object]
        }
      } else {
        return [object]
      }
    }, $Array_wrap$1.$$arity = 1), nil) && 'wrap'
  })($nesting[0], null, $nesting)
};

Opal.modules["active_support/core_ext/array/grouping"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$%', '$-', '$size', '$concat', '$dup', '$*', '$each_slice', '$<<', '$div', '$times', '$+', '$>', '$slice', '$!=', '$each', '$inject', '$call', '$last']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_in_groups_of$1, $Array_in_groups$4, $Array_split$7;

    
    
    Opal.def(self, '$in_groups_of', $Array_in_groups_of$1 = function $$in_groups_of(number, fill_with) {
      var $$2, $$3, $iter = $Array_in_groups_of$1.$$p, $yield = $iter || nil, self = this, collection = nil, padding = nil, groups = nil;

      if ($iter) $Array_in_groups_of$1.$$p = null;
      
      
      if (fill_with == null) {
        fill_with = nil;
      };
      if (fill_with['$=='](false)) {
        collection = self
      } else {
        
        padding = $rb_minus(number, self.$size()['$%'](number))['$%'](number);
        collection = self.$dup().$concat($rb_times([fill_with], padding));
      };
      if (($yield !== nil)) {
        return $send(collection, 'each_slice', [number], ($$2 = function(slice){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (slice == null) {
            slice = nil;
          };
          return Opal.yield1($yield, slice);;}, $$2.$$s = self, $$2.$$arity = 1, $$2))
      } else {
        
        groups = [];
        $send(collection, 'each_slice', [number], ($$3 = function(group){var self = $$3.$$s == null ? this : $$3.$$s;

          
          
          if (group == null) {
            group = nil;
          };
          return groups['$<<'](group);}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        return groups;
      };
    }, $Array_in_groups_of$1.$$arity = -2);
    
    Opal.def(self, '$in_groups', $Array_in_groups$4 = function $$in_groups(number, fill_with) {
      var $$5, $$6, $iter = $Array_in_groups$4.$$p, $yield = $iter || nil, self = this, division = nil, modulo = nil, groups = nil, start = nil;

      if ($iter) $Array_in_groups$4.$$p = null;
      
      
      if (fill_with == null) {
        fill_with = nil;
      };
      division = self.$size().$div(number);
      modulo = self.$size()['$%'](number);
      groups = [];
      start = 0;
      $send(number, 'times', [], ($$5 = function(index){var self = $$5.$$s == null ? this : $$5.$$s, length = nil, $ret_or_1 = nil, last_group = nil, $ret_or_2 = nil, $ret_or_3 = nil;

        
        
        if (index == null) {
          index = nil;
        };
        length = $rb_plus(division, (function() {if ($truthy((function() {if ($truthy(($ret_or_1 = $rb_gt(modulo, 0)))) {
          return $rb_gt(modulo, index)
        } else {
          return $ret_or_1
        }; return nil; })())) {
          return 1
        } else {
          return 0
        }; return nil; })());
        groups['$<<']((last_group = self.$slice(start, length)));
        if ($truthy((function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = fill_with['$!='](false)))) {
          return $rb_gt(modulo, 0)
        } else {
          return $ret_or_3
        }; return nil; })()))) {
          return length['$=='](division)
        } else {
          return $ret_or_2
        }; return nil; })())) {
          last_group['$<<'](fill_with)};
        return (start = $rb_plus(start, length));}, $$5.$$s = self, $$5.$$arity = 1, $$5));
      if (($yield !== nil)) {
        return $send(groups, 'each', [], ($$6 = function(g){var self = $$6.$$s == null ? this : $$6.$$s;

          
          
          if (g == null) {
            g = nil;
          };
          return Opal.yield1($yield, g);;}, $$6.$$s = self, $$6.$$arity = 1, $$6))
      } else {
        return groups
      };
    }, $Array_in_groups$4.$$arity = -2);
    return (Opal.def(self, '$split', $Array_split$7 = function $$split(value) {
      var $iter = $Array_split$7.$$p, block = $iter || nil, $$8, self = this;

      if ($iter) $Array_split$7.$$p = null;
      
      
      if ($iter) $Array_split$7.$$p = null;;
      
      if (value == null) {
        value = nil;
      };
      return $send(self, 'inject', [[[]]], ($$8 = function(results, element){var self = $$8.$$s == null ? this : $$8.$$s, $ret_or_4 = nil, $ret_or_5 = nil;

        
        
        if (results == null) {
          results = nil;
        };
        
        if (element == null) {
          element = nil;
        };
        if ($truthy((function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = block))) {
          return block.$call(element)
        } else {
          return $ret_or_5
        }; return nil; })()))) {
          return $ret_or_4
        } else {
          return value['$=='](element)
        }; return nil; })())) {
          results['$<<']([])
        } else {
          results.$last()['$<<'](element)
        };
        return results;}, $$8.$$s = self, $$8.$$arity = 2, $$8));
    }, $Array_split$7.$$arity = -1), nil) && 'split';
  })($nesting[0], null, $nesting)
};

Opal.modules["active_support/core_ext/array"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/core_ext/array/extract_options");
  self.$require("active_support/core_ext/array/wrap");
  return self.$require("active_support/core_ext/array/grouping");
};

Opal.modules["active_support/core_ext/kernel/singleton_class"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$class_eval', '$singleton_class', '$to_proc']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_class_eval$1;

    return (Opal.def(self, '$class_eval', $Kernel_class_eval$1 = function $$class_eval($a) {
      var $iter = $Kernel_class_eval$1.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Kernel_class_eval$1.$$p = null;
      
      
      if ($iter) $Kernel_class_eval$1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self.$singleton_class(), 'class_eval', Opal.to_a(args), block.$to_proc());
    }, $Kernel_class_eval$1.$$arity = -1), nil) && 'class_eval'
  })($nesting[0], $nesting)
};

Opal.modules["active_support/core_ext/module/remove_method"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$method_defined?', '$private_method_defined?', '$undef_method', '$remove_possible_method', '$define_method', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_remove_possible_method$1, $Module_redefine_method$2;

    
    
    Opal.def(self, '$remove_possible_method', $Module_remove_possible_method$1 = function $$remove_possible_method(method) {
      var self = this, $ret_or_1 = nil;

      if ($truthy((function() {if ($truthy(($ret_or_1 = self['$method_defined?'](method)))) {
        return $ret_or_1
      } else {
        return self['$private_method_defined?'](method)
      }; return nil; })())) {
        return self.$undef_method(method)
      } else {
        return nil
      }
    }, $Module_remove_possible_method$1.$$arity = 1);
    return (Opal.def(self, '$redefine_method', $Module_redefine_method$2 = function $$redefine_method(method) {
      var $iter = $Module_redefine_method$2.$$p, block = $iter || nil, self = this;

      if ($iter) $Module_redefine_method$2.$$p = null;
      
      
      if ($iter) $Module_redefine_method$2.$$p = null;;
      self.$remove_possible_method(method);
      return $send(self, 'define_method', [method], block.$to_proc());
    }, $Module_redefine_method$2.$$arity = 1), nil) && 'redefine_method';
  })($nesting[0], null, $nesting)
};

Opal.modules["active_support/core_ext/class/attribute"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$extract_options!', '$fetch', '$each', '$define_singleton_method', '$!', '$public_send', '$class_eval', '$singleton_class', '$remove_possible_method', '$define_method', '$singleton_class?', '$instance_variable_defined?', '$instance_variable_get', '$send', '$class', '$attr_writer', '$private', '$respond_to?', '$!=', '$first', '$ancestors']);
  
  self.$require("active_support/core_ext/kernel/singleton_class");
  self.$require("active_support/core_ext/module/remove_method");
  self.$require("active_support/core_ext/array/extract_options");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Class');

    var $nesting = [self].concat($parent_nesting), $Class_class_attribute$1, $Class_singleton_class$ques$12;

    
    
    Opal.def(self, '$class_attribute', $Class_class_attribute$1 = function $$class_attribute($a) {
      var $post_args, attrs, $$2, self = this, options = nil, instance_reader = nil, $ret_or_1 = nil, instance_writer = nil, $ret_or_2 = nil, instance_predicate = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      attrs = $post_args;;
      options = attrs['$extract_options!']();
      instance_reader = (function() {if ($truthy(($ret_or_1 = options.$fetch("instance_accessor", true)))) {
        return options.$fetch("instance_reader", true)
      } else {
        return $ret_or_1
      }; return nil; })();
      instance_writer = (function() {if ($truthy(($ret_or_2 = options.$fetch("instance_accessor", true)))) {
        return options.$fetch("instance_writer", true)
      } else {
        return $ret_or_2
      }; return nil; })();
      instance_predicate = options.$fetch("instance_predicate", true);
      return $send(attrs, 'each', [], ($$2 = function(name){var self = $$2.$$s == null ? this : $$2.$$s, $$3, $$4, $$5, $$10, $$11, ivar = nil;

        
        
        if (name == null) {
          name = nil;
        };
        $send(self, 'define_singleton_method', [name], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;

          return nil}, $$3.$$s = self, $$3.$$arity = 0, $$3));
        if ($truthy(instance_predicate)) {
          $send(self, 'define_singleton_method', ["" + (name) + "?"], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

            return self.$public_send(name)['$!']()['$!']()}, $$4.$$s = self, $$4.$$arity = 0, $$4))};
        ivar = "" + "@" + (name);
        $send(self, 'define_singleton_method', ["" + (name) + "="], ($$5 = function(val){var self = $$5.$$s == null ? this : $$5.$$s, $$6, $$8;

          
          
          if (val == null) {
            val = nil;
          };
          $send(self.$singleton_class(), 'class_eval', [], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s, $$7;

            
            self.$remove_possible_method(name);
            return $send(self, 'define_method', [name], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s;

              return val}, $$7.$$s = self, $$7.$$arity = 0, $$7));}, $$6.$$s = self, $$6.$$arity = 0, $$6));
          if ($truthy(self['$singleton_class?']())) {
            $send(self, 'class_eval', [], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s, $$9;

              
              self.$remove_possible_method(name);
              return $send(self, 'define_method', [name], ($$9 = function(){var self = $$9.$$s == null ? this : $$9.$$s;

                if ($truthy(self['$instance_variable_defined?'](ivar))) {
                  return self.$instance_variable_get(ivar)
                } else {
                  return self.$singleton_class().$send(name)
                }}, $$9.$$s = self, $$9.$$arity = 0, $$9));}, $$8.$$s = self, $$8.$$arity = 0, $$8))};
          return val;}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        if ($truthy(instance_reader)) {
          
          self.$remove_possible_method(name);
          $send(self, 'define_method', [name], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

            if ($truthy(self['$instance_variable_defined?'](ivar))) {
              return self.$instance_variable_get(ivar)
            } else {
              return self.$class().$public_send(name)
            }}, $$10.$$s = self, $$10.$$arity = 0, $$10));
          if ($truthy(instance_predicate)) {
            $send(self, 'define_method', ["" + (name) + "?"], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s;

              return self.$public_send(name)['$!']()['$!']()}, $$11.$$s = self, $$11.$$arity = 0, $$11))};};
        if ($truthy(instance_writer)) {
          return self.$attr_writer(name)
        } else {
          return nil
        };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
    }, $Class_class_attribute$1.$$arity = -1);
    self.$private();
    if ($truthy(self['$respond_to?']("singleton_class?"))) {
      return nil
    } else {
      return (Opal.def(self, '$singleton_class?', $Class_singleton_class$ques$12 = function() {
        var self = this, $ret_or_3 = nil;

        if ($truthy(($ret_or_3 = true))) {
          return $ret_or_3
        } else {
          return self.$ancestors().$first()['$!='](self)
        }
      }, $Class_singleton_class$ques$12.$$arity = 0), nil) && 'singleton_class?'
    };
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/core_ext/class"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/class/attribute")
};

Opal.modules["active_support/core_ext/enumerable"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$enum_for', '$new', '$destructure', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_index_by$1;

    return (Opal.def(self, '$index_by', $Enumerable_index_by$1 = function $$index_by() {
      var $iter = $Enumerable_index_by$1.$$p, block = $iter || nil, self = this, hash = nil, $writer = nil;

      if ($iter) $Enumerable_index_by$1.$$p = null;
      
      
      if ($iter) $Enumerable_index_by$1.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("index_by")
      };
      hash = $$($nesting, 'Hash').$new();
      
      var result;

      self.$each._p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        (($writer = [value, param]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return hash;
    }, $Enumerable_index_by$1.$$arity = 0), nil) && 'index_by'
  })($nesting[0], $nesting)
};

Opal.modules["active_support/hash_with_indifferent_access"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send;

  Opal.add_stubs(['$dup', '$respond_to?', '$update', '$to_hash', '$tap', '$new', '$default', '$default=', '$-', '$default_proc', '$default_proc=']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ActiveSupport');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HashWithIndifferentAccess');

      var $nesting = [self].concat($parent_nesting), $HashWithIndifferentAccess_extractable_options$ques$1, $HashWithIndifferentAccess_with_indifferent_access$2, $HashWithIndifferentAccess_nested_under_indifferent_access$3, $HashWithIndifferentAccess_initialize$4, $HashWithIndifferentAccess_new_from_hash_copying_default$5;

      
      
      Opal.def(self, '$extractable_options?', $HashWithIndifferentAccess_extractable_options$ques$1 = function() {
        var self = this;

        return true
      }, $HashWithIndifferentAccess_extractable_options$ques$1.$$arity = 0);
      
      Opal.def(self, '$with_indifferent_access', $HashWithIndifferentAccess_with_indifferent_access$2 = function $$with_indifferent_access() {
        var self = this;

        return self.$dup()
      }, $HashWithIndifferentAccess_with_indifferent_access$2.$$arity = 0);
      
      Opal.def(self, '$nested_under_indifferent_access', $HashWithIndifferentAccess_nested_under_indifferent_access$3 = function $$nested_under_indifferent_access() {
        var self = this;

        return self
      }, $HashWithIndifferentAccess_nested_under_indifferent_access$3.$$arity = 0);
      
      Opal.def(self, '$initialize', $HashWithIndifferentAccess_initialize$4 = function $$initialize(constructor) {
        var $iter = $HashWithIndifferentAccess_initialize$4.$$p, $yield = $iter || nil, self = this;

        if ($iter) $HashWithIndifferentAccess_initialize$4.$$p = null;
        
        
        if (constructor == null) {
          constructor = $hash2([], {});
        };
        if ($truthy(constructor['$respond_to?']("to_hash"))) {
          
          $send2(self, $find_super(self, 'initialize', $HashWithIndifferentAccess_initialize$4, false, true), 'initialize', [], null);
          return self.$update(constructor);
        } else {
          return $send2(self, $find_super(self, 'initialize', $HashWithIndifferentAccess_initialize$4, false, true), 'initialize', [constructor], null)
        };
      }, $HashWithIndifferentAccess_initialize$4.$$arity = -1);
      return (Opal.defs(self, '$new_from_hash_copying_default', $HashWithIndifferentAccess_new_from_hash_copying_default$5 = function $$new_from_hash_copying_default(hash) {
        var $$6, self = this;

        
        hash = hash.$to_hash();
        return $send(self.$new(hash), 'tap', [], ($$6 = function(new_hash){var self = $$6.$$s == null ? this : $$6.$$s, $writer = nil;

          
          
          if (new_hash == null) {
            new_hash = nil;
          };
          
          $writer = [hash.$default()];
          $send(new_hash, 'default=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(hash.$default_proc())) {
            
            $writer = [hash.$default_proc()];
            $send(new_hash, 'default_proc=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };}, $$6.$$s = self, $$6.$$arity = 1, $$6));
      }, $HashWithIndifferentAccess_new_from_hash_copying_default$5.$$arity = 1), nil) && 'new_from_hash_copying_default';
    })($nesting[0], $$($nesting, 'Hash'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["active_support/core_ext/hash/indifferent_access"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $alias = Opal.alias;

  Opal.add_stubs(['$require', '$new_from_hash_copying_default']);
  
  self.$require("active_support/hash_with_indifferent_access");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_with_indifferent_access$1;

    
    
    Opal.def(self, '$with_indifferent_access', $Hash_with_indifferent_access$1 = function $$with_indifferent_access() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'HashWithIndifferentAccess').$new_from_hash_copying_default(self)
    }, $Hash_with_indifferent_access$1.$$arity = 0);
    return $alias(self, "nested_under_indifferent_access", "with_indifferent_access");
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/core_ext/hash"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/hash/indifferent_access")
};

Opal.modules["active_support/core_ext/numeric/time"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $alias = Opal.alias;

  Opal.add_stubs(['$*', '$hours', '$days', '$weeks', '$current', '$-', '$+']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_seconds$1, $Numeric_minutes$2, $Numeric_hours$3, $Numeric_days$4, $Numeric_weeks$5, $Numeric_fortnights$6, $Numeric_ago$7, $Numeric_since$8;

    
    
    Opal.def(self, '$seconds', $Numeric_seconds$1 = function $$seconds() {
      var self = this;

      return self
    }, $Numeric_seconds$1.$$arity = 0);
    $alias(self, "second", "seconds");
    
    Opal.def(self, '$minutes', $Numeric_minutes$2 = function $$minutes() {
      var self = this;

      return $rb_times(self, 60)
    }, $Numeric_minutes$2.$$arity = 0);
    $alias(self, "minute", "minutes");
    
    Opal.def(self, '$hours', $Numeric_hours$3 = function $$hours() {
      var self = this;

      return $rb_times(self, 3600)
    }, $Numeric_hours$3.$$arity = 0);
    $alias(self, "hour", "hours");
    
    Opal.def(self, '$days', $Numeric_days$4 = function $$days() {
      var self = this;

      return $rb_times(self, (24).$hours())
    }, $Numeric_days$4.$$arity = 0);
    $alias(self, "day", "days");
    
    Opal.def(self, '$weeks', $Numeric_weeks$5 = function $$weeks() {
      var self = this;

      return $rb_times(self, (7).$days())
    }, $Numeric_weeks$5.$$arity = 0);
    $alias(self, "week", "weeks");
    
    Opal.def(self, '$fortnights', $Numeric_fortnights$6 = function $$fortnights() {
      var self = this;

      return $rb_times(self, (2).$weeks())
    }, $Numeric_fortnights$6.$$arity = 0);
    $alias(self, "fortnight", "fortnights");
    
    Opal.def(self, '$ago', $Numeric_ago$7 = function $$ago(time) {
      var self = this;

      
      
      if (time == null) {
        time = $$$('::', 'Time').$current();
      };
      return $rb_minus(time, self);
    }, $Numeric_ago$7.$$arity = -1);
    $alias(self, "until", "ago");
    
    Opal.def(self, '$since', $Numeric_since$8 = function $$since(time) {
      var self = this;

      
      
      if (time == null) {
        time = $$$('::', 'Time').$current();
      };
      return $rb_plus(time, self);
    }, $Numeric_since$8.$$arity = -1);
    return $alias(self, "from_now", "since");
  })($nesting[0], null, $nesting)
};

Opal.modules["active_support/core_ext/integer/time"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $alias = Opal.alias;

  Opal.add_stubs(['$require', '$*', '$days']);
  
  self.$require("active_support/core_ext/numeric/time");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_months$1, $Numeric_years$2;

    
    
    Opal.def(self, '$months', $Numeric_months$1 = function $$months() {
      var self = this;

      return $rb_times(self, (30).$days())
    }, $Numeric_months$1.$$arity = 0);
    $alias(self, "month", "months");
    
    Opal.def(self, '$years', $Numeric_years$2 = function $$years() {
      var self = this;

      return $rb_times(self, (365.25).$days())
    }, $Numeric_years$2.$$arity = 0);
    return $alias(self, "year", "years");
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/core_ext/integer"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/integer/time")
};

Opal.modules["active_support/core_ext/kernel"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/kernel/singleton_class")
};

Opal.modules["set"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$reject', '$delete_if', '$to_proc', '$keep_if', '$each_key', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$any?', '$!', '$intersect?', '$keys']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Set');

    var $nesting = [self].concat($parent_nesting), $Set_$$$1, $Set_initialize$2, $Set_dup$4, $Set_$minus$5, $Set_inspect$6, $Set_$eq_eq$7, $Set_add$9, $Set_classify$10, $Set_collect$excl$13, $Set_delete$15, $Set_delete$ques$16, $Set_delete_if$17, $Set_keep_if$20, $Set_reject$excl$23, $Set_select$excl$24, $Set_add$ques$25, $Set_each$26, $Set_empty$ques$27, $Set_eql$ques$28, $Set_clear$30, $Set_include$ques$31, $Set_merge$32, $Set_replace$34, $Set_size$35, $Set_subtract$36, $Set_$$38, $Set_superset$ques$39, $Set_proper_superset$ques$41, $Set_subset$ques$43, $Set_proper_subset$ques$45, $Set_intersect$ques$47, $Set_disjoint$ques$50, $Set_to_a$51;

    self.$$prototype.hash = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defs(self, '$[]', $Set_$$$1 = function($a) {
      var $post_args, ary, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      ary = $post_args;;
      return self.$new(ary);
    }, $Set_$$$1.$$arity = -1);
    
    Opal.def(self, '$initialize', $Set_initialize$2 = function $$initialize(enum$) {
      var $iter = $Set_initialize$2.$$p, block = $iter || nil, $$3, self = this;

      if ($iter) $Set_initialize$2.$$p = null;
      
      
      if ($iter) $Set_initialize$2.$$p = null;;
      
      if (enum$ == null) {
        enum$ = nil;
      };
      self.hash = $hash2([], {});
      if ($truthy(enum$['$nil?']())) {
        return nil};
      if ($truthy($$($nesting, 'Enumerable')['$==='](enum$))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], ($$3 = function(item){var self = $$3.$$s == null ? this : $$3.$$s;

          
          
          if (item == null) {
            item = nil;
          };
          return self.$add(Opal.yield1(block, item));}, $$3.$$s = self, $$3.$$arity = 1, $$3))
      } else {
        return self.$merge(enum$)
      };
    }, $Set_initialize$2.$$arity = -1);
    
    Opal.def(self, '$dup', $Set_dup$4 = function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, $Set_dup$4.$$arity = 0);
    
    Opal.def(self, '$-', $Set_$minus$5 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, $Set_$minus$5.$$arity = 1);
    $alias(self, "difference", "-");
    
    Opal.def(self, '$inspect', $Set_inspect$6 = function $$inspect() {
      var self = this;

      return "" + "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, $Set_inspect$6.$$arity = 0);
    
    Opal.def(self, '$==', $Set_$eq_eq$7 = function(other) {
      var $$8, self = this, $ret_or_1 = nil;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ($truthy((function() {if ($truthy(($ret_or_1 = other['$is_a?']($$($nesting, 'Set'))))) {
        return self.$size()['$=='](other.$size())
      } else {
        return $ret_or_1
      }; return nil; })())) {
        return $send(other, 'all?', [], ($$8 = function(o){var self = $$8.$$s == null ? this : $$8.$$s;
          if (self.hash == null) self.hash = nil;

          
          
          if (o == null) {
            o = nil;
          };
          return self.hash['$include?'](o);}, $$8.$$s = self, $$8.$$arity = 1, $$8))
      } else {
        return false
      }
    }, $Set_$eq_eq$7.$$arity = 1);
    
    Opal.def(self, '$add', $Set_add$9 = function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, $Set_add$9.$$arity = 1);
    $alias(self, "<<", "add");
    
    Opal.def(self, '$classify', $Set_classify$10 = function $$classify() {
      var $iter = $Set_classify$10.$$p, block = $iter || nil, $$11, $$12, self = this, result = nil;

      if ($iter) $Set_classify$10.$$p = null;
      
      
      if ($iter) $Set_classify$10.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("classify")
      };
      result = $send($$($nesting, 'Hash'), 'new', [], ($$11 = function(h, k){var self = $$11.$$s == null ? this : $$11.$$s, $writer = nil;

        
        
        if (h == null) {
          h = nil;
        };
        
        if (k == null) {
          k = nil;
        };
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, $$11.$$s = self, $$11.$$arity = 2, $$11));
      $send(self, 'each', [], ($$12 = function(item){var self = $$12.$$s == null ? this : $$12.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return result['$[]'](Opal.yield1(block, item)).$add(item);}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      return result;
    }, $Set_classify$10.$$arity = 0);
    
    Opal.def(self, '$collect!', $Set_collect$excl$13 = function() {
      var $iter = $Set_collect$excl$13.$$p, block = $iter || nil, $$14, self = this, result = nil;

      if ($iter) $Set_collect$excl$13.$$p = null;
      
      
      if ($iter) $Set_collect$excl$13.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], ($$14 = function(item){var self = $$14.$$s == null ? this : $$14.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return result['$<<'](Opal.yield1(block, item));}, $$14.$$s = self, $$14.$$arity = 1, $$14));
      return self.$replace(result);
    }, $Set_collect$excl$13.$$arity = 0);
    $alias(self, "map!", "collect!");
    
    Opal.def(self, '$delete', $Set_delete$15 = function(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, $Set_delete$15.$$arity = 1);
    
    Opal.def(self, '$delete?', $Set_delete$ques$16 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
      } else {
        return nil
      }
    }, $Set_delete$ques$16.$$arity = 1);
    
    Opal.def(self, '$delete_if', $Set_delete_if$17 = function $$delete_if() {
      var $$18, $$19, $iter = $Set_delete_if$17.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Set_delete_if$17.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("delete_if")
      };
      $send($send(self, 'select', [], ($$18 = function(o){var self = $$18.$$s == null ? this : $$18.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return Opal.yield1($yield, o);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)), 'each', [], ($$19 = function(o){var self = $$19.$$s == null ? this : $$19.$$s;
        if (self.hash == null) self.hash = nil;

        
        
        if (o == null) {
          o = nil;
        };
        return self.hash.$delete(o);}, $$19.$$s = self, $$19.$$arity = 1, $$19));
      return self;
    }, $Set_delete_if$17.$$arity = 0);
    
    Opal.def(self, '$keep_if', $Set_keep_if$20 = function $$keep_if() {
      var $$21, $$22, $iter = $Set_keep_if$20.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Set_keep_if$20.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("keep_if")
      };
      $send($send(self, 'reject', [], ($$21 = function(o){var self = $$21.$$s == null ? this : $$21.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return Opal.yield1($yield, o);;}, $$21.$$s = self, $$21.$$arity = 1, $$21)), 'each', [], ($$22 = function(o){var self = $$22.$$s == null ? this : $$22.$$s;
        if (self.hash == null) self.hash = nil;

        
        
        if (o == null) {
          o = nil;
        };
        return self.hash.$delete(o);}, $$22.$$s = self, $$22.$$arity = 1, $$22));
      return self;
    }, $Set_keep_if$20.$$arity = 0);
    
    Opal.def(self, '$reject!', $Set_reject$excl$23 = function() {
      var $iter = $Set_reject$excl$23.$$p, block = $iter || nil, self = this, before = nil;

      if ($iter) $Set_reject$excl$23.$$p = null;
      
      
      if ($iter) $Set_reject$excl$23.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("reject!")
      };
      before = self.$size();
      $send(self, 'delete_if', [], block.$to_proc());
      if (self.$size()['$=='](before)) {
        return nil
      } else {
        return self
      };
    }, $Set_reject$excl$23.$$arity = 0);
    
    Opal.def(self, '$select!', $Set_select$excl$24 = function() {
      var $iter = $Set_select$excl$24.$$p, block = $iter || nil, self = this, before = nil;

      if ($iter) $Set_select$excl$24.$$p = null;
      
      
      if ($iter) $Set_select$excl$24.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("select!")
      };
      before = self.$size();
      $send(self, 'keep_if', [], block.$to_proc());
      if (self.$size()['$=='](before)) {
        return nil
      } else {
        return self
      };
    }, $Set_select$excl$24.$$arity = 0);
    $alias(self, "filter!", "select!");
    
    Opal.def(self, '$add?', $Set_add$ques$25 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
      } else {
        return self.$add(o)
      }
    }, $Set_add$ques$25.$$arity = 1);
    
    Opal.def(self, '$each', $Set_each$26 = function $$each() {
      var $iter = $Set_each$26.$$p, block = $iter || nil, self = this;

      if ($iter) $Set_each$26.$$p = null;
      
      
      if ($iter) $Set_each$26.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, $Set_each$26.$$arity = 0);
    
    Opal.def(self, '$empty?', $Set_empty$ques$27 = function() {
      var self = this;

      return self.hash['$empty?']()
    }, $Set_empty$ques$27.$$arity = 0);
    
    Opal.def(self, '$eql?', $Set_eql$ques$28 = function(other) {
      var $$29, self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], ($$29 = function(){var self = $$29.$$s == null ? this : $$29.$$s;
        if (self.hash == null) self.hash = nil;

        return self.hash}, $$29.$$s = self, $$29.$$arity = 0, $$29)))
    }, $Set_eql$ques$28.$$arity = 1);
    
    Opal.def(self, '$clear', $Set_clear$30 = function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, $Set_clear$30.$$arity = 0);
    
    Opal.def(self, '$include?', $Set_include$ques$31 = function(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, $Set_include$ques$31.$$arity = 1);
    $alias(self, "member?", "include?");
    
    Opal.def(self, '$merge', $Set_merge$32 = function $$merge(enum$) {
      var $$33, self = this;

      
      $send(enum$, 'each', [], ($$33 = function(item){var self = $$33.$$s == null ? this : $$33.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return self.$add(item);}, $$33.$$s = self, $$33.$$arity = 1, $$33));
      return self;
    }, $Set_merge$32.$$arity = 1);
    
    Opal.def(self, '$replace', $Set_replace$34 = function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, $Set_replace$34.$$arity = 1);
    
    Opal.def(self, '$size', $Set_size$35 = function $$size() {
      var self = this;

      return self.hash.$size()
    }, $Set_size$35.$$arity = 0);
    $alias(self, "length", "size");
    
    Opal.def(self, '$subtract', $Set_subtract$36 = function $$subtract(enum$) {
      var $$37, self = this;

      
      $send(enum$, 'each', [], ($$37 = function(item){var self = $$37.$$s == null ? this : $$37.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return self.$delete(item);}, $$37.$$s = self, $$37.$$arity = 1, $$37));
      return self;
    }, $Set_subtract$36.$$arity = 1);
    
    Opal.def(self, '$|', $Set_$$38 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, $Set_$$38.$$arity = 1);
    
    Opal.def(self, '$superset?', $Set_superset$ques$39 = function(set) {
      var $$40, self = this, $ret_or_2 = nil;

      
      if ($truthy(($ret_or_2 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_2
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], ($$40 = function(o){var self = $$40.$$s == null ? this : $$40.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, $$40.$$s = self, $$40.$$arity = 1, $$40));
    }, $Set_superset$ques$39.$$arity = 1);
    $alias(self, ">=", "superset?");
    
    Opal.def(self, '$proper_superset?', $Set_proper_superset$ques$41 = function(set) {
      var $$42, self = this, $ret_or_3 = nil;

      
      if ($truthy(($ret_or_3 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_3
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], ($$42 = function(o){var self = $$42.$$s == null ? this : $$42.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, $$42.$$s = self, $$42.$$arity = 1, $$42));
    }, $Set_proper_superset$ques$41.$$arity = 1);
    $alias(self, ">", "proper_superset?");
    
    Opal.def(self, '$subset?', $Set_subset$ques$43 = function(set) {
      var $$44, self = this, $ret_or_4 = nil;

      
      if ($truthy(($ret_or_4 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_4
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], ($$44 = function(o){var self = $$44.$$s == null ? this : $$44.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, $$44.$$s = self, $$44.$$arity = 1, $$44));
    }, $Set_subset$ques$43.$$arity = 1);
    $alias(self, "<=", "subset?");
    
    Opal.def(self, '$proper_subset?', $Set_proper_subset$ques$45 = function(set) {
      var $$46, self = this, $ret_or_5 = nil;

      
      if ($truthy(($ret_or_5 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_5
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], ($$46 = function(o){var self = $$46.$$s == null ? this : $$46.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, $$46.$$s = self, $$46.$$arity = 1, $$46));
    }, $Set_proper_subset$ques$45.$$arity = 1);
    $alias(self, "<", "proper_subset?");
    
    Opal.def(self, '$intersect?', $Set_intersect$ques$47 = function(set) {
      var $$48, $$49, self = this;

      
      if ($truthy(set['$is_a?']($$($nesting, 'Set')))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return $send(self, 'any?', [], ($$48 = function(o){var self = $$48.$$s == null ? this : $$48.$$s;

          
          
          if (o == null) {
            o = nil;
          };
          return set['$include?'](o);}, $$48.$$s = self, $$48.$$arity = 1, $$48))
      } else {
        return $send(set, 'any?', [], ($$49 = function(o){var self = $$49.$$s == null ? this : $$49.$$s;

          
          
          if (o == null) {
            o = nil;
          };
          return self['$include?'](o);}, $$49.$$s = self, $$49.$$arity = 1, $$49))
      };
    }, $Set_intersect$ques$47.$$arity = 1);
    
    Opal.def(self, '$disjoint?', $Set_disjoint$ques$50 = function(set) {
      var self = this;

      return self['$intersect?'](set)['$!']()
    }, $Set_disjoint$ques$50.$$arity = 1);
    $alias(self, "+", "|");
    $alias(self, "union", "|");
    return (Opal.def(self, '$to_a', $Set_to_a$51 = function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, $Set_to_a$51.$$arity = 0), nil) && 'to_a';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_to_set$52;

    return (Opal.def(self, '$to_set', $Enumerable_to_set$52 = function $$to_set($a, $b) {
      var $iter = $Enumerable_to_set$52.$$p, block = $iter || nil, $post_args, klass, args, self = this;

      if ($iter) $Enumerable_to_set$52.$$p = null;
      
      
      if ($iter) $Enumerable_to_set$52.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        klass = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (klass == null) {
        klass = $$($nesting, 'Set');
      };
      
      args = $post_args;;
      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc());
    }, $Enumerable_to_set$52.$$arity = -1), nil) && 'to_set'
  })($nesting[0], $nesting);
};

Opal.modules["active_support/inflector/inflections"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$extend', '$add', '$map', '$flatten', '$to_proc', '$concat', '$include?', '$downcase', '$new', '$[]', '$[]=', '$-', '$attr_reader', '$each', '$instance_variable_set', '$dup', '$send', '$is_a?', '$delete', '$unshift', '$==', '$upcase', '$plural', '$+', '$singular', '$===', '$instance']);
  
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ActiveSupport');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Inflector');

      var $nesting = [self].concat($parent_nesting), $Inflector_inflections$15;

      
      self.$extend(self);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Inflections');

        var $nesting = [self].concat($parent_nesting), $Inflections_instance$5, $Inflections_initialize$6, $Inflections_initialize_dup$7, $Inflections_plural$9, $Inflections_singular$10, $Inflections_uncountable$11, $Inflections_human$12, $Inflections_irregular$13, $Inflections_clear$14;

        self.$$prototype.uncountables = self.$$prototype.plurals = self.$$prototype.singulars = self.$$prototype.humans = nil;
        
        self.__instance__ = $hash2([], {});
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Uncountables');

          var $nesting = [self].concat($parent_nesting), $Uncountables_$lt$lt$1, $Uncountables_add$2, $Uncountables_uncountable$ques$3, $Uncountables_dup$4;

          
          
          Opal.def(self, '$<<', $Uncountables_$lt$lt$1 = function($a) {
            var $post_args, word, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            word = $post_args;;
            return self.$add(word);
          }, $Uncountables_$lt$lt$1.$$arity = -1);
          
          Opal.def(self, '$add', $Uncountables_add$2 = function $$add(words) {
            var self = this;

            
            words = $send(words.$flatten(), 'map', [], "downcase".$to_proc());
            self.$concat(words);
            return self;
          }, $Uncountables_add$2.$$arity = 1);
          
          Opal.def(self, '$uncountable?', $Uncountables_uncountable$ques$3 = function(str) {
            var self = this;

            return self['$include?'](str.$downcase())
          }, $Uncountables_uncountable$ques$3.$$arity = 1);
          return (Opal.def(self, '$dup', $Uncountables_dup$4 = function $$dup() {
            var self = this, copy = nil;

            
            copy = $$($nesting, 'Uncountables').$new();
            copy.$add(self);
            return copy;
          }, $Uncountables_dup$4.$$arity = 0), nil) && 'dup';
        })($nesting[0], $$($nesting, 'Array'), $nesting);
        Opal.defs(self, '$instance', $Inflections_instance$5 = function $$instance(locale) {
          var self = this, $ret_or_1 = nil, $writer = nil;
          if (self.__instance__ == null) self.__instance__ = nil;

          if ($truthy(($ret_or_1 = self.__instance__['$[]'](locale)))) {
            return $ret_or_1
          } else {
            
            $writer = [locale, self.$new()];
            $send(self.__instance__, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }
        }, $Inflections_instance$5.$$arity = 1);
        self.$attr_reader("plurals", "singulars", "uncountables", "humans");
        
        Opal.def(self, '$initialize', $Inflections_initialize$6 = function $$initialize() {
          var $a, self = this;

          return $a = [[], [], $$($nesting, 'Uncountables').$new(), []], (self.plurals = $a[0]), (self.singulars = $a[1]), (self.uncountables = $a[2]), (self.humans = $a[3]), $a
        }, $Inflections_initialize$6.$$arity = 0);
        
        Opal.def(self, '$initialize_dup', $Inflections_initialize_dup$7 = function $$initialize_dup(orig) {
          var $$8, self = this;

          return $send(["plurals", "singulars", "uncountables", "humans"], 'each', [], ($$8 = function(scope){var self = $$8.$$s == null ? this : $$8.$$s;

            
            
            if (scope == null) {
              scope = nil;
            };
            return self.$instance_variable_set("" + "@" + (scope), orig.$send(scope).$dup());}, $$8.$$s = self, $$8.$$arity = 1, $$8))
        }, $Inflections_initialize_dup$7.$$arity = 1);
        
        Opal.def(self, '$plural', $Inflections_plural$9 = function $$plural(rule, replacement) {
          var self = this;

          
          if ($truthy(rule['$is_a?']($$($nesting, 'String')))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.plurals.$unshift([rule, replacement]);
        }, $Inflections_plural$9.$$arity = 2);
        
        Opal.def(self, '$singular', $Inflections_singular$10 = function $$singular(rule, replacement) {
          var self = this;

          
          if ($truthy(rule['$is_a?']($$($nesting, 'String')))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.singulars.$unshift([rule, replacement]);
        }, $Inflections_singular$10.$$arity = 2);
        
        Opal.def(self, '$uncountable', $Inflections_uncountable$11 = function $$uncountable($a) {
          var $post_args, words, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          words = $post_args;;
          return self.uncountables.$add(words);
        }, $Inflections_uncountable$11.$$arity = -1);
        
        Opal.def(self, '$human', $Inflections_human$12 = function $$human(rule, replacement) {
          var self = this;

          return self.humans.$unshift([rule, replacement])
        }, $Inflections_human$12.$$arity = 2);
        
        Opal.def(self, '$irregular', $Inflections_irregular$13 = function $$irregular(singular, plural) {
          var self = this, s0 = nil, srest = nil, p0 = nil, prest = nil;

          
          self.uncountables.$delete(singular);
          self.uncountables.$delete(plural);
          s0 = singular['$[]'](0);
          srest = singular['$[]']($range(1, -1, false));
          p0 = plural['$[]'](0);
          prest = plural['$[]']($range(1, -1, false));
          if (s0.$upcase()['$=='](p0.$upcase())) {
            
            self.$plural(Opal.regexp(["(", s0, ")", srest, "$"], 'i'), $rb_plus("\\1", prest));
            self.$plural(Opal.regexp(["(", p0, ")", prest, "$"], 'i'), $rb_plus("\\1", prest));
            self.$singular(Opal.regexp(["(", s0, ")", srest, "$"], 'i'), $rb_plus("\\1", srest));
            return self.$singular(Opal.regexp(["(", p0, ")", prest, "$"], 'i'), $rb_plus("\\1", srest));
          } else {
            
            self.$plural(Opal.regexp([s0.$upcase(), srest, "$"], 'i'), $rb_plus(p0.$upcase(), prest));
            self.$plural(Opal.regexp([s0.$downcase(), srest, "$"], 'i'), $rb_plus(p0.$downcase(), prest));
            self.$plural(Opal.regexp([p0.$upcase(), prest, "$"], 'i'), $rb_plus(p0.$upcase(), prest));
            self.$plural(Opal.regexp([p0.$downcase(), prest, "$"], 'i'), $rb_plus(p0.$downcase(), prest));
            self.$singular(Opal.regexp([s0.$upcase(), srest, "$"], 'i'), $rb_plus(s0.$upcase(), srest));
            self.$singular(Opal.regexp([s0.$downcase(), srest, "$"], 'i'), $rb_plus(s0.$downcase(), srest));
            self.$singular(Opal.regexp([p0.$upcase(), prest, "$"], 'i'), $rb_plus(s0.$upcase(), srest));
            return self.$singular(Opal.regexp([p0.$downcase(), prest, "$"], 'i'), $rb_plus(s0.$downcase(), srest));
          };
        }, $Inflections_irregular$13.$$arity = 2);
        return (Opal.def(self, '$clear', $Inflections_clear$14 = function $$clear(scope) {
          var $a, self = this, $case = nil;

          
          
          if (scope == null) {
            scope = "all";
          };
          return (function() {$case = scope;
          if ("all"['$===']($case)) {return $a = [[], [], $$($nesting, 'Uncountables').$new(), []], (self.plurals = $a[0]), (self.singulars = $a[1]), (self.uncountables = $a[2]), (self.humans = $a[3]), $a}
          else {return self.$instance_variable_set("" + "@" + (scope), [])}})();
        }, $Inflections_clear$14.$$arity = -1), nil) && 'clear';
      })($nesting[0], null, $nesting);
      return (Opal.def(self, '$inflections', $Inflector_inflections$15 = function $$inflections(locale) {
        var $iter = $Inflector_inflections$15.$$p, $yield = $iter || nil, self = this;

        if ($iter) $Inflector_inflections$15.$$p = null;
        
        
        if (locale == null) {
          locale = "en";
        };
        if (($yield !== nil)) {
          return Opal.yield1($yield, $$($nesting, 'Inflections').$instance(locale));
        } else {
          return $$($nesting, 'Inflections').$instance(locale)
        };
      }, $Inflector_inflections$15.$$arity = -1), nil) && 'inflections';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["active_support/inflections"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$require', '$inflections', '$plural', '$singular', '$irregular', '$uncountable']);
  
  self.$require("active_support/inflector/inflections");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ActiveSupport');

    var $nesting = [self].concat($parent_nesting), $ActiveSupport$1;

    return $send($$($nesting, 'Inflector'), 'inflections', ["en"], ($ActiveSupport$1 = function(inflect){var self = $ActiveSupport$1.$$s == null ? this : $ActiveSupport$1.$$s;

      
      
      if (inflect == null) {
        inflect = nil;
      };
      inflect.$plural(/$/, "s");
      inflect.$plural(/s$/i, "s");
      inflect.$plural(/^(ax|test)is$/i, "\\1es");
      inflect.$plural(/(octop|vir)us$/i, "\\1i");
      inflect.$plural(/(octop|vir)i$/i, "\\1i");
      inflect.$plural(/(alias|status)$/i, "\\1es");
      inflect.$plural(/(bu)s$/i, "\\1ses");
      inflect.$plural(/(buffal|tomat)o$/i, "\\1oes");
      inflect.$plural(/([ti])um$/i, "\\1a");
      inflect.$plural(/([ti])a$/i, "\\1a");
      inflect.$plural(/sis$/i, "ses");
      inflect.$plural(/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves");
      inflect.$plural(/(hive)$/i, "\\1s");
      inflect.$plural(/([^aeiouy]|qu)y$/i, "\\1ies");
      inflect.$plural(/(x|ch|ss|sh)$/i, "\\1es");
      inflect.$plural(/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices");
      inflect.$plural(/^(m|l)ouse$/i, "\\1ice");
      inflect.$plural(/^(m|l)ice$/i, "\\1ice");
      inflect.$plural(/^(ox)$/i, "\\1en");
      inflect.$plural(/^(oxen)$/i, "\\1");
      inflect.$plural(/(quiz)$/i, "\\1zes");
      inflect.$singular(/s$/i, "");
      inflect.$singular(/(ss)$/i, "\\1");
      inflect.$singular(/(n)ews$/i, "\\1ews");
      inflect.$singular(/([ti])a$/i, "\\1um");
      inflect.$singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/(^analy)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/([^f])ves$/i, "\\1fe");
      inflect.$singular(/(hive)s$/i, "\\1");
      inflect.$singular(/(tive)s$/i, "\\1");
      inflect.$singular(/([lr])ves$/i, "\\1f");
      inflect.$singular(/([^aeiouy]|qu)ies$/i, "\\1y");
      inflect.$singular(/(s)eries$/i, "\\1eries");
      inflect.$singular(/(m)ovies$/i, "\\1ovie");
      inflect.$singular(/(x|ch|ss|sh)es$/i, "\\1");
      inflect.$singular(/^(m|l)ice$/i, "\\1ouse");
      inflect.$singular(/(bus)(es)?$/i, "\\1");
      inflect.$singular(/(o)es$/i, "\\1");
      inflect.$singular(/(shoe)s$/i, "\\1");
      inflect.$singular(/(cris|test)(is|es)$/i, "\\1is");
      inflect.$singular(/^(a)x[ie]s$/i, "\\1xis");
      inflect.$singular(/(octop|vir)(us|i)$/i, "\\1us");
      inflect.$singular(/(alias|status)(es)?$/i, "\\1");
      inflect.$singular(/^(ox)en/i, "\\1");
      inflect.$singular(/(vert|ind)ices$/i, "\\1ex");
      inflect.$singular(/(matr)ices$/i, "\\1ix");
      inflect.$singular(/(quiz)zes$/i, "\\1");
      inflect.$singular(/(database)s$/i, "\\1");
      inflect.$irregular("person", "people");
      inflect.$irregular("man", "men");
      inflect.$irregular("child", "children");
      inflect.$irregular("sex", "sexes");
      inflect.$irregular("move", "moves");
      inflect.$irregular("zombie", "zombies");
      return inflect.$uncountable(["equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police"]);}, $ActiveSupport$1.$$s = self, $ActiveSupport$1.$$arity = 1, $ActiveSupport$1))
  })($nesting[0], $nesting);
};

Opal.modules["active_support/inflector/methods"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$extend', '$apply_inflections', '$plurals', '$inflections', '$singulars', '$to_s', '$sub', '$capitalize', '$downcase', '$gsub', '$freeze', '$match?', '$tr', '$dup', '$each', '$humans', '$is_a?', '$=~', '$==', '$upcase', '$>', '$length', '$+', '$[]', '$humanize', '$underscore', '$pluralize', '$camelize', '$singularize', '$rindex', '$demodulize', '$split', '$empty?', '$raise', '$size', '$first', '$shift', '$inject', '$const_get', '$const_defined?', '$ancestors', '$constantize', '$name', '$!', '$include?', '$const_regexp', '$message', '$abs', '$to_i', '$%', '$===', '$ordinal', '$private', '$blank?', '$escape', '$pop', '$reverse', '$uncountable?', '$uncountables']);
  
  self.$require("active_support/inflections");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ActiveSupport');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Inflector');

      var $nesting = [self].concat($parent_nesting), $Inflector_pluralize$1, $Inflector_singularize$2, $Inflector_camelize$3, $Inflector_underscore$6, $Inflector_humanize$7, $Inflector_upcase_first$11, $Inflector_titleize$12, $Inflector_tableize$14, $Inflector_classify$15, $Inflector_dasherize$16, $Inflector_demodulize$17, $Inflector_deconstantize$18, $Inflector_foreign_key$19, $Inflector_constantize$20, $Inflector_safe_constantize$23, $Inflector_ordinal$24, $Inflector_ordinalize$25, $Inflector_const_regexp$26, $Inflector_apply_inflections$28;

      
      self.$extend(self);
      
      Opal.def(self, '$pluralize', $Inflector_pluralize$1 = function $$pluralize(word, locale) {
        var self = this;

        
        
        if (locale == null) {
          locale = "en";
        };
        return self.$apply_inflections(word, self.$inflections(locale).$plurals(), locale);
      }, $Inflector_pluralize$1.$$arity = -2);
      
      Opal.def(self, '$singularize', $Inflector_singularize$2 = function $$singularize(word, locale) {
        var self = this;

        
        
        if (locale == null) {
          locale = "en";
        };
        return self.$apply_inflections(word, self.$inflections(locale).$singulars(), locale);
      }, $Inflector_singularize$2.$$arity = -2);
      
      Opal.def(self, '$camelize', $Inflector_camelize$3 = function $$camelize(term, uppercase_first_letter) {
        var $$4, $$5, self = this, string = nil;

        
        
        if (uppercase_first_letter == null) {
          uppercase_first_letter = true;
        };
        string = term.$to_s();
        if ($truthy(uppercase_first_letter)) {
          string = $send(string, 'sub', [/^[a-z\d]*/], ($$4 = function(match){var self = $$4.$$s == null ? this : $$4.$$s;

            
            
            if (match == null) {
              match = nil;
            };
            return match.$capitalize();}, $$4.$$s = self, $$4.$$arity = 1, $$4))
        } else {
          string = string.$downcase()
        };
        string = $send(string, 'gsub', [/(?:_|(\/))([a-z\d]*)/i], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s, $a;

          return "" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$capitalize())}, $$5.$$s = self, $$5.$$arity = 0, $$5));
        string = string.$gsub("/".$freeze(), "::".$freeze());
        return string;
      }, $Inflector_camelize$3.$$arity = -2);
      
      Opal.def(self, '$underscore', $Inflector_underscore$6 = function $$underscore(camel_cased_word) {
        var self = this, word = nil;

        
        if ($truthy(/[A-Z-]|::/['$match?'](camel_cased_word))) {
        } else {
          return camel_cased_word
        };
        word = camel_cased_word.$to_s().$gsub("::".$freeze(), "/".$freeze());
        word = word.$gsub(/([A-Z\d]+)([A-Z][a-z])/, "\\1_\\2".$freeze());
        word = word.$gsub(/([a-z\d])([A-Z])/, "\\1_\\2".$freeze());
        word = word.$tr("-".$freeze(), "_".$freeze());
        word = word.$downcase();
        return word;
      }, $Inflector_underscore$6.$$arity = 1);
      
      Opal.def(self, '$humanize', $Inflector_humanize$7 = function $$humanize(lower_case_and_underscored_word, $kwargs) {
        var capitalize, keep_id_suffix, $$8, $$9, $$10, self = this, result = nil;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        capitalize = $kwargs.$$smap["capitalize"];
        if (capitalize == null) {
          capitalize = true
        };
        
        keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
        if (keep_id_suffix == null) {
          keep_id_suffix = false
        };
        result = lower_case_and_underscored_word.$to_s().$dup();
        (function(){var $brk = Opal.new_brk(); try {return $send(self.$inflections().$humans(), 'each', [], ($$8 = function($mlhs_tmp1){var self = $$8.$$s == null ? this : $$8.$$s, $a, $b, rule = nil, replacement = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          
          
          if ($mlhs_tmp1 == null) {
            $mlhs_tmp1 = nil;
          };
          $b = $mlhs_tmp1, $a = Opal.to_ary($b), (rule = ($a[0] == null ? nil : $a[0])), (replacement = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = rule['$is_a?']($$($nesting, 'Regexp'))))) {
            return result['$=~'](rule)
          } else {
            return $ret_or_2
          }; return nil; })()))) {
            return $ret_or_1
          } else {
            
            if ($truthy(($ret_or_3 = rule['$is_a?']($$($nesting, 'String'))))) {
              return result['$=='](rule)
            } else {
              return $ret_or_3
            };
          }; return nil; })())) {
            
            result = result.$sub(rule, replacement);
            
            Opal.brk(nil, $brk);
          } else {
            return nil
          };}, $$8.$$s = self, $$8.$$brk = $brk, $$8.$$arity = 1, $$8.$$has_top_level_mlhs_arg = true, $$8))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        result = result.$sub(/^_+/, "".$freeze());
        if ($truthy(keep_id_suffix)) {
        } else {
          result = result.$sub(/_id$/, "".$freeze())
        };
        result = result.$tr("_".$freeze(), " ".$freeze());
        result = $send(result, 'gsub', [/([a-z\d]*)/i], ($$9 = function(match){var self = $$9.$$s == null ? this : $$9.$$s;

          
          
          if (match == null) {
            match = nil;
          };
          return "" + (match.$downcase());}, $$9.$$s = self, $$9.$$arity = 1, $$9));
        if ($truthy(capitalize)) {
          result = $send(result, 'sub', [/^\w/], ($$10 = function(match){var self = $$10.$$s == null ? this : $$10.$$s;

            
            
            if (match == null) {
              match = nil;
            };
            return match.$upcase();}, $$10.$$s = self, $$10.$$arity = 1, $$10))};
        return result;
      }, $Inflector_humanize$7.$$arity = -2);
      
      Opal.def(self, '$upcase_first', $Inflector_upcase_first$11 = function $$upcase_first(string) {
        var self = this;

        if ($truthy($rb_gt(string.$length(), 0))) {
          return $rb_plus(string['$[]'](0).$upcase(), string['$[]']($range(1, -1, false)))
        } else {
          return ""
        }
      }, $Inflector_upcase_first$11.$$arity = 1);
      
      Opal.def(self, '$titleize', $Inflector_titleize$12 = function $$titleize(word, $kwargs) {
        var keep_id_suffix, $$13, self = this;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
        if (keep_id_suffix == null) {
          keep_id_suffix = false
        };
        return $send(self.$humanize(self.$underscore(word), $hash2(["keep_id_suffix"], {"keep_id_suffix": keep_id_suffix})), 'gsub', [/([a-zA-Z'’`])[a-z]*/], ($$13 = function(match){var self = $$13.$$s == null ? this : $$13.$$s;

          
          
          if (match == null) {
            match = nil;
          };
          return match.$capitalize();}, $$13.$$s = self, $$13.$$arity = 1, $$13));
      }, $Inflector_titleize$12.$$arity = -2);
      
      Opal.def(self, '$tableize', $Inflector_tableize$14 = function $$tableize(class_name) {
        var self = this;

        return self.$pluralize(self.$underscore(class_name))
      }, $Inflector_tableize$14.$$arity = 1);
      
      Opal.def(self, '$classify', $Inflector_classify$15 = function $$classify(table_name) {
        var self = this;

        return self.$camelize(self.$singularize(table_name.$to_s().$sub(/.*\./, "".$freeze())))
      }, $Inflector_classify$15.$$arity = 1);
      
      Opal.def(self, '$dasherize', $Inflector_dasherize$16 = function $$dasherize(underscored_word) {
        var self = this;

        return underscored_word.$tr("_".$freeze(), "-".$freeze())
      }, $Inflector_dasherize$16.$$arity = 1);
      
      Opal.def(self, '$demodulize', $Inflector_demodulize$17 = function $$demodulize(path) {
        var self = this, i = nil;

        
        path = path.$to_s();
        if ($truthy((i = path.$rindex("::")))) {
          return path['$[]'](Opal.Range.$new($rb_plus(i, 2), -1, false))
        } else {
          return path
        };
      }, $Inflector_demodulize$17.$$arity = 1);
      
      Opal.def(self, '$deconstantize', $Inflector_deconstantize$18 = function $$deconstantize(path) {
        var self = this, $ret_or_4 = nil;

        return path.$to_s()['$[]'](0, (function() {if ($truthy(($ret_or_4 = path.$rindex("::")))) {
          return $ret_or_4
        } else {
          return 0
        }; return nil; })())
      }, $Inflector_deconstantize$18.$$arity = 1);
      
      Opal.def(self, '$foreign_key', $Inflector_foreign_key$19 = function $$foreign_key(class_name, separate_class_name_and_id_with_underscore) {
        var self = this;

        
        
        if (separate_class_name_and_id_with_underscore == null) {
          separate_class_name_and_id_with_underscore = true;
        };
        return $rb_plus(self.$underscore(self.$demodulize(class_name)), (function() {if ($truthy(separate_class_name_and_id_with_underscore)) {
          return "_id"
        } else {
          return "id"
        }; return nil; })());
      }, $Inflector_foreign_key$19.$$arity = -2);
      
      Opal.def(self, '$constantize', $Inflector_constantize$20 = function $$constantize(camel_cased_word) {
        var $$21, self = this, names = nil, $ret_or_5 = nil;

        
        names = camel_cased_word.$split("::");
        if ($truthy(names['$empty?']())) {
          self.$raise($$($nesting, 'NameError'), "wrong constant name ")};
        if ($truthy((function() {if ($truthy(($ret_or_5 = $rb_gt(names.$size(), 1)))) {
          return names.$first()['$empty?']()
        } else {
          return $ret_or_5
        }; return nil; })())) {
          names.$shift()};
        return (function(){var $brk = Opal.new_brk(); try {return $send(names, 'inject', [$$($nesting, 'Object')], ($$21 = function(constant, name){var self = $$21.$$s == null ? this : $$21.$$s, $$22, candidate = nil;

          
          
          if (constant == null) {
            constant = nil;
          };
          
          if (name == null) {
            name = nil;
          };
          if (constant['$==']($$($nesting, 'Object'))) {
            return constant.$const_get(name)
          } else {
            
            candidate = constant.$const_get(name);
            if ($truthy(constant['$const_defined?'](name, false))) {
              return candidate;};
            if ($truthy($$($nesting, 'Object')['$const_defined?'](name))) {
            } else {
              return candidate;
            };
            constant = (function(){var $brk = Opal.new_brk(); try {return $send(constant.$ancestors(), 'inject', [constant], ($$22 = function(const$, ancestor){var self = $$22.$$s == null ? this : $$22.$$s;

              
              
              if (const$ == null) {
                const$ = nil;
              };
              
              if (ancestor == null) {
                ancestor = nil;
              };
              if (ancestor['$==']($$($nesting, 'Object'))) {
                
                Opal.brk(const$, $brk)};
              if ($truthy(ancestor['$const_defined?'](name, false))) {
                
                Opal.brk(ancestor, $brk)};
              return const$;}, $$22.$$s = self, $$22.$$brk = $brk, $$22.$$arity = 2, $$22))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
            return constant.$const_get(name, false);
          };}, $$21.$$s = self, $$21.$$brk = $brk, $$21.$$arity = 2, $$21))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      }, $Inflector_constantize$20.$$arity = 1);
      
      Opal.def(self, '$safe_constantize', $Inflector_safe_constantize$23 = function $$safe_constantize(camel_cased_word) {
        var self = this, e = nil, $ret_or_6 = nil, $ret_or_7 = nil;

        try {
          return self.$constantize(camel_cased_word)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'NameError')])) {(e = $err)
            try {
              if ($truthy((function() {if ($truthy(($ret_or_6 = e.$name()))) {
                return (function() {if ($truthy(($ret_or_7 = camel_cased_word.$to_s().$split("::")['$include?'](e.$name().$to_s())))) {
                  return $ret_or_7
                } else {
                  return e.$name().$to_s()['$=='](camel_cased_word.$to_s())
                }; return nil; })()['$!']()
              } else {
                return $ret_or_6
              }; return nil; })())) {
                return self.$raise()
              } else {
                return nil
              }
            } finally { Opal.pop_exception(); }
          } else 
          if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {(e = $err)
            try {
              if ($truthy(Opal.regexp(["not missing constant ", self.$const_regexp(camel_cased_word), "!$"])['$match?'](e.$message()))) {
                return nil
              } else {
                return self.$raise()
              }
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
      }, $Inflector_safe_constantize$23.$$arity = 1);
      
      Opal.def(self, '$ordinal', $Inflector_ordinal$24 = function $$ordinal(number) {
        var self = this, abs_number = nil, $case = nil;

        
        abs_number = number.$to_i().$abs();
        if ($truthy($range(11, 13, false)['$include?'](abs_number['$%'](100)))) {
          return "th"
        } else {
          return (function() {$case = abs_number['$%'](10);
          if ((1)['$===']($case)) {return "st"}
          else if ((2)['$===']($case)) {return "nd"}
          else if ((3)['$===']($case)) {return "rd"}
          else {return "th"}})()
        };
      }, $Inflector_ordinal$24.$$arity = 1);
      
      Opal.def(self, '$ordinalize', $Inflector_ordinalize$25 = function $$ordinalize(number) {
        var self = this;

        return "" + (number) + (self.$ordinal(number))
      }, $Inflector_ordinalize$25.$$arity = 1);
      self.$private();
      
      Opal.def(self, '$const_regexp', $Inflector_const_regexp$26 = function $$const_regexp(camel_cased_word) {
        var $$27, self = this, parts = nil, last = nil;

        
        parts = camel_cased_word.$split("::".$freeze());
        if ($truthy(parts['$blank?']())) {
          return $$($nesting, 'Regexp').$escape(camel_cased_word)};
        last = parts.$pop();
        return $send(parts.$reverse(), 'inject', [last], ($$27 = function(acc, part){var self = $$27.$$s == null ? this : $$27.$$s;

          
          
          if (acc == null) {
            acc = nil;
          };
          
          if (part == null) {
            part = nil;
          };
          if ($truthy(part['$empty?']())) {
            return acc
          } else {
            return "" + (part) + "(::" + (acc) + ")?"
          };}, $$27.$$s = self, $$27.$$arity = 2, $$27));
      }, $Inflector_const_regexp$26.$$arity = 1);
      return (Opal.def(self, '$apply_inflections', $Inflector_apply_inflections$28 = function $$apply_inflections(word, rules, locale) {
        var $$29, self = this, result = nil, $ret_or_8 = nil;

        
        
        if (locale == null) {
          locale = "en";
        };
        result = word.$to_s().$dup();
        if ($truthy((function() {if ($truthy(($ret_or_8 = word['$empty?']()))) {
          return $ret_or_8
        } else {
          return self.$inflections(locale).$uncountables()['$uncountable?'](result)
        }; return nil; })())) {
          return result
        } else {
          
          (function(){var $brk = Opal.new_brk(); try {return $send(rules, 'each', [], ($$29 = function($mlhs_tmp1){var self = $$29.$$s == null ? this : $$29.$$s, $a, $b, rule = nil, replacement = nil, $ret_or_9 = nil, $ret_or_10 = nil, $ret_or_11 = nil;

            
            
            if ($mlhs_tmp1 == null) {
              $mlhs_tmp1 = nil;
            };
            $b = $mlhs_tmp1, $a = Opal.to_ary($b), (rule = ($a[0] == null ? nil : $a[0])), (replacement = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy((function() {if ($truthy(($ret_or_9 = (function() {if ($truthy(($ret_or_10 = rule['$is_a?']($$($nesting, 'Regexp'))))) {
              return result['$=~'](rule)
            } else {
              return $ret_or_10
            }; return nil; })()))) {
              return $ret_or_9
            } else {
              
              if ($truthy(($ret_or_11 = rule['$is_a?']($$($nesting, 'String'))))) {
                return result['$=='](rule)
              } else {
                return $ret_or_11
              };
            }; return nil; })())) {
              
              result = result.$sub(rule, replacement);
              
              Opal.brk(nil, $brk);
            } else {
              return nil
            };}, $$29.$$s = self, $$29.$$brk = $brk, $$29.$$arity = 1, $$29.$$has_top_level_mlhs_arg = true, $$29))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        };
      }, $Inflector_apply_inflections$28.$$arity = -3), nil) && 'apply_inflections';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["active_support/core_ext/string/inflections"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$is_a?', '$==', '$dup', '$pluralize', '$singularize', '$constantize', '$safe_constantize', '$===', '$camelize', '$raise', '$alias_method', '$titleize', '$underscore', '$dasherize', '$demodulize', '$deconstantize', '$tableize', '$classify', '$humanize', '$upcase_first', '$foreign_key']);
  
  self.$require("active_support/inflector");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_pluralize$1, $String_singularize$2, $String_constantize$3, $String_safe_constantize$4, $String_camelize$5, $String_titleize$6, $String_underscore$7, $String_dasherize$8, $String_demodulize$9, $String_deconstantize$10, $String_tableize$11, $String_classify$12, $String_humanize$13, $String_upcase_first$14, $String_foreign_key$15;

    
    
    Opal.def(self, '$pluralize', $String_pluralize$1 = function $$pluralize(count, locale) {
      var self = this;

      
      
      if (count == null) {
        count = nil;
      };
      
      if (locale == null) {
        locale = "en";
      };
      if ($truthy(count['$is_a?']($$($nesting, 'Symbol')))) {
        locale = count};
      if (count['$=='](1)) {
        return self.$dup()
      } else {
        return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$pluralize(self, locale)
      };
    }, $String_pluralize$1.$$arity = -1);
    
    Opal.def(self, '$singularize', $String_singularize$2 = function $$singularize(locale) {
      var self = this;

      
      
      if (locale == null) {
        locale = "en";
      };
      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$singularize(self, locale);
    }, $String_singularize$2.$$arity = -1);
    
    Opal.def(self, '$constantize', $String_constantize$3 = function $$constantize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$constantize(self)
    }, $String_constantize$3.$$arity = 0);
    
    Opal.def(self, '$safe_constantize', $String_safe_constantize$4 = function $$safe_constantize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$safe_constantize(self)
    }, $String_safe_constantize$4.$$arity = 0);
    
    Opal.def(self, '$camelize', $String_camelize$5 = function $$camelize(first_letter) {
      var self = this, $case = nil;

      
      
      if (first_letter == null) {
        first_letter = "upper";
      };
      return (function() {$case = first_letter;
      if ("upper"['$===']($case)) {return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$camelize(self, true)}
      else if ("lower"['$===']($case)) {return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$camelize(self, false)}
      else {return self.$raise($$($nesting, 'ArgumentError'), "Invalid option, use either :upper or :lower.")}})();
    }, $String_camelize$5.$$arity = -1);
    self.$alias_method("camelcase", "camelize");
    
    Opal.def(self, '$titleize', $String_titleize$6 = function $$titleize($kwargs) {
      var keep_id_suffix, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
      if (keep_id_suffix == null) {
        keep_id_suffix = false
      };
      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$titleize(self, $hash2(["keep_id_suffix"], {"keep_id_suffix": keep_id_suffix}));
    }, $String_titleize$6.$$arity = -1);
    self.$alias_method("titlecase", "titleize");
    
    Opal.def(self, '$underscore', $String_underscore$7 = function $$underscore() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$underscore(self)
    }, $String_underscore$7.$$arity = 0);
    
    Opal.def(self, '$dasherize', $String_dasherize$8 = function $$dasherize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$dasherize(self)
    }, $String_dasherize$8.$$arity = 0);
    
    Opal.def(self, '$demodulize', $String_demodulize$9 = function $$demodulize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$demodulize(self)
    }, $String_demodulize$9.$$arity = 0);
    
    Opal.def(self, '$deconstantize', $String_deconstantize$10 = function $$deconstantize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$deconstantize(self)
    }, $String_deconstantize$10.$$arity = 0);
    
    Opal.def(self, '$tableize', $String_tableize$11 = function $$tableize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$tableize(self)
    }, $String_tableize$11.$$arity = 0);
    
    Opal.def(self, '$classify', $String_classify$12 = function $$classify() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$classify(self)
    }, $String_classify$12.$$arity = 0);
    
    Opal.def(self, '$humanize', $String_humanize$13 = function $$humanize($kwargs) {
      var capitalize, keep_id_suffix, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      capitalize = $kwargs.$$smap["capitalize"];
      if (capitalize == null) {
        capitalize = true
      };
      
      keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
      if (keep_id_suffix == null) {
        keep_id_suffix = false
      };
      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$humanize(self, $hash2(["capitalize", "keep_id_suffix"], {"capitalize": capitalize, "keep_id_suffix": keep_id_suffix}));
    }, $String_humanize$13.$$arity = -1);
    
    Opal.def(self, '$upcase_first', $String_upcase_first$14 = function $$upcase_first() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$upcase_first(self)
    }, $String_upcase_first$14.$$arity = 0);
    return (Opal.def(self, '$foreign_key', $String_foreign_key$15 = function $$foreign_key(separate_class_name_and_id_with_underscore) {
      var self = this;

      
      
      if (separate_class_name_and_id_with_underscore == null) {
        separate_class_name_and_id_with_underscore = true;
      };
      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$foreign_key(self, separate_class_name_and_id_with_underscore);
    }, $String_foreign_key$15.$$arity = -1), nil) && 'foreign_key';
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/inflector"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/inflector/inflections");
  self.$require("active_support/inflector/methods");
  self.$require("active_support/inflections");
  return self.$require("active_support/core_ext/string/inflections");
};

Opal.modules["active_support/core_ext/module/introspection"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$=~', '$name', '$freeze', '$parent_name', '$constantize', '$split', '$empty?', '$<<', '$*', '$pop', '$include?', '$constants']);
  
  self.$require("active_support/inflector");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_parent_name$1, $Module_parent$2, $Module_parents$3, $Module_local_constants$4;

    self.$$prototype.parent_name = nil;
    
    
    Opal.def(self, '$parent_name', $Module_parent_name$1 = function $$parent_name() {
      var $a, $b, self = this;

      if ($truthy((($a = self['parent_name'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        return self.parent_name
      } else {
        return (self.parent_name = (function() {if ($truthy(self.$name()['$=~'](/::[^:]+$/))) {
          return (($b = $gvars['~']) === nil ? nil : $b.$pre_match()).$freeze()
        } else {
          return nil
        }; return nil; })())
      }
    }, $Module_parent_name$1.$$arity = 0);
    
    Opal.def(self, '$parent', $Module_parent$2 = function $$parent() {
      var self = this;

      if ($truthy(self.$parent_name())) {
        return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$constantize(self.$parent_name())
      } else {
        return $$($nesting, 'Object')
      }
    }, $Module_parent$2.$$arity = 0);
    
    Opal.def(self, '$parents', $Module_parents$3 = function $$parents() {
      var $a, self = this, parents = nil, parts = nil;

      
      parents = [];
      if ($truthy(self.$parent_name())) {
        
        parts = self.$parent_name().$split("::");
        while (!($truthy(parts['$empty?']()))) {
          
          parents['$<<']($$$($$($nesting, 'ActiveSupport'), 'Inflector').$constantize($rb_times(parts, "::")));
          parts.$pop();
        };};
      if ($truthy(parents['$include?']($$($nesting, 'Object')))) {
      } else {
        parents['$<<']($$($nesting, 'Object'))
      };
      return parents;
    }, $Module_parents$3.$$arity = 0);
    return (Opal.def(self, '$local_constants', $Module_local_constants$4 = function $$local_constants() {
      var self = this;

      return self.$constants(false)
    }, $Module_local_constants$4.$$arity = 0), nil) && 'local_constants';
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/core_ext/module/delegation"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$pop', '$is_a?', '$[]', '$raise', '$values_at', '$==', '$=~', '$to_s', '$each', '$+', '$lambda', '$start_with?', '$__send__', '$new', '$inspect', '$define_method', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_delegate$1;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'DelegationError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'NoMethodError'), $nesting);
    return (Opal.def(self, '$delegate', $Module_delegate$1 = function $$delegate($a) {
      var $post_args, methods, $b, $c, $$2, $iter = $Module_delegate$1.$$p, $yield = $iter || nil, self = this, options = nil, $ret_or_1 = nil, to = nil, prefix = nil, allow_nil = nil, $ret_or_2 = nil, method_prefix = nil;

      if ($iter) $Module_delegate$1.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      methods = $post_args;;
      options = methods.$pop();
      if ($truthy((function() {if ($truthy(($ret_or_1 = options['$is_a?']($$($nesting, 'Hash'))))) {
        return (to = options['$[]']("to"))
      } else {
        return $ret_or_1
      }; return nil; })())) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "Delegation needs a target. Supply an options hash with a :to key as the last argument (e.g. delegate :hello, to: :greeter).")
      };
      $c = options.$values_at("prefix", "allow_nil"), $b = Opal.to_ary($c), (prefix = ($b[0] == null ? nil : $b[0])), (allow_nil = ($b[1] == null ? nil : $b[1])), $c;
      if ($truthy((function() {if ($truthy(($ret_or_2 = prefix['$=='](true)))) {
        return to['$=~'](/^[^a-z_]/)
      } else {
        return $ret_or_2
      }; return nil; })())) {
        self.$raise($$($nesting, 'ArgumentError'), "Can only automatically set the delegation prefix when delegating to a method.")};
      method_prefix = (function() {if ($truthy(prefix)) {
        return "" + ((function() {if (prefix['$=='](true)) {
          return to
        } else {
          return prefix
        }; return nil; })()) + "_"
      } else {
        return ""
      }; return nil; })();
      to = to.$to_s();
      return $send(methods, 'each', [], ($$2 = function(method){var self = $$2.$$s == null ? this : $$2.$$s, $$3, $$4, $$5, $$6, has_block = nil, method_name = nil, resolve_to = nil, exception = nil;

        
        
        if (method == null) {
          method = nil;
        };
        has_block = (function() {if ($truthy(method['$=~'](/[^\]]=$/))) {
          return false
        } else {
          return true
        }; return nil; })();
        method_name = $rb_plus(method_prefix, method);
        resolve_to = $send(self, 'lambda', [], ($$3 = function(scope){var self = $$3.$$s == null ? this : $$3.$$s, ivar_name = nil;

          
          
          if (scope == null) {
            scope = nil;
          };
          if ($truthy(to['$start_with?']("@"))) {
            
            ivar_name = to['$[]']($range(1, -1, false));
            return scope[ivar_name];
          } else {
            return scope.$__send__(to)
          };}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        exception = $send(self, 'lambda', [], ($$4 = function(scope){var self = $$4.$$s == null ? this : $$4.$$s;

          
          
          if (scope == null) {
            scope = nil;
          };
          return $$($nesting, 'DelegationError').$new("" + (scope) + (method_name) + " delegated to " + (to) + "." + (method) + " but " + (to) + " is nil: " + (scope.$inspect()), method_name);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
        if ($truthy(has_block)) {
          return $send(self, 'define_method', [method_name], ($$5 = function($d){var self = $$5.$$s == null ? this : $$5.$$s, $iter = $$5.$$p, block = $iter || nil, $post_args, args, to_resolved = nil;

            
            
            if ($iter) $$5.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            to_resolved = resolve_to['$[]'](self);
            if ($truthy(to_resolved)) {
            } else {
              
              if ($truthy(allow_nil)) {
                return nil;};
              self.$raise(exception['$[]'](self));
            };
            return $send(to_resolved, '__send__', [method].concat(Opal.to_a(args)), block.$to_proc());}, $$5.$$s = self, $$5.$$arity = -1, $$5))
        } else {
          return $send(self, 'define_method', [method_name], ($$6 = function(arg){var self = $$6.$$s == null ? this : $$6.$$s, to_resolved = nil;

            
            
            if (arg == null) {
              arg = nil;
            };
            to_resolved = resolve_to['$[]'](self);
            if ($truthy(to_resolved)) {
            } else {
              
              if ($truthy(allow_nil)) {
                return nil;};
              self.$raise(exception['$[]'](self));
            };
            return to_resolved.$__send__(method, arg);}, $$6.$$s = self, $$6.$$arity = 1, $$6))
        };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
    }, $Module_delegate$1.$$arity = -1), nil) && 'delegate';
  })($nesting[0], null, $nesting)
};

Opal.modules["active_support/core_ext/module"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/core_ext/module/introspection");
  self.$require("active_support/core_ext/module/remove_method");
  return self.$require("active_support/core_ext/module/delegation");
};

Opal.modules["active_support/core_ext/numeric/calculations"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $alias = Opal.alias;

  return (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting);

    return $alias(self, "current", "now")
  })(Opal.get_singleton_class($$($nesting, 'Time')), $nesting)
};

Opal.modules["active_support/core_ext/numeric"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/core_ext/numeric/time");
  return self.$require("active_support/core_ext/numeric/calculations");
};

Opal.modules["active_support/core_ext/object/blank"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$respond_to?', '$empty?', '$!', '$blank?', '$present?', '$==', '$alias_method', '$!~']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_blank$ques$1, $Object_present$ques$2, $Object_presence$3;

    
    
    Opal.def(self, '$blank?', $Object_blank$ques$1 = function() {
      var self = this;

      if ($truthy(self['$respond_to?']("empty?"))) {
        return self['$empty?']()
      } else {
        return self['$!']()
      }
    }, $Object_blank$ques$1.$$arity = 0);
    
    Opal.def(self, '$present?', $Object_present$ques$2 = function() {
      var self = this;

      return self['$blank?']()['$!']()
    }, $Object_present$ques$2.$$arity = 0);
    return (Opal.def(self, '$presence', $Object_presence$3 = function $$presence() {
      var self = this;

      if ($truthy(self['$present?']())) {
        return self
      } else {
        return nil
      }
    }, $Object_presence$3.$$arity = 0), nil) && 'presence';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_blank$ques$4;

    return (Opal.def(self, '$blank?', $NilClass_blank$ques$4 = function() {
      var self = this;

      return true
    }, $NilClass_blank$ques$4.$$arity = 0), nil) && 'blank?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean_blank$ques$5;

    return (Opal.def(self, '$blank?', $Boolean_blank$ques$5 = function() {
      var self = this;

      return self['$=='](false)
    }, $Boolean_blank$ques$5.$$arity = 0), nil) && 'blank?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting);

    return self.$alias_method("blank?", "empty?")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting);

    return self.$alias_method("blank?", "empty?")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_blank$ques$6;

    return (Opal.def(self, '$blank?', $String_blank$ques$6 = function() {
      var self = this;

      return self['$!~'](/[^\s　]/)
    }, $String_blank$ques$6.$$arity = 0), nil) && 'blank?'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_blank$ques$7;

    return (Opal.def(self, '$blank?', $Numeric_blank$ques$7 = function() {
      var self = this;

      return false
    }, $Numeric_blank$ques$7.$$arity = 0), nil) && 'blank?'
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/core_ext/object/try"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$zero?', '$arity', '$instance_eval', '$public_send']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_try$1, $Object_try$excl$2;

    
    
    Opal.def(self, '$try', $Object_try$1 = function($a) {
      var $iter = $Object_try$1.$$p, b = $iter || nil, $post_args, a, self = this, $ret_or_1 = nil;

      if ($iter) $Object_try$1.$$p = null;
      
      
      if ($iter) $Object_try$1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      a = $post_args;;
      if ($truthy((function() {if ($truthy(($ret_or_1 = a['$empty?']()))) {
        return $ret_or_1
      } else {
        return self['$respond_to?'](a.$first())
      }; return nil; })())) {
        return $send(self, 'try!', Opal.to_a(a), b.$to_proc())
      } else {
        return nil
      };
    }, $Object_try$1.$$arity = -1);
    return (Opal.def(self, '$try!', $Object_try$excl$2 = function($a) {
      var $iter = $Object_try$excl$2.$$p, b = $iter || nil, $post_args, a, self = this, $ret_or_2 = nil;

      if ($iter) $Object_try$excl$2.$$p = null;
      
      
      if ($iter) $Object_try$excl$2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      a = $post_args;;
      if ($truthy((function() {if ($truthy(($ret_or_2 = a['$empty?']()))) {
        return (b !== nil)
      } else {
        return $ret_or_2
      }; return nil; })())) {
        if ($truthy(b.$arity()['$zero?']())) {
          return $send(self, 'instance_eval', [], b.$to_proc())
        } else {
          return Opal.yield1(b, self);
        }
      } else {
        return $send(self, 'public_send', Opal.to_a(a), b.$to_proc())
      };
    }, $Object_try$excl$2.$$arity = -1), nil) && 'try!';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_try$3, $NilClass_try$excl$4;

    
    
    Opal.def(self, '$try', $NilClass_try$3 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return nil;
    }, $NilClass_try$3.$$arity = -1);
    return (Opal.def(self, '$try!', $NilClass_try$excl$4 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return nil;
    }, $NilClass_try$excl$4.$$arity = -1), nil) && 'try!';
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/core_ext/object"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/core_ext/object/blank");
  return self.$require("active_support/core_ext/object/try");
};

Opal.modules["active_support/core_ext/string/filters"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$>', '$length', '$dup', '$[]', '$-', '$rindex']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_truncate$1;

    return (Opal.def(self, '$truncate', $String_truncate$1 = function $$truncate(truncate_at, options) {
      var self = this, omission = nil, $ret_or_1 = nil, length_with_room_for_omission = nil, stop = nil, $ret_or_2 = nil;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      if ($truthy($rb_gt(self.$length(), truncate_at))) {
      } else {
        return self.$dup()
      };
      omission = (function() {if ($truthy(($ret_or_1 = options['$[]']("omission")))) {
        return $ret_or_1
      } else {
        return "..."
      }; return nil; })();
      length_with_room_for_omission = $rb_minus(truncate_at, omission.$length());
      stop = (function() {if ($truthy(options['$[]']("separator"))) {
        if ($truthy(($ret_or_2 = self.$rindex(options['$[]']("separator"), length_with_room_for_omission)))) {
          return $ret_or_2
        } else {
          return length_with_room_for_omission
        }
      } else {
        return length_with_room_for_omission
      }; return nil; })();
      return "" + (self['$[]'](0, stop)) + (omission);
    }, $String_truncate$1.$$arity = -2), nil) && 'truncate'
  })($nesting[0], null, $nesting)
};

Opal.modules["active_support/core_ext/string"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub', '$strip', '$downcase']);
  
  self.$require("active_support/core_ext/string/filters");
  self.$require("active_support/core_ext/string/inflections");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_parameterize$1;

    return (Opal.def(self, '$parameterize', $String_parameterize$1 = function $$parameterize() {
      var self = this;

      return self.$downcase().$strip().$gsub(/\W+/, "-")
    }, $String_parameterize$1.$$arity = 0), nil) && 'parameterize'
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/core_ext"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/core_ext/array");
  self.$require("active_support/core_ext/class");
  self.$require("active_support/core_ext/enumerable");
  self.$require("active_support/core_ext/hash");
  self.$require("active_support/core_ext/integer");
  self.$require("active_support/core_ext/kernel");
  self.$require("active_support/core_ext/module");
  self.$require("active_support/core_ext/numeric");
  self.$require("active_support/core_ext/object");
  return self.$require("active_support/core_ext/string");
};

Opal.modules["active_support"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext")
};

Opal.modules["time"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  Opal.add_stubs(['$strftime']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_parse$1, $Time_iso8601$2;

    
    Opal.defs(self, '$parse', $Time_parse$1 = function $$parse(str) {
      var self = this;

      return new Date(Date.parse(str));
    }, $Time_parse$1.$$arity = 1);
    return (Opal.def(self, '$iso8601', $Time_iso8601$2 = function $$iso8601() {
      var self = this;

      return self.$strftime("%FT%T%z")
    }, $Time_iso8601$2.$$arity = 0), nil) && 'iso8601';
  })($nesting[0], null, $nesting)
};

Opal.modules["date"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $alias = Opal.alias, $send = Opal.send;

  Opal.add_stubs(['$include', '$<=>', '$attr_reader', '$nonzero?', '$d', '$zero?', '$new', '$class', '$-@', '$+@', '$===', '$coerce', '$==', '$>', '$+', '$allocate', '$join', '$compact', '$map', '$to_proc', '$downcase', '$wrap', '$raise', '$clone', '$jd', '$>>', '$wday', '$year', '$month', '$day', '$-', '$to_s', '$to_i', '$<', '$*', '$reverse', '$step', '$abs', '$each']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $Date_initialize$16, $Date_$minus$17, $Date_$plus$18, $Date_$lt$19, $Date_$lt_eq$20, $Date_$gt$21, $Date_$gt_eq$22, $Date_$lt_eq_gt$23, $Date_$gt$gt$24, $Date_$lt$lt$25, $Date_clone$26, $Date_day$27, $Date_friday$ques$28, $Date_jd$29, $Date_julian$ques$30, $Date_monday$ques$31, $Date_month$32, $Date_next$33, $Date_next_day$34, $Date_next_month$35, $Date_next_year$36, $Date_prev_day$37, $Date_prev_month$38, $Date_prev_year$39, $Date_saturday$ques$40, $Date_strftime$41, $Date_sunday$ques$42, $Date_thursday$ques$43, $Date_to_s$44, $Date_to_time$45, $Date_to_n$46, $Date_tuesday$ques$47, $Date_step$48, $Date_upto$51, $Date_downto$52, $Date_wday$53, $Date_wednesday$ques$54, $Date_year$55, $Date_cwday$56, $Date_cweek$57;

    self.$$prototype.date = nil;
    
    self.$include($$($nesting, 'Comparable'));
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Infinity');

      var $nesting = [self].concat($parent_nesting), $Infinity_initialize$1, $Infinity_zero$ques$2, $Infinity_finite$ques$3, $Infinity_infinite$ques$4, $Infinity_nan$ques$5, $Infinity_abs$6, $Infinity_$minus$$7, $Infinity_$plus$$8, $Infinity_$lt_eq_gt$9, $Infinity_coerce$10, $Infinity_to_f$11;

      self.$$prototype.d = nil;
      
      self.$include($$($nesting, 'Comparable'));
      
      Opal.def(self, '$initialize', $Infinity_initialize$1 = function $$initialize(d) {
        var self = this;

        
        
        if (d == null) {
          d = 1;
        };
        return (self.d = d['$<=>'](0));
      }, $Infinity_initialize$1.$$arity = -1);
      self.$attr_reader("d");
      
      Opal.def(self, '$zero?', $Infinity_zero$ques$2 = function() {
        var self = this;

        return false
      }, $Infinity_zero$ques$2.$$arity = 0);
      
      Opal.def(self, '$finite?', $Infinity_finite$ques$3 = function() {
        var self = this;

        return false
      }, $Infinity_finite$ques$3.$$arity = 0);
      
      Opal.def(self, '$infinite?', $Infinity_infinite$ques$4 = function() {
        var self = this;

        return self.$d()['$nonzero?']()
      }, $Infinity_infinite$ques$4.$$arity = 0);
      
      Opal.def(self, '$nan?', $Infinity_nan$ques$5 = function() {
        var self = this;

        return self.$d()['$zero?']()
      }, $Infinity_nan$ques$5.$$arity = 0);
      
      Opal.def(self, '$abs', $Infinity_abs$6 = function $$abs() {
        var self = this;

        return self.$class().$new()
      }, $Infinity_abs$6.$$arity = 0);
      
      Opal.def(self, '$-@', $Infinity_$minus$$7 = function() {
        var self = this;

        return self.$class().$new(self.$d()['$-@']())
      }, $Infinity_$minus$$7.$$arity = 0);
      
      Opal.def(self, '$+@', $Infinity_$plus$$8 = function() {
        var self = this;

        return self.$class().$new(self.$d()['$+@']())
      }, $Infinity_$plus$$8.$$arity = 0);
      
      Opal.def(self, '$<=>', $Infinity_$lt_eq_gt$9 = function(other) {
        var $a, $b, self = this, $case = nil, l = nil, r = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Infinity')['$===']($case)) {return self.$d()['$<=>'](other.$d())}
        else if ($$($nesting, 'Numeric')['$===']($case)) {return self.$d()}
        else {
        try {
          
          $b = other.$coerce(self), $a = Opal.to_ary($b), (l = ($a[0] == null ? nil : $a[0])), (r = ($a[1] == null ? nil : $a[1])), $b;
          return l['$<=>'](r);
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'NoMethodError')])) {
            try {
              return nil
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };}})()
      }, $Infinity_$lt_eq_gt$9.$$arity = 1);
      
      Opal.def(self, '$coerce', $Infinity_coerce$10 = function $$coerce(other) {
        var $iter = $Infinity_coerce$10.$$p, $yield = $iter || nil, self = this, $case = nil;

        if ($iter) $Infinity_coerce$10.$$p = null;
        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return [self.$d()['$-@'](), self.$d()]}
        else {return $send2(self, $find_super(self, 'coerce', $Infinity_coerce$10, false, true), 'coerce', [other], $iter)}})()
      }, $Infinity_coerce$10.$$arity = 1);
      return (Opal.def(self, '$to_f', $Infinity_to_f$11 = function $$to_f() {
        var self = this;

        
        if (self.d['$=='](0)) {
          return 0};
        if ($truthy($rb_gt(self.d, 0))) {
          return $$$($$($nesting, 'Float'), 'INFINITY')
        } else {
          return $$$($$($nesting, 'Float'), 'INFINITY')['$-@']()
        };
      }, $Infinity_to_f$11.$$arity = 0), nil) && 'to_f';
    })($nesting[0], $$($nesting, 'Numeric'), $nesting);
    Opal.const_set($nesting[0], 'JULIAN', $$($nesting, 'Infinity').$new());
    Opal.const_set($nesting[0], 'GREGORIAN', $$($nesting, 'Infinity').$new()['$-@']());
    Opal.const_set($nesting[0], 'ITALY', 2299161);
    Opal.const_set($nesting[0], 'ENGLAND', 2361222);
    Opal.const_set($nesting[0], 'MONTHNAMES', $rb_plus([nil], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]));
    Opal.const_set($nesting[0], 'ABBR_MONTHNAMES', ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]);
    Opal.const_set($nesting[0], 'DAYNAMES', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
    Opal.const_set($nesting[0], 'ABBR_DAYNAMES', ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $wrap$12, $parse$13, $today$14, $gregorian_leap$ques$15;

      
      $alias(self, "civil", "new");
      
      Opal.def(self, '$wrap', $wrap$12 = function $$wrap(native$) {
        var self = this, instance = nil;

        
        instance = self.$allocate();
        instance.date = native$;
        return instance;
      }, $wrap$12.$$arity = 1);
      
      Opal.def(self, '$parse', $parse$13 = function $$parse(string, comp) {
        var self = this;

        
        
        if (comp == null) {
          comp = true;
        };
        
        var current_date = new Date();

        var current_day = current_date.getDate(),
            current_month = current_date.getMonth(),
            current_year = current_date.getFullYear(),
            current_wday = current_date.getDay(),
            full_month_name_regexp = $$($nesting, 'MONTHNAMES').$compact().$join("|");

        function match1(match) { return match[1]; }
        function match2(match) { return match[2]; }
        function match3(match) { return match[3]; }
        function match4(match) { return match[4]; }

        // Converts passed short year (0..99)
        // to a 4-digits year in the range (1969..2068)
        function fromShortYear(fn) {
          return function(match) {
            var short_year = fn(match);

            if (short_year >= 69) {
              short_year += 1900;
            } else {
              short_year += 2000;
            }
            return short_year;
          }
        }

        // Converts month abbr (nov) to a month number
        function fromMonthAbbr(fn) {
          return function(match) {
            var abbr = fn(match).toLowerCase();
            return $$($nesting, 'ABBR_MONTHNAMES').indexOf(abbr) + 1;
          }
        }

        function toInt(fn) {
          return function(match) {
            var value = fn(match);
            return parseInt(value, 10);
          }
        }

        // Depending on the 'comp' value appends 20xx to a passed year
        function to2000(fn) {
          return function(match) {
            var value = fn(match);
            if (comp) {
              return value + 2000;
            } else {
              return value;
            }
          }
        }

        // Converts passed week day name to a day number
        function fromDayName(fn) {
          return function(match) {
            var dayname = fn(match),
                wday = $send($$($nesting, 'DAYNAMES'), 'map', [], "downcase".$to_proc()).indexOf((dayname).$downcase());

            return current_day - current_wday + wday;
          }
        }

        // Converts passed month name to a month number
        function fromFullMonthName(fn) {
          return function(match) {
            var month_name = fn(match);
            return $send($$($nesting, 'MONTHNAMES').$compact(), 'map', [], "downcase".$to_proc()).indexOf((month_name).$downcase()) + 1;
          }
        }

        var rules = [
          {
            // DD as month day number
            regexp: /^(\d{2})$/,
            year: current_year,
            month: current_month,
            day: toInt(match1)
          },
          {
            // DDD as year day number
            regexp: /^(\d{3})$/,
            year: current_year,
            month: 0,
            day: toInt(match1)
          },
          {
            // MMDD as month and day
            regexp: /^(\d{2})(\d{2})$/,
            year: current_year,
            month: toInt(match1),
            day: toInt(match2)
          },
          {
            // YYDDD as year and day number in 1969--2068
            regexp: /^(\d{2})(\d{3})$/,
            year: fromShortYear(toInt(match1)),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYMMDD as year, month and day in 1969--2068
            regexp: /^(\d{2})(\d{2})(\d{2})$/,
            year: fromShortYear(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YYYYDDD as year and day number
            regexp: /^(\d{4})(\d{3})$/,
            year: toInt(match1),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYYYMMDD as year, month and day number
            regexp: /^(\d{4})(\d{2})(\d{2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // mmm YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{3,4})$/,
            year: toInt(match2),
            month: fromMonthAbbr(match1),
            day: 1
          },
          {
            // DD mmm YYYY
            regexp: /^(\d{1,2})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match2),
            day: toInt(match1)
          },
          {
            // mmm DD YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match1),
            day: toInt(match2)
          },
          {
            // YYYY mmm DD
            regexp: /^(\d{3,4})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{1,2})$/i,
            year: toInt(match1),
            month: fromMonthAbbr(match2),
            day: toInt(match3)
          },
          {
            // YYYY-MM-DD YYYY/MM/DD YYYY.MM.DD
            regexp: /^(\-?\d{3,4})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YY-MM-DD
            regexp: /^(\d{2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: to2000(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // DD-MM-YYYY
            regexp: /^(\d{1,2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\-?\d{3,4})$/,
            year: toInt(match3),
            month: toInt(match2),
            day: toInt(match1)
          },
          {
            // ddd
            regexp: new RegExp("^(" + $$($nesting, 'DAYNAMES').$join("|") + ")$", 'i'),
            year: current_year,
            month: current_month,
            day: fromDayName(match1)
          },
          {
            // monthname daynumber YYYY
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // monthname daynumber
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)", "i"),
            year: current_year,
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // daynumber monthname YYYY
            regexp: new RegExp("^(\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match3),
            day: toInt(match1)
          },
          {
            // YYYY monthname daynumber
            regexp: new RegExp("^(\\-?\\d{3,4})[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)$", "i"),
            year: toInt(match1),
            month: fromFullMonthName(match2),
            day: toInt(match3)
          }
        ]

        var rule, i, match;

        for (i = 0; i < rules.length; i++) {
          rule = rules[i];
          match = rule.regexp.exec(string);
          if (match) {
            var year = rule.year;
            if (typeof(year) === 'function') {
              year = year(match);
            }

            var month = rule.month;
            if (typeof(month) === 'function') {
              month = month(match) - 1
            }

            var day = rule.day;
            if (typeof(day) === 'function') {
              day = day(match);
            }

            var result = new Date(year, month, day);

            // an edge case, JS can't handle 'new Date(1)', minimal year is 1970
            if (year >= 0 && year <= 1970) {
              result.setFullYear(year);
            }

            return self.$wrap(result);
          }
        }
      ;
        return self.$raise($$($nesting, 'ArgumentError'), "invalid date");
      }, $parse$13.$$arity = -2);
      
      Opal.def(self, '$today', $today$14 = function $$today() {
        var self = this;

        return self.$wrap(new Date())
      }, $today$14.$$arity = 0);
      return (Opal.def(self, '$gregorian_leap?', $gregorian_leap$ques$15 = function(year) {
        var self = this;

        return (new Date(year, 1, 29).getMonth()-1) === 0
      }, $gregorian_leap$ques$15.$$arity = 1), nil) && 'gregorian_leap?';
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$initialize', $Date_initialize$16 = function $$initialize(year, month, day, start) {
      var self = this;

      
      
      if (year == null) {
        year = -4712;
      };
      
      if (month == null) {
        month = 1;
      };
      
      if (day == null) {
        day = 1;
      };
      
      if (start == null) {
        start = $$($nesting, 'ITALY');
      };
      
      // Because of Gregorian reform calendar goes from 1582-10-04 to 1582-10-15.
      // All days in between end up as 4 october.
      if (year === 1582 && month === 10 && day > 4 && day < 15) {
        day = 4;
      }
    ;
      return (self.date = new Date(year, month - 1, day));
    }, $Date_initialize$16.$$arity = -1);
    
    Opal.def(self, '$-', $Date_$minus$17 = function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() - date);
        return result;
      }
      else if (date.date) {
        return Math.round((self.date - date.date) / (1000 * 60 * 60 * 24));
      }
      else {
        self.$raise($$($nesting, 'TypeError'));
      }
    
    }, $Date_$minus$17.$$arity = 1);
    
    Opal.def(self, '$+', $Date_$plus$18 = function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() + date);
        return result;
      }
      else {
        self.$raise($$($nesting, 'TypeError'));
      }
    
    }, $Date_$plus$18.$$arity = 1);
    
    Opal.def(self, '$<', $Date_$lt$19 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a < b;
    
    }, $Date_$lt$19.$$arity = 1);
    
    Opal.def(self, '$<=', $Date_$lt_eq$20 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a <= b;
    
    }, $Date_$lt_eq$20.$$arity = 1);
    
    Opal.def(self, '$>', $Date_$gt$21 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a > b;
    
    }, $Date_$gt$21.$$arity = 1);
    
    Opal.def(self, '$>=', $Date_$gt_eq$22 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a >= b;
    
    }, $Date_$gt_eq$22.$$arity = 1);
    
    Opal.def(self, '$<=>', $Date_$lt_eq_gt$23 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.$jd()['$<=>'](other)
      }

      if ($$($nesting, 'Date')['$==='](other)) {
        var a = self.date, b = other.date;
        a.setHours(0, 0, 0, 0);
        b.setHours(0, 0, 0, 0);

        if (a < b) {
          return -1;
        }
        else if (a > b) {
          return 1;
        }
        else {
          return 0;
        }
      } else {
        return nil;
      }
    
    }, $Date_$lt_eq_gt$23.$$arity = 1);
    
    Opal.def(self, '$>>', $Date_$gt$gt$24 = function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise($$($nesting, 'TypeError'));
      }

      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + n);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    
    }, $Date_$gt$gt$24.$$arity = 1);
    
    Opal.def(self, '$<<', $Date_$lt$lt$25 = function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise($$($nesting, 'TypeError'));
      }

      return self['$>>'](-n);
    
    }, $Date_$lt$lt$25.$$arity = 1);
    $alias(self, "eql?", "==");
    
    Opal.def(self, '$clone', $Date_clone$26 = function $$clone() {
      var self = this;

      return $$($nesting, 'Date').$wrap(new Date(self.date.getTime()))
    }, $Date_clone$26.$$arity = 0);
    
    Opal.def(self, '$day', $Date_day$27 = function $$day() {
      var self = this;

      return self.date.getDate()
    }, $Date_day$27.$$arity = 0);
    
    Opal.def(self, '$friday?', $Date_friday$ques$28 = function() {
      var self = this;

      return self.$wday()['$=='](5)
    }, $Date_friday$ques$28.$$arity = 0);
    
    Opal.def(self, '$jd', $Date_jd$29 = function $$jd() {
      var self = this;

      
    //Adapted from http://www.physics.sfasu.edu/astro/javascript/julianday.html

    var mm = self.date.getMonth() + 1,
        dd = self.date.getDate(),
        yy = self.date.getFullYear(),
        hr = 12, mn = 0, sc = 0,
        ggg, s, a, j1, jd;

    hr = hr + (mn / 60) + (sc/3600);

    ggg = 1;
    if (yy <= 1585) {
      ggg = 0;
    }

    jd = -1 * Math.floor(7 * (Math.floor((mm + 9) / 12) + yy) / 4);

    s = 1;
    if ((mm - 9) < 0) {
      s =- 1;
    }

    a = Math.abs(mm - 9);
    j1 = Math.floor(yy + s * Math.floor(a / 7));
    j1 = -1 * Math.floor((Math.floor(j1 / 100) + 1) * 3 / 4);

    jd = jd + Math.floor(275 * mm / 9) + dd + (ggg * j1);
    jd = jd + 1721027 + 2 * ggg + 367 * yy - 0.5;
    jd = jd + (hr / 24);

    return jd;
    
    }, $Date_jd$29.$$arity = 0);
    
    Opal.def(self, '$julian?', $Date_julian$ques$30 = function() {
      var self = this;

      return self.date < new Date(1582, 10 - 1, 15, 12)
    }, $Date_julian$ques$30.$$arity = 0);
    
    Opal.def(self, '$monday?', $Date_monday$ques$31 = function() {
      var self = this;

      return self.$wday()['$=='](1)
    }, $Date_monday$ques$31.$$arity = 0);
    
    Opal.def(self, '$month', $Date_month$32 = function $$month() {
      var self = this;

      return self.date.getMonth() + 1
    }, $Date_month$32.$$arity = 0);
    
    Opal.def(self, '$next', $Date_next$33 = function $$next() {
      var self = this;

      return $rb_plus(self, 1)
    }, $Date_next$33.$$arity = 0);
    
    Opal.def(self, '$next_day', $Date_next_day$34 = function $$next_day(n) {
      var self = this;

      
      
      if (n == null) {
        n = 1;
      };
      return $rb_plus(self, n);
    }, $Date_next_day$34.$$arity = -1);
    
    Opal.def(self, '$next_month', $Date_next_month$35 = function $$next_month(n) {
      var self = this;

      
      
      if (n == null) {
        n = 1;
      };
      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + n);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, $Date_next_month$35.$$arity = -1);
    
    Opal.def(self, '$next_year', $Date_next_year$36 = function $$next_year(years) {
      var self = this;

      
      
      if (years == null) {
        years = 1;
      };
      return self.$class().$new($rb_plus(self.$year(), years), self.$month(), self.$day());
    }, $Date_next_year$36.$$arity = -1);
    
    Opal.def(self, '$prev_day', $Date_prev_day$37 = function $$prev_day(n) {
      var self = this;

      
      
      if (n == null) {
        n = 1;
      };
      return $rb_minus(self, n);
    }, $Date_prev_day$37.$$arity = -1);
    
    Opal.def(self, '$prev_month', $Date_prev_month$38 = function $$prev_month(n) {
      var self = this;

      
      
      if (n == null) {
        n = 1;
      };
      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() - n);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, $Date_prev_month$38.$$arity = -1);
    
    Opal.def(self, '$prev_year', $Date_prev_year$39 = function $$prev_year(years) {
      var self = this;

      
      
      if (years == null) {
        years = 1;
      };
      return self.$class().$new($rb_minus(self.$year(), years), self.$month(), self.$day());
    }, $Date_prev_year$39.$$arity = -1);
    
    Opal.def(self, '$saturday?', $Date_saturday$ques$40 = function() {
      var self = this;

      return self.$wday()['$=='](6)
    }, $Date_saturday$ques$40.$$arity = 0);
    
    Opal.def(self, '$strftime', $Date_strftime$41 = function $$strftime(format) {
      var self = this;

      
      
      if (format == null) {
        format = "";
      };
      
      if (format == '') {
        return self.$to_s();
      }

      return self.date.$strftime(format);
    ;
    }, $Date_strftime$41.$$arity = -1);
    $alias(self, "succ", "next");
    
    Opal.def(self, '$sunday?', $Date_sunday$ques$42 = function() {
      var self = this;

      return self.$wday()['$=='](0)
    }, $Date_sunday$ques$42.$$arity = 0);
    
    Opal.def(self, '$thursday?', $Date_thursday$ques$43 = function() {
      var self = this;

      return self.$wday()['$=='](4)
    }, $Date_thursday$ques$43.$$arity = 0);
    
    Opal.def(self, '$to_s', $Date_to_s$44 = function $$to_s() {
      var self = this;

      
      var d = self.date, year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();
      if (month < 10) { month = '0' + month; }
      if (day < 10) { day = '0' + day; }
      return year + '-' + month + '-' + day;
    
    }, $Date_to_s$44.$$arity = 0);
    
    Opal.def(self, '$to_time', $Date_to_time$45 = function $$to_time() {
      var self = this;

      return $$($nesting, 'Time').$new(self.$year(), self.$month(), self.$day())
    }, $Date_to_time$45.$$arity = 0);
    
    Opal.def(self, '$to_n', $Date_to_n$46 = function $$to_n() {
      var self = this;

      return self.date
    }, $Date_to_n$46.$$arity = 0);
    
    Opal.def(self, '$tuesday?', $Date_tuesday$ques$47 = function() {
      var self = this;

      return self.$wday()['$=='](2)
    }, $Date_tuesday$ques$47.$$arity = 0);
    
    Opal.def(self, '$step', $Date_step$48 = function $$step(limit, step) {
      var $iter = $Date_step$48.$$p, block = $iter || nil, $$49, $$50, self = this, steps_count = nil, steps = nil, result = nil;

      if ($iter) $Date_step$48.$$p = null;
      
      
      if ($iter) $Date_step$48.$$p = null;;
      
      if (step == null) {
        step = 1;
      };
      steps_count = $rb_minus(limit, self).$to_i();
      steps = (function() {if ($truthy($rb_lt($rb_times(steps_count, step), 0))) {
        return []
      } else if ($truthy($rb_lt(steps_count, 0))) {
        return $send(Opal.Range.$new(0, steps_count['$-@'](), false).$step(step.$abs()), 'map', [], "-@".$to_proc()).$reverse()
      } else {
        return Opal.Range.$new(0, steps_count, false).$step(step.$abs())
      }; return nil; })();
      result = $send(steps, 'map', [], ($$49 = function(i){var self = $$49.$$s == null ? this : $$49.$$s;

        
        
        if (i == null) {
          i = nil;
        };
        return $rb_plus(self, i);}, $$49.$$s = self, $$49.$$arity = 1, $$49));
      if ((block !== nil)) {
        
        $send(result, 'each', [], ($$50 = function(i){var self = $$50.$$s == null ? this : $$50.$$s;

          
          
          if (i == null) {
            i = nil;
          };
          return Opal.yield1(block, i);;}, $$50.$$s = self, $$50.$$arity = 1, $$50));
        return self;
      } else {
        return result
      };
    }, $Date_step$48.$$arity = -2);
    
    Opal.def(self, '$upto', $Date_upto$51 = function $$upto(max) {
      var $iter = $Date_upto$51.$$p, block = $iter || nil, self = this;

      if ($iter) $Date_upto$51.$$p = null;
      
      
      if ($iter) $Date_upto$51.$$p = null;;
      return $send(self, 'step', [max, 1], block.$to_proc());
    }, $Date_upto$51.$$arity = 1);
    
    Opal.def(self, '$downto', $Date_downto$52 = function $$downto(min) {
      var $iter = $Date_downto$52.$$p, block = $iter || nil, self = this;

      if ($iter) $Date_downto$52.$$p = null;
      
      
      if ($iter) $Date_downto$52.$$p = null;;
      return $send(self, 'step', [min, -1], block.$to_proc());
    }, $Date_downto$52.$$arity = 1);
    
    Opal.def(self, '$wday', $Date_wday$53 = function $$wday() {
      var self = this;

      return self.date.getDay()
    }, $Date_wday$53.$$arity = 0);
    
    Opal.def(self, '$wednesday?', $Date_wednesday$ques$54 = function() {
      var self = this;

      return self.$wday()['$=='](3)
    }, $Date_wednesday$ques$54.$$arity = 0);
    
    Opal.def(self, '$year', $Date_year$55 = function $$year() {
      var self = this;

      return self.date.getFullYear()
    }, $Date_year$55.$$arity = 0);
    
    Opal.def(self, '$cwday', $Date_cwday$56 = function $$cwday() {
      var self = this;

      return self.date.getDay() || 7
    }, $Date_cwday$56.$$arity = 0);
    
    Opal.def(self, '$cweek', $Date_cweek$57 = function $$cweek() {
      var self = this;

      
      var d = new Date(self.date);
      d.setHours(0,0,0);
      d.setDate(d.getDate()+4-(d.getDay()||7));
      return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);
    
    }, $Date_cweek$57.$$arity = 0);
    
    function days_in_month(year, month) {
      var leap = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
      return [31, (leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
    }
  ;
  })($nesting[0], null, $nesting)
};

Opal.modules["native"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $range = Opal.range, $alias = Opal.alias, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$warn', '$include', '$is_a?', '$map', '$to_a', '$_Array', '$method_missing', '$bind', '$instance_method', '$slice', '$-', '$length', '$[]=', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$method_defined?', '$_initialize', '$name', '$native_module']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Native');

    var $nesting = [self].concat($parent_nesting), $Native_is_a$ques$1, $Native_try_convert$2, $Native_convert$3, $Native_call$4, $Native_proc$5, $Native_included$22;

    
    Opal.defs(self, '$is_a?', $Native_is_a$ques$1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, $Native_is_a$ques$1.$$arity = 2);
    Opal.defs(self, '$try_convert', $Native_try_convert$2 = function $$try_convert(value, default$) {
      var self = this;

      
      
      if (default$ == null) {
        default$ = nil;
      };
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    ;
    }, $Native_try_convert$2.$$arity = -2);
    Opal.defs(self, '$convert', $Native_convert$3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($$($nesting, 'ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, $Native_convert$3.$$arity = 1);
    Opal.defs(self, '$call', $Native_call$4 = function $$call(obj, key, $a) {
      var $iter = $Native_call$4.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Native_call$4.$$p = null;
      
      
      if ($iter) $Native_call$4.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 2, arguments.length);
      
      args = $post_args;;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    }, $Native_call$4.$$arity = -3);
    Opal.defs(self, '$proc', $Native_proc$5 = function $$proc() {
      var $iter = $Native_proc$5.$$p, block = $iter || nil, $$6, self = this;

      if ($iter) $Native_proc$5.$$p = null;
      
      
      if ($iter) $Native_proc$5.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'LocalJumpError'), "no block given")
      };
      return $send($$$('::', 'Kernel'), 'proc', [], ($$6 = function($a){var self = $$6.$$s == null ? this : $$6.$$s, $post_args, args, $$7, instance = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        $send(args, 'map!', [], ($$7 = function(arg){var self = $$7.$$s == null ? this : $$7.$$s;

          
          
          if (arg == null) {
            arg = nil;
          };
          return self.$Native(arg);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, $$6.$$s = self, $$6.$$arity = -1, $$6));
    }, $Native_proc$5.$$arity = 0);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Helpers');

      var $nesting = [self].concat($parent_nesting), $Helpers_alias_native$8, $Helpers_native_reader$12, $Helpers_native_writer$15, $Helpers_native_accessor$18;

      
      
      Opal.def(self, '$alias_native', $Helpers_alias_native$8 = function $$alias_native(new$, $a, $b) {
        var $post_args, $kwargs, old, as, $$9, $$10, $$11, $iter = $Helpers_alias_native$8.$$p, $yield = $iter || nil, self = this;

        if ($iter) $Helpers_alias_native$8.$$p = null;
        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        $kwargs = Opal.extract_kwargs($post_args);
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if ($post_args.length > 0) {
          old = $post_args[0];
          $post_args.splice(0, 1);
        }
        if (old == null) {
          old = new$;
        };
        
        as = $kwargs.$$smap["as"];
        if (as == null) {
          as = nil
        };
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], ($$9 = function(value){var self = $$9.$$s == null ? this : $$9.$$s;
            if (self["native"] == null) self["native"] = nil;

            
            
            if (value == null) {
              value = nil;
            };
            self["native"][old['$[]']($range(0, -2, false))] = $$($nesting, 'Native').$convert(value);
            return value;}, $$9.$$s = self, $$9.$$arity = 1, $$9))
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], ($$10 = function($c){var self = $$10.$$s == null ? this : $$10.$$s, $iter = $$10.$$p, block = $iter || nil, $post_args, args, value = nil;
            if (self["native"] == null) self["native"] = nil;

            
            
            if ($iter) $$10.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            value = $send($$($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc());
            if ($truthy(value)) {
              return as.$new(value.$to_n())
            } else {
              return nil
            };}, $$10.$$s = self, $$10.$$arity = -1, $$10))
        } else {
          return $send(self, 'define_method', [new$], ($$11 = function($c){var self = $$11.$$s == null ? this : $$11.$$s, $iter = $$11.$$p, block = $iter || nil, $post_args, args;
            if (self["native"] == null) self["native"] = nil;

            
            
            if ($iter) $$11.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send($$($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc());}, $$11.$$s = self, $$11.$$arity = -1, $$11))
        };
      }, $Helpers_alias_native$8.$$arity = -2);
      
      Opal.def(self, '$native_reader', $Helpers_native_reader$12 = function $$native_reader($a) {
        var $post_args, names, $$13, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        return $send(names, 'each', [], ($$13 = function(name){var self = $$13.$$s == null ? this : $$13.$$s, $$14;

          
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', [name], ($$14 = function(){var self = $$14.$$s == null ? this : $$14.$$s;
            if (self["native"] == null) self["native"] = nil;

            return self.$Native(self["native"][name])}, $$14.$$s = self, $$14.$$arity = 0, $$14));}, $$13.$$s = self, $$13.$$arity = 1, $$13));
      }, $Helpers_native_reader$12.$$arity = -1);
      
      Opal.def(self, '$native_writer', $Helpers_native_writer$15 = function $$native_writer($a) {
        var $post_args, names, $$16, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        return $send(names, 'each', [], ($$16 = function(name){var self = $$16.$$s == null ? this : $$16.$$s, $$17;

          
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', ["" + (name) + "="], ($$17 = function(value){var self = $$17.$$s == null ? this : $$17.$$s;
            if (self["native"] == null) self["native"] = nil;

            
            
            if (value == null) {
              value = nil;
            };
            return self.$Native(self["native"][name] = value);}, $$17.$$s = self, $$17.$$arity = 1, $$17));}, $$16.$$s = self, $$16.$$arity = 1, $$16));
      }, $Helpers_native_writer$15.$$arity = -1);
      return (Opal.def(self, '$native_accessor', $Helpers_native_accessor$18 = function $$native_accessor($a) {
        var $post_args, names, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        $send(self, 'native_reader', Opal.to_a(names));
        return $send(self, 'native_writer', Opal.to_a(names));
      }, $Helpers_native_accessor$18.$$arity = -1), nil) && 'native_accessor';
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Wrapper');

      var $nesting = [self].concat($parent_nesting), $Wrapper_initialize$19, $Wrapper_to_n$20, $Wrapper_included$21;

      
      
      Opal.def(self, '$initialize', $Wrapper_initialize$19 = function $$initialize(native$) {
        var self = this;

        
        if ($truthy($$$('::', 'Kernel')['$native?'](native$))) {
        } else {
          $$$('::', 'Kernel').$raise($$($nesting, 'ArgumentError'), "" + (native$.$inspect()) + " isn't native")
        };
        return (self["native"] = native$);
      }, $Wrapper_initialize$19.$$arity = 1);
      
      Opal.def(self, '$to_n', $Wrapper_to_n$20 = function $$to_n() {
        var self = this;
        if (self["native"] == null) self["native"] = nil;

        return self["native"]
      }, $Wrapper_to_n$20.$$arity = 0);
      return (Opal.defs(self, '$included', $Wrapper_included$21 = function $$included(klass) {
        var self = this;

        return klass.$extend($$($nesting, 'Helpers'))
      }, $Wrapper_included$21.$$arity = 1), nil) && 'included';
    })($nesting[0], $nesting);
    return (Opal.defs(self, '$included', $Native_included$22 = function $$included(base) {
      var self = this;

      
      self.$warn("Including ::Native is deprecated. Please include Native::Wrapper instead.");
      return base.$include($$($nesting, 'Wrapper'));
    }, $Native_included$22.$$arity = 1), nil) && 'included';
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_native$ques$23, $Kernel_Native$24, $Kernel_Array$27;

    
    
    Opal.def(self, '$native?', $Kernel_native$ques$23 = function(value) {
      var self = this;

      return value == null || !value.$$class;
    }, $Kernel_native$ques$23.$$arity = 1);
    
    Opal.def(self, '$Native', $Kernel_Native$24 = function $$Native(obj) {
      var $$25, $$26, $iter = $Kernel_Native$24.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Kernel_Native$24.$$p = null;
      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return $$$($$($nesting, 'Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?']($$($nesting, 'Array')))) {
        return $send(obj, 'map', [], ($$25 = function(o){var self = $$25.$$s == null ? this : $$25.$$s;

          
          
          if (o == null) {
            o = nil;
          };
          return self.$Native(o);}, $$25.$$s = self, $$25.$$arity = 1, $$25))
      } else if ($truthy(obj['$is_a?']($$($nesting, 'Proc')))) {
        return $send(self, 'proc', [], ($$26 = function($a){var self = $$26.$$s == null ? this : $$26.$$s, $iter = $$26.$$p, block = $iter || nil, $post_args, args;

          
          
          if ($iter) $$26.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return self.$Native($send(obj, 'call', Opal.to_a(args), block.$to_proc()));}, $$26.$$s = self, $$26.$$arity = -1, $$26))
      } else {
        return obj
      }
    }, $Kernel_Native$24.$$arity = 1);
    $alias(self, "_Array", "Array");
    return (Opal.def(self, '$Array', $Kernel_Array$27 = function $$Array(object, $a) {
      var $iter = $Kernel_Array$27.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Kernel_Array$27.$$p = null;
      
      
      if ($iter) $Kernel_Array$27.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      if ($truthy(self['$native?'](object))) {
        return $send($$$($$($nesting, 'Native'), 'Array'), 'new', [object].concat(Opal.to_a(args)), block.$to_proc()).$to_a()};
      return self.$_Array(object);
    }, $Kernel_Array$27.$$arity = -2), nil) && 'Array';
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_$eq_eq$28, $Object_has_key$ques$29, $Object_each$30, $Object_$$$31, $Object_$$$eq$32, $Object_merge$excl$33, $Object_respond_to$ques$34, $Object_respond_to_missing$ques$35, $Object_method_missing$36, $Object_nil$ques$37, $Object_is_a$ques$38, $Object_instance_of$ques$39, $Object_class$40, $Object_to_a$41, $Object_inspect$42;

    self.$$prototype["native"] = nil;
    
    self.$include($$$($$$('::', 'Native'), 'Wrapper'));
    
    Opal.def(self, '$==', $Object_$eq_eq$28 = function(other) {
      var self = this;

      return self["native"] === $$$('::', 'Native').$try_convert(other)
    }, $Object_$eq_eq$28.$$arity = 1);
    
    Opal.def(self, '$has_key?', $Object_has_key$ques$29 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, $Object_has_key$ques$29.$$arity = 1);
    $alias(self, "key?", "has_key?");
    $alias(self, "include?", "has_key?");
    $alias(self, "member?", "has_key?");
    
    Opal.def(self, '$each', $Object_each$30 = function $$each($a) {
      var $post_args, args, $iter = $Object_each$30.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Object_each$30.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
      } else {
        return $send(self, 'method_missing', ["each"].concat(Opal.to_a(args)))
      };
    }, $Object_each$30.$$arity = -1);
    
    Opal.def(self, '$[]', $Object_$$$31 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return $$$('::', 'Native').$call(self["native"], key)
      }
    
    }, $Object_$$$31.$$arity = 1);
    
    Opal.def(self, '$[]=', $Object_$$$eq$32 = function(key, value) {
      var self = this, native$ = nil;

      
      native$ = $$$('::', 'Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
      } else {
        return self["native"][key] = native$
      };
    }, $Object_$$$eq$32.$$arity = 2);
    
    Opal.def(self, '$merge!', $Object_merge$excl$33 = function(other) {
      var self = this;

      
      
      other = $$$('::', 'Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, $Object_merge$excl$33.$$arity = 1);
    
    Opal.def(self, '$respond_to?', $Object_respond_to$ques$34 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return $$$('::', 'Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    }, $Object_respond_to$ques$34.$$arity = -2);
    
    Opal.def(self, '$respond_to_missing?', $Object_respond_to_missing$ques$35 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return Opal.hasOwnProperty.call(self["native"], name);
    }, $Object_respond_to_missing$ques$35.$$arity = -2);
    
    Opal.def(self, '$method_missing', $Object_method_missing$36 = function $$method_missing(mid, $a) {
      var $iter = $Object_method_missing$36.$$p, block = $iter || nil, $post_args, args, self = this, $writer = nil;

      if ($iter) $Object_method_missing$36.$$p = null;
      
      
      if ($iter) $Object_method_missing$36.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return (($writer = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)]), $send(self, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }
      else {
        return $send($$$('::', 'Native'), 'call', [self["native"], mid].concat(Opal.to_a(args)), block.$to_proc());
      }
    ;
    }, $Object_method_missing$36.$$arity = -2);
    
    Opal.def(self, '$nil?', $Object_nil$ques$37 = function() {
      var self = this;

      return false
    }, $Object_nil$ques$37.$$arity = 0);
    
    Opal.def(self, '$is_a?', $Object_is_a$ques$38 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    }, $Object_is_a$ques$38.$$arity = 1);
    $alias(self, "kind_of?", "is_a?");
    
    Opal.def(self, '$instance_of?', $Object_instance_of$ques$39 = function(klass) {
      var self = this;

      return self.$$class === klass;
    }, $Object_instance_of$ques$39.$$arity = 1);
    
    Opal.def(self, '$class', $Object_class$40 = function() {
      var self = this;

      return self.$$class;
    }, $Object_class$40.$$arity = 0);
    
    Opal.def(self, '$to_a', $Object_to_a$41 = function $$to_a(options) {
      var $iter = $Object_to_a$41.$$p, block = $iter || nil, self = this;

      if ($iter) $Object_to_a$41.$$p = null;
      
      
      if ($iter) $Object_to_a$41.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      return $send($$$($$$('::', 'Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a();
    }, $Object_to_a$41.$$arity = -1);
    return (Opal.def(self, '$inspect', $Object_inspect$42 = function $$inspect() {
      var self = this;

      return "" + "#<Native:" + (String(self["native"])) + ">"
    }, $Object_inspect$42.$$arity = 0), nil) && 'inspect';
  })($$($nesting, 'Native'), $$($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_initialize$43, $Array_each$44, $Array_$$$45, $Array_$$$eq$46, $Array_last$47, $Array_length$48, $Array_inspect$49;

    self.$$prototype.named = self.$$prototype["native"] = self.$$prototype.get = self.$$prototype.block = self.$$prototype.set = self.$$prototype.length = nil;
    
    self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
    self.$include($$($nesting, 'Enumerable'));
    
    Opal.def(self, '$initialize', $Array_initialize$43 = function $$initialize(native$, options) {
      var $iter = $Array_initialize$43.$$p, block = $iter || nil, self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

      if ($iter) $Array_initialize$43.$$p = null;
      
      
      if ($iter) $Array_initialize$43.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      $send2(self, $find_super(self, 'initialize', $Array_initialize$43, false, true), 'initialize', [native$], null);
      self.get = (function() {if ($truthy(($ret_or_1 = options['$[]']("get")))) {
        return $ret_or_1
      } else {
        return options['$[]']("access")
      }; return nil; })();
      self.named = options['$[]']("named");
      self.set = (function() {if ($truthy(($ret_or_2 = options['$[]']("set")))) {
        return $ret_or_2
      } else {
        return options['$[]']("access")
      }; return nil; })();
      self.length = (function() {if ($truthy(($ret_or_3 = options['$[]']("length")))) {
        return $ret_or_3
      } else {
        return "length"
      }; return nil; })();
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise($$($nesting, 'ArgumentError'), "no length found on the array-like object")
      } else {
        return nil
      };
    }, $Array_initialize$43.$$arity = -2);
    
    Opal.def(self, '$each', $Array_each$44 = function $$each() {
      var $iter = $Array_each$44.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_each$44.$$p = null;
      
      
      if ($iter) $Array_each$44.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, $Array_each$44.$$arity = 0);
    
    Opal.def(self, '$[]', $Array_$$$45 = function(index) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = index;
      if ($$($nesting, 'String')['$===']($case) || $$($nesting, 'Symbol')['$===']($case)) {if ($truthy(self.named)) {
        return self["native"][self.named](index)
      } else {
        return self["native"][index]
      }}
      else if ($$($nesting, 'Integer')['$===']($case)) {if ($truthy(self.get)) {
        return self["native"][self.get](index)
      } else {
        return self["native"][index]
      }}
      else { return nil }})();
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
        } else {
          return self.$Native(result)
        }
      } else {
        return nil
      };
    }, $Array_$$$45.$$arity = 1);
    
    Opal.def(self, '$[]=', $Array_$$$eq$46 = function(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, $$($nesting, 'Native').$convert(value))
      } else {
        return self["native"][index] = $$($nesting, 'Native').$convert(value)
      }
    }, $Array_$$$eq$46.$$arity = 2);
    
    Opal.def(self, '$last', $Array_last$47 = function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      
      
      if (count == null) {
        count = nil;
      };
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
      } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    }, $Array_last$47.$$arity = -1);
    
    Opal.def(self, '$length', $Array_length$48 = function $$length() {
      var self = this;

      return self["native"][self.length]
    }, $Array_length$48.$$arity = 0);
    $alias(self, "to_ary", "to_a");
    return (Opal.def(self, '$inspect', $Array_inspect$49 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, $Array_inspect$49.$$arity = 0), nil) && 'inspect';
  })($$($nesting, 'Native'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_to_n$50;

    return (Opal.def(self, '$to_n', $Numeric_to_n$50 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $Numeric_to_n$50.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Proc');

    var $nesting = [self].concat($parent_nesting), $Proc_to_n$51;

    return (Opal.def(self, '$to_n', $Proc_to_n$51 = function $$to_n() {
      var self = this;

      return self
    }, $Proc_to_n$51.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_n$52;

    return (Opal.def(self, '$to_n', $String_to_n$52 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $String_to_n$52.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Regexp');

    var $nesting = [self].concat($parent_nesting), $Regexp_to_n$53;

    return (Opal.def(self, '$to_n', $Regexp_to_n$53 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $Regexp_to_n$53.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MatchData');

    var $nesting = [self].concat($parent_nesting), $MatchData_to_n$54;

    self.$$prototype.matches = nil;
    return (Opal.def(self, '$to_n', $MatchData_to_n$54 = function $$to_n() {
      var self = this;

      return self.matches
    }, $MatchData_to_n$54.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Struct');

    var $nesting = [self].concat($parent_nesting), $Struct_to_n$55;

    return (Opal.def(self, '$to_n', $Struct_to_n$55 = function $$to_n() {
      var $$56, self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], ($$56 = function(name, value){var self = $$56.$$s == null ? this : $$56.$$s;

        
        
        if (name == null) {
          name = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return result[name] = $$($nesting, 'Native').$try_convert(value, value);}, $$56.$$s = self, $$56.$$arity = 2, $$56));
      return result;
    }, $Struct_to_n$55.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_to_n$57;

    return (Opal.def(self, '$to_n', $Array_to_n$57 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($$($nesting, 'Native').$try_convert(obj, obj));
      }

      return result;
    
    }, $Array_to_n$57.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean_to_n$58;

    return (Opal.def(self, '$to_n', $Boolean_to_n$58 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $Boolean_to_n$58.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_to_n$59;

    return (Opal.def(self, '$to_n', $Time_to_n$59 = function $$to_n() {
      var self = this;

      return self
    }, $Time_to_n$59.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_to_n$60;

    return (Opal.def(self, '$to_n', $NilClass_to_n$60 = function $$to_n() {
      var self = this;

      return null;
    }, $NilClass_to_n$60.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  if ($truthy($$($nesting, 'Hash')['$method_defined?']("_initialize"))) {
  } else {
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Hash');

      var $nesting = [self].concat($parent_nesting), $Hash_initialize$61, $Hash_to_n$62;

      
      $alias(self, "_initialize", "initialize");
      
      Opal.def(self, '$initialize', $Hash_initialize$61 = function $$initialize(defaults) {
        var $iter = $Hash_initialize$61.$$p, block = $iter || nil, self = this;

        if ($iter) $Hash_initialize$61.$$p = null;
        
        
        if ($iter) $Hash_initialize$61.$$p = null;;
        ;
        
        if (defaults != null &&
             (defaults.constructor === undefined ||
               defaults.constructor === Object)) {
          var smap = self.$$smap,
              keys = self.$$keys,
              key, value;

          for (key in defaults) {
            value = defaults[key];

            if (value &&
                 (value.constructor === undefined ||
                   value.constructor === Object)) {
              smap[key] = $$($nesting, 'Hash').$new(value);
            } else if (value && value.$$is_array) {
              value = value.map(function(item) {
                if (item &&
                     (item.constructor === undefined ||
                       item.constructor === Object)) {
                  return $$($nesting, 'Hash').$new(item);
                }

                return self.$Native(item);
              });
              smap[key] = value
            } else {
              smap[key] = self.$Native(value);
            }

            keys.push(key);
          }

          return self;
        }

        return $send(self, '_initialize', [defaults], block.$to_proc());
      ;
      }, $Hash_initialize$61.$$arity = -1);
      return (Opal.def(self, '$to_n', $Hash_to_n$62 = function $$to_n() {
        var self = this;

        
        var result = {},
            keys = self.$$keys,
            smap = self.$$smap,
            key, value;

        for (var i = 0, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = smap[key];
          } else {
            key = key.key;
            value = key.value;
          }

          result[key] = $$($nesting, 'Native').$try_convert(value, value);
        }

        return result;
      
      }, $Hash_to_n$62.$$arity = 0), nil) && 'to_n';
    })($nesting[0], null, $nesting)
  };
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_native_module$63;

    return (Opal.def(self, '$native_module', $Module_native_module$63 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, $Module_native_module$63.$$arity = 0), nil) && 'native_module'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Class');

    var $nesting = [self].concat($parent_nesting), $Class_native_alias$64, $Class_native_class$65;

    
    
    Opal.def(self, '$native_alias', $Class_native_alias$64 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.prototype['$' + existing_mid];
      if (!aliased) {
        self.$raise($$($nesting, 'NameError').$new("" + "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", existing_mid));
      }
      self.prototype[new_jsid] = aliased;
    
    }, $Class_native_alias$64.$$arity = 2);
    return (Opal.def(self, '$native_class', $Class_native_class$65 = function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, $Class_native_class$65.$$arity = 0), nil) && 'native_class';
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};

Opal.modules["opal/jquery/constants"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$raise']);
  
  self.$require("native");
  if ($truthy((($a = $$($nesting, 'JQUERY_CLASS', 'skip_raise')) ? 'constant' : nil))) {
    return nil
  } else {
    return (function() {
    if ($truthy(!!Opal.global.jQuery)) {return Opal.const_set($nesting[0], 'JQUERY_CLASS', Opal.const_set($nesting[0], 'JQUERY_SELECTOR', Opal.global.jQuery))}
    else if ($truthy(!!Opal.global.Zepto)) {
    Opal.const_set($nesting[0], 'JQUERY_SELECTOR', Opal.global.Zepto);
    return Opal.const_set($nesting[0], 'JQUERY_CLASS', Opal.global.Zepto.zepto.Z);}
    else {return self.$raise($$($nesting, 'NameError'), "Can't find jQuery or Zepto. jQuery must be included before opal-jquery")}})()
  };
};

Opal.modules["opal/jquery/element"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $alias = Opal.alias, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$to_n', '$include', '$each', '$alias_native', '$attr_reader', '$call', '$nil?', '$raise', '$is_a?', '$has_key?', '$delete', '$from_object', '$gsub', '$upcase', '$[]', '$compact', '$map', '$respond_to?', '$<<', '$Native', '$arity', '$new']);
  
  self.$require("native");
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Element');

    var $nesting = [self].concat($parent_nesting), $Element_find$1, $Element_$$$2, $Element_id$3, $Element_new$4, $Element_parse$5, $Element_expose$6, $Element_prop$8, $Element_to_n$9, $Element_$$$10, $Element_$$$eq$11, $Element_attr$12, $Element_has_attribute$ques$13, $Element_append_to_body$14, $Element_append_to_head$15, $Element_at$16, $Element_class_name$17, $Element_class_name$eq$18, $Element_css$19, $Element_animate$20, $Element_data$21, $Element_effect$22, $Element_visible$ques$25, $Element_offset$26, $Element_each$27, $Element_first$28, $Element_html$29, $Element_id$30, $Element_id$eq$31, $Element_tag_name$32, $Element_inspect$33, $Element_to_s$34, $Element_length$35, $Element_any$ques$36, $Element_empty$ques$37, $Element_on$38, $Element_one$39, $Element_off$40, $Element_serialize_array$41, $Element_value$43, $Element_height$44, $Element_width$45, $Element_position$46, $Element_$eq_eq$47, $Element_respond_to_missing$ques$48, $Element_method_missing$49;

    
    var $ = $$($nesting, 'JQUERY_SELECTOR').$to_n();
    self.$include($$($nesting, 'Enumerable'));
    Opal.defs(self, '$find', $Element_find$1 = function $$find(selector) {
      var self = this;

      return $(selector)
    }, $Element_find$1.$$arity = 1);
    Opal.defs(self, '$[]', $Element_$$$2 = function(selector) {
      var self = this;

      return $(selector)
    }, $Element_$$$2.$$arity = 1);
    Opal.defs(self, '$id', $Element_id$3 = function $$id(id) {
      var self = this;

      
      var el = document.getElementById(id);

      if (!el) {
        return nil;
      }

      return $(el);
    
    }, $Element_id$3.$$arity = 1);
    Opal.defs(self, '$new', $Element_new$4 = function(tag) {
      var self = this;

      
      
      if (tag == null) {
        tag = "div";
      };
      return $(document.createElement(tag));;
    }, $Element_new$4.$$arity = -1);
    Opal.defs(self, '$parse', $Element_parse$5 = function $$parse(str) {
      var self = this;

      return $.parseHTML ? $($.parseHTML(str)) : $(str);
    }, $Element_parse$5.$$arity = 1);
    Opal.defs(self, '$expose', $Element_expose$6 = function $$expose($a) {
      var $post_args, methods, $$7, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      methods = $post_args;;
      return $send(methods, 'each', [], ($$7 = function(method){var self = $$7.$$s == null ? this : $$7.$$s;

        
        
        if (method == null) {
          method = nil;
        };
        return self.$alias_native(method);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
    }, $Element_expose$6.$$arity = -1);
    self.$attr_reader("selector");
    self.$alias_native("after");
    self.$alias_native("before");
    self.$alias_native("parent");
    self.$alias_native("parents");
    self.$alias_native("prev");
    self.$alias_native("remove");
    self.$alias_native("hide");
    self.$alias_native("show");
    self.$alias_native("toggle");
    self.$alias_native("children");
    self.$alias_native("blur");
    self.$alias_native("closest");
    self.$alias_native("detach");
    self.$alias_native("focus");
    self.$alias_native("find");
    self.$alias_native("next");
    self.$alias_native("siblings");
    self.$alias_native("text");
    self.$alias_native("trigger");
    self.$alias_native("append");
    self.$alias_native("prepend");
    self.$alias_native("serialize");
    self.$alias_native("is");
    self.$alias_native("filter");
    self.$alias_native("not");
    self.$alias_native("last");
    self.$alias_native("wrap");
    self.$alias_native("stop");
    self.$alias_native("clone");
    self.$alias_native("empty");
    self.$alias_native("get");
    
    Opal.def(self, '$prop', $Element_prop$8 = function $$prop($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send($$($nesting, 'Native'), 'call', [self, "prop"].concat(Opal.to_a(args)));
    }, $Element_prop$8.$$arity = -1);
    $alias(self, "succ", "next");
    $alias(self, "<<", "append");
    self.$alias_native("add_class", "addClass");
    self.$alias_native("append_to", "appendTo");
    self.$alias_native("has_class?", "hasClass");
    self.$alias_native("html=", "html");
    self.$alias_native("index");
    self.$alias_native("is?", "is");
    self.$alias_native("remove_attr", "removeAttr");
    self.$alias_native("remove_class", "removeClass");
    self.$alias_native("replace_all", "replaceAll");
    self.$alias_native("replace_with", "replaceWith");
    self.$alias_native("select");
    self.$alias_native("submit");
    self.$alias_native("click");
    self.$alias_native("text=", "text");
    self.$alias_native("toggle_class", "toggleClass");
    self.$alias_native("value=", "val");
    self.$alias_native("scroll_top=", "scrollTop");
    self.$alias_native("scroll_top", "scrollTop");
    self.$alias_native("scroll_left=", "scrollLeft");
    self.$alias_native("scroll_left", "scrollLeft");
    self.$alias_native("remove_attribute", "removeAttr");
    self.$alias_native("slide_down", "slideDown");
    self.$alias_native("slide_up", "slideUp");
    self.$alias_native("slide_toggle", "slideToggle");
    self.$alias_native("fade_toggle", "fadeToggle");
    self.$alias_native("height=", "height");
    self.$alias_native("width=", "width");
    self.$alias_native("outer_width", "outerWidth");
    self.$alias_native("outer_height", "outerHeight");
    
    Opal.def(self, '$to_n', $Element_to_n$9 = function $$to_n() {
      var self = this;

      return self
    }, $Element_to_n$9.$$arity = 0);
    
    Opal.def(self, '$[]', $Element_$$$10 = function(name) {
      var self = this;

      
      var value = self.attr(name);
      if(value === undefined) return nil;
      return value;
    
    }, $Element_$$$10.$$arity = 1);
    
    Opal.def(self, '$[]=', $Element_$$$eq$11 = function(name, value) {
      var self = this;

      
      if ($truthy(value['$nil?']())) {
        return self.removeAttr(name)};
      return self.attr(name, value);;
    }, $Element_$$$eq$11.$$arity = 2);
    
    Opal.def(self, '$attr', $Element_attr$12 = function $$attr($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var size = args.length;
      switch (size) {
      case 1:
        var result = self.attr(args[0]);
        return( (result == null) ? nil : result );
        break;
      case 2:
        return self.attr(args[0], args[1]);
        break;
      default:
        self.$raise($$($nesting, 'ArgumentError'), "#attr only accepts 1 or 2 arguments")
      }
    ;
    }, $Element_attr$12.$$arity = -1);
    
    Opal.def(self, '$has_attribute?', $Element_has_attribute$ques$13 = function(name) {
      var self = this;

      return self.attr(name) !== undefined;
    }, $Element_has_attribute$ques$13.$$arity = 1);
    
    Opal.def(self, '$append_to_body', $Element_append_to_body$14 = function $$append_to_body() {
      var self = this;

      return self.appendTo(document.body);
    }, $Element_append_to_body$14.$$arity = 0);
    
    Opal.def(self, '$append_to_head', $Element_append_to_head$15 = function $$append_to_head() {
      var self = this;

      return self.appendTo(document.head);
    }, $Element_append_to_head$15.$$arity = 0);
    
    Opal.def(self, '$at', $Element_at$16 = function $$at(index) {
      var self = this;

      
      var length = self.length;

      if (index < 0) {
        index += length;
      }

      if (index < 0 || index >= length) {
        return nil;
      }

      return $(self[index]);
    
    }, $Element_at$16.$$arity = 1);
    
    Opal.def(self, '$class_name', $Element_class_name$17 = function $$class_name() {
      var self = this;

      
      var first = self[0];
      return (first && first.className) || "";
    
    }, $Element_class_name$17.$$arity = 0);
    
    Opal.def(self, '$class_name=', $Element_class_name$eq$18 = function(name) {
      var self = this;

      
      
      for (var i = 0, length = self.length; i < length; i++) {
        self[i].className = name;
      }
    ;
      return self;
    }, $Element_class_name$eq$18.$$arity = 1);
    
    Opal.def(self, '$css', $Element_css$19 = function $$css(name, value) {
      var self = this, $ret_or_1 = nil;

      
      
      if (value == null) {
        value = nil;
      };
      if ($truthy((function() {if ($truthy(($ret_or_1 = value['$nil?']()))) {
        return name['$is_a?']($$($nesting, 'String'))
      } else {
        return $ret_or_1
      }; return nil; })())) {
        return self.css(name)
      } else if ($truthy(name['$is_a?']($$($nesting, 'Hash')))) {
        self.css(name.$to_n())
      } else {
        self.css(name, value)
      };
      return self;
    }, $Element_css$19.$$arity = -2);
    
    Opal.def(self, '$animate', $Element_animate$20 = function $$animate(params) {
      var $iter = $Element_animate$20.$$p, block = $iter || nil, self = this, speed = nil;

      if ($iter) $Element_animate$20.$$p = null;
      
      
      if ($iter) $Element_animate$20.$$p = null;;
      speed = (function() {if ($truthy(params['$has_key?']("speed"))) {
        return params.$delete("speed")
      } else {
        return 400
      }; return nil; })();
      if ((block !== nil)) {
        return self.animate(params.$to_n(), speed, block)
      } else {
        return self.animate(params.$to_n(), speed)
      };
    }, $Element_animate$20.$$arity = 1);
    
    Opal.def(self, '$data', $Element_data$21 = function $$data($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var result = self.data.apply(self, args);
      if (
        (typeof(result) === 'object') && !(result instanceof $$($nesting, 'JQUERY_CLASS'))
      ) {
        result = $$($nesting, 'JSON').$from_object(result);
      }
      return result == null ? nil : result;
    ;
    }, $Element_data$21.$$arity = -1);
    
    Opal.def(self, '$effect', $Element_effect$22 = function $$effect(name, $a) {
      var $iter = $Element_effect$22.$$p, block = $iter || nil, $post_args, args, $$23, $$24, self = this;

      if ($iter) $Element_effect$22.$$p = null;
      
      
      if ($iter) $Element_effect$22.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      name = $send(name, 'gsub', [/_\w/], ($$23 = function(match){var self = $$23.$$s == null ? this : $$23.$$s;

        
        
        if (match == null) {
          match = nil;
        };
        return match['$[]'](1).$upcase();}, $$23.$$s = self, $$23.$$arity = 1, $$23));
      args = $send(args, 'map', [], ($$24 = function(a){var self = $$24.$$s == null ? this : $$24.$$s;

        
        
        if (a == null) {
          a = nil;
        };
        if ($truthy(a['$respond_to?']("to_n"))) {
          return a.$to_n()
        } else {
          return nil
        };}, $$24.$$s = self, $$24.$$arity = 1, $$24)).$compact();
      args['$<<'](function() { (function() {if ((block !== nil)) {
        return block.$call()
      } else {
        return nil
      }; return nil; })() });
      return self[name].apply(self, args);
    }, $Element_effect$22.$$arity = -2);
    
    Opal.def(self, '$visible?', $Element_visible$ques$25 = function() {
      var self = this;

      return self.is(':visible');
    }, $Element_visible$ques$25.$$arity = 0);
    
    Opal.def(self, '$offset', $Element_offset$26 = function $$offset() {
      var self = this;

      return self.$Native(self.offset())
    }, $Element_offset$26.$$arity = 0);
    
    Opal.def(self, '$each', $Element_each$27 = function $$each() {
      var $iter = $Element_each$27.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Element_each$27.$$p = null;
      
      for (var i = 0, length = self.length; i < length; i++) {;
      Opal.yield1($yield, $(self[i]));
      };
      return self;
    }, $Element_each$27.$$arity = 0);
    
    Opal.def(self, '$first', $Element_first$28 = function $$first() {
      var self = this;

      return self.length ? self.first() : nil;
    }, $Element_first$28.$$arity = 0);
    
    Opal.def(self, '$html', $Element_html$29 = function $$html(content) {
      var self = this;

      
      ;
      
      if (content != null) {
        return self.html(content);
      }

      return self.html() || '';
    ;
    }, $Element_html$29.$$arity = -1);
    
    Opal.def(self, '$id', $Element_id$30 = function $$id() {
      var self = this;

      
      var first = self[0];
      return (first && first.id) || "";
    
    }, $Element_id$30.$$arity = 0);
    
    Opal.def(self, '$id=', $Element_id$eq$31 = function(id) {
      var self = this;

      
      var first = self[0];

      if (first) {
        first.id = id;
      }

      return self;
    
    }, $Element_id$eq$31.$$arity = 1);
    
    Opal.def(self, '$tag_name', $Element_tag_name$32 = function $$tag_name() {
      var self = this;

      return self.length > 0 ? self[0].tagName.toLowerCase() : nil
    }, $Element_tag_name$32.$$arity = 0);
    
    Opal.def(self, '$inspect', $Element_inspect$33 = function $$inspect() {
      var self = this;

      
      if      (self[0] === document) return '#<Element [document]>'
      else if (self[0] === window  ) return '#<Element [window]>'

      var val, el, str, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];
        if (!el.tagName) { return '#<Element ['+el.toString()+']'; }

        str = "<" + el.tagName.toLowerCase();

        if (val = el.id) str += (' id="' + val + '"');
        if (val = el.className) str += (' class="' + val + '"');

        result.push(str + '>');
      }

      return '#<Element [' + result.join(', ') + ']>';
    
    }, $Element_inspect$33.$$arity = 0);
    
    Opal.def(self, '$to_s', $Element_to_s$34 = function $$to_s() {
      var self = this;

      
      var val, el, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];

        result.push(el.outerHTML)
      }

      return result.join(', ');
    
    }, $Element_to_s$34.$$arity = 0);
    
    Opal.def(self, '$length', $Element_length$35 = function $$length() {
      var self = this;

      return self.length;
    }, $Element_length$35.$$arity = 0);
    
    Opal.def(self, '$any?', $Element_any$ques$36 = function() {
      var self = this;

      return self.length > 0;
    }, $Element_any$ques$36.$$arity = 0);
    
    Opal.def(self, '$empty?', $Element_empty$ques$37 = function() {
      var self = this;

      return self.length === 0;
    }, $Element_empty$ques$37.$$arity = 0);
    $alias(self, "empty?", "none?");
    
    Opal.def(self, '$on', $Element_on$38 = function $$on(name, sel) {
      var $iter = $Element_on$38.$$p, block = $iter || nil, self = this;

      if ($iter) $Element_on$38.$$p = null;
      
      
      if ($iter) $Element_on$38.$$p = null;;
      
      if (sel == null) {
        sel = nil;
      };
      
      var has_args = block.$arity() !== 0;

      var wrapper = function() {
        for(var args = new Array(arguments.length), i = 0, ii = args.length; i < ii; i++) {
          args[i] = arguments[i];
        }

        // Use preventDefault as a canary for native events
        if (has_args && args[0].preventDefault) {
          args[0] = $$($nesting, 'Event').$new(args[0]);
        }

        return block.apply(null, args);
      };

      block.$$jqwrap = wrapper;

      if (sel == nil) {
        self.on(name, wrapper);
      }
      else {
        self.on(name, sel, wrapper);
      }
    ;
      return block;
    }, $Element_on$38.$$arity = -2);
    
    Opal.def(self, '$one', $Element_one$39 = function $$one(name, sel) {
      var $iter = $Element_one$39.$$p, block = $iter || nil, self = this;

      if ($iter) $Element_one$39.$$p = null;
      
      
      if ($iter) $Element_one$39.$$p = null;;
      
      if (sel == null) {
        sel = nil;
      };
      
      var has_args = block.$arity() !== 0;

      var wrapper = function() {
        for(var args = new Array(arguments.length), i = 0, ii = args.length; i < ii; i++) {
          args[i] = arguments[i];
        }

        // Use preventDefault as a canary for native events
        if (has_args && args[0].preventDefault) {
          args[0] = $$($nesting, 'Event').$new(args[0]);
        }

        return block.apply(null, args);
      };

      block.$$jqwrap = wrapper;

      if (sel == nil) {
        self.one(name, wrapper);
      }
      else {
        self.one(name, sel, wrapper);
      }
    ;
      return block;
    }, $Element_one$39.$$arity = -2);
    
    Opal.def(self, '$off', $Element_off$40 = function $$off(name, sel, block) {
      var self = this;

      
      
      if (block == null) {
        block = nil;
      };
      
      if (sel == null) {
        return self.off(name);
      }
      else if (block === nil) {
        return self.off(name, sel.$$jqwrap);
      }
      else {
        return self.off(name, sel, block.$$jqwrap);
      }
    ;
    }, $Element_off$40.$$arity = -3);
    
    Opal.def(self, '$serialize_array', $Element_serialize_array$41 = function $$serialize_array() {
      var $$42, self = this;

      return $send((self.serializeArray()), 'map', [], ($$42 = function(e){var self = $$42.$$s == null ? this : $$42.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        return $$($nesting, 'Hash').$new(e);}, $$42.$$s = self, $$42.$$arity = 1, $$42))
    }, $Element_serialize_array$41.$$arity = 0);
    $alias(self, "size", "length");
    
    Opal.def(self, '$value', $Element_value$43 = function $$value() {
      var self = this, $ret_or_2 = nil;

      if ($truthy(($ret_or_2 = self.val()))) {
        return $ret_or_2
      } else {
        return ""
      }
    }, $Element_value$43.$$arity = 0);
    
    Opal.def(self, '$height', $Element_height$44 = function $$height() {
      var self = this, $ret_or_3 = nil;

      if ($truthy(($ret_or_3 = self.height()))) {
        return $ret_or_3
      } else {
        return nil
      }
    }, $Element_height$44.$$arity = 0);
    
    Opal.def(self, '$width', $Element_width$45 = function $$width() {
      var self = this, $ret_or_4 = nil;

      if ($truthy(($ret_or_4 = self.width()))) {
        return $ret_or_4
      } else {
        return nil
      }
    }, $Element_width$45.$$arity = 0);
    
    Opal.def(self, '$position', $Element_position$46 = function $$position() {
      var self = this;

      return self.$Native(self.position())
    }, $Element_position$46.$$arity = 0);
    
    Opal.def(self, '$==', $Element_$eq_eq$47 = function(other) {
      var self = this;

      return self.is(other);
    }, $Element_$eq_eq$47.$$arity = 1);
    
    Opal.def(self, '$respond_to_missing?', $Element_respond_to_missing$ques$48 = function(name, _) {
      var $iter = $Element_respond_to_missing$ques$48.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Element_respond_to_missing$ques$48.$$p = null;
      
      var method = self[name];
      if (typeof(method) === 'function') {
        return true;
      } else {
        return $send2(self, $find_super(self, 'respond_to_missing?', $Element_respond_to_missing$ques$48, false, true), 'respond_to_missing?', [name, _], $iter);
      }
    
    }, $Element_respond_to_missing$ques$48.$$arity = 2);
    return (Opal.def(self, '$method_missing', $Element_method_missing$49 = function $$method_missing(name, $a) {
      var $iter = $Element_method_missing$49.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Element_method_missing$49.$$p = null;
      
      
      if ($iter) $Element_method_missing$49.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      if ((block !== nil)) {
        args['$<<'](block)};
      
      var method = self[name];
      if (typeof(method) === 'function') {
        return method.apply(self, args.$to_n());
      } else {
        return $send2(self, $find_super(self, 'method_missing', $Element_method_missing$49, false, true), 'method_missing', [name].concat(Opal.to_a(args)), $iter);
      }
    ;
    }, $Element_method_missing$49.$$arity = -2), nil) && 'method_missing';
  })($nesting[0], $$($nesting, 'JQUERY_CLASS').$to_n(), $nesting);
};

Opal.modules["opal/jquery/window"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$find', '$on', '$element', '$to_proc', '$off', '$trigger', '$new']);
  
  self.$require("opal/jquery/element");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Window');

      var $nesting = [self].concat($parent_nesting), $a, $b, $Window_element$1, $Window_on$2, $Window_off$3, $Window_trigger$4;

      self.$$prototype.element = nil;
      
      self.$include((function() {if ($truthy((($b = $$($nesting, 'Native', 'skip_raise')) && ($a = $$$($b, 'Wrapper', 'skip_raise')) ? 'constant' : nil))) {
        return $$$($$($nesting, 'Native'), 'Wrapper')
      } else {
        return $$($nesting, 'Native')
      }; return nil; })());
      
      Opal.def(self, '$element', $Window_element$1 = function $$element() {
        var self = this, $ret_or_1 = nil;

        return (self.element = (function() {if ($truthy(($ret_or_1 = self.element))) {
          return $ret_or_1
        } else {
          return $$($nesting, 'Element').$find(window)
        }; return nil; })())
      }, $Window_element$1.$$arity = 0);
      
      Opal.def(self, '$on', $Window_on$2 = function $$on($a) {
        var $iter = $Window_on$2.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $Window_on$2.$$p = null;
        
        
        if ($iter) $Window_on$2.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return $send(self.$element(), 'on', Opal.to_a(args), block.$to_proc());
      }, $Window_on$2.$$arity = -1);
      
      Opal.def(self, '$off', $Window_off$3 = function $$off($a) {
        var $iter = $Window_off$3.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $Window_off$3.$$p = null;
        
        
        if ($iter) $Window_off$3.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return $send(self.$element(), 'off', Opal.to_a(args), block.$to_proc());
      }, $Window_off$3.$$arity = -1);
      return (Opal.def(self, '$trigger', $Window_trigger$4 = function $$trigger($a) {
        var $post_args, args, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return $send(self.$element(), 'trigger', Opal.to_a(args));
      }, $Window_trigger$4.$$arity = -1), nil) && 'trigger';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  Opal.const_set($nesting[0], 'Window', $$$($$($nesting, 'Browser'), 'Window').$new(window));
  return ($gvars.window = $$($nesting, 'Window'));
};

Opal.modules["opal/jquery/document"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $class_variable_set = Opal.class_variable_set, $truthy = Opal.truthy, $class_variable_get = Opal.class_variable_get, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$to_n', '$call', '$new', '$ready?', '$resolve', '$module_function', '$find', '$extend']);
  
  self.$require("opal/jquery/constants");
  self.$require("opal/jquery/element");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DocumentMethods');

      var $nesting = [self].concat($parent_nesting), $DocumentMethods_ready$ques$1, $DocumentMethods_ready$2, $DocumentMethods$4, $DocumentMethods_title$5, $DocumentMethods_title$eq$6, $DocumentMethods_head$7, $DocumentMethods_body$8;

      
      $class_variable_set($nesting[0], '@@__isReady', false);
      var $ = $$($nesting, 'JQUERY_SELECTOR').$to_n();
      
      Opal.def(self, '$ready?', $DocumentMethods_ready$ques$1 = function() {
        var $iter = $DocumentMethods_ready$ques$1.$$p, block = $iter || nil, self = this;

        if ($iter) $DocumentMethods_ready$ques$1.$$p = null;
        
        
        if ($iter) $DocumentMethods_ready$ques$1.$$p = null;;
        if ((block !== nil)) {
          if ($truthy($class_variable_get($nesting[0], '@@__isReady', false))) {
            return block.$call()
          } else {
            return $(block)
          }
        } else {
          return nil
        };
      }, $DocumentMethods_ready$ques$1.$$arity = 0);
      
      Opal.def(self, '$ready', $DocumentMethods_ready$2 = function $$ready() {
        var $$3, self = this, promise = nil;

        
        promise = $$($nesting, 'Promise').$new();
        $send($$($nesting, 'Document'), 'ready?', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;

          return promise.$resolve()}, $$3.$$s = self, $$3.$$arity = 0, $$3));
        return promise;
      }, $DocumentMethods_ready$2.$$arity = 0);
      self.$module_function("ready?");
      $send(self, 'ready?', [], ($DocumentMethods$4 = function(){var self = $DocumentMethods$4.$$s == null ? this : $DocumentMethods$4.$$s;

        return $class_variable_set($nesting[0], '@@__isReady', true)}, $DocumentMethods$4.$$s = self, $DocumentMethods$4.$$arity = 0, $DocumentMethods$4));
      
      Opal.def(self, '$title', $DocumentMethods_title$5 = function $$title() {
        var self = this;

        return document.title;
      }, $DocumentMethods_title$5.$$arity = 0);
      
      Opal.def(self, '$title=', $DocumentMethods_title$eq$6 = function(title) {
        var self = this;

        return document.title = title;
      }, $DocumentMethods_title$eq$6.$$arity = 1);
      
      Opal.def(self, '$head', $DocumentMethods_head$7 = function $$head() {
        var self = this;

        return $$($nesting, 'Element').$find(document.head)
      }, $DocumentMethods_head$7.$$arity = 0);
      return (Opal.def(self, '$body', $DocumentMethods_body$8 = function $$body() {
        var self = this;

        return $$($nesting, 'Element').$find(document.body)
      }, $DocumentMethods_body$8.$$arity = 0), nil) && 'body';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  Opal.const_set($nesting[0], 'Document', $$($nesting, 'Element').$find(document));
  $$($nesting, 'Document').$extend($$$($$($nesting, 'Browser'), 'DocumentMethods'));
  return ($gvars.document = $$($nesting, 'Document'));
};

Opal.modules["opal/jquery/event"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $alias = Opal.alias;

  Opal.add_stubs(['$require', '$to_n', '$stop', '$prevent']);
  
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Event');

    var $nesting = [self].concat($parent_nesting), $Event_initialize$1, $Event_to_n$2, $Event_$$$3, $Event_type$4, $Event_element$5, $Event_target$6, $Event_prevented$ques$7, $Event_prevent$8, $Event_stopped$ques$9, $Event_stop$10, $Event_stop_immediate$11, $Event_kill$12, $Event_page_x$13, $Event_page_y$14, $Event_touch_x$15, $Event_touch_y$16, $Event_ctrl_key$17, $Event_meta_key$18, $Event_alt_key$19, $Event_shift_key$20, $Event_key_code$21, $Event_which$22;

    self.$$prototype["native"] = nil;
    
    var $ = $$($nesting, 'JQUERY_SELECTOR').$to_n();
    
    Opal.def(self, '$initialize', $Event_initialize$1 = function $$initialize(native$) {
      var self = this;

      return (self["native"] = native$)
    }, $Event_initialize$1.$$arity = 1);
    
    Opal.def(self, '$to_n', $Event_to_n$2 = function $$to_n() {
      var self = this;

      return self["native"]
    }, $Event_to_n$2.$$arity = 0);
    
    Opal.def(self, '$[]', $Event_$$$3 = function(name) {
      var self = this;

      return self["native"][name]
    }, $Event_$$$3.$$arity = 1);
    
    Opal.def(self, '$type', $Event_type$4 = function $$type() {
      var self = this;

      return self["native"].type
    }, $Event_type$4.$$arity = 0);
    
    Opal.def(self, '$element', $Event_element$5 = function $$element() {
      var self = this;

      return $(self["native"].currentTarget)
    }, $Event_element$5.$$arity = 0);
    $alias(self, "current_target", "element");
    
    Opal.def(self, '$target', $Event_target$6 = function $$target() {
      var self = this;

      return $(self["native"].target)
    }, $Event_target$6.$$arity = 0);
    
    Opal.def(self, '$prevented?', $Event_prevented$ques$7 = function() {
      var self = this;

      return self["native"].isDefaultPrevented()
    }, $Event_prevented$ques$7.$$arity = 0);
    
    Opal.def(self, '$prevent', $Event_prevent$8 = function $$prevent() {
      var self = this;

      return self["native"].preventDefault()
    }, $Event_prevent$8.$$arity = 0);
    
    Opal.def(self, '$stopped?', $Event_stopped$ques$9 = function() {
      var self = this;

      return self["native"].isPropagationStopped()
    }, $Event_stopped$ques$9.$$arity = 0);
    
    Opal.def(self, '$stop', $Event_stop$10 = function $$stop() {
      var self = this;

      return self["native"].stopPropagation()
    }, $Event_stop$10.$$arity = 0);
    
    Opal.def(self, '$stop_immediate', $Event_stop_immediate$11 = function $$stop_immediate() {
      var self = this;

      return self["native"].stopImmediatePropagation()
    }, $Event_stop_immediate$11.$$arity = 0);
    
    Opal.def(self, '$kill', $Event_kill$12 = function $$kill() {
      var self = this;

      
      self.$stop();
      return self.$prevent();
    }, $Event_kill$12.$$arity = 0);
    
    Opal.def(self, '$page_x', $Event_page_x$13 = function $$page_x() {
      var self = this;

      return self["native"].pageX
    }, $Event_page_x$13.$$arity = 0);
    
    Opal.def(self, '$page_y', $Event_page_y$14 = function $$page_y() {
      var self = this;

      return self["native"].pageY
    }, $Event_page_y$14.$$arity = 0);
    
    Opal.def(self, '$touch_x', $Event_touch_x$15 = function $$touch_x() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageX
    }, $Event_touch_x$15.$$arity = 0);
    
    Opal.def(self, '$touch_y', $Event_touch_y$16 = function $$touch_y() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageY
    }, $Event_touch_y$16.$$arity = 0);
    
    Opal.def(self, '$ctrl_key', $Event_ctrl_key$17 = function $$ctrl_key() {
      var self = this;

      return self["native"].ctrlKey
    }, $Event_ctrl_key$17.$$arity = 0);
    
    Opal.def(self, '$meta_key', $Event_meta_key$18 = function $$meta_key() {
      var self = this;

      return self["native"].metaKey
    }, $Event_meta_key$18.$$arity = 0);
    
    Opal.def(self, '$alt_key', $Event_alt_key$19 = function $$alt_key() {
      var self = this;

      return self["native"].altKey
    }, $Event_alt_key$19.$$arity = 0);
    
    Opal.def(self, '$shift_key', $Event_shift_key$20 = function $$shift_key() {
      var self = this;

      return self["native"].shiftKey
    }, $Event_shift_key$20.$$arity = 0);
    
    Opal.def(self, '$key_code', $Event_key_code$21 = function $$key_code() {
      var self = this;

      return self["native"].keyCode
    }, $Event_key_code$21.$$arity = 0);
    
    Opal.def(self, '$which', $Event_which$22 = function $$which() {
      var self = this;

      return self["native"].which
    }, $Event_which$22.$$arity = 0);
    $alias(self, "default_prevented?", "prevented?");
    $alias(self, "prevent_default", "prevent");
    $alias(self, "propagation_stopped?", "stopped?");
    $alias(self, "stop_propagation", "stop");
    return $alias(self, "stop_immediate_propagation", "stop_immediate");
  })($nesting[0], null, $nesting);
};

Opal.modules["json"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$new', '$push', '$[]=', '$-', '$[]', '$create_id', '$json_create', '$const_get', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'JSON');

    var $nesting = [self].concat($parent_nesting), $JSON_$$$1, $JSON_parse$2, $JSON_parse$excl$3, $JSON_load$4, $JSON_from_object$5, $JSON_generate$6, $JSON_dump$7, $writer = nil;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'JSONError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParserError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'JSONError'), $nesting);
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise($$$($$($nesting, 'JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'undefined':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (($writer = [k, to_opal(value[k], options)]), $send((hash), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($$($nesting, 'JSON').$create_id())) != nil) {
              return $$$('::', 'Object').$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = ["json_class"];
    $send(self, 'create_id=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.defs(self, '$[]', $JSON_$$$1 = function(value, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      if ($truthy($$($nesting, 'String')['$==='](value))) {
        return self.$parse(value, options)
      } else {
        return self.$generate(value, options)
      };
    }, $JSON_$$$1.$$arity = -2);
    Opal.defs(self, '$parse', $JSON_parse$2 = function $$parse(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    }, $JSON_parse$2.$$arity = -2);
    Opal.defs(self, '$parse!', $JSON_parse$excl$3 = function(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$parse(source, options);
    }, $JSON_parse$excl$3.$$arity = -2);
    Opal.defs(self, '$load', $JSON_load$4 = function $$load(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$from_object($parse(source), options);
    }, $JSON_load$4.$$arity = -2);
    Opal.defs(self, '$from_object', $JSON_from_object$5 = function $$from_object(js_object, options) {
      var self = this, $ret_or_1 = nil, $writer = nil, $ret_or_2 = nil;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      if ($truthy(($ret_or_1 = options['$[]']("object_class")))) {
        $ret_or_1
      } else {
        
        $writer = ["object_class", $$($nesting, 'Hash')];
        $send(options, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      if ($truthy(($ret_or_2 = options['$[]']("array_class")))) {
        $ret_or_2
      } else {
        
        $writer = ["array_class", $$($nesting, 'Array')];
        $send(options, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return to_opal(js_object, options.$$smap);;
    }, $JSON_from_object$5.$$arity = -2);
    Opal.defs(self, '$generate', $JSON_generate$6 = function $$generate(obj, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return obj.$to_json(options);
    }, $JSON_generate$6.$$arity = -2);
    return (Opal.defs(self, '$dump', $JSON_dump$7 = function $$dump(obj, io, limit) {
      var self = this, string = nil;

      
      
      if (io == null) {
        io = nil;
      };
      
      if (limit == null) {
        limit = nil;
      };
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
      } else {
        return string
      };
    }, $JSON_dump$7.$$arity = -2), nil) && 'dump';
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_to_json$8;

    return (Opal.def(self, '$to_json', $Object_to_json$8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, $Object_to_json$8.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_to_json$9;

    return (Opal.def(self, '$to_json', $Enumerable_to_json$9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, $Enumerable_to_json$9.$$arity = 0), nil) && 'to_json'
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_to_json$10;

    return (Opal.def(self, '$to_json', $Array_to_json$10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(',') + ']';
    
    }, $Array_to_json$10.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean_to_json$11;

    return (Opal.def(self, '$to_json', $Boolean_to_json$11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, $Boolean_to_json$11.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_to_json$12;

    return (Opal.def(self, '$to_json', $Hash_to_json$12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(',') + '}';
    
    }, $Hash_to_json$12.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_to_json$13;

    return (Opal.def(self, '$to_json', $NilClass_to_json$13 = function $$to_json() {
      var self = this;

      return "null"
    }, $NilClass_to_json$13.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_to_json$14;

    return (Opal.def(self, '$to_json', $Numeric_to_json$14 = function $$to_json() {
      var self = this;

      return self.toString();
    }, $Numeric_to_json$14.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_json$15;

    return (Opal.def(self, '$to_json', $String_to_json$15 = function $$to_json() {
      var self = this;

      return JSON.stringify(self);
    }, $String_to_json$15.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_to_json$16;

    return (Opal.def(self, '$to_json', $Time_to_json$16 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, $Time_to_json$16.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $Date_to_json$17, $Date_as_json$18;

    
    
    Opal.def(self, '$to_json', $Date_to_json$17 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, $Date_to_json$17.$$arity = 0);
    return (Opal.def(self, '$as_json', $Date_as_json$18 = function $$as_json() {
      var self = this;

      return self.$to_s()
    }, $Date_as_json$18.$$arity = 0), nil) && 'as_json';
  })($nesting[0], null, $nesting);
};

Opal.modules["promise"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$key?', '$keys', '$!=', '$==', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$!', '$error', '$include?', '$action', '$realized?', '$raise', '$^', '$call', '$resolve!', '$exception!', '$any?', '$each', '$reject!', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$trace', '$class', '$object_id', '$+', '$inspect', '$rescue', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$proc', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$wait', '$map', '$reduce', '$try', '$tap', '$all?', '$find']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Promise');

    var $nesting = [self].concat($parent_nesting), $Promise_value$1, $Promise_error$2, $Promise_when$3, $Promise_initialize$4, $Promise_value$5, $Promise_act$ques$6, $Promise_action$7, $Promise_exception$ques$8, $Promise_realized$ques$9, $Promise_resolved$ques$10, $Promise_rejected$ques$11, $Promise_$$12, $Promise_$lt$lt$13, $Promise_$gt$gt$14, $Promise_resolve$15, $Promise_resolve$excl$16, $Promise_reject$18, $Promise_reject$excl$19, $Promise_exception$excl$21, $Promise_then$22, $Promise_then$excl$23, $Promise_fail$24, $Promise_fail$excl$25, $Promise_always$26, $Promise_always$excl$27, $Promise_trace$28, $Promise_trace$excl$29, $Promise_there_can_be_only_one$excl$30, $Promise_inspect$31, $Promise_to_v2$32;

    self.$$prototype.value = self.$$prototype.action = self.$$prototype.exception = self.$$prototype.realized = self.$$prototype.next = self.$$prototype.delayed = self.$$prototype.error = self.$$prototype.prev = nil;
    
    Opal.defs(self, '$value', $Promise_value$1 = function $$value(value) {
      var self = this;

      return self.$new().$resolve(value)
    }, $Promise_value$1.$$arity = 1);
    Opal.defs(self, '$error', $Promise_error$2 = function $$error(value) {
      var self = this;

      return self.$new().$reject(value)
    }, $Promise_error$2.$$arity = 1);
    Opal.defs(self, '$when', $Promise_when$3 = function $$when($a) {
      var $post_args, promises, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      promises = $post_args;;
      return $$($nesting, 'When').$new(promises);
    }, $Promise_when$3.$$arity = -1);
    self.$attr_reader("error", "prev", "next");
    
    Opal.def(self, '$initialize', $Promise_initialize$4 = function $$initialize(action) {
      var self = this;

      
      
      if (action == null) {
        action = $hash2([], {});
      };
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return (self.next = []);
    }, $Promise_initialize$4.$$arity = -1);
    
    Opal.def(self, '$value', $Promise_value$5 = function $$value() {
      var self = this;

      if ($truthy($$($nesting, 'Promise')['$==='](self.value))) {
        return self.value.$value()
      } else {
        return self.value
      }
    }, $Promise_value$5.$$arity = 0);
    
    Opal.def(self, '$act?', $Promise_act$ques$6 = function() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.action['$key?']("success")))) {
        return $ret_or_1
      } else {
        return self.action['$key?']("always")
      }
    }, $Promise_act$ques$6.$$arity = 0);
    
    Opal.def(self, '$action', $Promise_action$7 = function $$action() {
      var self = this;

      return self.action.$keys()
    }, $Promise_action$7.$$arity = 0);
    
    Opal.def(self, '$exception?', $Promise_exception$ques$8 = function() {
      var self = this;

      return self.exception
    }, $Promise_exception$ques$8.$$arity = 0);
    
    Opal.def(self, '$realized?', $Promise_realized$ques$9 = function() {
      var self = this;

      return self.realized['$!='](false)
    }, $Promise_realized$ques$9.$$arity = 0);
    
    Opal.def(self, '$resolved?', $Promise_resolved$ques$10 = function() {
      var self = this;

      return self.realized['$==']("resolve")
    }, $Promise_resolved$ques$10.$$arity = 0);
    
    Opal.def(self, '$rejected?', $Promise_rejected$ques$11 = function() {
      var self = this;

      return self.realized['$==']("reject")
    }, $Promise_rejected$ques$11.$$arity = 0);
    
    Opal.def(self, '$^', $Promise_$$12 = function(promise) {
      var self = this;

      
      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, $Promise_$$12.$$arity = 1);
    
    Opal.def(self, '$<<', $Promise_$lt$lt$13 = function(promise) {
      var self = this;

      
      self.prev = promise;
      return self;
    }, $Promise_$lt$lt$13.$$arity = 1);
    
    Opal.def(self, '$>>', $Promise_$gt$gt$14 = function(promise) {
      var self = this, $ret_or_2 = nil;

      
      self.next['$<<'](promise);
      if ($truthy(self['$exception?']())) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ($truthy(self['$resolved?']())) {
        promise.$resolve((function() {if ($truthy(self.delayed)) {
          return self.delayed['$[]'](0)
        } else {
          return self.$value()
        }; return nil; })())
      } else if ($truthy(self['$rejected?']())) {
        if ($truthy((function() {if ($truthy(($ret_or_2 = self.action['$key?']("failure")['$!']()))) {
          return $ret_or_2
        } else {
          return $$($nesting, 'Promise')['$===']((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
          } else {
            return self.error
          }; return nil; })())
        }; return nil; })())) {
          promise.$reject((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
          } else {
            return self.$error()
          }; return nil; })())
        } else if ($truthy(promise.$action()['$include?']("always"))) {
          promise.$reject((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
          } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    }, $Promise_$gt$gt$14.$$arity = 1);
    
    Opal.def(self, '$resolve', $Promise_resolve$15 = function $$resolve(value) {
      var self = this, block = nil, $ret_or_3 = nil, e = nil;

      
      
      if (value == null) {
        value = nil;
      };
      if ($truthy(self['$realized?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "the promise has already been realized")};
      if ($truthy($$($nesting, 'Promise')['$==='](value))) {
        return value['$<<'](self.prev)['$^'](self)};
      
      try {
        
        block = (function() {if ($truthy(($ret_or_3 = self.action['$[]']("success")))) {
          return $ret_or_3
        } else {
          return self.action['$[]']("always")
        }; return nil; })();
        if ($truthy(block)) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      };;
      return self;
    }, $Promise_resolve$15.$$arity = -1);
    
    Opal.def(self, '$resolve!', $Promise_resolve$excl$16 = function(value) {
      var $$17, self = this;

      
      self.realized = "resolve";
      self.value = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], ($$17 = function(p){var self = $$17.$$s == null ? this : $$17.$$s;

          
          
          if (p == null) {
            p = nil;
          };
          return p.$resolve(value);}, $$17.$$s = self, $$17.$$arity = 1, $$17))
      } else {
        return (self.delayed = [value])
      };
    }, $Promise_resolve$excl$16.$$arity = 1);
    
    Opal.def(self, '$reject', $Promise_reject$18 = function $$reject(value) {
      var self = this, block = nil, $ret_or_4 = nil, e = nil;

      
      
      if (value == null) {
        value = nil;
      };
      if ($truthy(self['$realized?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "the promise has already been realized")};
      if ($truthy($$($nesting, 'Promise')['$==='](value))) {
        return value['$<<'](self.prev)['$^'](self)};
      
      try {
        
        block = (function() {if ($truthy(($ret_or_4 = self.action['$[]']("failure")))) {
          return $ret_or_4
        } else {
          return self.action['$[]']("always")
        }; return nil; })();
        if ($truthy(block)) {
          value = block.$call(value)};
        if ($truthy(self.action['$key?']("always"))) {
          self['$resolve!'](value)
        } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      };;
      return self;
    }, $Promise_reject$18.$$arity = -1);
    
    Opal.def(self, '$reject!', $Promise_reject$excl$19 = function(value) {
      var $$20, self = this;

      
      self.realized = "reject";
      self.error = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], ($$20 = function(p){var self = $$20.$$s == null ? this : $$20.$$s;

          
          
          if (p == null) {
            p = nil;
          };
          return p.$reject(value);}, $$20.$$s = self, $$20.$$arity = 1, $$20))
      } else {
        return (self.delayed = [value])
      };
    }, $Promise_reject$excl$19.$$arity = 1);
    
    Opal.def(self, '$exception!', $Promise_exception$excl$21 = function(error) {
      var self = this;

      
      self.exception = true;
      return self['$reject!'](error);
    }, $Promise_exception$excl$21.$$arity = 1);
    
    Opal.def(self, '$then', $Promise_then$22 = function $$then() {
      var $iter = $Promise_then$22.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_then$22.$$p = null;
      
      
      if ($iter) $Promise_then$22.$$p = null;;
      return self['$^']($$($nesting, 'Promise').$new($hash2(["success"], {"success": block})));
    }, $Promise_then$22.$$arity = 0);
    
    Opal.def(self, '$then!', $Promise_then$excl$23 = function() {
      var $iter = $Promise_then$excl$23.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_then$excl$23.$$p = null;
      
      
      if ($iter) $Promise_then$excl$23.$$p = null;;
      self['$there_can_be_only_one!']();
      return $send(self, 'then', [], block.$to_proc());
    }, $Promise_then$excl$23.$$arity = 0);
    $alias(self, "do", "then");
    $alias(self, "do!", "then!");
    
    Opal.def(self, '$fail', $Promise_fail$24 = function $$fail() {
      var $iter = $Promise_fail$24.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_fail$24.$$p = null;
      
      
      if ($iter) $Promise_fail$24.$$p = null;;
      return self['$^']($$($nesting, 'Promise').$new($hash2(["failure"], {"failure": block})));
    }, $Promise_fail$24.$$arity = 0);
    
    Opal.def(self, '$fail!', $Promise_fail$excl$25 = function() {
      var $iter = $Promise_fail$excl$25.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_fail$excl$25.$$p = null;
      
      
      if ($iter) $Promise_fail$excl$25.$$p = null;;
      self['$there_can_be_only_one!']();
      return $send(self, 'fail', [], block.$to_proc());
    }, $Promise_fail$excl$25.$$arity = 0);
    $alias(self, "rescue", "fail");
    $alias(self, "catch", "fail");
    $alias(self, "rescue!", "fail!");
    $alias(self, "catch!", "fail!");
    
    Opal.def(self, '$always', $Promise_always$26 = function $$always() {
      var $iter = $Promise_always$26.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_always$26.$$p = null;
      
      
      if ($iter) $Promise_always$26.$$p = null;;
      return self['$^']($$($nesting, 'Promise').$new($hash2(["always"], {"always": block})));
    }, $Promise_always$26.$$arity = 0);
    
    Opal.def(self, '$always!', $Promise_always$excl$27 = function() {
      var $iter = $Promise_always$excl$27.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_always$excl$27.$$p = null;
      
      
      if ($iter) $Promise_always$excl$27.$$p = null;;
      self['$there_can_be_only_one!']();
      return $send(self, 'always', [], block.$to_proc());
    }, $Promise_always$excl$27.$$arity = 0);
    $alias(self, "finally", "always");
    $alias(self, "ensure", "always");
    $alias(self, "finally!", "always!");
    $alias(self, "ensure!", "always!");
    
    Opal.def(self, '$trace', $Promise_trace$28 = function $$trace(depth) {
      var $iter = $Promise_trace$28.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_trace$28.$$p = null;
      
      
      if ($iter) $Promise_trace$28.$$p = null;;
      
      if (depth == null) {
        depth = nil;
      };
      return self['$^']($$($nesting, 'Trace').$new(depth, block));
    }, $Promise_trace$28.$$arity = -1);
    
    Opal.def(self, '$trace!', $Promise_trace$excl$29 = function($a) {
      var $iter = $Promise_trace$excl$29.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Promise_trace$excl$29.$$p = null;
      
      
      if ($iter) $Promise_trace$excl$29.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      self['$there_can_be_only_one!']();
      return $send(self, 'trace', Opal.to_a(args), block.$to_proc());
    }, $Promise_trace$excl$29.$$arity = -1);
    
    Opal.def(self, '$there_can_be_only_one!', $Promise_there_can_be_only_one$excl$30 = function() {
      var self = this;

      if ($truthy(self.next['$any?']())) {
        return self.$raise($$($nesting, 'ArgumentError'), "a promise has already been chained")
      } else {
        return nil
      }
    }, $Promise_there_can_be_only_one$excl$30.$$arity = 0);
    
    Opal.def(self, '$inspect', $Promise_inspect$31 = function $$inspect() {
      var self = this, result = nil, $ret_or_5 = nil;

      
      result = "" + "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ($truthy(self.next['$any?']())) {
        result = $rb_plus(result, "" + " >> " + (self.next.$inspect()))};
      result = $rb_plus(result, (function() {if ($truthy(self['$realized?']())) {
        return "" + ": " + ((function() {if ($truthy(($ret_or_5 = self.value))) {
          return $ret_or_5
        } else {
          return self.error
        }; return nil; })().$inspect()) + ">"
      } else {
        return ">"
      }; return nil; })());
      return result;
    }, $Promise_inspect$31.$$arity = 0);
    $alias(self, "to_v1", "itself");
    
    Opal.def(self, '$to_v2', $Promise_to_v2$32 = function $$to_v2() {
      var $$33, $$34, self = this, v2 = nil;

      
      v2 = $$($nesting, 'PromiseV2').$new();
      $send($send(self, 'then', [], ($$33 = function(i){var self = $$33.$$s == null ? this : $$33.$$s;

        
        
        if (i == null) {
          i = nil;
        };
        return v2.$resolve(i);}, $$33.$$s = self, $$33.$$arity = 1, $$33)), 'rescue', [], ($$34 = function(i){var self = $$34.$$s == null ? this : $$34.$$s;

        
        
        if (i == null) {
          i = nil;
        };
        return v2.$reject(i);}, $$34.$$s = self, $$34.$$arity = 1, $$34));
      return v2;
    }, $Promise_to_v2$32.$$arity = 0);
    $alias(self, "to_n", "to_v2");
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Trace');

      var $nesting = [self].concat($parent_nesting), $Trace_it$35, $Trace_initialize$36;

      
      Opal.defs(self, '$it', $Trace_it$35 = function $$it(promise) {
        var self = this, current = nil, $ret_or_6 = nil, prev = nil;

        
        current = [];
        if ($truthy((function() {if ($truthy(($ret_or_6 = promise['$act?']()))) {
          return $ret_or_6
        } else {
          return promise.$prev()['$nil?']()
        }; return nil; })())) {
          current.$push(promise.$value())};
        prev = promise.$prev();
        if ($truthy(prev)) {
          return current.$concat(self.$it(prev))
        } else {
          return current
        };
      }, $Trace_it$35.$$arity = 1);
      return (Opal.def(self, '$initialize', $Trace_initialize$36 = function $$initialize(depth, block) {
        var $$37, $iter = $Trace_initialize$36.$$p, $yield = $iter || nil, self = this;

        if ($iter) $Trace_initialize$36.$$p = null;
        
        self.depth = depth;
        return $send2(self, $find_super(self, 'initialize', $Trace_initialize$36, false, true), 'initialize', [$hash2(["success"], {"success": $send(self, 'proc', [], ($$37 = function(){var self = $$37.$$s == null ? this : $$37.$$s, trace = nil, $ret_or_7 = nil;

          
          trace = $$($nesting, 'Trace').$it(self).$reverse();
          trace.$pop();
          if ($truthy((function() {if ($truthy(($ret_or_7 = depth))) {
            return $rb_le(depth, trace.$length())
          } else {
            return $ret_or_7
          }; return nil; })())) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return $send(block, 'call', Opal.to_a(trace));}, $$37.$$s = self, $$37.$$arity = 0, $$37))})], null);
      }, $Trace_initialize$36.$$arity = 2), nil) && 'initialize';
    })($nesting[0], self, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'When');

      var $nesting = [self].concat($parent_nesting), $When_initialize$38, $When_each$40, $When_collect$42, $When_inject$44, $When_wait$46, $When_$gt$gt$48, $When_try$50;

      self.$$prototype.wait = nil;
      
      
      Opal.def(self, '$initialize', $When_initialize$38 = function $$initialize(promises) {
        var $$39, $iter = $When_initialize$38.$$p, $yield = $iter || nil, self = this;

        if ($iter) $When_initialize$38.$$p = null;
        
        
        if (promises == null) {
          promises = [];
        };
        $send2(self, $find_super(self, 'initialize', $When_initialize$38, false, true), 'initialize', [], null);
        self.wait = [];
        return $send(promises, 'each', [], ($$39 = function(promise){var self = $$39.$$s == null ? this : $$39.$$s;

          
          
          if (promise == null) {
            promise = nil;
          };
          return self.$wait(promise);}, $$39.$$s = self, $$39.$$arity = 1, $$39));
      }, $When_initialize$38.$$arity = -1);
      
      Opal.def(self, '$each', $When_each$40 = function $$each() {
        var $iter = $When_each$40.$$p, block = $iter || nil, $$41, self = this;

        if ($iter) $When_each$40.$$p = null;
        
        
        if ($iter) $When_each$40.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], ($$41 = function(values){var self = $$41.$$s == null ? this : $$41.$$s;

          
          
          if (values == null) {
            values = nil;
          };
          return $send(values, 'each', [], block.$to_proc());}, $$41.$$s = self, $$41.$$arity = 1, $$41));
      }, $When_each$40.$$arity = 0);
      
      Opal.def(self, '$collect', $When_collect$42 = function $$collect() {
        var $iter = $When_collect$42.$$p, block = $iter || nil, $$43, self = this;

        if ($iter) $When_collect$42.$$p = null;
        
        
        if ($iter) $When_collect$42.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], ($$43 = function(values){var self = $$43.$$s == null ? this : $$43.$$s;

          
          
          if (values == null) {
            values = nil;
          };
          return $$($nesting, 'When').$new($send(values, 'map', [], block.$to_proc()));}, $$43.$$s = self, $$43.$$arity = 1, $$43));
      }, $When_collect$42.$$arity = 0);
      
      Opal.def(self, '$inject', $When_inject$44 = function $$inject($a) {
        var $iter = $When_inject$44.$$p, block = $iter || nil, $post_args, args, $$45, self = this;

        if ($iter) $When_inject$44.$$p = null;
        
        
        if ($iter) $When_inject$44.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return $send(self, 'then', [], ($$45 = function(values){var self = $$45.$$s == null ? this : $$45.$$s;

          
          
          if (values == null) {
            values = nil;
          };
          return $send(values, 'reduce', Opal.to_a(args), block.$to_proc());}, $$45.$$s = self, $$45.$$arity = 1, $$45));
      }, $When_inject$44.$$arity = -1);
      $alias(self, "map", "collect");
      $alias(self, "reduce", "inject");
      
      Opal.def(self, '$wait', $When_wait$46 = function $$wait(promise) {
        var $$47, self = this;

        
        if ($truthy($$($nesting, 'Promise')['$==='](promise))) {
        } else {
          promise = $$($nesting, 'Promise').$value(promise)
        };
        if ($truthy(promise['$act?']())) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        $send(promise, 'always', [], ($$47 = function(){var self = $$47.$$s == null ? this : $$47.$$s;
          if (self.next == null) self.next = nil;

          if ($truthy(self.next['$any?']())) {
            return self.$try()
          } else {
            return nil
          }}, $$47.$$s = self, $$47.$$arity = 0, $$47));
        return self;
      }, $When_wait$46.$$arity = 1);
      $alias(self, "and", "wait");
      
      Opal.def(self, '$>>', $When_$gt$gt$48 = function($a) {
        var $post_args, $rest_arg, $$49, $iter = $When_$gt$gt$48.$$p, $yield = $iter || nil, self = this;

        if ($iter) $When_$gt$gt$48.$$p = null;
        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        $rest_arg = $post_args;;
        return $send($send2(self, $find_super(self, '>>', $When_$gt$gt$48, false, true), '>>', Opal.to_a($rest_arg), $iter), 'tap', [], ($$49 = function(){var self = $$49.$$s == null ? this : $$49.$$s;

          return self.$try()}, $$49.$$s = self, $$49.$$arity = 0, $$49));
      }, $When_$gt$gt$48.$$arity = -1);
      return (Opal.def(self, '$try', $When_try$50 = function() {
        var self = this, promise = nil;

        if ($truthy($send(self.wait, 'all?', [], "realized?".$to_proc()))) {
          
          promise = $send(self.wait, 'find', [], "rejected?".$to_proc());
          if ($truthy(promise)) {
            return self.$reject(promise.$error())
          } else {
            return self.$resolve($send(self.wait, 'map', [], "value".$to_proc()))
          };
        } else {
          return nil
        }
      }, $When_try$50.$$arity = 0), nil) && 'try';
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting);
  return Opal.const_set($nesting[0], 'PromiseV1', $$($nesting, 'Promise'));
};

Opal.modules["opal/jquery/http"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var $$3, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$to_n', '$each', '$define_singleton_method', '$send', '$new', '$define_method', '$attr_reader', '$delete', '$update', '$upcase', '$succeed', '$fail', '$promise', '$parse', '$private', '$tap', '$proc', '$ok?', '$resolve', '$reject', '$from_object', '$call']);
  
  self.$require("json");
  self.$require("native");
  self.$require("promise");
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HTTP');

    var $nesting = [self].concat($parent_nesting), $HTTP$1, $HTTP_setup$5, $HTTP_setup$eq$6, $HTTP_initialize$7, $HTTP_send$8, $HTTP_json$9, $HTTP_ok$ques$10, $HTTP_get_header$11, $HTTP_inspect$12, $HTTP_promise$13, $HTTP_succeed$16, $HTTP_fail$17;

    self.$$prototype.settings = self.$$prototype.payload = self.$$prototype.url = self.$$prototype.method = self.$$prototype.handler = self.$$prototype.json = self.$$prototype.body = self.$$prototype.ok = self.$$prototype.xhr = self.$$prototype.promise = self.$$prototype.status_code = nil;
    
    var $ = $$($nesting, 'JQUERY_SELECTOR').$to_n();
    Opal.const_set($nesting[0], 'ACTIONS', ["get", "post", "put", "delete", "patch", "head"]);
    $send($$($nesting, 'ACTIONS'), 'each', [], ($HTTP$1 = function(action){var self = $HTTP$1.$$s == null ? this : $HTTP$1.$$s, $$2, $$4;

      
      
      if (action == null) {
        action = nil;
      };
      $send(self, 'define_singleton_method', [action], ($$2 = function(url, options){var self = $$2.$$s == null ? this : $$2.$$s, $iter = $$2.$$p, block = $iter || nil;

        
        
        if ($iter) $$2.$$p = null;;
        
        if (url == null) {
          url = nil;
        };
        
        if (options == null) {
          options = $hash2([], {});
        };
        return self.$new().$send(action, url, options, block);}, $$2.$$s = self, $$2.$$arity = -2, $$2));
      return $send(self, 'define_method', [action], ($$4 = function(url, options){var self = $$4.$$s == null ? this : $$4.$$s, $iter = $$4.$$p, block = $iter || nil;

        
        
        if ($iter) $$4.$$p = null;;
        
        if (url == null) {
          url = nil;
        };
        
        if (options == null) {
          options = $hash2([], {});
        };
        return self.$send(action, url, options, block);}, $$4.$$s = self, $$4.$$arity = -2, $$4));}, $HTTP$1.$$s = self, $HTTP$1.$$arity = 1, $HTTP$1));
    Opal.defs(self, '$setup', $HTTP_setup$5 = function $$setup() {
      var self = this;

      return $$($nesting, 'Hash').$new($.ajaxSetup())
    }, $HTTP_setup$5.$$arity = 0);
    Opal.defs(self, '$setup=', $HTTP_setup$eq$6 = function(settings) {
      var self = this;

      return $.ajaxSetup(settings.$to_n())
    }, $HTTP_setup$eq$6.$$arity = 1);
    self.$attr_reader("body", "error_message", "method", "status_code", "url", "xhr");
    
    Opal.def(self, '$initialize', $HTTP_initialize$7 = function $$initialize() {
      var self = this;

      
      self.settings = $hash2([], {});
      return (self.ok = true);
    }, $HTTP_initialize$7.$$arity = 0);
    
    Opal.def(self, '$send', $HTTP_send$8 = function $$send(method, url, options, block) {
      var $a, self = this, settings = nil, payload = nil;

      
      self.method = method;
      self.url = url;
      self.payload = options.$delete("payload");
      self.handler = block;
      self.settings.$update(options);
      $a = [self.settings.$to_n(), self.payload], (settings = $a[0]), (payload = $a[1]), $a;
      
      if (typeof(payload) === 'string') {
        settings.data = payload;
      }
      else if (payload != nil) {
        settings.data = payload.$to_json();
        settings.contentType = 'application/json';
      }

      settings.url  = self.url;
      settings.type = self.method.$upcase();

      settings.success = function(data, status, xhr) {
        return self.$succeed(data, status, xhr);
      };

      settings.error = function(xhr, status, error) {
        return self.$fail(xhr, status, error);
      };

      $.ajax(settings);
    ;
      if ($truthy(self.handler)) {
        return self
      } else {
        return self.$promise()
      };
    }, $HTTP_send$8.$$arity = 4);
    
    Opal.def(self, '$json', $HTTP_json$9 = function $$json() {
      var self = this, $ret_or_1 = nil;

      return (self.json = (function() {if ($truthy(($ret_or_1 = self.json))) {
        return $ret_or_1
      } else {
        return $$($nesting, 'JSON').$parse(self.body)
      }; return nil; })())
    }, $HTTP_json$9.$$arity = 0);
    
    Opal.def(self, '$ok?', $HTTP_ok$ques$10 = function() {
      var self = this;

      return self.ok
    }, $HTTP_ok$ques$10.$$arity = 0);
    
    Opal.def(self, '$get_header', $HTTP_get_header$11 = function $$get_header(key) {
      var self = this;

      
      var value = self.xhr.getResponseHeader(key);
      return (value === null) ? nil : value;
    
    }, $HTTP_get_header$11.$$arity = 1);
    
    Opal.def(self, '$inspect', $HTTP_inspect$12 = function $$inspect() {
      var self = this;

      return "" + "#<HTTP @url=" + (self.url) + " @method=" + (self.method) + ">"
    }, $HTTP_inspect$12.$$arity = 0);
    self.$private();
    
    Opal.def(self, '$promise', $HTTP_promise$13 = function $$promise() {
      var $$14, self = this;

      
      if ($truthy(self.promise)) {
        return self.promise};
      return (self.promise = $send($$($nesting, 'Promise').$new(), 'tap', [], ($$14 = function(promise){var self = $$14.$$s == null ? this : $$14.$$s, $$15;

        
        
        if (promise == null) {
          promise = nil;
        };
        return (self.handler = $send(self, 'proc', [], ($$15 = function(res){var self = $$15.$$s == null ? this : $$15.$$s;

          
          
          if (res == null) {
            res = nil;
          };
          if ($truthy(res['$ok?']())) {
            return promise.$resolve(res)
          } else {
            return promise.$reject(res)
          };}, $$15.$$s = self, $$15.$$arity = 1, $$15)));}, $$14.$$s = self, $$14.$$arity = 1, $$14)));
    }, $HTTP_promise$13.$$arity = 0);
    
    Opal.def(self, '$succeed', $HTTP_succeed$16 = function $$succeed(data, status, xhr) {
      var self = this;

      
      
      self.body = data;
      self.xhr  = xhr;
      self.status_code = xhr.status;

      if (typeof(data) === 'object') {
        self.json = $$($nesting, 'JSON').$from_object(data);
      }
    ;
      if ($truthy(self.handler)) {
        return self.handler.$call(self)
      } else {
        return nil
      };
    }, $HTTP_succeed$16.$$arity = 3);
    return (Opal.def(self, '$fail', $HTTP_fail$17 = function $$fail(xhr, status, error) {
      var self = this;

      
      
      self.body = xhr.responseText;
      self.xhr = xhr;
      self.status_code = xhr.status;
    ;
      self.ok = false;
      if ($truthy(self.handler)) {
        return self.handler.$call(self)
      } else {
        return nil
      };
    }, $HTTP_fail$17.$$arity = 3), nil) && 'fail';
  })($nesting[0], null, $nesting);
};

Opal.modules["opal/jquery/kernel"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_alert$1;

    return (Opal.def(self, '$alert', $Kernel_alert$1 = function $$alert(msg) {
      var self = this;

      
      alert(msg);
      return nil;
    }, $Kernel_alert$1.$$arity = 1), nil) && 'alert'
  })($nesting[0], $nesting)
};

Opal.modules["opal/jquery"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/jquery/window");
  self.$require("opal/jquery/document");
  self.$require("opal/jquery/element");
  self.$require("opal/jquery/event");
  self.$require("opal/jquery/http");
  return self.$require("opal/jquery/kernel");
};

Opal.modules["opal-jquery"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  return self.$require("opal/jquery")
};

Opal.modules["paggio/utils"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$size', '$min', '$scan', '$gsub', '$proc', '$===', '$merge', '$to_proc', '$merge!']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Utils');

      var $nesting = [self].concat($parent_nesting), $Utils_heredoc$1, $Utils_deep_merge$2, $Utils_deep_merge$excl$4;

      
      Opal.defs(self, '$heredoc', $Utils_heredoc$1 = function $$heredoc(string) {
        var self = this, indent = nil;

        
        indent = (function() { try {
          return string.$scan(/^[ \t]*(?=\S)/).$min().$size()
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
            try {
              return 0
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }})();
        return string.$gsub(Opal.regexp(["^[ \\t]{", indent, "}"]), "");
      }, $Utils_heredoc$1.$$arity = 1);
      Opal.defs(self, '$deep_merge', $Utils_deep_merge$2 = function $$deep_merge(a, b) {
        var $$3, self = this, merger = nil;

        
        merger = $send(self, 'proc', [], ($$3 = function(key, v1, v2){var self = $$3.$$s == null ? this : $$3.$$s, $ret_or_1 = nil;

          
          
          if (key == null) {
            key = nil;
          };
          
          if (v1 == null) {
            v1 = nil;
          };
          
          if (v2 == null) {
            v2 = nil;
          };
          if ($truthy((function() {if ($truthy(($ret_or_1 = $$($nesting, 'Hash')['$==='](v1)))) {
            return $$($nesting, 'Hash')['$==='](v2)
          } else {
            return $ret_or_1
          }; return nil; })())) {
            return $send(v1, 'merge', [v2], merger.$to_proc())
          } else {
            return v2
          };}, $$3.$$s = self, $$3.$$arity = 3, $$3));
        return $send(a, 'merge', [b], merger.$to_proc());
      }, $Utils_deep_merge$2.$$arity = 2);
      return (Opal.defs(self, '$deep_merge!', $Utils_deep_merge$excl$4 = function(a, b) {
        var $$5, self = this, merger = nil;

        
        merger = $send(self, 'proc', [], ($$5 = function(key, v1, v2){var self = $$5.$$s == null ? this : $$5.$$s, $ret_or_2 = nil;

          
          
          if (key == null) {
            key = nil;
          };
          
          if (v1 == null) {
            v1 = nil;
          };
          
          if (v2 == null) {
            v2 = nil;
          };
          if ($truthy((function() {if ($truthy(($ret_or_2 = $$($nesting, 'Hash')['$==='](v1)))) {
            return $$($nesting, 'Hash')['$==='](v2)
          } else {
            return $ret_or_2
          }; return nil; })())) {
            
            $send(v1, 'merge!', [v2], merger.$to_proc());
            return v1;
          } else {
            return v2
          };}, $$5.$$s = self, $$5.$$arity = 3, $$5));
        return $send(a, 'merge!', [b], merger.$to_proc());
      }, $Utils_deep_merge$excl$4.$$arity = 2), nil) && 'deep_merge!';
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/helpers"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$define_method', '$instance_exec', '$to_proc', '$do', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting), $Element_defhelper$1, $Element_defhelper$excl$3;

        
        Opal.defs(self, '$defhelper', $Element_defhelper$1 = function $$defhelper(name) {
          var $iter = $Element_defhelper$1.$$p, block = $iter || nil, $$2, self = this;

          if ($iter) $Element_defhelper$1.$$p = null;
          
          
          if ($iter) $Element_defhelper$1.$$p = null;;
          return $send(self, 'define_method', [name], ($$2 = function($a){var self = $$2.$$s == null ? this : $$2.$$s, $iter = $$2.$$p, body = $iter || nil, $post_args, args;

            
            
            if ($iter) $$2.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $send(self, 'instance_exec', Opal.to_a(args), block.$to_proc());
            if ($truthy(body)) {
              $send(self, 'do', [], body.$to_proc())};
            return self;}, $$2.$$s = self, $$2.$$arity = -1, $$2));
        }, $Element_defhelper$1.$$arity = 1);
        return (Opal.defs(self, '$defhelper!', $Element_defhelper$excl$3 = function(name, attribute) {
          var $$4, self = this;

          
          
          if (attribute == null) {
            attribute = name;
          };
          return $send(self, 'defhelper', ["" + (name) + "!"], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

            
            $writer = [attribute, true];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$4.$$s = self, $$4.$$arity = 0, $$4));
        }, $Element_defhelper$excl$3.$$arity = -2), nil) && 'defhelper!';
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/a"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-', '$defhelper!', '$<<']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'A');

          var $nesting = [self].concat($parent_nesting), $A$1, $A$3;

          
          $send($hash2(["href", "url", "rel", "relative", "target", "type", "lang", "language", "media"], {"href": "href", "url": "href", "rel": "rel", "relative": "rel", "target": "target", "type": "type", "lang": "hreflang", "language": "hreflang", "media": "media"}), 'each', [], ($A$1 = function(name, attribute){var self = $A$1.$$s == null ? this : $A$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (attribute == null) {
              attribute = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $A$1.$$s = self, $A$1.$$arity = 2, $A$1));
          self['$defhelper!']("download");
          self['$defhelper!']("ping");
          return $send(self, 'defhelper', ["text"], ($A$3 = function(string){var self = $A$3.$$s == null ? this : $A$3.$$s;

            
            
            if (string == null) {
              string = nil;
            };
            return self['$<<'](string);}, $A$3.$$s = self, $A$3.$$arity = 1, $A$3));
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/base"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Base');

          var $nesting = [self].concat($parent_nesting), $Base$1;

          return $send($hash2(["href", "url", "target"], {"href": "href", "url": "href", "target": "target"}), 'each', [], ($Base$1 = function(name, attribute){var self = $Base$1.$$s == null ? this : $Base$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (attribute == null) {
              attribute = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Base$1.$$s = self, $Base$1.$$arity = 2, $Base$1))
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/blockquote"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Blockquote');

          var $nesting = [self].concat($parent_nesting), $Blockquote$1;

          return $send(self, 'defhelper', ["cite"], ($Blockquote$1 = function(value){var self = $Blockquote$1.$$s == null ? this : $Blockquote$1.$$s, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

            
            
            if (value == null) {
              value = nil;
            };
            $writer = ["cite", value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $Blockquote$1.$$s = self, $Blockquote$1.$$arity = 1, $Blockquote$1))
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/button"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Button');

          var $nesting = [self].concat($parent_nesting), $Button$1;

          
          $send($hash2(["form", "name", "type", "value", "action", "encoding", "method", "target"], {"form": "form", "name": "name", "type": "type", "value": "value", "action": "formaction", "encoding": "formenctype", "method": "formmethod", "target": "formtarget"}), 'each', [], ($Button$1 = function(name, attributes){var self = $Button$1.$$s == null ? this : $Button$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (attributes == null) {
              attributes = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Button$1.$$s = self, $Button$1.$$arity = 2, $Button$1));
          self['$defhelper!']("autofocus");
          return self['$defhelper!']("disabled");
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/canvas"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Canvas');

          var $nesting = [self].concat($parent_nesting), $Canvas$1;

          return $send($hash2(["width", "height"], {"width": "width", "height": "height"}), 'each', [], ($Canvas$1 = function(name, attribute){var self = $Canvas$1.$$s == null ? this : $Canvas$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (attribute == null) {
              attribute = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Canvas$1.$$s = self, $Canvas$1.$$arity = 2, $Canvas$1))
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/embed"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Embed');

          var $nesting = [self].concat($parent_nesting), $Embed$1;

          return $send($hash2(["type", "height", "width"], {"type": "type", "height": "height", "width": "width"}), 'each', [], ($Embed$1 = function(name, attribute){var self = $Embed$1.$$s == null ? this : $Embed$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (attribute == null) {
              attribute = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Embed$1.$$s = self, $Embed$1.$$arity = 2, $Embed$1))
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/img"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Img');

          var $nesting = [self].concat($parent_nesting), $Img$1, $Img$3;

          
          $send($hash2(["src", "url", "alt", "description", "height", "width", "map"], {"src": "src", "url": "src", "alt": "alt", "description": "alt", "height": "height", "width": "width", "map": "usemap"}), 'each', [], ($Img$1 = function(name, attribute){var self = $Img$1.$$s == null ? this : $Img$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (attribute == null) {
              attribute = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Img$1.$$s = self, $Img$1.$$arity = 2, $Img$1));
          return $send(self, 'defhelper', ["map!"], ($Img$3 = function(){var self = $Img$3.$$s == null ? this : $Img$3.$$s, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

            
            $writer = ["ismap", true];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $Img$3.$$s = self, $Img$3.$$arity = 0, $Img$3));
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/input"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Input');

          var $nesting = [self].concat($parent_nesting), $Input$1;

          return $send($hash2(["type", "name", "value", "size", "place_holder", "read_only", "required", "limit"], {"type": "type", "name": "name", "value": "value", "size": "size", "place_holder": "placeholder", "read_only": "readonly", "required": "required", "limit": "maxlength"}), 'each', [], ($Input$1 = function(name, attribute){var self = $Input$1.$$s == null ? this : $Input$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (attribute == null) {
              attribute = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Input$1.$$s = self, $Input$1.$$arity = 2, $Input$1))
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/link"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Link');

          var $nesting = [self].concat($parent_nesting), $Link$1;

          return $send($hash2(["cross_origin", "href", "href_lang", "media", "rel", "sizes", "type"], {"cross_origin": "crossorigin", "href": "href", "href_lang": "hreflang", "media": "media", "rel": "rel", "sizes": "sizes", "type": "type"}), 'each', [], ($Link$1 = function(name, attribute){var self = $Link$1.$$s == null ? this : $Link$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (attribute == null) {
              attribute = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Link$1.$$s = self, $Link$1.$$arity = 2, $Link$1))
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/object"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Object');

          var $nesting = [self].concat($parent_nesting), $Object$1;

          return $send($hash2(["type", "data", "name", "height", "width"], {"type": "type", "data": "data", "name": "name", "height": "height", "width": "width"}), 'each', [], ($Object$1 = function(name, attribute){var self = $Object$1.$$s == null ? this : $Object$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (attribute == null) {
              attribute = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Object$1.$$s = self, $Object$1.$$arity = 2, $Object$1))
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/option"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Option');

          var $nesting = [self].concat($parent_nesting), $Option$1;

          
          $send(["label", "value"], 'each', [], ($Option$1 = function(name){var self = $Option$1.$$s == null ? this : $Option$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Option$1.$$s = self, $Option$1.$$arity = 1, $Option$1));
          self['$defhelper!']("disabled");
          return self['$defhelper!']("selected");
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/optgroup"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Optgroup');

          var $nesting = [self].concat($parent_nesting), $Optgroup$1;

          
          $send(["label", "value"], 'each', [], ($Optgroup$1 = function(name){var self = $Optgroup$1.$$s == null ? this : $Optgroup$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Optgroup$1.$$s = self, $Optgroup$1.$$arity = 1, $Optgroup$1));
          self['$defhelper!']("disabled");
          return self['$defhelper!']("selected");
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/select"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Select');

          var $nesting = [self].concat($parent_nesting), $Select$1;

          
          $send(["form", "name", "size"], 'each', [], ($Select$1 = function(name){var self = $Select$1.$$s == null ? this : $Select$1.$$s, $$2;

            
            
            if (name == null) {
              name = nil;
            };
            return $send(self, 'defhelper', [name], ($$2 = function(value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
              if (self.attributes == null) self.attributes = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $Select$1.$$s = self, $Select$1.$$arity = 1, $Select$1));
          self['$defhelper!']("auto_focus", "autofocus");
          self['$defhelper!']("disabled");
          return self['$defhelper!']("required");
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element/td"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$defhelper', '$to_s', '$[]=', '$-', '$join']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Td');

          var $nesting = [self].concat($parent_nesting), $Td$1, $Td$2, $Td$3;

          
          $send(self, 'defhelper', ["columns"], ($Td$1 = function(value){var self = $Td$1.$$s == null ? this : $Td$1.$$s, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

            
            
            if (value == null) {
              value = nil;
            };
            $writer = ["colspan", value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $Td$1.$$s = self, $Td$1.$$arity = 1, $Td$1));
          $send(self, 'defhelper', ["rows"], ($Td$2 = function(value){var self = $Td$2.$$s == null ? this : $Td$2.$$s, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

            
            
            if (value == null) {
              value = nil;
            };
            $writer = ["rowspan", value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $Td$2.$$s = self, $Td$2.$$arity = 1, $Td$2));
          return $send(self, 'defhelper', ["headers"], ($Td$3 = function($a){var self = $Td$3.$$s == null ? this : $Td$3.$$s, $post_args, args, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $writer = ["headers", args.$join(" ")];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $Td$3.$$s = self, $Td$3.$$arity = -1, $Td$3));
        })($nesting[0], self, $nesting)
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/html/element"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$==', '$capitalize', '$const_defined?', '$new', '$const_get', '$each', '$to_proc', '$<<', '$end_with?', '$to_s', '$[]', '$[]=', '$-', '$===', '$has_key?', '$unshift', '$|', '$split', '$delete', '$to_a', '$deep_merge!', '$>>', '$extend!', '$pop', '$join', '$heredoc', '$defhelper', '$map', '$empty?', '$upcase', '$inspect']);
  
  self.$require("paggio/html/element/a");
  self.$require("paggio/html/element/base");
  self.$require("paggio/html/element/blockquote");
  self.$require("paggio/html/element/button");
  self.$require("paggio/html/element/canvas");
  self.$require("paggio/html/element/embed");
  self.$require("paggio/html/element/img");
  self.$require("paggio/html/element/input");
  self.$require("paggio/html/element/link");
  self.$require("paggio/html/element/object");
  self.$require("paggio/html/element/option");
  self.$require("paggio/html/element/optgroup");
  self.$require("paggio/html/element/select");
  self.$require("paggio/html/element/td");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting), $Element_new$1, $Element_initialize$2, $Element_each$3, $Element_$lt$lt$4, $Element_method_missing$5, $Element_$$$6, $Element_do$7, $Element_$gt$gt$8, $Element$9, $Element$11, $Element_inspect$13;

        self.$$prototype.children = self.$$prototype.attributes = self.$$prototype.class_names = self.$$prototype.owner = self.$$prototype.name = nil;
        
        Opal.defs(self, '$new', $Element_new$1 = function(owner, name, attributes) {
          var $iter = $Element_new$1.$$p, $yield = $iter || nil, self = this, const$ = nil;

          if ($iter) $Element_new$1.$$p = null;
          
          
          if (attributes == null) {
            attributes = $hash2([], {});
          };
          if (self['$==']($$($nesting, 'Element'))) {
          } else {
            return $send2(self, $find_super(self, 'new', $Element_new$1, false, true), 'new', [owner, name, attributes], $iter)
          };
          const$ = name.$capitalize();
          if ($truthy(self['$const_defined?'](const$))) {
            return self.$const_get(const$).$new(owner, name, attributes)
          } else {
            return $send2(self, $find_super(self, 'new', $Element_new$1, false, true), 'new', [owner, name, attributes], $iter)
          };
        }, $Element_new$1.$$arity = -3);
        
        Opal.def(self, '$initialize', $Element_initialize$2 = function $$initialize(owner, name, attributes) {
          var self = this;

          
          
          if (attributes == null) {
            attributes = $hash2([], {});
          };
          self.owner = owner;
          self.name = name;
          self.attributes = attributes;
          self.children = [];
          return (self.class_names = []);
        }, $Element_initialize$2.$$arity = -3);
        
        Opal.def(self, '$each', $Element_each$3 = function $$each() {
          var $iter = $Element_each$3.$$p, block = $iter || nil, self = this;

          if ($iter) $Element_each$3.$$p = null;
          
          
          if ($iter) $Element_each$3.$$p = null;;
          return $send(self.children, 'each', [], block.$to_proc());
        }, $Element_each$3.$$arity = 0);
        
        Opal.def(self, '$<<', $Element_$lt$lt$4 = function(what) {
          var self = this;

          
          self.children['$<<'](what);
          return self;
        }, $Element_$lt$lt$4.$$arity = 1);
        
        Opal.def(self, '$method_missing', $Element_method_missing$5 = function $$method_missing(name, content) {
          var $iter = $Element_method_missing$5.$$p, block = $iter || nil, self = this, $writer = nil, $ret_or_1 = nil;

          if ($iter) $Element_method_missing$5.$$p = null;
          
          
          if ($iter) $Element_method_missing$5.$$p = null;;
          
          if (content == null) {
            content = nil;
          };
          if ($truthy(name.$to_s()['$end_with?']("!"))) {
            
            $writer = ["id", name['$[]']($range(0, -2, false))];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          } else {
            self.class_names['$<<'](name)
          };
          if ($truthy($$$('::', 'Hash')['$==='](content))) {
            
            if ($truthy((function() {if ($truthy(($ret_or_1 = content['$has_key?']("class")))) {
              return $ret_or_1
            } else {
              return content['$has_key?']("classes")
            }; return nil; })())) {
              $send(self.class_names, 'unshift', Opal.to_a(content.$delete("class").$to_s().$split()['$|'](content.$delete("classes").$to_a())))};
            $$$($$$('::', 'Paggio'), 'Utils')['$deep_merge!'](self.attributes, content);
          } else if ($truthy(content)) {
            self['$>>'](content)};
          if ($truthy(block)) {
            $send(self.owner, 'extend!', [self], block.$to_proc())};
          return self;
        }, $Element_method_missing$5.$$arity = -2);
        
        Opal.def(self, '$[]', $Element_$$$6 = function($a) {
          var $post_args, names, self = this, last = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          names = $post_args;;
          if ($truthy((last = self.class_names.$pop()))) {
            self.class_names['$<<']([last].concat(Opal.to_a(names)).$join("-"))};
          return self;
        }, $Element_$$$6.$$arity = -1);
        
        Opal.def(self, '$do', $Element_do$7 = function() {
          var $iter = $Element_do$7.$$p, block = $iter || nil, self = this;

          if ($iter) $Element_do$7.$$p = null;
          
          
          if ($iter) $Element_do$7.$$p = null;;
          $send(self.owner, 'extend!', [self], block.$to_proc());
          return self;
        }, $Element_do$7.$$arity = 0);
        
        Opal.def(self, '$>>', $Element_$gt$gt$8 = function(content) {
          var self = this;

          
          self['$<<']($$$($$$('::', 'Paggio'), 'Utils').$heredoc(content.$to_s()));
          return self;
        }, $Element_$gt$gt$8.$$arity = 1);
        $send(self, 'defhelper', ["style"], ($Element$9 = function(hash){var self = $Element$9.$$s == null ? this : $Element$9.$$s, $$10, $writer = nil;
          if (self.attributes == null) self.attributes = nil;

          
          
          if (hash == null) {
            hash = nil;
          };
          $writer = ["style", $send(hash, 'map', [], ($$10 = function(name, value){var self = $$10.$$s == null ? this : $$10.$$s;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (value == null) {
              value = nil;
            };
            return "" + (name) + ": " + (value);}, $$10.$$s = self, $$10.$$arity = 2, $$10)).$join(";")];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $Element$9.$$s = self, $Element$9.$$arity = 1, $Element$9));
        $send(self, 'defhelper', ["data"], ($Element$11 = function(hash){var self = $Element$11.$$s == null ? this : $Element$11.$$s, $$12;

          
          
          if (hash == null) {
            hash = nil;
          };
          return $send(hash, 'each', [], ($$12 = function(name, value){var self = $$12.$$s == null ? this : $$12.$$s, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (value == null) {
              value = nil;
            };
            $writer = ["" + "data-" + (name), value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$12.$$s = self, $$12.$$arity = 2, $$12));}, $Element$11.$$s = self, $Element$11.$$arity = 1, $Element$11));
        return (Opal.def(self, '$inspect', $Element_inspect$13 = function $$inspect() {
          var self = this;

          if ($truthy(self.children['$empty?']())) {
            return "" + "#<HTML::Element(" + (self.name.$upcase()) + ")>"
          } else {
            return "" + "#<HTML::Element(" + (self.name.$upcase()) + "): " + (self.children.$inspect()['$[]']($range(1, -2, false))) + ">"
          }
        }, $Element_inspect$13.$$arity = 0), nil) && 'inspect';
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
};

Opal.modules["paggio/html"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_reader', '$raise', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$<<', '$first', '$===', '$instance_eval', '$each', '$end_with?', '$to_s', '$empty?', '$heredoc', '$shift', '$new', '$[]', '$inspect']);
  
  self.$require("paggio/html/helpers");
  self.$require("paggio/html/element");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting), $HTML_initialize$1, $HTML_$lt$lt$2, $HTML_root$excl$3, $HTML_roots$excl$4, $HTML_element$excl$5, $HTML_extend$excl$6, $HTML_each$8, $HTML_method_missing$9, $HTML_inspect$11;

      self.$$prototype.current = self.$$prototype.roots = self.$$prototype.version = nil;
      
      self.$attr_reader("version");
      
      Opal.def(self, '$initialize', $HTML_initialize$1 = function $$initialize(version) {
        var $iter = $HTML_initialize$1.$$p, block = $iter || nil, self = this;

        if ($iter) $HTML_initialize$1.$$p = null;
        
        
        if ($iter) $HTML_initialize$1.$$p = null;;
        
        if (version == null) {
          version = 5;
        };
        if ($truthy(block)) {
        } else {
          $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "no block given")
        };
        self.version = version;
        self.roots = [];
        self.current = nil;
        if (block.$arity()['$=='](0)) {
          return $send(self, 'instance_exec', [], block.$to_proc())
        } else {
          return block.$call(self)
        };
      }, $HTML_initialize$1.$$arity = -1);
      
      Opal.def(self, '$<<', $HTML_$lt$lt$2 = function(what) {
        var self = this, $ret_or_1 = nil;

        return (function() {if ($truthy(($ret_or_1 = self.current))) {
          return $ret_or_1
        } else {
          return self.roots
        }; return nil; })()['$<<'](what)
      }, $HTML_$lt$lt$2.$$arity = 1);
      
      Opal.def(self, '$root!', $HTML_root$excl$3 = function() {
        var self = this;

        return self.roots.$first()
      }, $HTML_root$excl$3.$$arity = 0);
      
      Opal.def(self, '$roots!', $HTML_roots$excl$4 = function() {
        var self = this;

        return self.roots
      }, $HTML_roots$excl$4.$$arity = 0);
      
      Opal.def(self, '$element!', $HTML_element$excl$5 = function() {
        var self = this;

        return self.current
      }, $HTML_element$excl$5.$$arity = 0);
      
      Opal.def(self, '$extend!', $HTML_extend$excl$6 = function(element) {
        var $iter = $HTML_extend$excl$6.$$p, block = $iter || nil, $a, $$7, self = this, old = nil, result = nil;

        if ($iter) $HTML_extend$excl$6.$$p = null;
        
        
        if ($iter) $HTML_extend$excl$6.$$p = null;;
        
        if (element == null) {
          element = nil;
        };
        $a = [self.current, element], (old = $a[0]), (self.current = $a[1]), $a;
        result = block.$call(self);
        if ($truthy($$$('::', 'String')['$==='](result))) {
          $send(self.current, 'instance_eval', [], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s;

            return (self.inner_html = result)}, $$7.$$s = self, $$7.$$arity = 0, $$7))};
        self.current = old;
        return self;
      }, $HTML_extend$excl$6.$$arity = -1);
      
      Opal.def(self, '$each', $HTML_each$8 = function $$each() {
        var $iter = $HTML_each$8.$$p, block = $iter || nil, self = this;

        if ($iter) $HTML_each$8.$$p = null;
        
        
        if ($iter) $HTML_each$8.$$p = null;;
        return $send(self.roots, 'each', [], block.$to_proc());
      }, $HTML_each$8.$$arity = 0);
      
      Opal.def(self, '$method_missing', $HTML_method_missing$9 = function $$method_missing(name, $a) {
        var $iter = $HTML_method_missing$9.$$p, block = $iter || nil, $post_args, args, $$10, self = this, $ret_or_2 = nil, content = nil, element = nil, parent = nil, result = nil;

        if ($iter) $HTML_method_missing$9.$$p = null;
        
        
        if ($iter) $HTML_method_missing$9.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        if ($truthy(name.$to_s()['$end_with?']("!"))) {
          return $send2(self, $find_super(self, 'method_missing', $HTML_method_missing$9, false, true), 'method_missing', [name].concat(Opal.to_a(args)), $iter)};
        if ($truthy((function() {if ($truthy(($ret_or_2 = args['$empty?']()))) {
          return $ret_or_2
        } else {
          return $$$('::', 'Hash')['$==='](args.$first())
        }; return nil; })())) {
        } else {
          content = $$$($$$('::', 'Paggio'), 'Utils').$heredoc(args.$shift().$to_s())
        };
        element = $send($$($nesting, 'Element'), 'new', [self, name].concat(Opal.to_a(args)));
        if ($truthy(content)) {
          element['$<<'](content)};
        if ($truthy(block)) {
          
          parent = self.current;
          self.current = element;
          result = block.$call(self);
          self.current = parent;
          if ($truthy($$$('::', 'String')['$==='](result))) {
            $send(element, 'instance_eval', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

              return (self.inner_html = result)}, $$10.$$s = self, $$10.$$arity = 0, $$10))};};
        self['$<<'](element);
        return element;
      }, $HTML_method_missing$9.$$arity = -2);
      return (Opal.def(self, '$inspect', $HTML_inspect$11 = function $$inspect() {
        var self = this;

        if ($truthy(self.roots['$empty?']())) {
          return "" + "#<HTML(" + (self.version) + ")>"
        } else {
          return "" + "#<HTML(" + (self.version) + "): " + (self.roots.$inspect()['$[]']($range(1, -2, false))) + ">"
        }
      }, $HTML_inspect$11.$$arity = 0), nil) && 'inspect';
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
};

Opal.modules["paggio/css/unit"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var $$23, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $alias = Opal.alias;

  Opal.add_stubs(['$map', '$to_proc', '$attr_reader', '$===', '$respond_to?', '$raise', '$class', '$to_u', '$new', '$==', '$convert', '$type', '$number', '$hash', '$each', '$define_method', '$+', '$compatible?', '$-', '$*', '$/', '$to_i', '$to_f', '$private', '$include?', '$class_eval', '$old_percent', '$match', '$[]', '$__send__', '$downcase']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CSS');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Unit');

        var $nesting = [self].concat($parent_nesting), $Unit_initialize$1, $Unit_coerce$2, $Unit_$eq_eq$3, $Unit_$eq_eq_eq$4, $Unit_hash$5, $Unit$6, $Unit_$plus$8, $Unit_$minus$9, $Unit_$$10, $Unit_$slash$11, $Unit_$minus$$12, $Unit_$plus$$13, $Unit_to_i$14, $Unit_to_f$15, $Unit_to_u$16, $Unit_to_s$17, $Unit_compatible$ques$18, $Unit_convert$19;

        self.$$prototype.type = self.$$prototype.number = nil;
        
        Opal.const_set($nesting[0], 'TYPES', $send(["em", "ex", "ch", "rem", "vh", "vw", "vmin", "vmax", "px", "mm", "cm", "in", "pt", "pc", "s", "deg"], 'map', [], "to_sym".$to_proc()));
        Opal.const_set($nesting[0], 'COMPATIBLE', $send(["in", "pt", "mm", "cm", "px", "pc"], 'map', [], "to_sym".$to_proc()));
        self.$attr_reader("type", "number");
        
        Opal.def(self, '$initialize', $Unit_initialize$1 = function $$initialize(number, type) {
          var self = this;

          
          self.number = number;
          return (self.type = type);
        }, $Unit_initialize$1.$$arity = 2);
        
        Opal.def(self, '$coerce', $Unit_coerce$2 = function $$coerce(other) {
          var self = this;

          return [self, other]
        }, $Unit_coerce$2.$$arity = 1);
        
        Opal.def(self, '$==', $Unit_$eq_eq$3 = function(other) {
          var self = this;

          
          if ($truthy($$($nesting, 'Unit')['$==='](other))) {
          } else {
            
            if ($truthy(other['$respond_to?']("to_u"))) {
            } else {
              self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (other.$class()) + " into Unit")
            };
            other = other.$to_u();
          };
          if ($truthy($$($nesting, 'Unit')['$==='](other))) {
          } else {
            other = $$($nesting, 'Unit').$new(other, self.type)
          };
          return self.number['$=='](self.$convert(other, self.type));
        }, $Unit_$eq_eq$3.$$arity = 1);
        
        Opal.def(self, '$===', $Unit_$eq_eq_eq$4 = function(other) {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.type['$=='](other.$type())))) {
            return self.number['$=='](other.$number())
          } else {
            return $ret_or_1
          }
        }, $Unit_$eq_eq_eq$4.$$arity = 1);
        $alias(self, "eql?", "==");
        
        Opal.def(self, '$hash', $Unit_hash$5 = function $$hash() {
          var self = this;

          return [self.number, self.type].$hash()
        }, $Unit_hash$5.$$arity = 0);
        $send($$($nesting, 'TYPES'), 'each', [], ($Unit$6 = function(name){var self = $Unit$6.$$s == null ? this : $Unit$6.$$s, $$7;

          
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', [name], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s;

            return $$($nesting, 'Unit').$new(self.$convert(self, name), name)}, $$7.$$s = self, $$7.$$arity = 0, $$7));}, $Unit$6.$$s = self, $Unit$6.$$arity = 1, $Unit$6));
        
        Opal.def(self, '$+', $Unit_$plus$8 = function(other) {
          var self = this, $ret_or_2 = nil;

          
          if ($truthy($$($nesting, 'Unit')['$==='](other))) {
          } else {
            return $$($nesting, 'Unit').$new($rb_plus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $$($nesting, 'Unit').$new($rb_plus(self.number, other.$number()), self.type)
          } else if ($truthy((function() {if ($truthy(($ret_or_2 = self['$compatible?'](self)))) {
            return self['$compatible?'](other)
          } else {
            return $ret_or_2
          }; return nil; })())) {
            return $$($nesting, 'Unit').$new($rb_plus(self.number, self.$convert(other, self.type)), self.type)
          } else {
            return self.$raise($$($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, $Unit_$plus$8.$$arity = 1);
        
        Opal.def(self, '$-', $Unit_$minus$9 = function(other) {
          var self = this, $ret_or_3 = nil;

          
          if ($truthy($$($nesting, 'Unit')['$==='](other))) {
          } else {
            return $$($nesting, 'Unit').$new($rb_minus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $$($nesting, 'Unit').$new($rb_minus(self.number, other.$number()), self.type)
          } else if ($truthy((function() {if ($truthy(($ret_or_3 = self['$compatible?'](self)))) {
            return self['$compatible?'](other)
          } else {
            return $ret_or_3
          }; return nil; })())) {
            return $$($nesting, 'Unit').$new($rb_minus(self.number, self.$convert(other, self.type)), self.type)
          } else {
            return self.$raise($$($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, $Unit_$minus$9.$$arity = 1);
        
        Opal.def(self, '$*', $Unit_$$10 = function(other) {
          var self = this, $ret_or_4 = nil;

          
          if ($truthy($$($nesting, 'Unit')['$==='](other))) {
          } else {
            return $$($nesting, 'Unit').$new($rb_times(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $$($nesting, 'Unit').$new($rb_times(self.number, other.$number()), self.type)
          } else if ($truthy((function() {if ($truthy(($ret_or_4 = self['$compatible?'](self)))) {
            return self['$compatible?'](other)
          } else {
            return $ret_or_4
          }; return nil; })())) {
            return $$($nesting, 'Unit').$new($rb_times(self.number, self.$convert(other, self.type)), self.type)
          } else {
            return self.$raise($$($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, $Unit_$$10.$$arity = 1);
        
        Opal.def(self, '$/', $Unit_$slash$11 = function(other) {
          var self = this, $ret_or_5 = nil;

          
          if ($truthy($$($nesting, 'Unit')['$==='](other))) {
          } else {
            return $$($nesting, 'Unit').$new($rb_divide(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $$($nesting, 'Unit').$new($rb_divide(self.number, other.$number()), self.type)
          } else if ($truthy((function() {if ($truthy(($ret_or_5 = self['$compatible?'](self)))) {
            return self['$compatible?'](other)
          } else {
            return $ret_or_5
          }; return nil; })())) {
            return $$($nesting, 'Unit').$new($rb_divide(self.number, self.$convert(other, self.type)), self.type)
          } else {
            return self.$raise($$($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, $Unit_$slash$11.$$arity = 1);
        
        Opal.def(self, '$-@', $Unit_$minus$$12 = function() {
          var self = this;

          return $$($nesting, 'Unit').$new($rb_times(self.number, -1), self.type)
        }, $Unit_$minus$$12.$$arity = 0);
        
        Opal.def(self, '$+@', $Unit_$plus$$13 = function() {
          var self = this;

          return $$($nesting, 'Unit').$new(self.number, self.type)
        }, $Unit_$plus$$13.$$arity = 0);
        
        Opal.def(self, '$to_i', $Unit_to_i$14 = function $$to_i() {
          var self = this;

          return self.number.$to_i()
        }, $Unit_to_i$14.$$arity = 0);
        
        Opal.def(self, '$to_f', $Unit_to_f$15 = function $$to_f() {
          var self = this;

          return self.number.$to_f()
        }, $Unit_to_f$15.$$arity = 0);
        
        Opal.def(self, '$to_u', $Unit_to_u$16 = function $$to_u() {
          var self = this;

          return self
        }, $Unit_to_u$16.$$arity = 0);
        
        Opal.def(self, '$to_s', $Unit_to_s$17 = function $$to_s() {
          var self = this;

          return "" + (self.number) + (self.type)
        }, $Unit_to_s$17.$$arity = 0);
        $alias(self, "to_str", "to_s");
        $alias(self, "inspect", "to_s");
        self.$private();
        
        Opal.def(self, '$compatible?', $Unit_compatible$ques$18 = function(unit) {
          var self = this;

          return $$($nesting, 'COMPATIBLE')['$include?'](unit.$type())
        }, $Unit_compatible$ques$18.$$arity = 1);
        return (Opal.def(self, '$convert', $Unit_convert$19 = function $$convert(unit, type) {
          var self = this, value = nil, px = nil, $case = nil;

          
          value = unit.$number();
          if (unit.$type()['$=='](type)) {
            return value};
          px = (function() {$case = unit.$type();
          if ("in"['$===']($case)) {return $rb_times(value, 96)}
          else if ("pt"['$===']($case)) {return $rb_divide($rb_times(value, 4.0), 3.0)}
          else if ("pc"['$===']($case)) {return $rb_divide($rb_times($rb_divide(value, 12), 4.0), 3.0)}
          else if ("mm"['$===']($case)) {return $rb_times(value, 3.77953)}
          else if ("cm"['$===']($case)) {return $rb_times($rb_times(value, 10), 3.77953)}
          else if ("px"['$===']($case)) {return value}
          else { return nil }})();
          return (function() {$case = type;
          if ("in"['$===']($case)) {return $rb_divide(px, 96.0)}
          else if ("pt"['$===']($case)) {return $rb_divide($rb_divide(px, 4.0), 3.0)}
          else if ("pc"['$===']($case)) {return $rb_divide($rb_divide($rb_times(px, 12), 4.0), 3.0)}
          else if ("mm"['$===']($case)) {return $rb_divide(px, 3.77953)}
          else if ("cm"['$===']($case)) {return $rb_divide($rb_divide(px, 10), 3.77953)}
          else if ("px"['$===']($case)) {return px}
          else { return nil }})();
        }, $Unit_convert$19.$$arity = 2), nil) && 'convert';
      })($nesting[0], null, $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric$20, $Numeric_to_u$22;

    
    $send($$$($$$($$$($$($nesting, 'Paggio'), 'CSS'), 'Unit'), 'TYPES'), 'each', [], ($Numeric$20 = function(name){var self = $Numeric$20.$$s == null ? this : $Numeric$20.$$s, $$21;

      
      
      if (name == null) {
        name = nil;
      };
      return $send(self, 'define_method', [name], ($$21 = function(){var self = $$21.$$s == null ? this : $$21.$$s;

        return $$$($$$($$($nesting, 'Paggio'), 'CSS'), 'Unit').$new(self, name)}, $$21.$$s = self, $$21.$$arity = 0, $$21));}, $Numeric$20.$$s = self, $Numeric$20.$$arity = 1, $Numeric$20));
    return (Opal.def(self, '$to_u', $Numeric_to_u$22 = function $$to_u() {
      var self = this;

      return self
    }, $Numeric_to_u$22.$$arity = 0), nil) && 'to_u';
  })($nesting[0], null, $nesting);
  $send([$$($nesting, 'Fixnum'), $$($nesting, 'Float')], 'each', [], ($$23 = function(klass){var self = $$23.$$s == null ? this : $$23.$$s, $$24;

    
    
    if (klass == null) {
      klass = nil;
    };
    return $send(klass, 'class_eval', [], ($$24 = function(){var self = $$24.$$s == null ? this : $$24.$$s, $percent$25;

      
      $alias(self, "old_percent", "%");
      return (Opal.def(self, '$%', $percent$25 = function(other) {
        var self = this;

        
        
        if (other == null) {
          other = nil;
        };
        if ($truthy(other)) {
          return self.$old_percent(other)
        } else {
          return $$$($$$($$($nesting, 'Paggio'), 'CSS'), 'Unit').$new(self, "%")
        };
      }, $percent$25.$$arity = -1), nil) && '%';}, $$24.$$s = self, $$24.$$arity = 0, $$24));}, $$23.$$s = self, $$23.$$arity = 1, $$23));
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_u$26;

    return (Opal.def(self, '$to_u', $String_to_u$26 = function $$to_u() {
      var self = this, matches = nil, value = nil, unit = nil;

      if ($truthy((matches = self.$match(/^([\d+.]+)(.+)?$/)))) {
        
        value = matches['$[]'](1).$to_f();
        if ($truthy((unit = matches['$[]'](2)))) {
          return value.$__send__(unit.$downcase())
        } else {
          return value
        };
      } else {
        return 0
      }
    }, $String_to_u$26.$$arity = 0), nil) && 'to_u'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_to_u$27;

    return (Opal.def(self, '$to_u', $NilClass_to_u$27 = function $$to_u() {
      var self = this;

      return 0
    }, $NilClass_to_u$27.$$arity = 0), nil) && 'to_u'
  })($nesting[0], null, $nesting);
};

Opal.modules["paggio/css/color"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$map', '$to_proc', '$define_method', '$new']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CSS');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Color');

        var $nesting = [self].concat($parent_nesting), $Color_initialize$1;

        return (Opal.def(self, '$initialize', $Color_initialize$1 = function $$initialize(value, type) {
          var self = this;

          
          self.internal = value;
          return (self.type = type);
        }, $Color_initialize$1.$$arity = 2), nil) && 'initialize'
      })($nesting[0], null, $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String$2;

    return $send($send(["rgb", "rgba", "hsl", "hsla"], 'map', [], "to_sym".$to_proc()), 'each', [], ($String$2 = function(name){var self = $String$2.$$s == null ? this : $String$2.$$s, $$3;

      
      
      if (name == null) {
        name = nil;
      };
      return $send(self, 'define_method', [name], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;

        return $$$($$$($$($nesting, 'Paggio'), 'CSS'), 'Color').$new(self, name)}, $$3.$$s = self, $$3.$$arity = 0, $$3));}, $String$2.$$s = self, $String$2.$$arity = 1, $String$2))
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array$4;

    return $send($send(["rgb", "rgba", "hsl", "hsla"], 'map', [], "to_sym".$to_proc()), 'each', [], ($Array$4 = function(name){var self = $Array$4.$$s == null ? this : $Array$4.$$s, $$5;

      
      
      if (name == null) {
        name = nil;
      };
      return $send(self, 'define_method', [name], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

        return $$$($$$($$($nesting, 'Paggio'), 'CSS'), 'Color').$new(self, name)}, $$5.$$s = self, $$5.$$arity = 0, $$5));}, $Array$4.$$s = self, $Array$4.$$arity = 1, $Array$4))
  })($nesting[0], null, $nesting);
};

Opal.modules["paggio/css/definition"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$empty?', '$each', '$inspect', '$to_s', '$define_method', '$a', '$===', '$first', '$>', '$length', '$raise', '$style', '$name', '$value', '$[]', '$join', '$map', '$to_i', '$*', '$end_with?', '$__send__', '$<<', '$last', '$pop', '$!', '$other', '$shift', '$horizontal?', '$private']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CSS');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Definition');

        var $nesting = [self].concat($parent_nesting), $Definition_initialize$1, $Definition_empty$ques$2, $Definition_each$3, $Definition_gradient$4, $Definition_url$5, $Definition$6, $Definition_rgb$8, $Definition_rgba$9, $Definition$10, $Definition$12, $Definition_background$14, $Definition_border$17, $Definition_box$23, $Definition_opacity$26, $Definition_animation$27, $Definition_transition$29, $Definition_user_select$30, $Definition_transform$31, $Definition_filter$32, $Definition_method_missing$33, $Definition_style$35, $Definition_style$excl$36;

        self.$$prototype.style = self.$$prototype.important = nil;
        
        Opal.const_set($nesting[0], 'Style', $$$('::', 'Struct').$new("name", "value", "important"));
        
        Opal.def(self, '$initialize', $Definition_initialize$1 = function $$initialize() {
          var $iter = $Definition_initialize$1.$$p, block = $iter || nil, self = this;

          if ($iter) $Definition_initialize$1.$$p = null;
          
          
          if ($iter) $Definition_initialize$1.$$p = null;;
          self.style = [];
          if ($truthy(block)) {
            if (block.$arity()['$=='](0)) {
              return $send(self, 'instance_exec', [], block.$to_proc())
            } else {
              return block.$call(self)
            }
          } else {
            return nil
          };
        }, $Definition_initialize$1.$$arity = 0);
        
        Opal.def(self, '$empty?', $Definition_empty$ques$2 = function() {
          var self = this;

          return self.style['$empty?']()
        }, $Definition_empty$ques$2.$$arity = 0);
        
        Opal.def(self, '$each', $Definition_each$3 = function $$each() {
          var $iter = $Definition_each$3.$$p, block = $iter || nil, self = this;

          if ($iter) $Definition_each$3.$$p = null;
          
          
          if ($iter) $Definition_each$3.$$p = null;;
          return $send(self.style, 'each', [], block.$to_proc());
        }, $Definition_each$3.$$arity = 0);
        
        Opal.def(self, '$gradient', $Definition_gradient$4 = function $$gradient($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send($$($nesting, 'Gradient'), 'new', Opal.to_a(args));
        }, $Definition_gradient$4.$$arity = -1);
        
        Opal.def(self, '$url', $Definition_url$5 = function $$url(value) {
          var self = this;

          return "" + "url(" + (value.$to_s().$inspect()) + ")"
        }, $Definition_url$5.$$arity = 1);
        $send(["url", "blur", "brightness", "rotate", "contrast", "grayscale", "invert", "opacity", "saturate", "sepia"], 'each', [], ($Definition$6 = function(name){var self = $Definition$6.$$s == null ? this : $Definition$6.$$s, $$7;

          
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', [name], ($$7 = function(value){var self = $$7.$$s == null ? this : $$7.$$s;

            
            
            if (value == null) {
              value = nil;
            };
            return "" + (name) + "(" + (value) + ")";}, $$7.$$s = self, $$7.$$arity = 1, $$7));}, $Definition$6.$$s = self, $Definition$6.$$arity = 1, $Definition$6));
        
        Opal.def(self, '$rgb', $Definition_rgb$8 = function $$rgb(r, g, b) {
          var self = this;

          return "" + "rgb(" + (r) + ", " + (g) + ", " + (b) + ", " + (self.$a()) + ")"
        }, $Definition_rgb$8.$$arity = 3);
        
        Opal.def(self, '$rgba', $Definition_rgba$9 = function $$rgba(r, g, b, a) {
          var self = this;

          return "" + "rgba(" + (r) + ", " + (g) + ", " + (b) + ", " + (a) + ")"
        }, $Definition_rgba$9.$$arity = 4);
        $send(["scale", "skew", "translate"], 'each', [], ($Definition$10 = function(name){var self = $Definition$10.$$s == null ? this : $Definition$10.$$s, $$11;

          
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', [name], ($$11 = function(a, b){var self = $$11.$$s == null ? this : $$11.$$s;

            
            
            if (a == null) {
              a = nil;
            };
            
            if (b == null) {
              b = nil;
            };
            if ($truthy(b)) {
              return "" + (name) + "(" + (a) + ", " + (b) + ")"
            } else {
              return "" + (name) + "(" + (a) + ")"
            };}, $$11.$$s = self, $$11.$$arity = -2, $$11));}, $Definition$10.$$s = self, $Definition$10.$$arity = 1, $Definition$10));
        $send(["translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ", "skewX", "skewY", "scaleX", "scaleY"], 'each', [], ($Definition$12 = function(name){var self = $Definition$12.$$s == null ? this : $Definition$12.$$s, $$13;

          
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', [name], ($$13 = function(value){var self = $$13.$$s == null ? this : $$13.$$s;

            
            
            if (value == null) {
              value = nil;
            };
            return "" + (name) + "(" + (value) + ")";}, $$13.$$s = self, $$13.$$arity = 1, $$13));}, $Definition$12.$$s = self, $Definition$12.$$arity = 1, $Definition$12));
        
        Opal.def(self, '$background', $Definition_background$14 = function $$background($a) {
          var $post_args, args, $$15, $$16, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ($truthy($$($nesting, 'Gradient')['$==='](args.$first()))) {
            
            if ($truthy($rb_gt(args.$length(), 1))) {
              self.$raise($$($nesting, 'NotImplementedError'), "multiple gradients not implemented yet")};
            return $send(args.$first(), 'each', [], ($$15 = function(s){var self = $$15.$$s == null ? this : $$15.$$s, $ret_or_1 = nil;

              
              
              if (s == null) {
                s = nil;
              };
              return self.$style((function() {if ($truthy(($ret_or_1 = s.$name()))) {
                return $ret_or_1
              } else {
                return "background-image"
              }; return nil; })(), s.$value());}, $$15.$$s = self, $$15.$$arity = 1, $$15));
          } else if ($truthy($$$('::', 'Hash')['$==='](args.$first()))) {
            return $send(args.$first(), 'each', [], ($$16 = function(sub, value){var self = $$16.$$s == null ? this : $$16.$$s;

              
              
              if (sub == null) {
                sub = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              return self.$style("" + "background-" + (sub), value);}, $$16.$$s = self, $$16.$$arity = 2, $$16))
          } else {
            return self.$style("background", args)
          };
        }, $Definition_background$14.$$arity = -1);
        
        Opal.def(self, '$border', $Definition_border$17 = function $$border($a) {
          var $post_args, args, $$18, self = this, options = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ($truthy($$$('::', 'Hash')['$==='](args.$first()))) {
            
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return $send(options, 'each', [], ($$18 = function(name, value){var self = $$18.$$s == null ? this : $$18.$$s, $$19, $$20, $$22, $case = nil;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              return (function() {$case = name;
              if ("top"['$===']($case) || "bottom"['$===']($case) || "left"['$===']($case) || "right"['$===']($case)) {if ($truthy($$$('::', 'Hash')['$==='](value))) {
                return $send(value, 'each', [], ($$19 = function(n, v){var self = $$19.$$s == null ? this : $$19.$$s;

                  
                  
                  if (n == null) {
                    n = nil;
                  };
                  
                  if (v == null) {
                    v = nil;
                  };
                  return self.$style("" + "border-" + (name) + "-" + (n), v);}, $$19.$$s = self, $$19.$$arity = 2, $$19))
              } else {
                return self.$style("" + "border-" + (name), value)
              }}
              else if ("radius"['$===']($case)) {if ($truthy($$$('::', 'Hash')['$==='](value))) {
                return $send(value, 'each', [], ($$20 = function(horizontal, value){var self = $$20.$$s == null ? this : $$20.$$s, $$21;

                  
                  
                  if (horizontal == null) {
                    horizontal = nil;
                  };
                  
                  if (value == null) {
                    value = nil;
                  };
                  return $send(value, 'each', [], ($$21 = function(vertical, value){var self = $$21.$$s == null ? this : $$21.$$s;

                    
                    
                    if (vertical == null) {
                      vertical = nil;
                    };
                    
                    if (value == null) {
                      value = nil;
                    };
                    self.$style("" + "-moz-border-radius-" + (horizontal) + (vertical), value);
                    self.$style("" + "-webkit-border-" + (horizontal) + "-" + (vertical) + "-radius", value);
                    return self.$style("" + "border-" + (horizontal) + "-" + (vertical) + "-radius", value);}, $$21.$$s = self, $$21.$$arity = 2, $$21));}, $$20.$$s = self, $$20.$$arity = 2, $$20))
              } else {
                
                self.$style("-moz-border-radius", value);
                self.$style("-webkit-border-radius", value);
                return self.$style("border-radius", value);
              }}
              else if ("color"['$===']($case)) {if ($truthy($$$('::', 'Hash')['$==='](value))) {
                return $send(value, 'each', [], ($$22 = function(name, value){var self = $$22.$$s == null ? this : $$22.$$s;

                  
                  
                  if (name == null) {
                    name = nil;
                  };
                  
                  if (value == null) {
                    value = nil;
                  };
                  return self.$style("" + "border-" + (name) + "-color", value);}, $$22.$$s = self, $$22.$$arity = 2, $$22))
              } else {
                return self.$style("border-color", value)
              }}
              else {return self.$style("" + "border-" + (name), value)}})();}, $$18.$$s = self, $$18.$$arity = 2, $$18));
          } else {
            return self.$style("border", args)
          };
        }, $Definition_border$17.$$arity = -1);
        
        Opal.def(self, '$box', $Definition_box$23 = function $$box(options) {
          var $$24, self = this;

          if ($truthy($$$('::', 'Hash')['$==='](options))) {
            return $send(options, 'each', [], ($$24 = function(name, value){var self = $$24.$$s == null ? this : $$24.$$s, $$25, $case = nil;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              return (function() {$case = name;
              if ("shadow"['$===']($case)) {
              if ($truthy($$$('::', 'Array')['$==='](value))) {
                if ($truthy($$$('::', 'Array')['$==='](value['$[]'](0)))) {
                  value = $send(value, 'map', [], ($$25 = function(v){var self = $$25.$$s == null ? this : $$25.$$s;

                    
                    
                    if (v == null) {
                      v = nil;
                    };
                    return v.$join(" ");}, $$25.$$s = self, $$25.$$arity = 1, $$25)).$join(", ")
                } else {
                  value = value.$join(" ")
                }};
              self.$style("-moz-box-shadow", value);
              self.$style("-webkit-box-shadow", value);
              return self.$style("box-shadow", value);}
              else {return self.$style("" + "box-" + (name), value)}})();}, $$24.$$s = self, $$24.$$arity = 2, $$24))
          } else {
            return self.$style("box", options)
          }
        }, $Definition_box$23.$$arity = 1);
        
        Opal.def(self, '$opacity', $Definition_opacity$26 = function $$opacity(value) {
          var self = this;

          
          self.$style("opacity", value);
          self.$style("-moz-opacity", value);
          self.$style("-ms-filter", "" + "\"progid:DXImageTransform.Microsoft.Alpha(Opacity=" + ($rb_times(value, 100).$to_i()) + ")\"");
          return self.$style("filter", "" + "alpha(opacity=" + ($rb_times(value, 100).$to_i()) + ")");
        }, $Definition_opacity$26.$$arity = 1);
        
        Opal.def(self, '$animation', $Definition_animation$27 = function $$animation($a) {
          var $post_args, args, $$28, self = this, options = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ($truthy($$($nesting, 'Hash')['$==='](args.$first()))) {
            
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return $send(options, 'each', [], ($$28 = function(name, value){var self = $$28.$$s == null ? this : $$28.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              self.$style("" + "-webkit-animation-" + (name), value);
              return self.$style("" + "animation-" + (name), value);}, $$28.$$s = self, $$28.$$arity = 2, $$28));
          } else {
            
            self.$style("animation", args);
            return self.$style("-webkit-animation", args);
          };
        }, $Definition_animation$27.$$arity = -1);
        
        Opal.def(self, '$transition', $Definition_transition$29 = function $$transition($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          self.$style("transition", args);
          self.$style("-webkit-transition", args);
          return self.$style("-moz-transition", args);
        }, $Definition_transition$29.$$arity = -1);
        
        Opal.def(self, '$user_select', $Definition_user_select$30 = function $$user_select($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          self.$style("user-select", args);
          self.$style("-webkit-user-select", args);
          self.$style("-moz-user-select", args);
          return self.$style("-ms-user-select", args);
        }, $Definition_user_select$30.$$arity = -1);
        
        Opal.def(self, '$transform', $Definition_transform$31 = function $$transform($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          self.$style("transform", args);
          self.$style("-webkit-transform", args);
          self.$style("-moz-transform", args);
          self.$style("-ms-transform", args);
          return self.$style("-o-transform", args);
        }, $Definition_transform$31.$$arity = -1);
        
        Opal.def(self, '$filter', $Definition_filter$32 = function $$filter($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          self.$style("filter", args);
          self.$style("-webkit-filter", args);
          self.$style("-moz-filter", args);
          self.$style("-ms-filter", args);
          return self.$style("-o-filter", args);
        }, $Definition_filter$32.$$arity = -1);
        
        Opal.def(self, '$method_missing', $Definition_method_missing$33 = function $$method_missing(name, $a) {
          var $iter = $Definition_method_missing$33.$$p, block = $iter || nil, $post_args, args, $$34, self = this, argument = nil;

          if ($iter) $Definition_method_missing$33.$$p = null;
          
          
          if ($iter) $Definition_method_missing$33.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          name = name.$to_s();
          if ($truthy(name['$end_with?']("!"))) {
            
            name = name['$[]']($range(0, -2, false));
            self.important = true;
            $send(self, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc());
            self.important = false;
            return nil;};
          if (args.$length()['$=='](1)) {
            
            argument = args.$first();
            if ($truthy($$$('::', 'Hash')['$==='](argument))) {
              $send(argument, 'each', [], ($$34 = function(sub, value){var self = $$34.$$s == null ? this : $$34.$$s;

                
                
                if (sub == null) {
                  sub = nil;
                };
                
                if (value == null) {
                  value = nil;
                };
                return self.$style("" + (name) + "-" + (sub), value);}, $$34.$$s = self, $$34.$$arity = 2, $$34))
            } else {
              self.$style(name, argument)
            };
          } else {
            self.$style(name, args.$join(" "))
          };
          self.important = false;
          return self;
        }, $Definition_method_missing$33.$$arity = -2);
        
        Opal.def(self, '$style', $Definition_style$35 = function $$style(name, value, important) {
          var self = this;

          
          
          if (value == null) {
            value = nil;
          };
          
          if (important == null) {
            important = self.important;
          };
          if ($truthy($$$('::', 'Array')['$==='](value))) {
            value = value.$join(" ")};
          if ($truthy($$($nesting, 'Style')['$==='](name))) {
            return self.style['$<<'](name)
          } else {
            return self.style['$<<']($$($nesting, 'Style').$new(name, value, important))
          };
        }, $Definition_style$35.$$arity = -2);
        
        Opal.def(self, '$style!', $Definition_style$excl$36 = function(name, value) {
          var self = this;

          
          
          if (value == null) {
            value = nil;
          };
          return self.$style(name, value, true);
        }, $Definition_style$excl$36.$$arity = -2);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Gradient');

          var $nesting = [self].concat($parent_nesting), $Gradient_initialize$37, $Gradient_each$38, $Gradient_horizontal$ques$39, $Gradient_vertical$ques$40, $Gradient_other$41, $Gradient_style$42;

          self.$$prototype.to = self.$$prototype.from = self.$$prototype.start = self.$$prototype.end = nil;
          
          
          Opal.def(self, '$initialize', $Gradient_initialize$37 = function $$initialize($a) {
            var $post_args, args, self = this, options = nil, $ret_or_2 = nil, $ret_or_3 = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            options = (function() {if ($truthy($$$('::', 'Hash')['$==='](args.$last()))) {
              return args.$pop()
            } else {
              return $hash2([], {})
            }; return nil; })();
            self.to = options['$[]']("to");
            self.from = options['$[]']("from");
            if ($truthy((function() {if ($truthy(($ret_or_2 = self.to))) {
              return self.from['$!']()
            } else {
              return $ret_or_2
            }; return nil; })())) {
              self.from = self.$other(self.to)
            } else if ($truthy((function() {if ($truthy(($ret_or_3 = self.from))) {
              return self.to['$!']()
            } else {
              return $ret_or_3
            }; return nil; })())) {
              self.to = self.$other(self.from)};
            self.start = args.$shift();
            return (self.end = args.$shift());
          }, $Gradient_initialize$37.$$arity = -1);
          
          Opal.def(self, '$each', $Gradient_each$38 = function $$each() {
            var $iter = $Gradient_each$38.$$p, block = $iter || nil, self = this;

            if ($iter) $Gradient_each$38.$$p = null;
            
            
            if ($iter) $Gradient_each$38.$$p = null;;
            block.$call(self.$style("" + "-moz-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            if ($truthy(self['$horizontal?']())) {
              block.$call(self.$style("" + "-webkit-gradient(linear, " + (self.from) + " top, " + (self.to) + " top, color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
            } else {
              block.$call(self.$style("" + "-webkit-gradient(linear, left " + (self.from) + ", left " + (self.to) + ", color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
            };
            block.$call(self.$style("" + "-webkit-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("" + "-o-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("" + "-ms-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            return block.$call(self.$style("" + "linear-gradient(to " + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
          }, $Gradient_each$38.$$arity = 0);
          
          Opal.def(self, '$horizontal?', $Gradient_horizontal$ques$39 = function() {
            var self = this, $ret_or_4 = nil;

            if ($truthy(($ret_or_4 = self.to['$==']("left")))) {
              return $ret_or_4
            } else {
              return self.to['$==']("right")
            }
          }, $Gradient_horizontal$ques$39.$$arity = 0);
          
          Opal.def(self, '$vertical?', $Gradient_vertical$ques$40 = function() {
            var self = this, $ret_or_5 = nil;

            if ($truthy(($ret_or_5 = self.to['$==']("top")))) {
              return $ret_or_5
            } else {
              return self.to['$==']("bottom")
            }
          }, $Gradient_vertical$ques$40.$$arity = 0);
          self.$private();
          
          Opal.def(self, '$other', $Gradient_other$41 = function $$other(side) {
            var self = this, $case = nil;

            return (function() {$case = side;
            if ("left"['$===']($case)) {return "right"}
            else if ("right"['$===']($case)) {return "left"}
            else if ("top"['$===']($case)) {return "bottom"}
            else if ("bottom"['$===']($case)) {return "top"}
            else { return nil }})()
          }, $Gradient_other$41.$$arity = 1);
          return (Opal.def(self, '$style', $Gradient_style$42 = function $$style($a) {
            var $post_args, args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            if (args.$length()['$=='](1)) {
              return $$($nesting, 'Style').$new(nil, args.$first())
            } else {
              return $send($$($nesting, 'Style'), 'new', Opal.to_a(args))
            };
          }, $Gradient_style$42.$$arity = -1), nil) && 'style';
        })($nesting[0], null, $nesting);
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/css/rule"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CSS');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Rule');

        var $nesting = [self].concat($parent_nesting), $Rule_initialize$1, $Rule_method_missing$2;

        self.$$prototype.definition = nil;
        
        self.$attr_reader("selector", "media");
        
        Opal.def(self, '$initialize', $Rule_initialize$1 = function $$initialize(selector, media) {
          var self = this;

          
          self.selector = selector;
          self.media = media;
          return (self.definition = $$($nesting, 'Definition').$new());
        }, $Rule_initialize$1.$$arity = 2);
        return (Opal.def(self, '$method_missing', $Rule_method_missing$2 = function $$method_missing($a) {
          var $iter = $Rule_method_missing$2.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $Rule_method_missing$2.$$p = null;
          
          
          if ($iter) $Rule_method_missing$2.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.definition, '__send__', Opal.to_a(args), block.$to_proc());
        }, $Rule_method_missing$2.$$arity = -1), nil) && 'method_missing';
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/css/font"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new', '$font', '$__send__', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CSS');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Font');

        var $nesting = [self].concat($parent_nesting), $Font_initialize$1, $Font_method_missing$2;

        self.$$prototype.definition = nil;
        
        self.$attr_reader("name");
        
        Opal.def(self, '$initialize', $Font_initialize$1 = function $$initialize(name) {
          var self = this;

          
          self.name = name;
          self.definition = $$($nesting, 'Definition').$new();
          return self.$font($hash2(["family"], {"family": name}));
        }, $Font_initialize$1.$$arity = 1);
        return (Opal.def(self, '$method_missing', $Font_method_missing$2 = function $$method_missing($a) {
          var $iter = $Font_method_missing$2.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $Font_method_missing$2.$$p = null;
          
          
          if ($iter) $Font_method_missing$2.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.definition, '__send__', Opal.to_a(args), block.$to_proc());
        }, $Font_method_missing$2.$$arity = -1), nil) && 'method_missing';
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/css/animation"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc', '$<<', '$call', '$%', '$last']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CSS');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Animation');

        var $nesting = [self].concat($parent_nesting), $Animation_initialize$3, $Animation_step$4, $Animation_from$5, $Animation_to$6, $Animation_method_missing$7;

        self.$$prototype.steps = nil;
        
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Step');

          var $nesting = [self].concat($parent_nesting), $Step_initialize$1, $Step_method_missing$2;

          self.$$prototype.definition = nil;
          
          self.$attr_reader("value");
          
          Opal.def(self, '$initialize', $Step_initialize$1 = function $$initialize(value) {
            var self = this;

            
            self.value = value;
            return (self.definition = $$($nesting, 'Definition').$new());
          }, $Step_initialize$1.$$arity = 1);
          return (Opal.def(self, '$method_missing', $Step_method_missing$2 = function $$method_missing($a) {
            var $iter = $Step_method_missing$2.$$p, block = $iter || nil, $post_args, args, self = this;

            if ($iter) $Step_method_missing$2.$$p = null;
            
            
            if ($iter) $Step_method_missing$2.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self.definition, '__send__', Opal.to_a(args), block.$to_proc());
          }, $Step_method_missing$2.$$arity = -1), nil) && 'method_missing';
        })($nesting[0], $$($nesting, 'BasicObject'), $nesting);
        self.$attr_reader("name", "steps");
        
        Opal.def(self, '$initialize', $Animation_initialize$3 = function $$initialize(name) {
          var self = this;

          
          self.name = name;
          return (self.steps = []);
        }, $Animation_initialize$3.$$arity = 1);
        
        Opal.def(self, '$step', $Animation_step$4 = function $$step(value) {
          var $iter = $Animation_step$4.$$p, block = $iter || nil, self = this;

          if ($iter) $Animation_step$4.$$p = null;
          
          
          if ($iter) $Animation_step$4.$$p = null;;
          self.steps['$<<']($$($nesting, 'Step').$new(value));
          return block.$call();
        }, $Animation_step$4.$$arity = 1);
        
        Opal.def(self, '$from', $Animation_from$5 = function $$from(value) {
          var $iter = $Animation_from$5.$$p, block = $iter || nil, self = this;

          if ($iter) $Animation_from$5.$$p = null;
          
          
          if ($iter) $Animation_from$5.$$p = null;;
          self.steps['$<<']($$($nesting, 'Step').$new((0)['$%']()));
          return block.$call();
        }, $Animation_from$5.$$arity = 1);
        
        Opal.def(self, '$to', $Animation_to$6 = function $$to(value) {
          var $iter = $Animation_to$6.$$p, block = $iter || nil, self = this;

          if ($iter) $Animation_to$6.$$p = null;
          
          
          if ($iter) $Animation_to$6.$$p = null;;
          self.steps['$<<']($$($nesting, 'Step').$new((100)['$%']()));
          return block.$call();
        }, $Animation_to$6.$$arity = 1);
        return (Opal.def(self, '$method_missing', $Animation_method_missing$7 = function $$method_missing($a) {
          var $iter = $Animation_method_missing$7.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $Animation_method_missing$7.$$p = null;
          
          
          if ($iter) $Animation_method_missing$7.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.steps.$last(), '__send__', Opal.to_a(args), block.$to_proc());
        }, $Animation_method_missing$7.$$arity = -1), nil) && 'method_missing';
      })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["paggio/css"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$each', '$start_with?', '$+', '$[]', '$==', '$attr_reader', '$raise', '$arity', '$instance_exec', '$to_proc', '$call', '$any?', '$include?', '$<<', '$new', '$selector', '$pop', '$method_missing', '$__send__', '$last']);
  
  self.$require("paggio/css/unit");
  self.$require("paggio/css/color");
  self.$require("paggio/css/definition");
  self.$require("paggio/css/rule");
  self.$require("paggio/css/font");
  self.$require("paggio/css/animation");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CSS');

      var $nesting = [self].concat($parent_nesting), $CSS_selector$1, $CSS_initialize$3, $CSS_rule$4, $CSS_media$7, $CSS_font$8, $CSS_animation$9, $CSS_method_missing$10;

      self.$$prototype.media = self.$$prototype.current = self.$$prototype.fonts = self.$$prototype.animations = nil;
      
      Opal.defs(self, '$selector', $CSS_selector$1 = function $$selector(list) {
        var $$2, self = this, result = nil;

        
        result = "";
        $send(list, 'each', [], ($$2 = function(part){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (part == null) {
            part = nil;
          };
          if ($truthy(part['$start_with?']("&"))) {
            return (result = $rb_plus(result, part['$[]']($range(1, -1, false))))
          } else {
            return (result = $rb_plus(result, $rb_plus(" ", part)))
          };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        if (result['$[]'](0)['$=='](" ")) {
          return result['$[]']($range(1, -1, false))
        } else {
          return result
        };
      }, $CSS_selector$1.$$arity = 1);
      self.$attr_reader("rules", "media", "fonts", "animations");
      
      Opal.def(self, '$initialize', $CSS_initialize$3 = function $$initialize() {
        var $iter = $CSS_initialize$3.$$p, block = $iter || nil, self = this;

        if ($iter) $CSS_initialize$3.$$p = null;
        
        
        if ($iter) $CSS_initialize$3.$$p = null;;
        if ($truthy(block)) {
        } else {
          $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "no block given")
        };
        self.selector = [];
        self.current = [];
        self.rules = [];
        self.fonts = [];
        self.animations = [];
        if (block.$arity()['$=='](0)) {
          return $send(self, 'instance_exec', [], block.$to_proc())
        } else {
          return block.$call(self)
        };
      }, $CSS_initialize$3.$$arity = 0);
      
      Opal.def(self, '$rule', $CSS_rule$4 = function $$rule($a) {
        var $iter = $CSS_rule$4.$$p, block = $iter || nil, $post_args, names, $$5, $$6, self = this;

        if ($iter) $CSS_rule$4.$$p = null;
        
        
        if ($iter) $CSS_rule$4.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        if ($truthy(block)) {
        } else {
          return nil
        };
        if ($truthy($send(names, 'any?', [], ($$5 = function(n){var self = $$5.$$s == null ? this : $$5.$$s;

          
          
          if (n == null) {
            n = nil;
          };
          return n['$include?'](",");}, $$5.$$s = self, $$5.$$arity = 1, $$5)))) {
          $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "selectors cannot contain commas")};
        return $send(names, 'each', [], ($$6 = function(name){var self = $$6.$$s == null ? this : $$6.$$s;
          if (self.selector == null) self.selector = nil;
          if (self.current == null) self.current = nil;
          if (self.media == null) self.media = nil;
          if (self.rules == null) self.rules = nil;

          
          
          if (name == null) {
            name = nil;
          };
          self.selector['$<<'](name);
          self.current['$<<']($$($nesting, 'Rule').$new($$($nesting, 'CSS').$selector(self.selector), self.media));
          block.$call();
          self.selector.$pop();
          return self.rules['$<<'](self.current.$pop());}, $$6.$$s = self, $$6.$$arity = 1, $$6));
      }, $CSS_rule$4.$$arity = -1);
      
      Opal.def(self, '$media', $CSS_media$7 = function $$media(query, $a) {
        var $iter = $CSS_media$7.$$p, block = $iter || nil, $post_args, args, $b, self = this, old = nil;

        if ($iter) $CSS_media$7.$$p = null;
        
        
        if ($iter) $CSS_media$7.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        if ($truthy(block)) {
          
          $b = [self.media, query], (old = $b[0]), (self.media = $b[1]), $b;
          block.$call();
          return (self.media = old);
        } else {
          return $send(self, 'method_missing', ["media", query].concat(Opal.to_a(args)))
        };
      }, $CSS_media$7.$$arity = -2);
      
      Opal.def(self, '$font', $CSS_font$8 = function $$font(name, $a) {
        var $iter = $CSS_font$8.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $CSS_font$8.$$p = null;
        
        
        if ($iter) $CSS_font$8.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        if ($truthy(block)) {
          
          self.current['$<<']($$($nesting, 'Font').$new(name));
          block.$call();
          return self.fonts['$<<'](self.current.$pop());
        } else {
          return $send(self, 'method_missing', ["font", name].concat(Opal.to_a(args)))
        };
      }, $CSS_font$8.$$arity = -2);
      
      Opal.def(self, '$animation', $CSS_animation$9 = function $$animation(name, $a) {
        var $iter = $CSS_animation$9.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $CSS_animation$9.$$p = null;
        
        
        if ($iter) $CSS_animation$9.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        if ($truthy(block)) {
          
          self.current['$<<']($$($nesting, 'Animation').$new(name));
          block.$call();
          return self.animations['$<<'](self.current.$pop());
        } else {
          return $send(self, 'method_missing', ["animation", name].concat(Opal.to_a(args)))
        };
      }, $CSS_animation$9.$$arity = -2);
      return (Opal.def(self, '$method_missing', $CSS_method_missing$10 = function $$method_missing($a) {
        var $iter = $CSS_method_missing$10.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $CSS_method_missing$10.$$p = null;
        
        
        if ($iter) $CSS_method_missing$10.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return $send(self.current.$last(), '__send__', Opal.to_a(args), block.$to_proc());
      }, $CSS_method_missing$10.$$arity = -1), nil) && 'method_missing';
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTML');

      var $nesting = [self].concat($parent_nesting), $HTML_style$11;

      self.$$prototype.current = self.$$prototype.roots = nil;
      return (Opal.def(self, '$style', $HTML_style$11 = function $$style() {
        var $iter = $HTML_style$11.$$p, block = $iter || nil, self = this, $ret_or_1 = nil;

        if ($iter) $HTML_style$11.$$p = null;
        
        
        if ($iter) $HTML_style$11.$$p = null;;
        return (function() {if ($truthy(($ret_or_1 = self.current))) {
          return $ret_or_1
        } else {
          return self.roots
        }; return nil; })()['$<<']($send($$($nesting, 'CSS'), 'new', [], block.$to_proc()));
      }, $HTML_style$11.$$arity = 0), nil) && 'style'
    })($nesting[0], $$($nesting, 'BasicObject'), $nesting);
  })($nesting[0], null, $nesting);
};

Opal.modules["stringio"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $alias = Opal.alias, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$call', '$close', '$attr_accessor', '$check_readable', '$==', '$length', '$===', '$>=', '$raise', '$>', '$+', '$-', '$seek', '$check_writable', '$String', '$[]', '$eof?', '$write', '$read']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'StringIO');

    var $nesting = [self].concat($parent_nesting), $StringIO_open$1, $StringIO_initialize$2, $StringIO_eof$ques$3, $StringIO_seek$4, $StringIO_tell$5, $StringIO_rewind$6, $StringIO_write$7, $StringIO_read$8, $StringIO_sysread$9;

    self.$$prototype.position = self.$$prototype.string = nil;
    
    Opal.defs(self, '$open', $StringIO_open$1 = function $$open(string, mode) {
      var $iter = $StringIO_open$1.$$p, block = $iter || nil, self = this, io = nil, res = nil;

      if ($iter) $StringIO_open$1.$$p = null;
      
      
      if ($iter) $StringIO_open$1.$$p = null;;
      
      if (string == null) {
        string = "";
      };
      
      if (mode == null) {
        mode = nil;
      };
      io = self.$new(string, mode);
      res = block.$call(io);
      io.$close();
      return res;
    }, $StringIO_open$1.$$arity = -1);
    self.$attr_accessor("string");
    
    Opal.def(self, '$initialize', $StringIO_initialize$2 = function $$initialize(string, mode) {
      var $iter = $StringIO_initialize$2.$$p, $yield = $iter || nil, self = this;

      if ($iter) $StringIO_initialize$2.$$p = null;
      
      
      if (string == null) {
        string = "";
      };
      
      if (mode == null) {
        mode = "rw";
      };
      self.string = string;
      self.position = 0;
      return $send2(self, $find_super(self, 'initialize', $StringIO_initialize$2, false, true), 'initialize', [nil, mode], null);
    }, $StringIO_initialize$2.$$arity = -1);
    
    Opal.def(self, '$eof?', $StringIO_eof$ques$3 = function() {
      var self = this;

      
      self.$check_readable();
      return self.position['$=='](self.string.$length());
    }, $StringIO_eof$ques$3.$$arity = 0);
    $alias(self, "eof", "eof?");
    
    Opal.def(self, '$seek', $StringIO_seek$4 = function $$seek(pos, whence) {
      var self = this, $case = nil;

      
      
      if (whence == null) {
        whence = $$$($$($nesting, 'IO'), 'SEEK_SET');
      };
      self.read_buffer = "";
      $case = whence;
      if ($$$($$($nesting, 'IO'), 'SEEK_SET')['$===']($case)) {
      if ($truthy($rb_ge(pos, 0))) {
      } else {
        self.$raise($$$($$($nesting, 'Errno'), 'EINVAL'))
      };
      self.position = pos;}
      else if ($$$($$($nesting, 'IO'), 'SEEK_CUR')['$===']($case)) {if ($truthy($rb_gt($rb_plus(self.position, pos), self.string.$length()))) {
        self.position = self.string.$length()
      } else {
        self.position = $rb_plus(self.position, pos)
      }}
      else if ($$$($$($nesting, 'IO'), 'SEEK_END')['$===']($case)) {if ($truthy($rb_gt(pos, self.string.$length()))) {
        self.position = 0
      } else {
        self.position = $rb_minus(self.position, pos)
      }};
      return 0;
    }, $StringIO_seek$4.$$arity = -2);
    
    Opal.def(self, '$tell', $StringIO_tell$5 = function $$tell() {
      var self = this;

      return self.position
    }, $StringIO_tell$5.$$arity = 0);
    $alias(self, "pos", "tell");
    $alias(self, "pos=", "seek");
    
    Opal.def(self, '$rewind', $StringIO_rewind$6 = function $$rewind() {
      var self = this;

      return self.$seek(0)
    }, $StringIO_rewind$6.$$arity = 0);
    
    Opal.def(self, '$write', $StringIO_write$7 = function $$write(string) {
      var self = this, before = nil, after = nil;

      
      self.$check_writable();
      self.read_buffer = "";
      string = self.$String(string);
      if (self.string.$length()['$=='](self.position)) {
        
        self.string = $rb_plus(self.string, string);
        return (self.position = $rb_plus(self.position, string.$length()));
      } else {
        
        before = self.string['$[]'](Opal.Range.$new(0, $rb_minus(self.position, 1), false));
        after = self.string['$[]'](Opal.Range.$new($rb_plus(self.position, string.$length()), -1, false));
        self.string = $rb_plus($rb_plus(before, string), after);
        return (self.position = $rb_plus(self.position, string.$length()));
      };
    }, $StringIO_write$7.$$arity = 1);
    
    Opal.def(self, '$read', $StringIO_read$8 = function $$read(length, outbuf) {
      var self = this, string = nil, str = nil;

      
      
      if (length == null) {
        length = nil;
      };
      
      if (outbuf == null) {
        outbuf = nil;
      };
      self.$check_readable();
      if ($truthy(self['$eof?']())) {
        return nil};
      string = (function() {if ($truthy(length)) {
        
        str = self.string['$[]'](self.position, length);
        self.position = $rb_plus(self.position, length);
        if ($truthy($rb_gt(self.position, self.string.$length()))) {
          self.position = self.string.$length()};
        return str;
      } else {
        
        str = self.string['$[]'](Opal.Range.$new(self.position, -1, false));
        self.position = self.string.$length();
        return str;
      }; return nil; })();
      if ($truthy(outbuf)) {
        return outbuf.$write(string)
      } else {
        return string
      };
    }, $StringIO_read$8.$$arity = -1);
    
    Opal.def(self, '$sysread', $StringIO_sysread$9 = function $$sysread(length) {
      var self = this;

      
      self.$check_readable();
      return self.$read(length);
    }, $StringIO_sysread$9.$$arity = 1);
    return $alias(self, "readpartial", "read");
  })($nesting[0], $$($nesting, 'IO'), $nesting)
};

Opal.modules["paggio/formatter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$[]=', '$to_h', '$-', '$[]', '$dup', '$deep_merge!', '$call', '$replace', '$===', '$new', '$merge', '$each', '$string', '$indent?', '$+', '$lines', '$puts', '$*', '$chomp', '$print', '$gsub', '$to_s', '$for', '$version', '$indent', '$format', '$instance_eval', '$empty?', '$map', '$escape', '$<<', '$join', '$include?', '$downcase', '$name', '$value', '$important', '$fonts', '$animations', '$steps', '$reverse', '$rules', '$media', '$selector', '$deindent']);
  
  self.$require("stringio");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting), $Paggio$14, $Paggio$17, $Paggio$24, $Paggio$25;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Formatter');

      var $nesting = [self].concat($parent_nesting), $Formatter_to_h$1, $Formatter_for$2, $Formatter_options$3, $Formatter_initialize$4, $Formatter_format$5, $Formatter_to_s$7, $Formatter_indent$ques$8, $Formatter_indent$9, $Formatter_deindent$10, $Formatter_print$11, $Formatter_escape$13;

      self.$$prototype.options = self.$$prototype.io = nil;
      
      Opal.defs(self, '$to_h', $Formatter_to_h$1 = function $$to_h() {
        var self = this, $ret_or_1 = nil;
        if (self.formatters == null) self.formatters = nil;

        return (self.formatters = (function() {if ($truthy(($ret_or_1 = self.formatters))) {
          return $ret_or_1
        } else {
          return $hash2([], {})
        }; return nil; })())
      }, $Formatter_to_h$1.$$arity = 0);
      Opal.defs(self, '$for', $Formatter_for$2 = function(klass) {
        var $iter = $Formatter_for$2.$$p, block = $iter || nil, self = this, $writer = nil;

        if ($iter) $Formatter_for$2.$$p = null;
        
        
        if ($iter) $Formatter_for$2.$$p = null;;
        if ($truthy(block)) {
          
          $writer = [klass, block];
          $send(self.$to_h(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return self.$to_h()['$[]'](klass)
        };
      }, $Formatter_for$2.$$arity = 1);
      Opal.defs(self, '$options', $Formatter_options$3 = function $$options(options) {
        var $iter = $Formatter_options$3.$$p, block = $iter || nil, self = this, old = nil, result = nil;

        if ($iter) $Formatter_options$3.$$p = null;
        
        
        if ($iter) $Formatter_options$3.$$p = null;;
        old = $$($nesting, 'OPTIONS').$dup();
        $$($nesting, 'Utils')['$deep_merge!']($$($nesting, 'OPTIONS'), options);
        result = block.$call();
        $$($nesting, 'OPTIONS').$replace(old);
        return result;
      }, $Formatter_options$3.$$arity = 1);
      Opal.const_set($nesting[0], 'OPTIONS', $hash2(["indent"], {"indent": $hash2(["level", "with"], {"level": 0, "with": "\t"})}));
      
      Opal.def(self, '$initialize', $Formatter_initialize$4 = function $$initialize(io, options) {
        var self = this, $ret_or_2 = nil;

        
        
        if (io == null) {
          io = nil;
        };
        
        if (options == null) {
          options = $hash2([], {});
        };
        if ($truthy($$($nesting, 'Hash')['$==='](io))) {
          
          self.io = $$($nesting, 'StringIO').$new();
          self.options = io;
        } else {
          
          self.io = (function() {if ($truthy(($ret_or_2 = io))) {
            return $ret_or_2
          } else {
            return $$($nesting, 'StringIO').$new()
          }; return nil; })();
          self.options = options;
        };
        return (self.options = $$($nesting, 'OPTIONS').$merge(self.options));
      }, $Formatter_initialize$4.$$arity = -1);
      
      Opal.def(self, '$format', $Formatter_format$5 = function $$format(item) {
        var $$6, self = this;

        
        (function(){var $brk = Opal.new_brk(); try {return $send($$($nesting, 'Formatter').$to_h(), 'each', [], ($$6 = function(klass, block){var self = $$6.$$s == null ? this : $$6.$$s;

          
          
          if (klass == null) {
            klass = nil;
          };
          
          if (block == null) {
            block = nil;
          };
          if ($truthy(klass['$==='](item))) {
            
            block.$call(self, item);
            
            Opal.brk(nil, $brk);
          } else {
            return nil
          };}, $$6.$$s = self, $$6.$$brk = $brk, $$6.$$arity = 2, $$6))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return self;
      }, $Formatter_format$5.$$arity = 1);
      
      Opal.def(self, '$to_s', $Formatter_to_s$7 = function $$to_s() {
        var self = this;

        return self.io.$string()
      }, $Formatter_to_s$7.$$arity = 0);
      
      Opal.def(self, '$indent?', $Formatter_indent$ques$8 = function() {
        var $iter = $Formatter_indent$ques$8.$$p, block = $iter || nil, self = this;

        if ($iter) $Formatter_indent$ques$8.$$p = null;
        
        
        if ($iter) $Formatter_indent$ques$8.$$p = null;;
        try {
          return self.options['$[]']("indent")['$[]']("level")
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
            try {
              return false
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };
      }, $Formatter_indent$ques$8.$$arity = 0);
      
      Opal.def(self, '$indent', $Formatter_indent$9 = function $$indent() {
        var $iter = $Formatter_indent$9.$$p, block = $iter || nil, self = this, $binary_op_recvr_tmp_1 = nil, $writer = nil, $binary_op_recvr_tmp_2 = nil, $binary_op_recvr_tmp_3 = nil;

        if ($iter) $Formatter_indent$9.$$p = null;
        
        
        if ($iter) $Formatter_indent$9.$$p = null;;
        if ($truthy(self['$indent?']())) {
          if ($truthy(block)) {
            
            
            $binary_op_recvr_tmp_1 = self.options['$[]']("indent");
            
            $writer = ["level", $rb_plus($binary_op_recvr_tmp_1['$[]']("level"), 1)];
            $send($binary_op_recvr_tmp_1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;;
            block.$call();
            
            $binary_op_recvr_tmp_2 = self.options['$[]']("indent");
            
            $writer = ["level", $rb_minus($binary_op_recvr_tmp_2['$[]']("level"), 1)];
            $send($binary_op_recvr_tmp_2, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;;
          } else {
            
            $binary_op_recvr_tmp_3 = self.options['$[]']("indent");
            
            $writer = ["level", $rb_plus($binary_op_recvr_tmp_3['$[]']("level"), 1)];
            $send($binary_op_recvr_tmp_3, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }
        } else if ($truthy(block)) {
          return block.$call()
        } else {
          return nil
        };
      }, $Formatter_indent$9.$$arity = 0);
      
      Opal.def(self, '$deindent', $Formatter_deindent$10 = function $$deindent() {
        var self = this, $binary_op_recvr_tmp_4 = nil, $writer = nil;

        if ($truthy(self['$indent?']())) {
          
          $binary_op_recvr_tmp_4 = self.options['$[]']("indent");
          
          $writer = ["level", $rb_minus($binary_op_recvr_tmp_4['$[]']("level"), 1)];
          $send($binary_op_recvr_tmp_4, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        } else {
          return nil
        }
      }, $Formatter_deindent$10.$$arity = 0);
      
      Opal.def(self, '$print', $Formatter_print$11 = function $$print(text) {
        var $$12, self = this, level = nil;

        if ($truthy((level = self['$indent?']()))) {
          return $send(text.$lines(), 'each', [], ($$12 = function(line){var self = $$12.$$s == null ? this : $$12.$$s;
            if (self.io == null) self.io = nil;
            if (self.options == null) self.options = nil;

            
            
            if (line == null) {
              line = nil;
            };
            return self.io.$puts("" + ($rb_times(self.options['$[]']("indent")['$[]']("with"), level)) + (line.$chomp()));}, $$12.$$s = self, $$12.$$arity = 1, $$12))
        } else {
          return self.io.$print(text)
        }
      }, $Formatter_print$11.$$arity = 1);
      return (Opal.def(self, '$escape', $Formatter_escape$13 = function $$escape(string) {
        var self = this;

        return string.$to_s().$gsub(/["><']|&(?!([a-zA-Z]+|(#\d+));)/, $hash2(["&", ">", "<", "\"", "'"], {"&": "&amp;", ">": "&gt;", "<": "&lt;", "\"": "&quot;", "'": "&#39;"}))
      }, $Formatter_escape$13.$$arity = 1), nil) && 'escape';
    })($nesting[0], null, $nesting);
    $send($$($nesting, 'Formatter'), 'for', [$$($nesting, 'HTML')], ($Paggio$14 = function(f, item){var self = $Paggio$14.$$s == null ? this : $Paggio$14.$$s, $$15, $case = nil;

      
      
      if (f == null) {
        f = nil;
      };
      
      if (item == null) {
        item = nil;
      };
      $case = item.$version();
      if ((5)['$===']($case)) {f.$print("<!DOCTYPE html>")};
      f.$print("<html>");
      $send(f, 'indent', [], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s, $$16;

        return $send(item, 'each', [], ($$16 = function(root){var self = $$16.$$s == null ? this : $$16.$$s;

          
          
          if (root == null) {
            root = nil;
          };
          return f.$format(root);}, $$16.$$s = self, $$16.$$arity = 1, $$16))}, $$15.$$s = self, $$15.$$arity = 0, $$15));
      return f.$print("</html>");}, $Paggio$14.$$s = self, $Paggio$14.$$arity = 2, $Paggio$14));
    $send($$($nesting, 'Formatter'), 'for', [$$$($$($nesting, 'HTML'), 'Element')], ($Paggio$17 = function(f, item){var self = $Paggio$17.$$s == null ? this : $Paggio$17.$$s, $a, $b, $$18, $$19, $$20, name = nil, attributes = nil, class_names = nil, $ret_or_3 = nil, attrs = nil;

      
      
      if (f == null) {
        f = nil;
      };
      
      if (item == null) {
        item = nil;
      };
      $b = $send(item, 'instance_eval', [], ($$18 = function(){var self = $$18.$$s == null ? this : $$18.$$s;
        if (self.name == null) self.name = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.class_names == null) self.class_names = nil;

        return [self.name, self.attributes, self.class_names]}, $$18.$$s = self, $$18.$$arity = 0, $$18)), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (attributes = ($a[1] == null ? nil : $a[1])), (class_names = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy((function() {if ($truthy(($ret_or_3 = attributes['$empty?']()))) {
        return class_names['$empty?']()
      } else {
        return $ret_or_3
      }; return nil; })())) {
        f.$print("" + "<" + (name) + ">")
      } else {
        
        attrs = $send(attributes, 'map', [], ($$19 = function(key, value){var self = $$19.$$s == null ? this : $$19.$$s;

          
          
          if (key == null) {
            key = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          return "" + (f.$escape(key)) + "=\"" + (f.$escape(value)) + "\"";}, $$19.$$s = self, $$19.$$arity = 2, $$19));
        if ($truthy(class_names['$empty?']())) {
        } else {
          attrs['$<<']("" + "class=\"" + (f.$escape(class_names.$join(" "))) + "\"")
        };
        f.$print("" + "<" + (name) + " " + (attrs.$join(" ")) + ">");
      };
      if ($truthy(["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]['$include?'](name.$to_s().$downcase()))) {
        return nil;};
      $send(f, 'indent', [], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s, $$21, $$22, inner = nil;

        if ($truthy((inner = $send(item, 'instance_eval', [], ($$21 = function(){var self = $$21.$$s == null ? this : $$21.$$s;
          if (self.inner_html == null) self.inner_html = nil;

          return self.inner_html}, $$21.$$s = self, $$21.$$arity = 0, $$21))))) {
          return f.$print(inner)
        } else {
          return $send(item, 'each', [], ($$22 = function(child){var self = $$22.$$s == null ? this : $$22.$$s, $$23, $case = nil;

            
            
            if (child == null) {
              child = nil;
            };
            return (function() {$case = child;
            if ($$($nesting, 'String')['$===']($case)) {return f.$print(f.$escape(child))}
            else if ($$($nesting, 'CSS')['$===']($case)) {
            f.$print("<style>");
            $send(f, 'indent', [], ($$23 = function(){var self = $$23.$$s == null ? this : $$23.$$s;

              return f.$format(child)}, $$23.$$s = self, $$23.$$arity = 0, $$23));
            return f.$print("</style>");}
            else {return f.$format(child)}})();}, $$22.$$s = self, $$22.$$arity = 1, $$22))
        }}, $$20.$$s = self, $$20.$$arity = 0, $$20));
      return f.$print("" + "</" + (name) + ">");}, $Paggio$17.$$s = self, $Paggio$17.$$arity = 2, $Paggio$17));
    $send($$($nesting, 'Formatter'), 'for', [$$$($$$($$($nesting, 'CSS'), 'Definition'), 'Style')], ($Paggio$24 = function(f, style){var self = $Paggio$24.$$s == null ? this : $Paggio$24.$$s;

      
      
      if (f == null) {
        f = nil;
      };
      
      if (style == null) {
        style = nil;
      };
      return f.$print("" + (style.$name()) + ": " + (style.$value()) + ((function() {if ($truthy(style.$important())) {
        return " !important"
      } else {
        return nil
      }; return nil; })()) + ";");}, $Paggio$24.$$s = self, $Paggio$24.$$arity = 2, $Paggio$24));
    return $send($$($nesting, 'Formatter'), 'for', [$$($nesting, 'CSS')], ($Paggio$25 = function(f, item){var self = $Paggio$25.$$s == null ? this : $Paggio$25.$$s, $$26, $$29, $$33;

      
      
      if (f == null) {
        f = nil;
      };
      
      if (item == null) {
        item = nil;
      };
      $send(item.$fonts(), 'each', [], ($$26 = function(font){var self = $$26.$$s == null ? this : $$26.$$s, $$27;

        
        
        if (font == null) {
          font = nil;
        };
        f.$print("@font-face {");
        $send(f, 'indent', [], ($$27 = function(){var self = $$27.$$s == null ? this : $$27.$$s, $$28;

          return $send(font, 'each', [], ($$28 = function(style){var self = $$28.$$s == null ? this : $$28.$$s;

            
            
            if (style == null) {
              style = nil;
            };
            return f.$format(style);}, $$28.$$s = self, $$28.$$arity = 1, $$28))}, $$27.$$s = self, $$27.$$arity = 0, $$27));
        return f.$print("}");}, $$26.$$s = self, $$26.$$arity = 1, $$26));
      $send(item.$animations(), 'each', [], ($$29 = function(animation){var self = $$29.$$s == null ? this : $$29.$$s, $$30;

        
        
        if (animation == null) {
          animation = nil;
        };
        return $send(["", "-webkit-", "-moz-", "-o-"], 'each', [], ($$30 = function(platform){var self = $$30.$$s == null ? this : $$30.$$s, $$31;

          
          
          if (platform == null) {
            platform = nil;
          };
          f.$print("" + "@" + (platform) + "keyframes " + (animation.$name()) + " {");
          $send(animation.$steps(), 'each', [], ($$31 = function(step){var self = $$31.$$s == null ? this : $$31.$$s, $$32;

            
            
            if (step == null) {
              step = nil;
            };
            f.$print("" + (step.$value()) + " {");
            $send(step, 'each', [], ($$32 = function(style){var self = $$32.$$s == null ? this : $$32.$$s;

              
              
              if (style == null) {
                style = nil;
              };
              return f.$format(style);}, $$32.$$s = self, $$32.$$arity = 1, $$32));
            return f.$print("}");}, $$31.$$s = self, $$31.$$arity = 1, $$31));
          return f.$print("}");}, $$30.$$s = self, $$30.$$arity = 1, $$30));}, $$29.$$s = self, $$29.$$arity = 1, $$29));
      return $send(item.$rules().$reverse(), 'each', [], ($$33 = function(rule){var self = $$33.$$s == null ? this : $$33.$$s, $$34, m = nil;

        
        
        if (rule == null) {
          rule = nil;
        };
        if ($truthy(rule['$empty?']())) {
          return nil;};
        if ($truthy((m = rule.$media()))) {
          
          f.$print("" + "@media " + (m) + " {");
          f.$indent();};
        f.$print("" + (rule.$selector()) + " {");
        $send(f, 'indent', [], ($$34 = function(){var self = $$34.$$s == null ? this : $$34.$$s, $$35;

          return $send(rule, 'each', [], ($$35 = function(style){var self = $$35.$$s == null ? this : $$35.$$s;

            
            
            if (style == null) {
              style = nil;
            };
            return f.$format(style);}, $$35.$$s = self, $$35.$$arity = 1, $$35))}, $$34.$$s = self, $$34.$$arity = 0, $$34));
        f.$print("}");
        if ($truthy(rule.$media())) {
          
          f.$print("}");
          return f.$deindent();
        } else {
          return nil
        };}, $$33.$$s = self, $$33.$$arity = 1, $$33));}, $Paggio$25.$$s = self, $Paggio$25.$$arity = 2, $Paggio$25));
  })($nesting[0], null, $nesting);
};

Opal.modules["paggio"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$options', '$to_proc', '$to_s', '$format', '$new', '$tap', '$each']);
  
  self.$require("paggio/utils");
  self.$require("paggio/html");
  self.$require("paggio/css");
  self.$require("paggio/formatter");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paggio');

    var $nesting = [self].concat($parent_nesting), $Paggio_options$1, $Paggio_indent$2, $Paggio_css$3, $Paggio_html$4, $Paggio_html$excl$5;

    
    Opal.defs(self, '$options', $Paggio_options$1 = function $$options(options) {
      var $iter = $Paggio_options$1.$$p, block = $iter || nil, self = this;

      if ($iter) $Paggio_options$1.$$p = null;
      
      
      if ($iter) $Paggio_options$1.$$p = null;;
      return $send($$($nesting, 'Formatter'), 'options', [options], block.$to_proc());
    }, $Paggio_options$1.$$arity = 1);
    Opal.defs(self, '$indent', $Paggio_indent$2 = function $$indent(options) {
      var $iter = $Paggio_indent$2.$$p, block = $iter || nil, self = this;

      if ($iter) $Paggio_indent$2.$$p = null;
      
      
      if ($iter) $Paggio_indent$2.$$p = null;;
      return $send(self, 'options', [$hash2(["indent"], {"indent": options})], block.$to_proc());
    }, $Paggio_indent$2.$$arity = 1);
    Opal.defs(self, '$css', $Paggio_css$3 = function $$css($a) {
      var $iter = $Paggio_css$3.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Paggio_css$3.$$p = null;
      
      
      if ($iter) $Paggio_css$3.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $$($nesting, 'Formatter').$new().$format($send($$($nesting, 'CSS'), 'new', Opal.to_a(args), block.$to_proc())).$to_s();
    }, $Paggio_css$3.$$arity = -1);
    Opal.defs(self, '$html', $Paggio_html$4 = function $$html($a) {
      var $iter = $Paggio_html$4.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Paggio_html$4.$$p = null;
      
      
      if ($iter) $Paggio_html$4.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $$($nesting, 'Formatter').$new().$format($send($$($nesting, 'HTML'), 'new', Opal.to_a(args), block.$to_proc())).$to_s();
    }, $Paggio_html$4.$$arity = -1);
    return (Opal.defs(self, '$html!', $Paggio_html$excl$5 = function() {
      var $iter = $Paggio_html$excl$5.$$p, block = $iter || nil, $$6, self = this;

      if ($iter) $Paggio_html$excl$5.$$p = null;
      
      
      if ($iter) $Paggio_html$excl$5.$$p = null;;
      return $send($$($nesting, 'Formatter').$new(), 'tap', [], ($$6 = function(f){var self = $$6.$$s == null ? this : $$6.$$s, $$7;

        
        
        if (f == null) {
          f = nil;
        };
        return $send($send($$($nesting, 'HTML'), 'new', [], block.$to_proc()), 'each', [], ($$7 = function(root){var self = $$7.$$s == null ? this : $$7.$$s;

          
          
          if (root == null) {
            root = nil;
          };
          return f.$format(root);}, $$7.$$s = self, $$7.$$arity = 1, $$7));}, $$6.$$s = self, $$6.$$arity = 1, $$6)).$to_s();
    }, $Paggio_html$excl$5.$$arity = 0), nil) && 'html!';
  })($nesting[0], null, $nesting);
};

Opal.modules["browser/version"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return Opal.const_set($nesting[0], 'VERSION', "0.2.0")
  })($nesting[0], $nesting)
};

Opal.modules["browser/utils"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$new', '$encode_uri', '$to_s', '$encode_uri_component', '$[]', '$map', '$split', '$decode_uri_component', '$join']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'Size', $$($nesting, 'Struct').$new("width", "height"));
    return Opal.const_set($nesting[0], 'Position', $$($nesting, 'Struct').$new("x", "y"));
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_encode_uri$1, $Object_encode_uri_component$2;

    
    
    Opal.def(self, '$encode_uri', $Object_encode_uri$1 = function $$encode_uri() {
      var self = this;

      return self.$to_s().$encode_uri()
    }, $Object_encode_uri$1.$$arity = 0);
    return (Opal.def(self, '$encode_uri_component', $Object_encode_uri_component$2 = function $$encode_uri_component() {
      var self = this;

      return self.$to_s().$encode_uri_component()
    }, $Object_encode_uri_component$2.$$arity = 0), nil) && 'encode_uri_component';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_encode_uri_component$3, $String_encode_uri$4, $String_decode_uri_component$5, $String_decode_uri$6;

    
    
    Opal.def(self, '$encode_uri_component', $String_encode_uri_component$3 = function $$encode_uri_component() {
      var self = this;

      return encodeURIComponent(self);
    }, $String_encode_uri_component$3.$$arity = 0);
    
    Opal.def(self, '$encode_uri', $String_encode_uri$4 = function $$encode_uri() {
      var self = this;

      return encodeURI(self);
    }, $String_encode_uri$4.$$arity = 0);
    
    Opal.def(self, '$decode_uri_component', $String_decode_uri_component$5 = function $$decode_uri_component() {
      var self = this;

      return decodeURIComponent(self);
    }, $String_decode_uri_component$5.$$arity = 0);
    return (Opal.def(self, '$decode_uri', $String_decode_uri$6 = function $$decode_uri() {
      var self = this;

      return decodeURI(self);
    }, $String_decode_uri$6.$$arity = 0), nil) && 'decode_uri';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_decode_uri$7, $Hash_encode_uri$9;

    
    Opal.defs(self, '$decode_uri', $Hash_decode_uri$7 = function $$decode_uri(string) {
      var $$8, self = this;

      return self['$[]']($send(string.$split("&"), 'map', [], ($$8 = function(part){var self = $$8.$$s == null ? this : $$8.$$s, $a, $b, name = nil, value = nil;

        
        
        if (part == null) {
          part = nil;
        };
        $b = part.$split("="), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
        return [name.$decode_uri_component(), value.$decode_uri_component()];}, $$8.$$s = self, $$8.$$arity = 1, $$8)))
    }, $Hash_decode_uri$7.$$arity = 1);
    return (Opal.def(self, '$encode_uri', $Hash_encode_uri$9 = function $$encode_uri() {
      var $$10, self = this;

      return $send(self, 'map', [], ($$10 = function(name, value){var self = $$10.$$s == null ? this : $$10.$$s;

        
        
        if (name == null) {
          name = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return "" + (name.$to_s().$encode_uri_component()) + "=" + (value.$to_s().$encode_uri_component());}, $$10.$$s = self, $$10.$$arity = 2, $$10)).$join("&")
    }, $Hash_encode_uri$9.$$arity = 0), nil) && 'encode_uri';
  })($nesting[0], null, $nesting);
};

Opal.modules["browser/support"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$downcase', '$===', '$!', '$supports?']);
  
  Opal.const_set($nesting[0], 'BROWSER_ENGINE', (function() { try {
    return (/MSIE|WebKit|Presto|Gecko/.exec(navigator.userAgent)[0]).$downcase()
  } catch ($err) {
    if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
      try {
        return "unknown"
      } finally { Opal.pop_exception(); }
    } else { throw $err; }
  }})());
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting), $Browser_supports$ques$1, $Browser_loaded$ques$2;

    
    self.support = {};
    Opal.defs(self, '$supports?', $Browser_supports$ques$1 = function(feature) {
      var $a, self = this, support = nil, $case = nil, $ret_or_1 = nil;
      if (self.support == null) self.support = nil;

      
      if ($truthy((typeof(self.support[feature]) !== "undefined"))) {
        return self.support[feature]};
      support = (function() {$case = feature;
      if ("MutationObserver"['$===']($case)) {return (typeof(window.MutationObserver) !== "undefined")}
      else if ("WebSocket"['$===']($case)) {return (typeof(window.WebSocket) !== "undefined")}
      else if ("EventSource"['$===']($case)) {return (typeof(window.EventSource) !== "undefined")}
      else if ("XHR"['$===']($case)) {return (typeof(window.XMLHttpRequest) !== "undefined")}
      else if ("ActiveX"['$===']($case)) {return (typeof(window.ActiveXObject) !== "undefined")}
      else if ("WebSQL"['$===']($case)) {return (typeof(window.openDatabase) !== "undefined")}
      else if ("Query.css"['$===']($case)) {return (typeof(document.querySelectorAll) !== "undefined")}
      else if ("Query.xpath"['$===']($case)) {return (typeof(document.evaluate) !== "undefined")}
      else if ("Storage.local"['$===']($case)) {return (typeof(window.localStorage) !== "undefined")}
      else if ("Storage.global"['$===']($case)) {return (typeof(window.globalStorage) !== "undefined")}
      else if ("Storage.session"['$===']($case)) {return (typeof(window.sessionStorage) !== "undefined")}
      else if ("Immediate"['$===']($case)) {return (typeof(window.setImmediate) !== "undefined")}
      else if ("Immediate (Internet Explorer)"['$===']($case)) {return (typeof(window.msSetImmediate) !== "undefined")}
      else if ("Immediate (Firefox)"['$===']($case)) {return (typeof(window.mozSetImmediate) !== "undefined")}
      else if ("Immediate (Opera)"['$===']($case)) {return (typeof(window.oSetImmediate) !== "undefined")}
      else if ("Immediate (Chrome)"['$===']($case) || "setImmediate (Safari)"['$===']($case)) {return (typeof(window.webkitSetImmediate) !== "undefined")}
      else if ("CSS.computed"['$===']($case)) {return (typeof(window.getComputedStyle) !== "undefined")}
      else if ("CSS.current"['$===']($case)) {return (typeof(document.documentElement.currentStyle) !== "undefined")}
      else if ("Window.send"['$===']($case)) {return (typeof(window.postMessage) !== "undefined")}
      else if ("Window.send (Asynchronous)"['$===']($case)) {if ($truthy((function() {if ($truthy(($ret_or_1 = (typeof(window.postMessage) !== "undefined")))) {
        return (typeof(window.importScripts) !== "undefined")['$!']()
      } else {
        return $ret_or_1
      }; return nil; })())) {
        
            var ok  = true,
                old = window.onmessage;

            window.onmessage = function() { ok = false; };
            window.postMessage("", "*")
            window.onmessage = old;

            return ok;
          
      } else {
        return nil
      }}
      else if ("Window.send (Synchronous)"['$===']($case)) {return self['$supports?']("Window.send (Asynchronous)")['$!']()}
      else if ("Window.innerSize"['$===']($case)) {return (typeof(window.innerHeight) !== "undefined")}
      else if ("Window.outerSize"['$===']($case)) {return (typeof(window.outerHeight) !== "undefined")}
      else if ("Window.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}
      else if ("Window.pageOffset"['$===']($case)) {return (typeof(window.pageXOffset) !== "undefined")}
      else if ("Attr.isId"['$===']($case)) {
          var div = document.createElement('div');
              div.setAttribute('id', 'xxxxxxxxxxxxx');

          return typeof(div.attributes['id'].isId) !== "undefined";
        }
      else if ("Element.addBehavior"['$===']($case)) {return (typeof(document.documentElement.addBehavior) !== "undefined")}
      else if ("Element.className"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('className', 'x');

          return div.className === 'x';
        }
      else if ("Element.class"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('class', 'x');

          return div.className === 'x';
        }
      else if ("Element.for"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('for', 'x');

          return label.htmlFor === 'x';
        }
      else if ("Element.htmlFor"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('htmlFor', 'x');

          return label.htmlFor === 'x';
        }
      else if ("Element.clientSize"['$===']($case)) {return (typeof(document.documentElement.clientHeight) !== "undefined")}
      else if ("Element.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}
      else if ("Element.textContent"['$===']($case)) {return (typeof(document.documentElement.textContent) !== "undefined")}
      else if ("Element.innerText"['$===']($case)) {return (typeof(document.documentElement.innerText) !== "undefined")}
      else if ("Element.matches"['$===']($case)) {return (typeof(document.documentElement.matches) !== "undefined")}
      else if ("Element.matches (Internet Explorer)"['$===']($case)) {return (typeof(document.documentElement.msMatchesSelector) !== "undefined")}
      else if ("Element.matches (Firefox)"['$===']($case)) {return (typeof(document.documentElement.mozMatchesSelector) !== "undefined")}
      else if ("Element.matches (Opera)"['$===']($case)) {return (typeof(document.documentElement.oMatchesSelector) !== "undefined")}
      else if ("Element.matches (Chrome)"['$===']($case) || "Element.matches (Safari)"['$===']($case)) {return (typeof(document.documentElement.webkitMatchesSelector) !== "undefined")}
      else if ("Element.getBoundingClientRect"['$===']($case)) {return (typeof(document.documentElement.getBoundingClientRect) !== "undefined")}
      else if ("Event.readystatechange"['$===']($case)) {return "onreadystatechange" in window.document.createElement("script");}
      else if ("Event.constructor"['$===']($case)) {
      try {
        
        new MouseEvent("click");
        return true;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      };}
      else if ("Event.create"['$===']($case)) {return (typeof(document.createEvent) !== "undefined")}
      else if ("Event.createObject"['$===']($case)) {return (typeof(document.createEventObject) !== "undefined")}
      else if ("Event.addListener"['$===']($case)) {return (typeof(document.addEventListener) !== "undefined")}
      else if ("Event.attach"['$===']($case)) {return (typeof(document.attachEvent) !== "undefined")}
      else if ("Event.removeListener"['$===']($case)) {return (typeof(document.removeEventListener) !== "undefined")}
      else if ("Event.detach"['$===']($case)) {return (typeof(document.detachEvent) !== "undefined")}
      else if ("Event.dispatch"['$===']($case)) {return (typeof(document.dispatchEvent) !== "undefined")}
      else if ("Event.fire"['$===']($case)) {return (typeof(document.fireEvent) !== "undefined")}
      else if (/^Event\.([A-Z].*?)$/['$===']($case)) {return ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)) + "Event") in window}
      else if ("Document.view"['$===']($case)) {return (typeof(document.defaultView) !== "undefined")}
      else if ("Document.window"['$===']($case)) {return (typeof(document.parentWindow) !== "undefined")}
      else if ("History"['$===']($case)) {return (typeof(window.history.pushState) !== "undefined")}
      else if ("History.state"['$===']($case)) {return (typeof(window.history.state) !== "undefined")}
      else if ("Animation.request"['$===']($case)) {return (typeof(window.requestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Internet Explorer)"['$===']($case)) {return (typeof(window.msRequestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Firefox)"['$===']($case)) {return (typeof(window.mozRequestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Opera)"['$===']($case)) {return (typeof(window.oRequestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Chrome)"['$===']($case) || "Animation.request (Safari)"['$===']($case)) {return (typeof(window.webkitRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancel"['$===']($case)) {return (typeof(window.cancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Firefox)"['$===']($case)) {return (typeof(window.mozCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Opera)"['$===']($case)) {return (typeof(window.oCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Chrome)"['$===']($case) || "Animation.cancel (Safari)"['$===']($case)) {return (typeof(window.webkitCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest"['$===']($case)) {return (typeof(window.cancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Firefox)"['$===']($case)) {return (typeof(window.mozCancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Opera)"['$===']($case)) {return (typeof(window.oCancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Chrome)"['$===']($case) || "Animation.cancelRequest (Safari)"['$===']($case)) {return (typeof(window.webkitCancelRequestAnimationFrame) !== "undefined")}
      else { return nil }})();
      return self.support[feature] = support;
    }, $Browser_supports$ques$1.$$arity = 1);
    return (Opal.defs(self, '$loaded?', $Browser_loaded$ques$2 = function(name) {
      var self = this, $case = nil;

      return (function() {$case = name;
      if ("Sizzle"['$===']($case)) {return (typeof(window.Sizzle) !== "undefined")}
      else if ("wicked-good-xpath"['$===']($case)) {return (typeof(window.wgxpath) !== "undefined")}
      else { return nil }})()
    }, $Browser_loaded$ques$2.$$arity = 1), nil) && 'loaded?';
  })($nesting[0], $nesting);
};

Opal.modules["browser/event/base"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $send = Opal.send, $lambda = Opal.lambda, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$call', '$to_n', '$<<', '$converters', '$native?', '$each', '$instance_eval', '$register', '$to_proc', '$attr_reader', '$new', '$stopped?', '$arguments', '$!', '$prevented?', '$class_for', '$off', '$target', '$[]', '$delegated', '$delete', '$last', '$empty?', '$first', '$raise', '$name_for', '$handlers', '$[]=', '$-', '$include?', '$on!', '$delegate', '$callback=', '$on', '$handlers=', '$push', '$callbacks', '$attach', '$attach!', '$supports?', '$name', '$==', '$event', '$===', '$warn', '$detach', '$gsub', '$delete_if', '$=~', '$clear', '$none?', '$is_a?', '$create', '$dispatch', '$trigger', '$bubbles=', '$private', '$nil?', '$dup', '$on=', '$parent']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      
      self.$include($$($nesting, 'Native'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Definition');

        var $nesting = [self].concat($parent_nesting), $Definition_new$1, $Definition_bubbles$eq$2, $Definition_cancelable$eq$3;

        self.$$prototype["native"] = nil;
        
        self.$include($$($nesting, 'Native'));
        Opal.defs(self, '$new', $Definition_new$1 = function() {
          var $iter = $Definition_new$1.$$p, block = $iter || nil, self = this, data = nil;

          if ($iter) $Definition_new$1.$$p = null;
          
          
          if ($iter) $Definition_new$1.$$p = null;;
          data = $send2(self, $find_super(self, 'new', $Definition_new$1, false, true), 'new', [{ bubbles: true, cancelable: true }], null);
          if ($truthy(block)) {
            block.$call(data)};
          return data.$to_n();
        }, $Definition_new$1.$$arity = 0);
        
        Opal.def(self, '$bubbles=', $Definition_bubbles$eq$2 = function(value) {
          var self = this;

          return self["native"].bubbles = value
        }, $Definition_bubbles$eq$2.$$arity = 1);
        return (Opal.def(self, '$cancelable=', $Definition_cancelable$eq$3 = function(value) {
          var self = this;

          return self["native"].cancelable = value
        }, $Definition_cancelable$eq$3.$$arity = 1), nil) && 'cancelable=';
      })($nesting[0], null, $nesting);
      return (function($base, $parent_nesting) {
        var self = $module($base, 'Target');

        var $nesting = [self].concat($parent_nesting), $Target_converters$4, $Target_register$5, $Target_convert$6, $Target_included$8, $Target_on$19, $Target_on$excl$22, $Target_attach$23, $Target_attach$excl$24, $Target_attach$25, $Target_attach$excl$26, $Target_attach$27, $Target_attach$excl$28, $Target_off$29, $Target_detach$33, $Target_detach$34, $Target_detach$36, $Target_trigger$37, $Target_trigger$excl$38, $Target_dispatch$40, $Target_dispatch$41, $Target_dispatch$42, $Target_callbacks$43, $Target_delegated$44, $Target_delegate$45;

        
        Opal.defs(self, '$converters', $Target_converters$4 = function $$converters() {
          var self = this, $ret_or_1 = nil;
          if (self.converters == null) self.converters = nil;

          return (self.converters = (function() {if ($truthy(($ret_or_1 = self.converters))) {
            return $ret_or_1
          } else {
            return []
          }; return nil; })())
        }, $Target_converters$4.$$arity = 0);
        Opal.defs(self, '$register', $Target_register$5 = function $$register() {
          var $iter = $Target_register$5.$$p, block = $iter || nil, self = this;

          if ($iter) $Target_register$5.$$p = null;
          
          
          if ($iter) $Target_register$5.$$p = null;;
          return self.$converters()['$<<'](block);
        }, $Target_register$5.$$arity = 0);
        Opal.defs(self, '$convert', $Target_convert$6 = function $$convert(value) {try {

          var $$7, self = this;

          
          if ($truthy(self['$native?'](value))) {
          } else {
            return value
          };
          $send(self.$converters(), 'each', [], ($$7 = function(block){var self = $$7.$$s == null ? this : $$7.$$s, result = nil;

            
            
            if (block == null) {
              block = nil;
            };
            if ($truthy((result = block.$call(value)))) {
              Opal.ret(result)
            } else {
              return nil
            };}, $$7.$$s = self, $$7.$$arity = 1, $$7));
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $Target_convert$6.$$arity = 1);
        Opal.defs(self, '$included', $Target_included$8 = function $$included(klass) {
          var $$9, self = this;

          return $send(klass, 'instance_eval', [], ($$9 = function(){var self = $$9.$$s == null ? this : $$9.$$s, $target$10;

            return (Opal.defs(self, '$target', $target$10 = function $$target() {
              var $iter = $target$10.$$p, block = $iter || nil, self = this;

              if ($iter) $target$10.$$p = null;
              
              
              if ($iter) $target$10.$$p = null;;
              return $send($$$($$($nesting, 'Event'), 'Target'), 'register', [], block.$to_proc());
            }, $target$10.$$arity = 0), nil) && 'target'}, $$9.$$s = self, $$9.$$arity = 0, $$9))
        }, $Target_included$8.$$arity = 1);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Callback');

          var $nesting = [self].concat($parent_nesting), $Callback_initialize$11, $Callback_call$12, $Callback_to_proc$13, $Callback_event$15, $Callback_off$16;

          self.$$prototype.proc = self.$$prototype.name = nil;
          
          self.$attr_reader("target", "name", "selector");
          
          Opal.def(self, '$initialize', $Callback_initialize$11 = function $$initialize(target, name, selector) {
            var $iter = $Callback_initialize$11.$$p, block = $iter || nil, self = this;

            if ($iter) $Callback_initialize$11.$$p = null;
            
            
            if ($iter) $Callback_initialize$11.$$p = null;;
            
            if (selector == null) {
              selector = nil;
            };
            self.target = target;
            self.name = name;
            self.selector = selector;
            return (self.block = block);
          }, $Callback_initialize$11.$$arity = -3);
          
          Opal.def(self, '$call', $Callback_call$12 = function $$call(event) {
            var self = this;

            return self.$to_proc().$call(event)
          }, $Callback_call$12.$$arity = 1);
          
          Opal.def(self, '$to_proc', $Callback_to_proc$13 = function $$to_proc() {
            var $$14, self = this, $ret_or_2 = nil;

            return (self.proc = (function() {if ($truthy(($ret_or_2 = self.proc))) {
              return $ret_or_2
            } else {
              return $lambda(($$14 = function(event){var self = $$14.$$s == null ? this : $$14.$$s;
                if (self.block == null) self.block = nil;

                
                
                if (event == null) {
                  event = nil;
                };
                
            if (!event.currentTarget) {
              event.currentTarget = self.target.native;
            }
          ;
                event = $$($nesting, 'Event').$new(event, self);
                if ($truthy(event['$stopped?']())) {
                } else {
                  $send(self.block, 'call', [event].concat(Opal.to_a(event.$arguments())))
                };
                return event['$prevented?']()['$!']();}, $$14.$$s = self, $$14.$$arity = 1, $$14))
            }; return nil; })())
          }, $Callback_to_proc$13.$$arity = 0);
          
          Opal.def(self, '$event', $Callback_event$15 = function $$event() {
            var self = this;

            return $$($nesting, 'Event').$class_for(self.name)
          }, $Callback_event$15.$$arity = 0);
          return (Opal.def(self, '$off', $Callback_off$16 = function $$off() {
            var self = this;

            return self.$target().$off(self)
          }, $Callback_off$16.$$arity = 0), nil) && 'off';
        })($nesting[0], null, $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Delegate');

          var $nesting = [self].concat($parent_nesting), $Delegate_initialize$17, $Delegate_off$18;

          self.$$prototype.target = self.$$prototype.name = self.$$prototype.pair = nil;
          
          
          Opal.def(self, '$initialize', $Delegate_initialize$17 = function $$initialize(target, name, pair) {
            var self = this;

            
            self.target = target;
            self.name = name;
            return (self.pair = pair);
          }, $Delegate_initialize$17.$$arity = 3);
          return (Opal.def(self, '$off', $Delegate_off$18 = function $$off() {
            var self = this, delegate = nil;

            
            delegate = self.target.$delegated()['$[]'](self.name);
            delegate.$last().$delete(self.pair);
            if ($truthy(delegate.$last()['$empty?']())) {
              
              delegate.$first().$off();
              return delegate.$delete(self.name);
            } else {
              return nil
            };
          }, $Delegate_off$18.$$arity = 0), nil) && 'off';
        })($nesting[0], null, $nesting);
        Opal.const_set($nesting[0], 'Delegates', $$($nesting, 'Struct').$new("callback", "handlers"));
        
        Opal.def(self, '$on', $Target_on$19 = function $$on(name, selector) {
          var $iter = $Target_on$19.$$p, block = $iter || nil, $$20, $$21, self = this, delegate = nil, pair = nil, $writer = nil, callback = nil;

          if ($iter) $Target_on$19.$$p = null;
          
          
          if ($iter) $Target_on$19.$$p = null;;
          
          if (selector == null) {
            selector = nil;
          };
          if ($truthy(block)) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "no block has been given")
          };
          name = $$($nesting, 'Event').$name_for(name);
          if ($truthy(selector)) {
            if ($truthy((delegate = self.$delegated()['$[]'](name)))) {
              
              pair = [selector, block];
              delegate.$handlers()['$<<'](pair);
              return $$($nesting, 'Delegate').$new(self, name, pair);
            } else {
              
              delegate = (($writer = [name, $$($nesting, 'Delegates').$new()]), $send(self.$delegated(), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              if ($truthy(["blur", "focus"]['$include?'](name))) {
                
                $writer = [$send(self, 'on!', [name], ($$20 = function(e){var self = $$20.$$s == null ? this : $$20.$$s;

                  
                  
                  if (e == null) {
                    e = nil;
                  };
                  return self.$delegate(delegate, e);}, $$20.$$s = self, $$20.$$arity = 1, $$20))];
                $send(delegate, 'callback=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else {
                
                $writer = [$send(self, 'on', [name], ($$21 = function(e){var self = $$21.$$s == null ? this : $$21.$$s;

                  
                  
                  if (e == null) {
                    e = nil;
                  };
                  return self.$delegate(delegate, e);}, $$21.$$s = self, $$21.$$arity = 1, $$21))];
                $send(delegate, 'callback=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              pair = [selector, block];
              
              $writer = [[pair]];
              $send(delegate, 'handlers=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return $$($nesting, 'Delegate').$new(self, name, pair);
            }
          } else {
            
            callback = $send($$($nesting, 'Callback'), 'new', [self, name, selector], block.$to_proc());
            self.$callbacks().$push(callback);
            return self.$attach(callback);
          };
        }, $Target_on$19.$$arity = -2);
        
        Opal.def(self, '$on!', $Target_on$excl$22 = function(name) {
          var $iter = $Target_on$excl$22.$$p, block = $iter || nil, self = this, callback = nil;

          if ($iter) $Target_on$excl$22.$$p = null;
          
          
          if ($iter) $Target_on$excl$22.$$p = null;;
          if ($truthy(block)) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "no block has been given")
          };
          name = $$($nesting, 'Event').$name_for(name);
          callback = $send($$($nesting, 'Callback'), 'new', [self, name], block.$to_proc());
          self.$callbacks().$push(callback);
          return self['$attach!'](callback);
        }, $Target_on$excl$22.$$arity = 1);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Event.addListener"))) {
          
          
          Opal.def(self, '$attach', $Target_attach$23 = function $$attach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            
            self["native"].addEventListener(callback.$name(), callback.$to_proc());
            return callback;
          }, $Target_attach$23.$$arity = 1);
          
          Opal.def(self, '$attach!', $Target_attach$excl$24 = function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            
            self["native"].addEventListener(callback.$name(), callback.$to_proc(), true);
            return callback;
          }, $Target_attach$excl$24.$$arity = 1);
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.attach"))) {
          
          
          Opal.def(self, '$attach', $Target_attach$25 = function $$attach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            
            if (callback.$event()['$==']($$($nesting, 'Custom'))) {
              
            if (!self["native"].$custom) {
              self["native"].$custom = function(event) {
                for (var i = 0, length = self["native"].$callbacks.length; i < length; i++) {
                  var callback = self["native"].$callbacks[i];

                  if ((callback).$event()['$==']($$($nesting, 'Custom'))) {
                    event.type = callback.name;

                    (callback).$call(event);
                  }
                }
              };

              self["native"].attachEvent("ondataavailable", self["native"].$custom);
            }
          
            } else {
              self["native"].attachEvent("on" + callback.$name(), callback.$to_proc())
            };
            return callback;
          }, $Target_attach$25.$$arity = 1);
          
          Opal.def(self, '$attach!', $Target_attach$excl$26 = function(callback) {
            var self = this, $case = nil;
            if (self["native"] == null) self["native"] = nil;

            
            $case = callback.$name();
            if ("blur"['$===']($case)) {self["native"].attachEvent("onfocusout", callback.$to_proc())}
            else if ("focus"['$===']($case)) {self["native"].attachEvent("onfocusin", callback.$to_proc())}
            else {
            self.$warn("attach: capture doesn't work on this browser");
            self.$attach(callback);};
            return callback;
          }, $Target_attach$excl$26.$$arity = 1);
        } else {
          
          
          Opal.def(self, '$attach', $Target_attach$27 = function $$attach($a) {
            var $post_args, $rest_arg, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            $rest_arg = $post_args;;
            return self.$raise($$($nesting, 'NotImplementedError'));
          }, $Target_attach$27.$$arity = -1);
          
          Opal.def(self, '$attach!', $Target_attach$excl$28 = function($a) {
            var $post_args, $rest_arg, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            $rest_arg = $post_args;;
            return self.$raise($$($nesting, 'NotImplementedError'));
          }, $Target_attach$excl$28.$$arity = -1);
        };
        
        Opal.def(self, '$off', $Target_off$29 = function $$off(what) {
          var $$30, $$31, $$32, self = this, $case = nil, $ret_or_3 = nil;

          
          
          if (what == null) {
            what = nil;
          };
          return (function() {$case = what;
          if ($$($nesting, 'Callback')['$===']($case)) {
          self.$callbacks().$delete(what);
          return self.$detach(what);}
          else if ($$($nesting, 'String')['$===']($case)) {if ($truthy((function() {if ($truthy(($ret_or_3 = what['$include?']("*")))) {
            return $ret_or_3
          } else {
            return what['$include?']("?")
          }; return nil; })())) {
            return self.$off($$($nesting, 'Regexp').$new(what.$gsub(/\*/, ".*?").$gsub(/\?/, ".")))
          } else {
            
            what = $$($nesting, 'Event').$name_for(what);
            return $send(self.$callbacks(), 'delete_if', [], ($$30 = function(callback){var self = $$30.$$s == null ? this : $$30.$$s;

              
              
              if (callback == null) {
                callback = nil;
              };
              if (callback.$name()['$=='](what)) {
                
                self.$detach(callback);
                return true;
              } else {
                return nil
              };}, $$30.$$s = self, $$30.$$arity = 1, $$30));
          }}
          else if ($$($nesting, 'Regexp')['$===']($case)) {return $send(self.$callbacks(), 'delete_if', [], ($$31 = function(callback){var self = $$31.$$s == null ? this : $$31.$$s;

            
            
            if (callback == null) {
              callback = nil;
            };
            if ($truthy(callback.$name()['$=~'](what))) {
              
              self.$detach(callback);
              return true;
            } else {
              return nil
            };}, $$31.$$s = self, $$31.$$arity = 1, $$31))}
          else {
          $send(self.$callbacks(), 'each', [], ($$32 = function(callback){var self = $$32.$$s == null ? this : $$32.$$s;

            
            
            if (callback == null) {
              callback = nil;
            };
            return self.$detach(callback);}, $$32.$$s = self, $$32.$$arity = 1, $$32));
          return self.$callbacks().$clear();}})();
        }, $Target_off$29.$$arity = -1);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Event.removeListener"))) {
          
          Opal.def(self, '$detach', $Target_detach$33 = function $$detach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].removeEventListener(callback.$name(), callback.$to_proc(), false)
          }, $Target_detach$33.$$arity = 1)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.detach"))) {
          
          Opal.def(self, '$detach', $Target_detach$34 = function $$detach(callback) {
            var $$35, self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$==']($$($nesting, 'Custom'))) {
              if ($truthy($send(self.$callbacks(), 'none?', [], ($$35 = function(c){var self = $$35.$$s == null ? this : $$35.$$s;

                
                
                if (c == null) {
                  c = nil;
                };
                return c.$event()['$==']($$($nesting, 'Custom'));}, $$35.$$s = self, $$35.$$arity = 1, $$35)))) {
                
              self["native"].detachEvent("ondataavailable", self["native"].$custom);

              delete self["native"].$custom;
            
              } else {
                return nil
              }
            } else {
              return self["native"].detachEvent("on" + callback.$name(), callback.$to_proc())
            }
          }, $Target_detach$34.$$arity = 1)
        } else {
          
          Opal.def(self, '$detach', $Target_detach$36 = function $$detach(callback) {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'))
          }, $Target_detach$36.$$arity = 1)
        };
        
        Opal.def(self, '$trigger', $Target_trigger$37 = function $$trigger(event, $a) {
          var $iter = $Target_trigger$37.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $Target_trigger$37.$$p = null;
          
          
          if ($iter) $Target_trigger$37.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy(event['$is_a?']($$($nesting, 'String')))) {
            event = $send($$($nesting, 'Event'), 'create', [event].concat(Opal.to_a(args)), block.$to_proc())};
          return self.$dispatch(event);
        }, $Target_trigger$37.$$arity = -2);
        
        Opal.def(self, '$trigger!', $Target_trigger$excl$38 = function(event, $a) {
          var $iter = $Target_trigger$excl$38.$$p, block = $iter || nil, $post_args, args, $$39, self = this;

          if ($iter) $Target_trigger$excl$38.$$p = null;
          
          
          if ($iter) $Target_trigger$excl$38.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          return $send(self, 'trigger', [event].concat(Opal.to_a(args)), ($$39 = function(e){var self = $$39.$$s == null ? this : $$39.$$s, $writer = nil;

            
            
            if (e == null) {
              e = nil;
            };
            if ($truthy(block)) {
              block.$call(e)};
            
            $writer = [false];
            $send(e, 'bubbles=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$39.$$s = self, $$39.$$arity = 1, $$39));
        }, $Target_trigger$excl$38.$$arity = -2);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Event.dispatch"))) {
          
          Opal.def(self, '$dispatch', $Target_dispatch$40 = function $$dispatch(event) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].dispatchEvent(event.$to_n())
          }, $Target_dispatch$40.$$arity = 1)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.fire"))) {
          
          Opal.def(self, '$dispatch', $Target_dispatch$41 = function $$dispatch(event) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            if ($truthy($$($nesting, 'Custom')['$==='](event))) {
              return self["native"].fireEvent("ondataavailable", event.$to_n())
            } else {
              return self["native"].fireEvent("on" + event.$name(), event.$to_n())
            }
          }, $Target_dispatch$41.$$arity = 1)
        } else {
          
          Opal.def(self, '$dispatch', $Target_dispatch$42 = function $$dispatch($a) {
            var $post_args, $rest_arg, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            $rest_arg = $post_args;;
            return self.$raise($$($nesting, 'NotImplementedError'));
          }, $Target_dispatch$42.$$arity = -1)
        };
        self.$private();
        
        Opal.def(self, '$callbacks', $Target_callbacks$43 = function $$callbacks() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$callbacks) {
          self["native"].$callbacks = [];
        }

        return self["native"].$callbacks;
      
        }, $Target_callbacks$43.$$arity = 0);
        
        Opal.def(self, '$delegated', $Target_delegated$44 = function $$delegated() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$delegated) {
          self["native"].$delegated = $hash2([], {});
        }

        return self["native"].$delegated;
      
        }, $Target_delegated$44.$$arity = 0);
        return (Opal.def(self, '$delegate', $Target_delegate$45 = function $$delegate(delegates, event, element) {
          var $$46, self = this, $ret_or_4 = nil;

          
          
          if (element == null) {
            element = event.$target();
          };
          if ($truthy((function() {if ($truthy(($ret_or_4 = element['$nil?']()))) {
            return $ret_or_4
          } else {
            return element['$=='](event.$on())
          }; return nil; })())) {
            return nil};
          $send(delegates.$handlers(), 'each', [], ($$46 = function(selector, block){var self = $$46.$$s == null ? this : $$46.$$s, new$ = nil, $writer = nil;

            
            
            if (selector == null) {
              selector = nil;
            };
            
            if (block == null) {
              block = nil;
            };
            if ($truthy(element['$=~'](selector))) {
              
              new$ = event.$dup();
              
              $writer = [element];
              $send(new$, 'on=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return $send(block, 'call', [new$].concat(Opal.to_a(new$.$arguments())));
            } else {
              return nil
            };}, $$46.$$s = self, $$46.$$arity = 2, $$46));
          return self.$delegate(delegates, event, element.$parent());
        }, $Target_delegate$45.$$arity = -3), nil) && 'delegate';
      })($nesting[0], $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/ui"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UI');

        var $nesting = [self].concat($parent_nesting), $UI_supported$ques$1, $UI_construct$4, $UI_construct$5;

        
        Opal.defs(self, '$supported?', $UI_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.UI")
        }, $UI_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_detail$eq$2, $Definition_view$eq$3;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$detail=', $Definition_detail$eq$2 = function(value) {
            var self = this;

            return self["native"].detail = value
          }, $Definition_detail$eq$2.$$arity = 1);
          return (Opal.def(self, '$view=', $Definition_view$eq$3 = function(value) {
            var self = this;

            return self["native"].view = value
          }, $Definition_view$eq$3.$$arity = 1), nil) && 'view=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $UI_construct$4 = function $$construct(name, desc) {
              var self = this;

              return new UIEvent(name, desc)
            }, $UI_construct$4.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $UI_construct$5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("UIEvent");
            event.initUIEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0);

        return event;
      
            }, $UI_construct$5.$$arity = 2)}};
        self.$alias_native("detail");
        return self.$alias_native("view");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/mouse"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$include', '$new', '$try_convert', '$supported?', '$supports?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Mouse');

        var $nesting = [self].concat($parent_nesting), $Mouse_supported$ques$1, $Mouse_construct$29, $Mouse_construct$30, $Mouse_client$31, $Mouse_layer$32, $Mouse_offset$33, $Mouse_page$34, $Mouse_screen$35, $Mouse_ancestor$36, $Mouse_x$37, $Mouse_y$38, $Mouse_related$39, $Mouse_from$40, $Mouse_to$41, $Mouse_click$ques$42, $Mouse_double_click$ques$43, $Mouse_down$ques$44, $Mouse_enter$ques$45, $Mouse_leave$ques$46, $Mouse_move$ques$47, $Mouse_out$ques$48, $Mouse_over$ques$49, $Mouse_up$ques$50, $Mouse_show$ques$51;

        self.$$prototype["native"] = nil;
        
        Opal.defs(self, '$supported?', $Mouse_supported$ques$1 = function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("MouseEvent")['$nil?']()['$!']()
        }, $Mouse_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_x$eq$14, $Definition_y$eq$15, $Definition_alt$excl$16, $Definition_ctrl$excl$17, $Definition_meta$excl$18, $Definition_button$eq$19, $Definition_client$20, $Definition_layer$21, $Definition_offset$22, $Definition_page$23, $Definition_screen$24, $Definition_ancestor$25, $Definition_related$eq$26, $Definition_from$eq$27, $Definition_to$eq$28;

          self.$$prototype["native"] = nil;
          
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Client');

            var $nesting = [self].concat($parent_nesting), $Client_x$eq$2, $Client_y$eq$3;

            self.$$prototype["native"] = nil;
            
            self.$include($$($nesting, 'Native'));
            
            Opal.def(self, '$x=', $Client_x$eq$2 = function(value) {
              var self = this;

              return self["native"].clientX = value
            }, $Client_x$eq$2.$$arity = 1);
            return (Opal.def(self, '$y=', $Client_y$eq$3 = function(value) {
              var self = this;

              return self["native"].clientY = value
            }, $Client_y$eq$3.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Layer');

            var $nesting = [self].concat($parent_nesting), $Layer_x$eq$4, $Layer_y$eq$5;

            self.$$prototype["native"] = nil;
            
            self.$include($$($nesting, 'Native'));
            
            Opal.def(self, '$x=', $Layer_x$eq$4 = function(value) {
              var self = this;

              return self["native"].layerX = value
            }, $Layer_x$eq$4.$$arity = 1);
            return (Opal.def(self, '$y=', $Layer_y$eq$5 = function(value) {
              var self = this;

              return self["native"].layerY = value
            }, $Layer_y$eq$5.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Offset');

            var $nesting = [self].concat($parent_nesting), $Offset_x$eq$6, $Offset_y$eq$7;

            self.$$prototype["native"] = nil;
            
            self.$include($$($nesting, 'Native'));
            
            Opal.def(self, '$x=', $Offset_x$eq$6 = function(value) {
              var self = this;

              return self["native"].offsetX = value
            }, $Offset_x$eq$6.$$arity = 1);
            return (Opal.def(self, '$y=', $Offset_y$eq$7 = function(value) {
              var self = this;

              return self["native"].offsetY= value
            }, $Offset_y$eq$7.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Page');

            var $nesting = [self].concat($parent_nesting), $Page_x$eq$8, $Page_y$eq$9;

            self.$$prototype["native"] = nil;
            
            self.$include($$($nesting, 'Native'));
            
            Opal.def(self, '$x=', $Page_x$eq$8 = function(value) {
              var self = this;

              return self["native"].pageX = value
            }, $Page_x$eq$8.$$arity = 1);
            return (Opal.def(self, '$y=', $Page_y$eq$9 = function(value) {
              var self = this;

              return self["native"].pageY = value
            }, $Page_y$eq$9.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Screen');

            var $nesting = [self].concat($parent_nesting), $Screen_x$eq$10, $Screen_y$eq$11;

            self.$$prototype["native"] = nil;
            
            self.$include($$($nesting, 'Native'));
            
            Opal.def(self, '$x=', $Screen_x$eq$10 = function(value) {
              var self = this;

              return self["native"].screenX = value
            }, $Screen_x$eq$10.$$arity = 1);
            return (Opal.def(self, '$y=', $Screen_y$eq$11 = function(value) {
              var self = this;

              return self["native"].screenY = value
            }, $Screen_y$eq$11.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Ancestor');

            var $nesting = [self].concat($parent_nesting), $Ancestor_x$eq$12, $Ancestor_y$eq$13;

            self.$$prototype["native"] = nil;
            
            self.$include($$($nesting, 'Native'));
            
            Opal.def(self, '$x=', $Ancestor_x$eq$12 = function(value) {
              var self = this;

              return self["native"].x = value
            }, $Ancestor_x$eq$12.$$arity = 1);
            return (Opal.def(self, '$y=', $Ancestor_y$eq$13 = function(value) {
              var self = this;

              return self["native"].y = value
            }, $Ancestor_y$eq$13.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          
          Opal.def(self, '$x=', $Definition_x$eq$14 = function(value) {
            var self = this;

            return self["native"].screenX = value
          }, $Definition_x$eq$14.$$arity = 1);
          
          Opal.def(self, '$y=', $Definition_y$eq$15 = function(value) {
            var self = this;

            return self["native"].screenY = value
          }, $Definition_y$eq$15.$$arity = 1);
          
          Opal.def(self, '$alt!', $Definition_alt$excl$16 = function() {
            var self = this;

            return self["native"].altKey = true
          }, $Definition_alt$excl$16.$$arity = 0);
          
          Opal.def(self, '$ctrl!', $Definition_ctrl$excl$17 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, $Definition_ctrl$excl$17.$$arity = 0);
          
          Opal.def(self, '$meta!', $Definition_meta$excl$18 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, $Definition_meta$excl$18.$$arity = 0);
          
          Opal.def(self, '$button=', $Definition_button$eq$19 = function(value) {
            var self = this;

            return self["native"].button = value
          }, $Definition_button$eq$19.$$arity = 1);
          
          Opal.def(self, '$client', $Definition_client$20 = function $$client() {
            var self = this;

            return $$($nesting, 'Client').$new(self["native"])
          }, $Definition_client$20.$$arity = 0);
          
          Opal.def(self, '$layer', $Definition_layer$21 = function $$layer() {
            var self = this;

            return $$($nesting, 'Layer').$new(self["native"])
          }, $Definition_layer$21.$$arity = 0);
          
          Opal.def(self, '$offset', $Definition_offset$22 = function $$offset() {
            var self = this;

            return $$($nesting, 'Offset').$new(self["native"])
          }, $Definition_offset$22.$$arity = 0);
          
          Opal.def(self, '$page', $Definition_page$23 = function $$page() {
            var self = this;

            return $$($nesting, 'Page').$new(self["native"])
          }, $Definition_page$23.$$arity = 0);
          
          Opal.def(self, '$screen', $Definition_screen$24 = function $$screen() {
            var self = this;

            return $$($nesting, 'Screen').$new(self["native"])
          }, $Definition_screen$24.$$arity = 0);
          
          Opal.def(self, '$ancestor', $Definition_ancestor$25 = function $$ancestor() {
            var self = this;

            return $$($nesting, 'Ancestor').$new(self["native"])
          }, $Definition_ancestor$25.$$arity = 0);
          
          Opal.def(self, '$related=', $Definition_related$eq$26 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $$($nesting, 'Native').$try_convert(elem)
          }, $Definition_related$eq$26.$$arity = 1);
          
          Opal.def(self, '$from=', $Definition_from$eq$27 = function(elem) {
            var self = this;

            return self["native"].fromElement = $$($nesting, 'Native').$try_convert(elem)
          }, $Definition_from$eq$27.$$arity = 1);
          return (Opal.def(self, '$to=', $Definition_to$eq$28 = function(elem) {
            var self = this;

            return self["native"].toElement = $$($nesting, 'Native').$try_convert(elem)
          }, $Definition_to$eq$28.$$arity = 1), nil) && 'to=';
        })($nesting[0], $$$($$($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Mouse_construct$29 = function $$construct(name, desc) {
              var self = this;

              return new MouseEvent(name, desc)
            }, $Mouse_construct$29.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $Mouse_construct$30 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("MouseEvent");
            event.initMouseEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey || false, desc.altKey || false,
              desc.shiftKey || false, desc.metaKey || false,
              desc.button || 0, desc.relatedTarget || null);

        return event;
      
            }, $Mouse_construct$30.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        self.$alias_native("button");
        
        Opal.def(self, '$client', $Mouse_client$31 = function $$client() {
          var self = this;

          return $$($nesting, 'Position').$new(self["native"].clientX, self["native"].clientY)
        }, $Mouse_client$31.$$arity = 0);
        
        Opal.def(self, '$layer', $Mouse_layer$32 = function $$layer() {
          var self = this;

          if ($truthy(self["native"].layerX == null)) {
            return nil
          } else {
            return $$($nesting, 'Position').$new(self["native"].layerX, self["native"].layerY)
          }
        }, $Mouse_layer$32.$$arity = 0);
        
        Opal.def(self, '$offset', $Mouse_offset$33 = function $$offset() {
          var self = this;

          if ($truthy(self["native"].offsetX == null)) {
            return nil
          } else {
            return $$($nesting, 'Position').$new(self["native"].offsetX, self["native"].offsetY)
          }
        }, $Mouse_offset$33.$$arity = 0);
        
        Opal.def(self, '$page', $Mouse_page$34 = function $$page() {
          var self = this;

          if ($truthy(self["native"].pageX == null)) {
            return nil
          } else {
            return $$($nesting, 'Position').$new(self["native"].pageX, self["native"].pageY)
          }
        }, $Mouse_page$34.$$arity = 0);
        
        Opal.def(self, '$screen', $Mouse_screen$35 = function $$screen() {
          var self = this;

          if ($truthy(self["native"].screenX == null)) {
            return nil
          } else {
            return $$($nesting, 'Position').$new(self["native"].screenX, self["native"].screenY)
          }
        }, $Mouse_screen$35.$$arity = 0);
        
        Opal.def(self, '$ancestor', $Mouse_ancestor$36 = function $$ancestor() {
          var self = this;

          if ($truthy(self["native"].x == null)) {
            return nil
          } else {
            return $$($nesting, 'Position').$new(self["native"].x, self["native"].y)
          }
        }, $Mouse_ancestor$36.$$arity = 0);
        
        Opal.def(self, '$x', $Mouse_x$37 = function $$x() {
          var self = this;

          return self.$screen().$x()
        }, $Mouse_x$37.$$arity = 0);
        
        Opal.def(self, '$y', $Mouse_y$38 = function $$y() {
          var self = this;

          return self.$screen().$y()
        }, $Mouse_y$38.$$arity = 0);
        
        Opal.def(self, '$related', $Mouse_related$39 = function $$related() {
          var self = this;

          if ($truthy(self["native"].relatedTarget == null)) {
            return nil
          } else {
            return self.$DOM(self["native"].relatedTarget)
          }
        }, $Mouse_related$39.$$arity = 0);
        
        Opal.def(self, '$from', $Mouse_from$40 = function $$from() {
          var self = this;

          if ($truthy(self["native"].fromElement == null)) {
            return nil
          } else {
            return self.$DOM(self["native"].fromElement)
          }
        }, $Mouse_from$40.$$arity = 0);
        
        Opal.def(self, '$to', $Mouse_to$41 = function $$to() {
          var self = this;

          if ($truthy(self["native"].toElement == null)) {
            return nil
          } else {
            return self.$DOM(self["native"].toElement)
          }
        }, $Mouse_to$41.$$arity = 0);
        
        Opal.def(self, '$click?', $Mouse_click$ques$42 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("click")
        }, $Mouse_click$ques$42.$$arity = 0);
        
        Opal.def(self, '$double_click?', $Mouse_double_click$ques$43 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("dblclick")
        }, $Mouse_double_click$ques$43.$$arity = 0);
        
        Opal.def(self, '$down?', $Mouse_down$ques$44 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousedown")
        }, $Mouse_down$ques$44.$$arity = 0);
        
        Opal.def(self, '$enter?', $Mouse_enter$ques$45 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseenter")
        }, $Mouse_enter$ques$45.$$arity = 0);
        
        Opal.def(self, '$leave?', $Mouse_leave$ques$46 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseleave")
        }, $Mouse_leave$ques$46.$$arity = 0);
        
        Opal.def(self, '$move?', $Mouse_move$ques$47 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousemove")
        }, $Mouse_move$ques$47.$$arity = 0);
        
        Opal.def(self, '$out?', $Mouse_out$ques$48 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseout")
        }, $Mouse_out$ques$48.$$arity = 0);
        
        Opal.def(self, '$over?', $Mouse_over$ques$49 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseover")
        }, $Mouse_over$ques$49.$$arity = 0);
        
        Opal.def(self, '$up?', $Mouse_up$ques$50 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseup")
        }, $Mouse_up$ques$50.$$arity = 0);
        return (Opal.def(self, '$show?', $Mouse_show$ques$51 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("show")
        }, $Mouse_show$ques$51.$$arity = 0), nil) && 'show?';
      })($nesting[0], $$($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/keyboard"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $alias = Opal.alias;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$code', '$chr', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Keyboard');

        var $nesting = [self].concat($parent_nesting), $Keyboard_supported$ques$1, $Keyboard_construct$11, $Keyboard_construct$12, $Keyboard_key$13, $Keyboard_code$14, $Keyboard_char$15, $Keyboard_down$ques$16, $Keyboard_press$ques$17, $Keyboard_up$ques$18;

        self.$$prototype["native"] = nil;
        
        Opal.defs(self, '$supported?', $Keyboard_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Keyboard")
        }, $Keyboard_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_alt$excl$2, $Definition_ctrl$excl$3, $Definition_meta$excl$4, $Definition_shift$excl$5, $Definition_code$eq$6, $Definition_key$eq$7, $Definition_char$eq$8, $Definition_repeat$excl$9, $Definition_locale$eq$10;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$alt!', $Definition_alt$excl$2 = function() {
            var self = this;

            return self["native"].altKey = true
          }, $Definition_alt$excl$2.$$arity = 0);
          
          Opal.def(self, '$ctrl!', $Definition_ctrl$excl$3 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, $Definition_ctrl$excl$3.$$arity = 0);
          
          Opal.def(self, '$meta!', $Definition_meta$excl$4 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, $Definition_meta$excl$4.$$arity = 0);
          
          Opal.def(self, '$shift!', $Definition_shift$excl$5 = function() {
            var self = this;

            return self["native"].shiftKey = true
          }, $Definition_shift$excl$5.$$arity = 0);
          
          Opal.def(self, '$code=', $Definition_code$eq$6 = function(code) {
            var self = this;

            return self["native"].keyCode = self["native"].which = code
          }, $Definition_code$eq$6.$$arity = 1);
          
          Opal.def(self, '$key=', $Definition_key$eq$7 = function(key) {
            var self = this;

            return self["native"].key = key
          }, $Definition_key$eq$7.$$arity = 1);
          
          Opal.def(self, '$char=', $Definition_char$eq$8 = function(char$) {
            var self = this;

            return self["native"].char = self["native"].charCode = char$
          }, $Definition_char$eq$8.$$arity = 1);
          
          Opal.def(self, '$repeat!', $Definition_repeat$excl$9 = function() {
            var self = this;

            return self["native"].repeat = true
          }, $Definition_repeat$excl$9.$$arity = 0);
          return (Opal.def(self, '$locale=', $Definition_locale$eq$10 = function(value) {
            var self = this;

            return self["native"].locale = value
          }, $Definition_locale$eq$10.$$arity = 1), nil) && 'locale=';
        })($nesting[0], $$$($$($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Keyboard_construct$11 = function $$construct(name, desc) {
              var self = this;

              return new KeyboardEvent(name, desc)
            }, $Keyboard_construct$11.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $Keyboard_construct$12 = function $$construct(name, desc) {
              var self = this;

              
        var modifiers = "";

        if (desc.altKey) {
          modifiers += "Alt ";
        }

        if (desc.ctrlKey) {
          modifiers += "Ctrl ";
        }

        if (desc.shiftKey) {
          modifiers += "Shift" ;
        }

        if (desc.metaKey) {
          modifiers += "Meta ";
        }

        var event = document.createEvent("KeyboardEvent");
            event.initKeyboardEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.which, 0,
              modifiers, desc.repeat, desc.locale);

        return event;
      
            }, $Keyboard_construct$12.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        self.$alias_native("locale");
        self.$alias_native("repeat?", "repeat");
        
        Opal.def(self, '$key', $Keyboard_key$13 = function $$key() {
          var self = this;

          return self["native"].key || self["native"].keyIdentifier || nil
        }, $Keyboard_key$13.$$arity = 0);
        
        Opal.def(self, '$code', $Keyboard_code$14 = function $$code() {
          var self = this;

          return self["native"].keyCode || self["native"].which || nil
        }, $Keyboard_code$14.$$arity = 0);
        
        Opal.def(self, '$char', $Keyboard_char$15 = function() {
          var self = this;

          return self["native"].char || self["native"].charCode || (function() {if ($truthy(self.$code())) {
            return self.$code().$chr()
          } else {
            return nil
          }; return nil; })()
        }, $Keyboard_char$15.$$arity = 0);
        $alias(self, "to_i", "key");
        
        Opal.def(self, '$down?', $Keyboard_down$ques$16 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keydown")
        }, $Keyboard_down$ques$16.$$arity = 0);
        
        Opal.def(self, '$press?', $Keyboard_press$ques$17 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keypress")
        }, $Keyboard_press$ques$17.$$arity = 0);
        return (Opal.def(self, '$up?', $Keyboard_up$ques$18 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keyup")
        }, $Keyboard_up$ques$18.$$arity = 0), nil) && 'up?';
      })($nesting[0], $$($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/focus"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$convert', '$supported?', '$DOM']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Focus');

        var $nesting = [self].concat($parent_nesting), $Focus_supported$ques$1, $Focus_construct$4, $Focus_construct$5, $Focus_related$6;

        self.$$prototype["native"] = nil;
        
        Opal.defs(self, '$supported?', $Focus_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Focus")
        }, $Focus_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_view$eq$2, $Definition_related$eq$3;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$view=', $Definition_view$eq$2 = function(value) {
            var self = this;

            return self["native"].view = $$($nesting, 'Native').$convert(value)
          }, $Definition_view$eq$2.$$arity = 1);
          return (Opal.def(self, '$related=', $Definition_related$eq$3 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $$($nesting, 'Native').$convert(elem)
          }, $Definition_related$eq$3.$$arity = 1), nil) && 'related=';
        })($nesting[0], $$$($$($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Focus_construct$4 = function $$construct(name, desc) {
              var self = this;

              return new FocusEvent(name, desc)
            }, $Focus_construct$4.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $Focus_construct$5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("FocusEvent");
            event.initFocusEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0, desc.relatedTarget);

        return event;
      
            }, $Focus_construct$5.$$arity = 2)}};
        return (Opal.def(self, '$related', $Focus_related$6 = function $$related() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget)
        }, $Focus_related$6.$$arity = 0), nil) && 'related';
      })($nesting[0], $$($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/wheel"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$===', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Wheel');

        var $nesting = [self].concat($parent_nesting), $Wheel_supported$ques$1, $Wheel_construct$6, $Wheel_mode$7;

        self.$$prototype["native"] = nil;
        
        Opal.defs(self, '$supported?', $Wheel_supported$ques$1 = function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("WheelEvent")['$nil?']()['$!']()
        }, $Wheel_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_x$eq$2, $Definition_y$eq$3, $Definition_z$eq$4, $Definition_mode$eq$5;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$x=', $Definition_x$eq$2 = function(value) {
            var self = this;

            return self["native"].deltaX = value
          }, $Definition_x$eq$2.$$arity = 1);
          
          Opal.def(self, '$y=', $Definition_y$eq$3 = function(value) {
            var self = this;

            return self["native"].deltaY = value
          }, $Definition_y$eq$3.$$arity = 1);
          
          Opal.def(self, '$z=', $Definition_z$eq$4 = function(value) {
            var self = this;

            return self["native"].deltaZ = value
          }, $Definition_z$eq$4.$$arity = 1);
          return (Opal.def(self, '$mode=', $Definition_mode$eq$5 = function(value) {
            var self = this, $case = nil;

            
            value = (function() {$case = value;
            if ("pixel"['$===']($case)) {return WheelEvent.DOM_DELTA_PIXEL;}
            else if ("line"['$===']($case)) {return WheelEvent.DOM_DELTA_LINE;}
            else if ("page"['$===']($case)) {return WheelEvent.DOM_DELTA_PAGE;}
            else { return nil }})();
            return self["native"].deltaMode = value;
          }, $Definition_mode$eq$5.$$arity = 1), nil) && 'mode=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        Opal.defs(self, '$construct', $Wheel_construct$6 = function $$construct(name, desc) {
          var self = this;

          return new WheelEvent(name, desc)
        }, $Wheel_construct$6.$$arity = 2);
        self.$alias_native("x", "deltaX");
        self.$alias_native("y", "deltaY");
        self.$alias_native("z", "deltaZ");
        return (Opal.def(self, '$mode', $Wheel_mode$7 = function $$mode() {
          var self = this, $case = nil;

          return (function() {$case = self["native"].deltaMode;
          if ((WheelEvent.DOM_DELTA_PIXEL)['$===']($case)) {return "pixel"}
          else if ((WheelEvent.DOM_DELTA_LINE)['$===']($case)) {return "line"}
          else if ((WheelEvent.DOM_DELTA_PAGE)['$===']($case)) {return "page"}
          else { return nil }})()
        }, $Wheel_mode$7.$$arity = 0), nil) && 'mode';
      })($nesting[0], $$($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/composition"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Composition');

        var $nesting = [self].concat($parent_nesting), $Composition_supported$ques$1, $Composition_construct$4, $Composition_construct$5, $Composition_start$ques$6, $Composition_update$ques$7, $Composition_end$ques$8;

        
        Opal.defs(self, '$supported?', $Composition_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Composition")
        }, $Composition_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_data$eq$2, $Definition_locale$eq$3;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$data=', $Definition_data$eq$2 = function(value) {
            var self = this;

            return self["native"].data = value
          }, $Definition_data$eq$2.$$arity = 1);
          return (Opal.def(self, '$locale=', $Definition_locale$eq$3 = function(value) {
            var self = this;

            return self["native"].locale = value
          }, $Definition_locale$eq$3.$$arity = 1), nil) && 'locale=';
        })($nesting[0], $$$($$($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Composition_construct$4 = function $$construct(name, desc) {
              var self = this;

              return new CompositionEvent(name, desc)
            }, $Composition_construct$4.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $Composition_construct$5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("CompositionEvent");
            event.initCompositionEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.data, desc.locale);

        return event;
      
            }, $Composition_construct$5.$$arity = 2)}};
        self.$alias_native("data");
        self.$alias_native("locale");
        
        Opal.def(self, '$start?', $Composition_start$ques$6 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionstart")
        }, $Composition_start$ques$6.$$arity = 0);
        
        Opal.def(self, '$update?', $Composition_update$ques$7 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionupdate")
        }, $Composition_update$ques$7.$$arity = 0);
        return (Opal.def(self, '$end?', $Composition_end$ques$8 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionend")
        }, $Composition_end$ques$8.$$arity = 0), nil) && 'end?';
      })($nesting[0], $$($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/animation"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Animation');

        var $nesting = [self].concat($parent_nesting), $Animation_supported$ques$1, $Animation_construct$4, $Animation_construct$5;

        
        Opal.defs(self, '$supported?', $Animation_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Animation")
        }, $Animation_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_animation$eq$2, $Definition_elapsed$eq$3;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$animation=', $Definition_animation$eq$2 = function(value) {
            var self = this;

            return self["native"].animationName = value
          }, $Definition_animation$eq$2.$$arity = 1);
          return (Opal.def(self, '$elapsed=', $Definition_elapsed$eq$3 = function(value) {
            var self = this;

            return self["native"].elapsedTime = value
          }, $Definition_elapsed$eq$3.$$arity = 1), nil) && 'elapsed=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Animation_construct$4 = function $$construct(name, desc) {
              var self = this;

              return new AnimationEvent(name, desc)
            }, $Animation_construct$4.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $Animation_construct$5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("AnimationEvent");
            event.initAnimationEvent(name, desc.bubbles, desc.cancelable,
              desc.animationName, desc.elapsedTime);

        return event;
      
            }, $Animation_construct$5.$$arity = 2)}};
        self.$alias_native("name", "animationName");
        return self.$alias_native("elapsed", "elapsedTime");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/audio_processing"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AudioProcessing');

        var $nesting = [self].concat($parent_nesting), $AudioProcessing_supported$ques$1, $AudioProcessing_construct$5;

        
        Opal.defs(self, '$supported?', $AudioProcessing_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.AudioProcessing")
        }, $AudioProcessing_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_time$eq$2, $Definition_input$eq$3, $Definition_output$eq$4;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$time=', $Definition_time$eq$2 = function(value) {
            var self = this;

            return self["native"].playbackTime = value
          }, $Definition_time$eq$2.$$arity = 1);
          
          Opal.def(self, '$input=', $Definition_input$eq$3 = function(value) {
            var self = this;

            return self["native"].inputBuffer = value
          }, $Definition_input$eq$3.$$arity = 1);
          return (Opal.def(self, '$output=', $Definition_output$eq$4 = function(value) {
            var self = this;

            return self["native"].outputBuffer = value
          }, $Definition_output$eq$4.$$arity = 1), nil) && 'output=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $AudioProcessing_construct$5 = function $$construct(name, desc) {
              var self = this;

              return new AudioProcessingEvent(name, desc)
            }, $AudioProcessing_construct$5.$$arity = 2)}};
        self.$alias_native("time", "playbackTime");
        self.$alias_native("input", "inputBuffer");
        return self.$alias_native("output", "outputBuffer");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/before_unload"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BeforeUnload');

        var $nesting = [self].concat($parent_nesting), $BeforeUnload_supported$ques$1, $BeforeUnload_construct$2;

        
        Opal.defs(self, '$supported?', $BeforeUnload_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.BeforeUnload")
        }, $BeforeUnload_supported$ques$1.$$arity = 0);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            return (Opal.defs(self, '$construct', $BeforeUnload_construct$2 = function $$construct(name, desc) {
              var self = this;

              return new BeforeUnloadEvent(name, desc)
            }, $BeforeUnload_construct$2.$$arity = 2), nil) && 'construct'
          } else {
            return nil
          }
        } else {
          return nil
        };
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/clipboard"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Clipboard');

        var $nesting = [self].concat($parent_nesting), $Clipboard_supported$ques$1, $Clipboard_construct$4;

        
        Opal.defs(self, '$supported?', $Clipboard_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Clipboard")
        }, $Clipboard_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_data$eq$2, $Definition_type$eq$3;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$data=', $Definition_data$eq$2 = function(value) {
            var self = this;

            return self["native"].data = value
          }, $Definition_data$eq$2.$$arity = 1);
          return (Opal.def(self, '$type=', $Definition_type$eq$3 = function(value) {
            var self = this;

            return self["native"].dataType = value
          }, $Definition_type$eq$3.$$arity = 1), nil) && 'type=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Clipboard_construct$4 = function $$construct(name, desc) {
              var self = this;

              return new ClipboardEvent(name, desc)
            }, $Clipboard_construct$4.$$arity = 2)}};
        self.$alias_native("data");
        return self.$alias_native("type", "dataType");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/device_light"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DeviceLight');

        var $nesting = [self].concat($parent_nesting), $DeviceLight_supported$ques$1, $DeviceLight_construct$3;

        
        Opal.defs(self, '$supported?', $DeviceLight_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.DeviceLight")
        }, $DeviceLight_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_value$eq$2;

          self.$$prototype["native"] = nil;
          return (Opal.def(self, '$value=', $Definition_value$eq$2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, $Definition_value$eq$2.$$arity = 1), nil) && 'value='
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $DeviceLight_construct$3 = function $$construct(name, desc) {
              var self = this;

              return new DeviceLightEvent(name, desc)
            }, $DeviceLight_construct$3.$$arity = 2)}};
        return self.$alias_native("value");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/device_motion"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$new', '$to_n', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DeviceMotion');

        var $nesting = [self].concat($parent_nesting), $DeviceMotion_supported$ques$1, $DeviceMotion_construct$6, $DeviceMotion_construct$7;

        
        Opal.defs(self, '$supported?', $DeviceMotion_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.DeviceMotion")
        }, $DeviceMotion_supported$ques$1.$$arity = 0);
        Opal.const_set($nesting[0], 'Acceleration', $$($nesting, 'Struct').$new("x", "y", "z"));
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_acceleration$eq$2, $Definition_acceleration_with_gravity$eq$3, $Definition_rotation$eq$4, $Definition_interval$eq$5;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$acceleration=', $Definition_acceleration$eq$2 = function(value) {
            var self = this;

            return self["native"].acceleration = value.$to_n()
          }, $Definition_acceleration$eq$2.$$arity = 1);
          
          Opal.def(self, '$acceleration_with_gravity=', $Definition_acceleration_with_gravity$eq$3 = function(value) {
            var self = this;

            return self["native"].accelerationIncludingGravity = value.$to_n()
          }, $Definition_acceleration_with_gravity$eq$3.$$arity = 1);
          
          Opal.def(self, '$rotation=', $Definition_rotation$eq$4 = function(value) {
            var self = this;

            return self["native"].rotationRate = value
          }, $Definition_rotation$eq$4.$$arity = 1);
          return (Opal.def(self, '$interval=', $Definition_interval$eq$5 = function(value) {
            var self = this;

            return self["native"].interval = value
          }, $Definition_interval$eq$5.$$arity = 1), nil) && 'interval=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $DeviceMotion_construct$6 = function $$construct(name, desc) {
              var self = this;

              return new DeviceMotionEvent(name, desc)
            }, $DeviceMotion_construct$6.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $DeviceMotion_construct$7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceMotionEvent");
            event.initDeviceMotionEvent(name, desc.bubbles, desc.cancelable,
              desc.acceleration, desc.accelerationIncludingGravity,
              desc.rotationRate, desc.interval);

        return event;
      
            }, $DeviceMotion_construct$7.$$arity = 2)}};
        self.$alias_native("acceleration");
        self.$alias_native("acceleration_with_gravity", "accelerationIncludingGravity");
        self.$alias_native("rotation", "rotationRate");
        return self.$alias_native("interval");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/device_orientation"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DeviceOrientation');

        var $nesting = [self].concat($parent_nesting), $DeviceOrientation_supported$ques$1, $DeviceOrientation_construct$6, $DeviceOrientation_construct$7;

        
        Opal.defs(self, '$supported?', $DeviceOrientation_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.DeviceOrientation")
        }, $DeviceOrientation_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_absolute$eq$2, $Definition_alpha$eq$3, $Definition_beta$eq$4, $Definition_gamma$eq$5;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$absolute=', $Definition_absolute$eq$2 = function(value) {
            var self = this;

            return self["native"].absolute = value
          }, $Definition_absolute$eq$2.$$arity = 1);
          
          Opal.def(self, '$alpha=', $Definition_alpha$eq$3 = function(value) {
            var self = this;

            return self["native"].alpha = value
          }, $Definition_alpha$eq$3.$$arity = 1);
          
          Opal.def(self, '$beta=', $Definition_beta$eq$4 = function(value) {
            var self = this;

            return self["native"].beta = value
          }, $Definition_beta$eq$4.$$arity = 1);
          return (Opal.def(self, '$gamma=', $Definition_gamma$eq$5 = function(value) {
            var self = this;

            return self["native"].gamma = value
          }, $Definition_gamma$eq$5.$$arity = 1), nil) && 'gamma=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $DeviceOrientation_construct$6 = function $$construct(name, desc) {
              var self = this;

              return new DeviceOrientationEvent(name, desc)
            }, $DeviceOrientation_construct$6.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $DeviceOrientation_construct$7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceOrientationEvent");
            event.initDeviceOrientationEvent(name, desc.bubbles, desc.cancelable,
              desc.alpha, desc.beta, desc.gamma, desc.absolute);

        return event;
      
            }, $DeviceOrientation_construct$7.$$arity = 2)}};
        self.$alias_native("absolute");
        self.$alias_native("alpha");
        self.$alias_native("beta");
        return self.$alias_native("gamma");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/device_proximity"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DeviceProximity');

        var $nesting = [self].concat($parent_nesting), $DeviceProximity_supported$ques$1, $DeviceProximity_construct$5;

        
        Opal.defs(self, '$supported?', $DeviceProximity_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.DeviceProximity")
        }, $DeviceProximity_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_value$eq$2, $Definition_min$eq$3, $Definition_max$eq$4;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$value=', $Definition_value$eq$2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, $Definition_value$eq$2.$$arity = 1);
          
          Opal.def(self, '$min=', $Definition_min$eq$3 = function(value) {
            var self = this;

            return self["native"].min = value
          }, $Definition_min$eq$3.$$arity = 1);
          return (Opal.def(self, '$max=', $Definition_max$eq$4 = function(value) {
            var self = this;

            return self["native"].max = value
          }, $Definition_max$eq$4.$$arity = 1), nil) && 'max=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $DeviceProximity_construct$5 = function $$construct(name, desc) {
              var self = this;

              return new DeviceProximityEvent(name, desc)
            }, $DeviceProximity_construct$5.$$arity = 2)}};
        self.$alias_native("value");
        self.$alias_native("min");
        return self.$alias_native("max");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/drag"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$include', '$new', '$convert', '$elem', '$supported?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$raise']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Drag');

        var $nesting = [self].concat($parent_nesting), $Drag_supported$ques$1, $Drag_construct$14, $Drag_construct$15, $Drag_client$16, $Drag_screen$17, $Drag_x$18, $Drag_y$19, $Drag_related$20, $Drag_transfer$21;

        self.$$prototype["native"] = nil;
        
        Opal.defs(self, '$supported?', $Drag_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Drag")
        }, $Drag_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_alt$excl$6, $Definition_ctrl$excl$7, $Definition_meta$excl$8, $Definition_button$eq$9, $Definition_client$10, $Definition_screen$11, $Definition_related$eq$12, $Definition_transfer$eq$13;

          self.$$prototype["native"] = nil;
          
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Client');

            var $nesting = [self].concat($parent_nesting), $Client_x$eq$2, $Client_y$eq$3;

            self.$$prototype["native"] = nil;
            
            self.$include($$($nesting, 'Native'));
            
            Opal.def(self, '$x=', $Client_x$eq$2 = function(value) {
              var self = this;

              return self["native"].clientX = value
            }, $Client_x$eq$2.$$arity = 1);
            return (Opal.def(self, '$y=', $Client_y$eq$3 = function(value) {
              var self = this;

              return self["native"].clientY = value
            }, $Client_y$eq$3.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Screen');

            var $nesting = [self].concat($parent_nesting), $Screen_x$eq$4, $Screen_y$eq$5;

            self.$$prototype["native"] = nil;
            
            self.$include($$($nesting, 'Native'));
            
            Opal.def(self, '$x=', $Screen_x$eq$4 = function(value) {
              var self = this;

              return self["native"].screenX = value
            }, $Screen_x$eq$4.$$arity = 1);
            return (Opal.def(self, '$y=', $Screen_y$eq$5 = function(value) {
              var self = this;

              return self["native"].screenY = value
            }, $Screen_y$eq$5.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          
          Opal.def(self, '$alt!', $Definition_alt$excl$6 = function() {
            var self = this;

            return self["native"].altKey = true
          }, $Definition_alt$excl$6.$$arity = 0);
          
          Opal.def(self, '$ctrl!', $Definition_ctrl$excl$7 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, $Definition_ctrl$excl$7.$$arity = 0);
          
          Opal.def(self, '$meta!', $Definition_meta$excl$8 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, $Definition_meta$excl$8.$$arity = 0);
          
          Opal.def(self, '$button=', $Definition_button$eq$9 = function(value) {
            var self = this;

            return self["native"].button = value
          }, $Definition_button$eq$9.$$arity = 1);
          
          Opal.def(self, '$client', $Definition_client$10 = function $$client() {
            var self = this;

            return $$($nesting, 'Client').$new(self["native"])
          }, $Definition_client$10.$$arity = 0);
          
          Opal.def(self, '$screen', $Definition_screen$11 = function $$screen() {
            var self = this;

            return $$($nesting, 'Screen').$new(self["native"])
          }, $Definition_screen$11.$$arity = 0);
          
          Opal.def(self, '$related=', $Definition_related$eq$12 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $$($nesting, 'Native').$convert(elem)
          }, $Definition_related$eq$12.$$arity = 1);
          return (Opal.def(self, '$transfer=', $Definition_transfer$eq$13 = function(value) {
            var self = this;

            return self["native"].dataTransfer = $$($nesting, 'Native').$convert(self.$elem())
          }, $Definition_transfer$eq$13.$$arity = 1), nil) && 'transfer=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Drag_construct$14 = function $$construct(name, desc) {
              var self = this;

              return new DragEvent(name, desc)
            }, $Drag_construct$14.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $Drag_construct$15 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DragEvent");
            event.initDragEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey, desc.altKey, desc.shiftKey, desc.metaKey,
              desc.button || 0, desc.relatedTarget, desc.dataTransfer);

        return event;
      
            }, $Drag_construct$15.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        self.$alias_native("button");
        
        Opal.def(self, '$client', $Drag_client$16 = function $$client() {
          var self = this;

          return $$($nesting, 'Position').$new(self["native"].clientX, self["native"].clientY)
        }, $Drag_client$16.$$arity = 0);
        
        Opal.def(self, '$screen', $Drag_screen$17 = function $$screen() {
          var self = this;

          if ($truthy((typeof(self["native"].screenX) !== "undefined"))) {
            return $$($nesting, 'Position').$new(self["native"].screenX, self["native"].screenY)
          } else {
            return nil
          }
        }, $Drag_screen$17.$$arity = 0);
        
        Opal.def(self, '$x', $Drag_x$18 = function $$x() {
          var self = this;

          return self.$screen().$x()
        }, $Drag_x$18.$$arity = 0);
        
        Opal.def(self, '$y', $Drag_y$19 = function $$y() {
          var self = this;

          return self.$screen().$y()
        }, $Drag_y$19.$$arity = 0);
        
        Opal.def(self, '$related', $Drag_related$20 = function $$related() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget)
        }, $Drag_related$20.$$arity = 0);
        return (Opal.def(self, '$transfer', $Drag_transfer$21 = function $$transfer() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $Drag_transfer$21.$$arity = 0), nil) && 'transfer';
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/gamepad"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Gamepad');

        var $nesting = [self].concat($parent_nesting), $Gamepad_supported$ques$1, $Gamepad_construct$7, $Gamepad_id$8, $Gamepad_index$9, $Gamepad_at$10, $Gamepad_axes$11, $Gamepad_buttons$12;

        self.$$prototype["native"] = nil;
        
        Opal.defs(self, '$supported?', $Gamepad_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Gamepad")
        }, $Gamepad_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_id$eq$2, $Definition_index$eq$3, $Definition_at$eq$4, $Definition_axes$eq$5, $Definition_buttons$eq$6;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$id=', $Definition_id$eq$2 = function(value) {
            var self = this;

            return self["native"].id = value
          }, $Definition_id$eq$2.$$arity = 1);
          
          Opal.def(self, '$index=', $Definition_index$eq$3 = function(value) {
            var self = this;

            return self["native"].index = value
          }, $Definition_index$eq$3.$$arity = 1);
          
          Opal.def(self, '$at=', $Definition_at$eq$4 = function(value) {
            var self = this;

            return self["native"].timestamp = value
          }, $Definition_at$eq$4.$$arity = 1);
          
          Opal.def(self, '$axes=', $Definition_axes$eq$5 = function(value) {
            var self = this;

            return self["native"].axes = value
          }, $Definition_axes$eq$5.$$arity = 1);
          return (Opal.def(self, '$buttons=', $Definition_buttons$eq$6 = function(value) {
            var self = this;

            return self["native"].buttons = value
          }, $Definition_buttons$eq$6.$$arity = 1), nil) && 'buttons=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Gamepad_construct$7 = function $$construct(name, desc) {
              var self = this;

              new GamepadEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        gamepad:    desc })
            }, $Gamepad_construct$7.$$arity = 2)}};
        
        Opal.def(self, '$id', $Gamepad_id$8 = function $$id() {
          var self = this;

          return self["native"].gamepad.id
        }, $Gamepad_id$8.$$arity = 0);
        
        Opal.def(self, '$index', $Gamepad_index$9 = function $$index() {
          var self = this;

          return self["native"].gamepad.index
        }, $Gamepad_index$9.$$arity = 0);
        
        Opal.def(self, '$at', $Gamepad_at$10 = function $$at() {
          var self = this;

          return self["native"].gamepad.timestamp
        }, $Gamepad_at$10.$$arity = 0);
        
        Opal.def(self, '$axes', $Gamepad_axes$11 = function $$axes() {
          var self = this;

          return self["native"].gamepad.axes
        }, $Gamepad_axes$11.$$arity = 0);
        return (Opal.def(self, '$buttons', $Gamepad_buttons$12 = function $$buttons() {
          var self = this;

          return self["native"].gamepad.buttons
        }, $Gamepad_buttons$12.$$arity = 0), nil) && 'buttons';
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/hash_change"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'HashChange');

        var $nesting = [self].concat($parent_nesting), $HashChange_supported$ques$1, $HashChange_construct$4;

        
        Opal.defs(self, '$supported?', $HashChange_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.HashChange")
        }, $HashChange_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_old$eq$2, $Definition_new$eq$3;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$old=', $Definition_old$eq$2 = function(value) {
            var self = this;

            return self["native"].oldURL = value
          }, $Definition_old$eq$2.$$arity = 1);
          return (Opal.def(self, '$new=', $Definition_new$eq$3 = function(value) {
            var self = this;

            return self["native"].newURL = value
          }, $Definition_new$eq$3.$$arity = 1), nil) && 'new=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $HashChange_construct$4 = function $$construct(name, desc) {
              var self = this;

              return new HashChangeEvent(name, desc)
            }, $HashChange_construct$4.$$arity = 2)}};
        self.$alias_native("old", "oldURL");
        return self.$alias_native("new", "newURL");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/progress"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Progress');

        var $nesting = [self].concat($parent_nesting), $Progress_supported$ques$1, $Progress_construct$5, $Progress_construct$6;

        
        Opal.defs(self, '$supported?', $Progress_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Progress")
        }, $Progress_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_computable$eq$2, $Definition_loaded$eq$3, $Definition_total$eq$4;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$computable=', $Definition_computable$eq$2 = function(value) {
            var self = this;

            return self["native"].computableLength = value
          }, $Definition_computable$eq$2.$$arity = 1);
          
          Opal.def(self, '$loaded=', $Definition_loaded$eq$3 = function(value) {
            var self = this;

            return self["native"].loaded = value
          }, $Definition_loaded$eq$3.$$arity = 1);
          return (Opal.def(self, '$total=', $Definition_total$eq$4 = function(value) {
            var self = this;

            return self["native"].total = value
          }, $Definition_total$eq$4.$$arity = 1), nil) && 'total=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Progress_construct$5 = function $$construct(name, desc) {
              var self = this;

              return new ProgressEvent(name, desc)
            }, $Progress_construct$5.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $Progress_construct$6 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("ProgressEvent");
            event.initProgressEvent(name, desc.bubbles, desc.cancelable,
              desc.computable, desc.loaded, desc.total);

        return event;
      
            }, $Progress_construct$6.$$arity = 2)}};
        self.$alias_native("computable?", "computableLength");
        self.$alias_native("loaded");
        return self.$alias_native("total");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/page_transition"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'PageTransition');

        var $nesting = [self].concat($parent_nesting), $PageTransition_supported$ques$1, $PageTransition_construct$3;

        
        Opal.defs(self, '$supported?', $PageTransition_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.PageTransition")
        }, $PageTransition_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_persisted$eq$2;

          self.$$prototype["native"] = nil;
          return (Opal.def(self, '$persisted=', $Definition_persisted$eq$2 = function(value) {
            var self = this;

            return self["native"].persisted = value
          }, $Definition_persisted$eq$2.$$arity = 1), nil) && 'persisted='
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.PageTransition"))) {
            Opal.defs(self, '$construct', $PageTransition_construct$3 = function $$construct(name, desc) {
              var self = this;

              return new PageTransitionEvent(name, desc);
            }, $PageTransition_construct$3.$$arity = 2)}};
        return self.$alias_native("persisted?", "persisted");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/pop_state"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'PopState');

        var $nesting = [self].concat($parent_nesting), $PopState_supported$ques$1, $PopState_construct$3, $PopState_construct$4;

        
        Opal.defs(self, '$supported?', $PopState_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.PopState")
        }, $PopState_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_state$eq$2;

          self.$$prototype["native"] = nil;
          return (Opal.def(self, '$state=', $Definition_state$eq$2 = function(value) {
            var self = this;

            return self["native"].state = value
          }, $Definition_state$eq$2.$$arity = 1), nil) && 'state='
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $PopState_construct$3 = function $$construct(name, desc) {
              var self = this;

              return new PopStateEvent(name, desc)
            }, $PopState_construct$3.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $PopState_construct$4 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent('PopStateEvent');
            event.initPopStateEvent(name, desc.bubbles, desc.cancelable,
              desc.state);

        return event;
      
            }, $PopState_construct$4.$$arity = 2)}};
        return self.$alias_native("state");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/storage"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Storage');

        var $nesting = [self].concat($parent_nesting), $Storage_supported$ques$1, $Storage_construct$7;

        
        Opal.defs(self, '$supported?', $Storage_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Storage")
        }, $Storage_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_key$eq$2, $Definition_new$eq$3, $Definition_old$eq$4, $Definition_area$eq$5, $Definition_url$eq$6;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$key=', $Definition_key$eq$2 = function(value) {
            var self = this;

            return self["native"].key = value
          }, $Definition_key$eq$2.$$arity = 1);
          
          Opal.def(self, '$new=', $Definition_new$eq$3 = function(value) {
            var self = this;

            return self["native"].newValue = value
          }, $Definition_new$eq$3.$$arity = 1);
          
          Opal.def(self, '$old=', $Definition_old$eq$4 = function(value) {
            var self = this;

            return self["native"].oldValue = value
          }, $Definition_old$eq$4.$$arity = 1);
          
          Opal.def(self, '$area=', $Definition_area$eq$5 = function(value) {
            var self = this;

            return self["native"].storageArea = value
          }, $Definition_area$eq$5.$$arity = 1);
          return (Opal.def(self, '$url=', $Definition_url$eq$6 = function(value) {
            var self = this;

            return self["native"].url = value
          }, $Definition_url$eq$6.$$arity = 1), nil) && 'url=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Storage_construct$7 = function $$construct(name, desc) {
              var self = this;

              return new StorageEvent(name, desc)
            }, $Storage_construct$7.$$arity = 2)}};
        self.$alias_native("key");
        self.$alias_native("new", "newValue");
        self.$alias_native("old", "oldValue");
        self.$alias_native("area", "storageArea");
        return self.$alias_native("url");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/touch"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Touch');

        var $nesting = [self].concat($parent_nesting), $Touch_supported$ques$1, $Touch_construct$6, $Touch_cancel$ques$7, $Touch_end$ques$8, $Touch_leave$ques$9, $Touch_move$ques$10, $Touch_start$ques$11;

        
        Opal.defs(self, '$supported?', $Touch_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Touch")
        }, $Touch_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_alt$excl$2, $Definition_ctrl$excl$3, $Definition_meta$excl$4, $Definition_shift$excl$5;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$alt!', $Definition_alt$excl$2 = function() {
            var self = this;

            return self["native"].altKey = true
          }, $Definition_alt$excl$2.$$arity = 0);
          
          Opal.def(self, '$ctrl!', $Definition_ctrl$excl$3 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, $Definition_ctrl$excl$3.$$arity = 0);
          
          Opal.def(self, '$meta!', $Definition_meta$excl$4 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, $Definition_meta$excl$4.$$arity = 0);
          return (Opal.def(self, '$shift!', $Definition_shift$excl$5 = function() {
            var self = this;

            return self["native"].shiftKey = true
          }, $Definition_shift$excl$5.$$arity = 0), nil) && 'shift!';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Touch_construct$6 = function $$construct(name, desc) {
              var self = this;

              return new TouchEvent(name, desc)
            }, $Touch_construct$6.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        
        Opal.def(self, '$cancel?', $Touch_cancel$ques$7 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchcancel")
        }, $Touch_cancel$ques$7.$$arity = 0);
        
        Opal.def(self, '$end?', $Touch_end$ques$8 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchend")
        }, $Touch_end$ques$8.$$arity = 0);
        
        Opal.def(self, '$leave?', $Touch_leave$ques$9 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchleave")
        }, $Touch_leave$ques$9.$$arity = 0);
        
        Opal.def(self, '$move?', $Touch_move$ques$10 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchmove")
        }, $Touch_move$ques$10.$$arity = 0);
        return (Opal.def(self, '$start?', $Touch_start$ques$11 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchstart")
        }, $Touch_start$ques$11.$$arity = 0), nil) && 'start?';
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event/sensor"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Sensor');

        var $nesting = [self].concat($parent_nesting), $Sensor_supported$ques$1, $Sensor_construct$2;

        
        Opal.defs(self, '$supported?', $Sensor_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Sensor")
        }, $Sensor_supported$ques$1.$$arity = 0);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            return (Opal.defs(self, '$construct', $Sensor_construct$2 = function $$construct(name, desc) {
              var self = this;

              return new SensorEvent(name, desc)
            }, $Sensor_construct$2.$$arity = 2), nil) && 'construct'
          } else {
            return nil
          }
        } else {
          return nil
        };
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["ostruct"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super, $alias = Opal.alias;

  Opal.add_stubs(['$each_pair', '$new_ostruct_member', '$[]=', '$-', '$[]', '$to_sym', '$>', '$length', '$raise', '$new', '$end_with?', '$!=', '$chomp', '$to_s', '$key?', '$enum_for', '$is_a?', '$==', '$instance_variable_get', '$===', '$eql?', '$dup', '$to_n', '$hash', '$attr_reader', '$__send__', '$singleton_class', '$delete', '$respond_to?', '$define_singleton_method', '$__id__', '$class', '$any?', '$+', '$join', '$map', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'OpenStruct');

    var $nesting = [self].concat($parent_nesting), $OpenStruct_initialize$1, $OpenStruct_$$$3, $OpenStruct_$$$eq$4, $OpenStruct_method_missing$5, $OpenStruct_respond_to_missing$ques$6, $OpenStruct_each_pair$7, $OpenStruct_$eq_eq$9, $OpenStruct_$eq_eq_eq$10, $OpenStruct_eql$ques$11, $OpenStruct_to_h$12, $OpenStruct_to_n$13, $OpenStruct_hash$14, $OpenStruct_delete_field$15, $OpenStruct_new_ostruct_member$16, $OpenStruct_inspect$19;

    self.$$prototype.table = nil;
    
    
    Opal.def(self, '$initialize', $OpenStruct_initialize$1 = function $$initialize(hash) {
      var $$2, self = this;

      
      
      if (hash == null) {
        hash = nil;
      };
      self.table = $hash2([], {});
      if ($truthy(hash)) {
        return $send(hash, 'each_pair', [], ($$2 = function(key, value){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;
          if (self.table == null) self.table = nil;

          
          
          if (key == null) {
            key = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          $writer = [self.$new_ostruct_member(key), value];
          $send(self.table, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 2, $$2))
      } else {
        return nil
      };
    }, $OpenStruct_initialize$1.$$arity = -1);
    
    Opal.def(self, '$[]', $OpenStruct_$$$3 = function(name) {
      var self = this;

      return self.table['$[]'](name.$to_sym())
    }, $OpenStruct_$$$3.$$arity = 1);
    
    Opal.def(self, '$[]=', $OpenStruct_$$$eq$4 = function(name, value) {
      var self = this, $writer = nil;

      
      $writer = [self.$new_ostruct_member(name), value];
      $send(self.table, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, $OpenStruct_$$$eq$4.$$arity = 2);
    
    Opal.def(self, '$method_missing', $OpenStruct_method_missing$5 = function $$method_missing(name, $a) {
      var $post_args, args, self = this, $writer = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      if ($truthy($rb_gt(args.$length(), 2))) {
        self.$raise($$($nesting, 'NoMethodError').$new("" + "undefined method `" + (name) + "' for #<OpenStruct>", name))};
      if ($truthy(name['$end_with?']("="))) {
        
        if ($truthy(args.$length()['$!='](1))) {
          self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1)")};
        
        $writer = [self.$new_ostruct_member(name['$[]']($range(0, -2, false))), args['$[]'](0)];
        $send(self.table, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      } else {
        return self.table['$[]'](name.$to_sym())
      };
    }, $OpenStruct_method_missing$5.$$arity = -2);
    
    Opal.def(self, '$respond_to_missing?', $OpenStruct_respond_to_missing$ques$6 = function(mid, include_private) {
      var $a, $iter = $OpenStruct_respond_to_missing$ques$6.$$p, $yield = $iter || nil, self = this, mname = nil, $ret_or_1 = nil;

      if ($iter) $OpenStruct_respond_to_missing$ques$6.$$p = null;
      
      
      if (include_private == null) {
        include_private = false;
      };
      mname = mid.$to_s().$chomp("=").$to_sym();
      if ($truthy(($ret_or_1 = ($a = self.table, ($a === nil || $a == null) ? nil : $send($a, 'key?', [mname]))))) {
        return $ret_or_1
      } else {
        return $send2(self, $find_super(self, 'respond_to_missing?', $OpenStruct_respond_to_missing$ques$6, false, true), 'respond_to_missing?', [mid, include_private], $iter)
      };
    }, $OpenStruct_respond_to_missing$ques$6.$$arity = -2);
    
    Opal.def(self, '$each_pair', $OpenStruct_each_pair$7 = function $$each_pair() {
      var $$8, $iter = $OpenStruct_each_pair$7.$$p, $yield = $iter || nil, self = this;

      if ($iter) $OpenStruct_each_pair$7.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("each_pair")
      };
      return $send(self.table, 'each_pair', [], ($$8 = function(pair){var self = $$8.$$s == null ? this : $$8.$$s;

        
        
        if (pair == null) {
          pair = nil;
        };
        return Opal.yield1($yield, pair);;}, $$8.$$s = self, $$8.$$arity = 1, $$8));
    }, $OpenStruct_each_pair$7.$$arity = 0);
    
    Opal.def(self, '$==', $OpenStruct_$eq_eq$9 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?']($$($nesting, 'OpenStruct')))) {
      } else {
        return false
      };
      return self.table['$=='](other.$instance_variable_get("@table"));
    }, $OpenStruct_$eq_eq$9.$$arity = 1);
    
    Opal.def(self, '$===', $OpenStruct_$eq_eq_eq$10 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?']($$($nesting, 'OpenStruct')))) {
      } else {
        return false
      };
      return self.table['$==='](other.$instance_variable_get("@table"));
    }, $OpenStruct_$eq_eq_eq$10.$$arity = 1);
    
    Opal.def(self, '$eql?', $OpenStruct_eql$ques$11 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?']($$($nesting, 'OpenStruct')))) {
      } else {
        return false
      };
      return self.table['$eql?'](other.$instance_variable_get("@table"));
    }, $OpenStruct_eql$ques$11.$$arity = 1);
    
    Opal.def(self, '$to_h', $OpenStruct_to_h$12 = function $$to_h() {
      var self = this;

      return self.table.$dup()
    }, $OpenStruct_to_h$12.$$arity = 0);
    
    Opal.def(self, '$to_n', $OpenStruct_to_n$13 = function $$to_n() {
      var self = this;

      return self.table.$to_n()
    }, $OpenStruct_to_n$13.$$arity = 0);
    
    Opal.def(self, '$hash', $OpenStruct_hash$14 = function $$hash() {
      var self = this;

      return self.table.$hash()
    }, $OpenStruct_hash$14.$$arity = 0);
    self.$attr_reader("table");
    
    Opal.def(self, '$delete_field', $OpenStruct_delete_field$15 = function $$delete_field(name) {
      var self = this, sym = nil;

      
      sym = name.$to_sym();
      
      try {
        self.$singleton_class().$__send__("remove_method", sym, "" + (sym) + "=")
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'NameError')])) {
          try {
            nil
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      };;
      return self.table.$delete(sym);
    }, $OpenStruct_delete_field$15.$$arity = 1);
    
    Opal.def(self, '$new_ostruct_member', $OpenStruct_new_ostruct_member$16 = function $$new_ostruct_member(name) {
      var $$17, $$18, self = this;

      
      name = name.$to_sym();
      if ($truthy(self['$respond_to?'](name))) {
      } else {
        
        $send(self, 'define_singleton_method', [name], ($$17 = function(){var self = $$17.$$s == null ? this : $$17.$$s;
          if (self.table == null) self.table = nil;

          return self.table['$[]'](name)}, $$17.$$s = self, $$17.$$arity = 0, $$17));
        $send(self, 'define_singleton_method', ["" + (name) + "="], ($$18 = function(x){var self = $$18.$$s == null ? this : $$18.$$s, $writer = nil;
          if (self.table == null) self.table = nil;

          
          
          if (x == null) {
            x = nil;
          };
          $writer = [name, x];
          $send(self.table, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$18.$$s = self, $$18.$$arity = 1, $$18));
      };
      return name;
    }, $OpenStruct_new_ostruct_member$16.$$arity = 1);
    var ostruct_ids;;
    
    Opal.def(self, '$inspect', $OpenStruct_inspect$19 = function $$inspect() {
      var $$20, self = this, result = nil;

      
      
      var top = (ostruct_ids === undefined),
          ostruct_id = self.$__id__();
    ;
      
      return (function() { try {
      
      result = "" + "#<" + (self.$class());
      
        if (top) {
          ostruct_ids = {};
        }
        if (ostruct_ids.hasOwnProperty(ostruct_id)) {
          return result + ' ...>';
        }
        ostruct_ids[ostruct_id] = true;
      ;
      if ($truthy(self.table['$any?']())) {
        result = $rb_plus(result, " ")};
      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], ($$20 = function(name, value){var self = $$20.$$s == null ? this : $$20.$$s;

        
        
        if (name == null) {
          name = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return "" + (name) + "=" + (value.$inspect());}, $$20.$$s = self, $$20.$$arity = 2, $$20)).$join(", "));
      result = $rb_plus(result, ">");
      return result;
      } finally {
        
        if (top) {
          ostruct_ids = undefined;
        }
      
      }; })();;
    }, $OpenStruct_inspect$19.$$arity = 0);
    return $alias(self, "to_s", "inspect");
  })($nesting[0], null, $nesting)
};

Opal.modules["browser/event/custom"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$supports?', '$end_with?', '$[]', '$to_n', '$merge!', '$Native', '$new', '$has_key?']);
  
  self.$require("ostruct");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Custom');

        var $nesting = [self].concat($parent_nesting), $Custom_supported$ques$1, $Custom_construct$3, $Custom_construct$4, $Custom_construct$5, $Custom_construct$6, $Custom_initialize$7, $Custom_method_missing$8;

        self.$$prototype.detail = nil;
        
        Opal.defs(self, '$supported?', $Custom_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Custom")
        }, $Custom_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_method_missing$2;

          self.$$prototype["native"] = nil;
          return (Opal.def(self, '$method_missing', $Definition_method_missing$2 = function $$method_missing(name, value) {
            var self = this;

            if ($truthy(name['$end_with?']("="))) {
              return self["native"][name['$[]']($range(0, -2, false))] = value
            } else {
              return nil
            }
          }, $Definition_method_missing$2.$$arity = 2), nil) && 'method_missing'
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
          Opal.defs(self, '$construct', $Custom_construct$3 = function $$construct(name, desc) {
            var self = this;

            new CustomEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc })
          }, $Custom_construct$3.$$arity = 2)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
          Opal.defs(self, '$construct', $Custom_construct$4 = function $$construct(name, desc) {
            var self = this;

            
        var event = document.createEvent("CustomEvent");
            event.initCustomEvent(name, desc.bubbles, desc.cancelable, desc);

        return event;
      
          }, $Custom_construct$4.$$arity = 2)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.createObject"))) {
          Opal.defs(self, '$construct', $Custom_construct$5 = function $$construct(name, desc) {
            var self = this;

            return self.$Native(document.createEventObject())['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n()
          }, $Custom_construct$5.$$arity = 2)
        } else {
          Opal.defs(self, '$construct', $Custom_construct$6 = function $$construct(name, desc) {
            var self = this;

            return self.$Native(desc)['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n()
          }, $Custom_construct$6.$$arity = 2)
        };
        
        Opal.def(self, '$initialize', $Custom_initialize$7 = function $$initialize(event, callback) {
          var $iter = $Custom_initialize$7.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Custom_initialize$7.$$p = null;
          
          
          if (callback == null) {
            callback = nil;
          };
          $send2(self, $find_super(self, 'initialize', $Custom_initialize$7, false, true), 'initialize', [event, callback], null);
          return (self.detail = $$($nesting, 'Hash').$new(event.detail));
        }, $Custom_initialize$7.$$arity = -2);
        return (Opal.def(self, '$method_missing', $Custom_method_missing$8 = function $$method_missing(id, $a) {
          var $post_args, $rest_arg, $iter = $Custom_method_missing$8.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Custom_method_missing$8.$$p = null;
          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          $rest_arg = $post_args;;
          if ($truthy(self.detail['$has_key?'](id))) {
            return self.detail['$[]'](id)};
          return $send2(self, $find_super(self, 'method_missing', $Custom_method_missing$8, false, true), 'method_missing', [id].concat(Opal.to_a($rest_arg)), $iter);
        }, $Custom_method_missing$8.$$arity = -2), nil) && 'method_missing';
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["buffer/array"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $gvars = Opal.gvars, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $alias = Opal.alias;

  Opal.add_stubs(['$include', '$[]', '$name_for', '$attr_reader', '$==', '$for', '$to_n', '$enum_for']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Buffer');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Array');

      var $nesting = [self].concat($parent_nesting), $Array_for$1, $Array_initialize$2, $Array_bits$3, $Array_$$$4, $Array_$$$eq$5, $Array_bytesize$6, $Array_each$7, $Array_length$8, $Array_merge$excl$9;

      self.$$prototype["native"] = nil;
      
      self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
      Opal.defs(self, '$for', $Array_for$1 = function(bits, type) {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("" + ($$($nesting, 'Buffer').$name_for(bits, type)) + "Array")
      }, $Array_for$1.$$arity = 2);
      self.$include($$($nesting, 'Enumerable'));
      self.$attr_reader("buffer", "type");
      
      Opal.def(self, '$initialize', $Array_initialize$2 = function $$initialize(buffer, bits, type) {
        var $iter = $Array_initialize$2.$$p, $yield = $iter || nil, self = this;

        if ($iter) $Array_initialize$2.$$p = null;
        
        
        if (bits == null) {
          bits = nil;
        };
        
        if (type == null) {
          type = nil;
        };
        if ($$($nesting, 'Native')['$=='](buffer)) {
          $send2(self, $find_super(self, 'initialize', $Array_initialize$2, false, true), 'initialize', [buffer], null)
        } else {
          
          var klass = $$($nesting, 'Array').$for(bits, type);

          $send2(self, $find_super(self, 'initialize', $Array_initialize$2, false, true), 'initialize', [new klass(buffer.$to_n())], null)
        
        };
        self.buffer = buffer;
        return (self.type = type);
      }, $Array_initialize$2.$$arity = -2);
      
      Opal.def(self, '$bits', $Array_bits$3 = function $$bits() {
        var self = this;

        return self["native"].BYTES_PER_ELEMENT * 8
      }, $Array_bits$3.$$arity = 0);
      
      Opal.def(self, '$[]', $Array_$$$4 = function(index, offset) {
        var self = this;

        
        
        if (offset == null) {
          offset = nil;
        };
        if ($truthy(offset)) {
          return self["native"].subarray(index, offset)
        } else {
          return self["native"][index]
        };
      }, $Array_$$$4.$$arity = -2);
      
      Opal.def(self, '$[]=', $Array_$$$eq$5 = function(index, value) {
        var self = this;

        return self["native"][index] = value
      }, $Array_$$$eq$5.$$arity = 2);
      
      Opal.def(self, '$bytesize', $Array_bytesize$6 = function $$bytesize() {
        var self = this;

        return self["native"].byteLength
      }, $Array_bytesize$6.$$arity = 0);
      
      Opal.def(self, '$each', $Array_each$7 = function $$each() {
        var $iter = $Array_each$7.$$p, $yield = $iter || nil, self = this;

        if ($iter) $Array_each$7.$$p = null;
        
        if (($yield !== nil)) {
        } else {
          return self.$enum_for("each")
        };
        
        for (var i = 0, length = self["native"].length; i < length; i++) {
          Opal.yield1($yield, self["native"][i])
        }
      ;
        return self;
      }, $Array_each$7.$$arity = 0);
      
      Opal.def(self, '$length', $Array_length$8 = function $$length() {
        var self = this;

        return self["native"].length
      }, $Array_length$8.$$arity = 0);
      
      Opal.def(self, '$merge!', $Array_merge$excl$9 = function(other, offset) {
        var self = this;

        
        ;
        return self["native"].set(other.$to_n(), offset);
      }, $Array_merge$excl$9.$$arity = -2);
      return $alias(self, "size", "length");
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["buffer/view"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $alias = Opal.alias;

  Opal.add_stubs(['$include', '$!', '$nil?', '$[]', '$attr_reader', '$native?', '$to_n', '$name_for']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Buffer');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'View');

      var $nesting = [self].concat($parent_nesting), $View_supported$ques$1, $View_initialize$2, $View_length$3, $View_get$4, $View_set$5, $View_get_int8$6, $View_set_int8$7, $View_get_uint8$8, $View_set_uint8$9, $View_get_int16$10, $View_set_int16$11, $View_get_uint16$12, $View_set_uint16$13, $View_get_int32$14, $View_set_int32$15, $View_get_uint32$16, $View_set_uint32$17, $View_get_float32$18, $View_set_float32$19, $View_get_float64$20, $View_set_float64$21;

      self.$$prototype["native"] = nil;
      
      self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
      Opal.defs(self, '$supported?', $View_supported$ques$1 = function() {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("DataView")['$nil?']()['$!']()
      }, $View_supported$ques$1.$$arity = 0);
      self.$attr_reader("buffer", "offset");
      
      Opal.def(self, '$initialize', $View_initialize$2 = function $$initialize(buffer, offset, length) {
        var $iter = $View_initialize$2.$$p, $yield = $iter || nil, self = this, $ret_or_1 = nil;

        if ($iter) $View_initialize$2.$$p = null;
        
        
        if (offset == null) {
          offset = nil;
        };
        
        if (length == null) {
          length = nil;
        };
        if ($truthy(self['$native?'](buffer))) {
          $send2(self, $find_super(self, 'initialize', $View_initialize$2, false, true), 'initialize', [buffer], null)
        } else if ($truthy((function() {if ($truthy(($ret_or_1 = offset))) {
          return length
        } else {
          return $ret_or_1
        }; return nil; })())) {
          $send2(self, $find_super(self, 'initialize', $View_initialize$2, false, true), 'initialize', [new DataView(buffer.$to_n(), offset.$to_n(), length.$to_n())], null)
        } else if ($truthy(offset)) {
          $send2(self, $find_super(self, 'initialize', $View_initialize$2, false, true), 'initialize', [new DataView(buffer.$to_n(), offset.$to_n())], null)
        } else {
          $send2(self, $find_super(self, 'initialize', $View_initialize$2, false, true), 'initialize', [new DataView(buffer.$to_n())], null)
        };
        self.buffer = buffer;
        return (self.offset = offset);
      }, $View_initialize$2.$$arity = -2);
      
      Opal.def(self, '$length', $View_length$3 = function $$length() {
        var self = this;

        return self["native"].byteLength
      }, $View_length$3.$$arity = 0);
      $alias(self, "size", "length");
      
      Opal.def(self, '$get', $View_get$4 = function $$get(offset, bits, type, little) {
        var self = this;

        
        
        if (bits == null) {
          bits = 8;
        };
        
        if (type == null) {
          type = "unsigned";
        };
        
        if (little == null) {
          little = false;
        };
        return self["native"]["get" + $$($nesting, 'Buffer').$name_for(bits, type)](offset, little);
      }, $View_get$4.$$arity = -2);
      $alias(self, "[]", "get");
      
      Opal.def(self, '$set', $View_set$5 = function $$set(offset, value, bits, type, little) {
        var self = this;

        
        
        if (bits == null) {
          bits = 8;
        };
        
        if (type == null) {
          type = "unsigned";
        };
        
        if (little == null) {
          little = false;
        };
        return self["native"]["set" + $$($nesting, 'Buffer').$name_for(bits, type)](offset, value, little);
      }, $View_set$5.$$arity = -3);
      $alias(self, "[]=", "set");
      
      Opal.def(self, '$get_int8', $View_get_int8$6 = function $$get_int8(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getInt8(offset, little);
      }, $View_get_int8$6.$$arity = -2);
      
      Opal.def(self, '$set_int8', $View_set_int8$7 = function $$set_int8(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setInt8(offset, value, little);
      }, $View_set_int8$7.$$arity = -3);
      
      Opal.def(self, '$get_uint8', $View_get_uint8$8 = function $$get_uint8(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getUint8(offset, little);
      }, $View_get_uint8$8.$$arity = -2);
      
      Opal.def(self, '$set_uint8', $View_set_uint8$9 = function $$set_uint8(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setUint8(offset, value, little);
      }, $View_set_uint8$9.$$arity = -3);
      
      Opal.def(self, '$get_int16', $View_get_int16$10 = function $$get_int16(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getInt16(offset, little);
      }, $View_get_int16$10.$$arity = -2);
      
      Opal.def(self, '$set_int16', $View_set_int16$11 = function $$set_int16(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setInt16(offset, value, little);
      }, $View_set_int16$11.$$arity = -3);
      
      Opal.def(self, '$get_uint16', $View_get_uint16$12 = function $$get_uint16(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getUint16(offset, little);
      }, $View_get_uint16$12.$$arity = -2);
      
      Opal.def(self, '$set_uint16', $View_set_uint16$13 = function $$set_uint16(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setUint16(offset, value, little);
      }, $View_set_uint16$13.$$arity = -3);
      
      Opal.def(self, '$get_int32', $View_get_int32$14 = function $$get_int32(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getInt32(offset, little);
      }, $View_get_int32$14.$$arity = -2);
      
      Opal.def(self, '$set_int32', $View_set_int32$15 = function $$set_int32(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setInt32(offset, value, little);
      }, $View_set_int32$15.$$arity = -3);
      
      Opal.def(self, '$get_uint32', $View_get_uint32$16 = function $$get_uint32(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getUint32(offset, little);
      }, $View_get_uint32$16.$$arity = -2);
      
      Opal.def(self, '$set_uint32', $View_set_uint32$17 = function $$set_uint32(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setUint32(offset, value, little);
      }, $View_set_uint32$17.$$arity = -3);
      
      Opal.def(self, '$get_float32', $View_get_float32$18 = function $$get_float32(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getFloat32(offset, little);
      }, $View_get_float32$18.$$arity = -2);
      
      Opal.def(self, '$set_float32', $View_set_float32$19 = function $$set_float32(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setFloat32(offset, value, little);
      }, $View_set_float32$19.$$arity = -3);
      
      Opal.def(self, '$get_float64', $View_get_float64$20 = function $$get_float64(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getFloat64(offset, little);
      }, $View_get_float64$20.$$arity = -2);
      return (Opal.def(self, '$set_float64', $View_set_float64$21 = function $$set_float64(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setFloat64(offset, value, little);
      }, $View_set_float64$21.$$arity = -3), nil) && 'set_float64';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["buffer"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $alias = Opal.alias;

  Opal.add_stubs(['$require', '$include', '$!', '$nil?', '$[]', '$===', '$native?', '$new', '$pack', '$to_a']);
  
  self.$require("native");
  self.$require("buffer/array");
  self.$require("buffer/view");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Buffer');

    var $nesting = [self].concat($parent_nesting), $Buffer_supported$ques$1, $Buffer_name_for$2, $Buffer_initialize$3, $Buffer_length$4, $Buffer_to_a$5, $Buffer_view$6, $Buffer_to_s$7;

    self.$$prototype["native"] = nil;
    
    self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
    Opal.defs(self, '$supported?', $Buffer_supported$ques$1 = function() {
      var self = this;
      if ($gvars.$ == null) $gvars.$ = nil;

      return $gvars.$['$[]']("ArrayBuffer")['$nil?']()['$!']()
    }, $Buffer_supported$ques$1.$$arity = 0);
    Opal.defs(self, '$name_for', $Buffer_name_for$2 = function $$name_for(bits, type) {
      var self = this, part = nil, $case = nil;

      
      part = (function() {$case = type;
      if ("unsigned"['$===']($case)) {return "Uint"}
      else if ("signed"['$===']($case)) {return "Int"}
      else if ("float"['$===']($case)) {return "Float"}
      else { return nil }})();
      return "" + (part) + (bits);
    }, $Buffer_name_for$2.$$arity = 2);
    
    Opal.def(self, '$initialize', $Buffer_initialize$3 = function $$initialize(size, bits) {
      var $iter = $Buffer_initialize$3.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Buffer_initialize$3.$$p = null;
      
      
      if (bits == null) {
        bits = 8;
      };
      if ($truthy(self['$native?'](size))) {
        return $send2(self, $find_super(self, 'initialize', $Buffer_initialize$3, false, true), 'initialize', [size], null)
      } else {
        return $send2(self, $find_super(self, 'initialize', $Buffer_initialize$3, false, true), 'initialize', [new ArrayBuffer(size * (bits / 8))], null)
      };
    }, $Buffer_initialize$3.$$arity = -2);
    
    Opal.def(self, '$length', $Buffer_length$4 = function $$length() {
      var self = this;

      return self["native"].byteLength
    }, $Buffer_length$4.$$arity = 0);
    $alias(self, "size", "length");
    
    Opal.def(self, '$to_a', $Buffer_to_a$5 = function $$to_a(bits, type) {
      var self = this;

      
      
      if (bits == null) {
        bits = 8;
      };
      
      if (type == null) {
        type = "unsigned";
      };
      return $$($nesting, 'Array').$new(self, bits, type);
    }, $Buffer_to_a$5.$$arity = -1);
    
    Opal.def(self, '$view', $Buffer_view$6 = function $$view(offset, length) {
      var self = this;

      
      
      if (offset == null) {
        offset = nil;
      };
      
      if (length == null) {
        length = nil;
      };
      return $$($nesting, 'View').$new(self, offset, length);
    }, $Buffer_view$6.$$arity = -1);
    return (Opal.def(self, '$to_s', $Buffer_to_s$7 = function $$to_s() {
      var self = this;

      return self.$to_a().$to_a().$pack("c*")
    }, $Buffer_to_s$7.$$arity = 0), nil) && 'to_s';
  })($nesting[0], null, $nesting);
};

Opal.modules["browser/event/message"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$supports?', '$convert', '$supported?', '$new', '$alias_native']);
  
  self.$require("buffer");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Message');

        var $nesting = [self].concat($parent_nesting), $Message_supported$ques$1, $Message_construct$5, $Message_construct$6, $Message_data$7, $Message_source$8;

        self.$$prototype["native"] = nil;
        
        Opal.defs(self, '$supported?', $Message_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Message")
        }, $Message_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_data$eq$2, $Definition_origin$eq$3, $Definition_source$eq$4;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$data=', $Definition_data$eq$2 = function(value) {
            var self = this;

            return self["native"].data = value
          }, $Definition_data$eq$2.$$arity = 1);
          
          Opal.def(self, '$origin=', $Definition_origin$eq$3 = function(value) {
            var self = this;

            return self["native"].origin = value
          }, $Definition_origin$eq$3.$$arity = 1);
          return (Opal.def(self, '$source=', $Definition_source$eq$4 = function(value) {
            var self = this;

            return self["native"].source = $$($nesting, 'Native').$convert(value)
          }, $Definition_source$eq$4.$$arity = 1), nil) && 'source=';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Message_construct$5 = function $$construct(name, desc) {
              var self = this;

              return new MessageEvent(name, desc)
            }, $Message_construct$5.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $Message_construct$6 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("MessageEvent");
            event.initMessageEvent(name, desc.bubbles, desc.cancelable,
              desc.data, desc.origin, "", desc.source || window);

        return event;
      
            }, $Message_construct$6.$$arity = 2)}};
        
        Opal.def(self, '$data', $Message_data$7 = function $$data() {
          var self = this;

          
      if (window.ArrayBuffer && self["native"].data instanceof ArrayBuffer) {
        return $$($nesting, 'Buffer').$new(self["native"].data);
      }
      else if (window.Blob && self["native"].data instanceof Blob) {
        return $$($nesting, 'Blob').$new(self["native"].data);
      }
      else {
        return self["native"].data;
      }
    
        }, $Message_data$7.$$arity = 0);
        self.$alias_native("origin");
        return (Opal.def(self, '$source', $Message_source$8 = function $$source() {
          var self = this;

          
      var source = self["native"].source;

      if (window.Window && source instanceof window.Window) {
        return $$($nesting, 'Window').$new(source);
      }
      else {
        return nil;
      }
    
        }, $Message_source$8.$$arity = 0), nil) && 'source';
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["browser/event/close"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Close');

        var $nesting = [self].concat($parent_nesting), $Close_supported$ques$1, $Close_construct$6, $Close_construct$7;

        
        Opal.defs(self, '$supported?', $Close_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("Event.Close")
        }, $Close_supported$ques$1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Definition');

          var $nesting = [self].concat($parent_nesting), $Definition_code$eq$2, $Definition_reason$eq$3, $Definition_clean$excl$4, $Definition_not_clean$excl$5;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$code=', $Definition_code$eq$2 = function(value) {
            var self = this;

            return self["native"].code = value
          }, $Definition_code$eq$2.$$arity = 1);
          
          Opal.def(self, '$reason=', $Definition_reason$eq$3 = function(value) {
            var self = this;

            return self["native"].reason = value
          }, $Definition_reason$eq$3.$$arity = 1);
          
          Opal.def(self, '$clean!', $Definition_clean$excl$4 = function(value) {
            var self = this;

            return self["native"].wasClean = true
          }, $Definition_clean$excl$4.$$arity = 1);
          return (Opal.def(self, '$not_clean!', $Definition_not_clean$excl$5 = function(value) {
            var self = this;

            return self["native"].wasClean = false
          }, $Definition_not_clean$excl$5.$$arity = 1), nil) && 'not_clean!';
        })($nesting[0], $$($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', $Close_construct$6 = function $$construct(name, desc) {
              var self = this;

              return new CloseEvent(name, desc)
            }, $Close_construct$6.$$arity = 2)
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', $Close_construct$7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("CloseEvent");
            event.initCloseEvent(name, desc.bubbles, desc.cancelable,
              desc.wasClean, desc.code, desc.reason);

        return event;
      
            }, $Close_construct$7.$$arity = 2)}};
        self.$alias_native("code");
        self.$alias_native("reason");
        return self.$alias_native("clean?", "wasClean");
      })($nesting[0], $$($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/event"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$gsub', '$[]', '$aliases', '$name_for', '$===', '$class_for', '$new', '$construct', '$const_get', '$to_proc', '$arguments=', '$-', '$supports?', '$merge!', '$Native', '$to_n', '$==', '$name', '$attr_reader', '$attr_writer', '$convert', '$alias_native', '$off', '$prevent', '$stop']);
  
  self.$require("browser/event/base");
  self.$require("browser/event/ui");
  self.$require("browser/event/mouse");
  self.$require("browser/event/keyboard");
  self.$require("browser/event/focus");
  self.$require("browser/event/wheel");
  self.$require("browser/event/composition");
  self.$require("browser/event/animation");
  self.$require("browser/event/audio_processing");
  self.$require("browser/event/before_unload");
  self.$require("browser/event/composition");
  self.$require("browser/event/clipboard");
  self.$require("browser/event/device_light");
  self.$require("browser/event/device_motion");
  self.$require("browser/event/device_orientation");
  self.$require("browser/event/device_proximity");
  self.$require("browser/event/drag");
  self.$require("browser/event/gamepad");
  self.$require("browser/event/hash_change");
  self.$require("browser/event/progress");
  self.$require("browser/event/page_transition");
  self.$require("browser/event/pop_state");
  self.$require("browser/event/storage");
  self.$require("browser/event/touch");
  self.$require("browser/event/sensor");
  self.$require("browser/event/custom");
  self.$require("browser/event/message");
  self.$require("browser/event/close");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Event');

      var $nesting = [self].concat($parent_nesting), $Event_aliases$1, $Event_name_for$2, $Event_class_for$3, $Event_supported$ques$4, $Event_create$5, $Event_construct$6, $Event_construct$7, $Event_construct$8, $Event_construct$9, $Event_new$10, $Event_initialize$11, $Event_name$12, $Event_on$13, $Event_target$14, $Event_arguments$15, $Event_arguments$eq$16, $Event_off$17, $Event_stopped$ques$18, $Event_stop$19, $Event_prevent$20, $Event_prevented$ques$21, $Event_stop$excl$22;

      self.$$prototype["native"] = self.$$prototype.on = self.$$prototype.callback = nil;
      
      Opal.defs(self, '$aliases', $Event_aliases$1 = function $$aliases() {
        var self = this, $ret_or_1 = nil;
        if (self.aliases == null) self.aliases = nil;

        return (self.aliases = (function() {if ($truthy(($ret_or_1 = self.aliases))) {
          return $ret_or_1
        } else {
          return $hash2(["dom:load", "hover"], {"dom:load": "DOMContentLoaded", "hover": "mouse:over"})
        }; return nil; })())
      }, $Event_aliases$1.$$arity = 0);
      Opal.defs(self, '$name_for', $Event_name_for$2 = function $$name_for(name) {
        var self = this, $ret_or_2 = nil;

        return (function() {if ($truthy(($ret_or_2 = self.$aliases()['$[]'](name)))) {
          return $ret_or_2
        } else {
          return name
        }; return nil; })().$gsub(":", "")
      }, $Event_name_for$2.$$arity = 1);
      Opal.defs(self, '$class_for', $Event_class_for$3 = function $$class_for(name) {
        var self = this, $case = nil;

        return (function() {$case = self.$name_for(name);
        if ("animationend"['$===']($case) || "animationiteration"['$===']($case) || "animationstart"['$===']($case)) {return $$($nesting, 'Animation')}
        else if ("audioprocess"['$===']($case)) {return $$($nesting, 'AudioProcessing')}
        else if ("beforeunload"['$===']($case)) {return $$($nesting, 'BeforeUnload')}
        else if ("compositionend"['$===']($case) || "compositionstart"['$===']($case) || "compositionupdate"['$===']($case)) {return $$($nesting, 'Composition')}
        else if ("copy"['$===']($case) || "cut"['$===']($case)) {return $$($nesting, 'Clipboard')}
        else if ("devicelight"['$===']($case)) {return $$($nesting, 'DeviceLight')}
        else if ("devicemotion"['$===']($case)) {return $$($nesting, 'DeviceMotion')}
        else if ("deviceorientation"['$===']($case)) {return $$($nesting, 'DeviceOrientation')}
        else if ("deviceproximity"['$===']($case)) {return $$($nesting, 'DeviceProximity')}
        else if ("drag"['$===']($case) || "dragend"['$===']($case) || "dragleave"['$===']($case) || "dragover"['$===']($case) || "dragstart"['$===']($case) || "drop"['$===']($case)) {return $$($nesting, 'Drag')}
        else if ("gamepadconnected"['$===']($case) || "gamepaddisconnected"['$===']($case)) {return $$($nesting, 'Gamepad')}
        else if ("hashchange"['$===']($case)) {return $$($nesting, 'HashChange')}
        else if ("load"['$===']($case) || "loadend"['$===']($case) || "loadstart"['$===']($case)) {return $$($nesting, 'Progress')}
        else if ("pagehide"['$===']($case) || "pageshow"['$===']($case)) {return $$($nesting, 'PageTransition')}
        else if ("popstate"['$===']($case)) {return $$($nesting, 'PopState')}
        else if ("storage"['$===']($case)) {return $$($nesting, 'Storage')}
        else if ("touchcancel"['$===']($case) || "touchend"['$===']($case) || "touchleave"['$===']($case) || "touchmove"['$===']($case) || "touchstart"['$===']($case)) {return $$($nesting, 'Touch')}
        else if ("compassneedscalibration"['$===']($case) || "userproximity"['$===']($case)) {return $$($nesting, 'Sensor')}
        else if ("message"['$===']($case)) {return $$($nesting, 'Message')}
        else if ("close"['$===']($case)) {return $$($nesting, 'Close')}
        else if ("click"['$===']($case) || "contextmenu"['$===']($case) || "dblclick"['$===']($case) || "mousedown"['$===']($case) || "mouseenter"['$===']($case) || "mouseleave"['$===']($case) || "mousemove"['$===']($case) || "mouseout"['$===']($case) || "mouseover"['$===']($case) || "mouseup"['$===']($case) || "show"['$===']($case)) {return $$($nesting, 'Mouse')}
        else if ("keydown"['$===']($case) || "keypress"['$===']($case) || "keyup"['$===']($case)) {return $$($nesting, 'Keyboard')}
        else if ("blur"['$===']($case) || "focus"['$===']($case) || "focusin"['$===']($case) || "focusout"['$===']($case)) {return $$($nesting, 'Focus')}
        else if ("wheel"['$===']($case)) {return $$($nesting, 'Wheel')}
        else if ("abort"['$===']($case) || "afterprint"['$===']($case) || "beforeprint"['$===']($case) || "cached"['$===']($case) || "canplay"['$===']($case) || "canplaythrough"['$===']($case) || "change"['$===']($case) || "chargingchange"['$===']($case) || "chargingtimechange"['$===']($case) || "checking"['$===']($case) || "close"['$===']($case) || "dischargingtimechange"['$===']($case) || "DOMContentLoaded"['$===']($case) || "downloading"['$===']($case) || "durationchange"['$===']($case) || "emptied"['$===']($case) || "ended"['$===']($case) || "error"['$===']($case) || "fullscreenchange"['$===']($case) || "fullscreenerror"['$===']($case) || "input"['$===']($case) || "invalid"['$===']($case) || "levelchange"['$===']($case) || "loadeddata"['$===']($case) || "loadedmetadata"['$===']($case) || "noupdate"['$===']($case) || "obsolete"['$===']($case) || "offline"['$===']($case) || "online"['$===']($case) || "open"['$===']($case) || "orientationchange"['$===']($case) || "pause"['$===']($case) || "pointerlockchange"['$===']($case) || "pointerlockerror"['$===']($case) || "play"['$===']($case) || "playing"['$===']($case) || "ratechange"['$===']($case) || "readystatechange"['$===']($case) || "reset"['$===']($case) || "seeked"['$===']($case) || "seeking"['$===']($case) || "stalled"['$===']($case) || "submit"['$===']($case) || "success"['$===']($case) || "suspend"['$===']($case) || "timeupdate"['$===']($case) || "updateready"['$===']($case) || "visibilitychange"['$===']($case) || "volumechange"['$===']($case) || "waiting"['$===']($case)) {return $$($nesting, 'Event')}
        else {return $$($nesting, 'Custom')}})()
      }, $Event_class_for$3.$$arity = 1);
      Opal.defs(self, '$supported?', $Event_supported$ques$4 = function() {
        var self = this;

        return true
      }, $Event_supported$ques$4.$$arity = 0);
      Opal.defs(self, '$create', $Event_create$5 = function $$create(name, $a) {
        var $iter = $Event_create$5.$$p, block = $iter || nil, $post_args, args, self = this, klass = nil, event = nil, $writer = nil;

        if ($iter) $Event_create$5.$$p = null;
        
        
        if ($iter) $Event_create$5.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        name = self.$name_for(name);
        klass = self.$class_for(name);
        event = klass.$new(klass.$construct(name, $send(klass.$const_get("Definition"), 'new', [], block.$to_proc())));
        
        $writer = [args];
        $send(event, 'arguments=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return event;
      }, $Event_create$5.$$arity = -2);
      if ($truthy($$($nesting, 'Browser')['$supports?']("Event.constructor"))) {
        Opal.defs(self, '$construct', $Event_construct$6 = function $$construct(name, desc) {
          var self = this;

          return new Event(name, desc)
        }, $Event_construct$6.$$arity = 2)
      } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.create"))) {
        Opal.defs(self, '$construct', $Event_construct$7 = function $$construct(name, desc) {try {

          var self = this;

          
        var event = document.createEvent("HTMLEvents");
            event.initEvent(name, desc.bubbles, desc.cancelable);

        Opal.ret(self.$Native(event)['$merge!'](desc));
      
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $Event_construct$7.$$arity = 2)
      } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.createObject"))) {
        Opal.defs(self, '$construct', $Event_construct$8 = function $$construct(name, desc) {
          var self = this;

          return self.$Native(document.createEventObject())['$merge!'](desc)['$merge!']({ type: name }).$to_n()
        }, $Event_construct$8.$$arity = 2)
      } else {
        Opal.defs(self, '$construct', $Event_construct$9 = function $$construct(name, desc) {
          var self = this;

          return self.$Native(desc)['$merge!']({ type: name }).$to_n()
        }, $Event_construct$9.$$arity = 2)
      };
      Opal.defs(self, '$new', $Event_new$10 = function(value, callback) {
        var $iter = $Event_new$10.$$p, $yield = $iter || nil, self = this, klass = nil;

        if ($iter) $Event_new$10.$$p = null;
        
        
        if (callback == null) {
          callback = nil;
        };
        if (self['$==']($$($nesting, 'Event'))) {
        } else {
          return $send2(self, $find_super(self, 'new', $Event_new$10, false, true), 'new', [value, callback], $iter)
        };
        klass = self.$class_for((function() {if ($truthy(callback)) {
          return callback.$name()
        } else {
          return value.type;
        }; return nil; })());
        if (klass['$==']($$($nesting, 'Event'))) {
          return $send2(self, $find_super(self, 'new', $Event_new$10, false, true), 'new', [value, callback], $iter)
        } else {
          return klass.$new(value, callback)
        };
      }, $Event_new$10.$$arity = -2);
      self.$attr_reader("callback");
      self.$attr_writer("on");
      
      Opal.def(self, '$initialize', $Event_initialize$11 = function $$initialize(event, callback) {
        var $iter = $Event_initialize$11.$$p, $yield = $iter || nil, self = this;

        if ($iter) $Event_initialize$11.$$p = null;
        
        
        if (callback == null) {
          callback = nil;
        };
        $send2(self, $find_super(self, 'initialize', $Event_initialize$11, false, true), 'initialize', [event], null);
        return (self.callback = callback);
      }, $Event_initialize$11.$$arity = -2);
      
      Opal.def(self, '$name', $Event_name$12 = function $$name() {
        var self = this;

        return self["native"].type
      }, $Event_name$12.$$arity = 0);
      
      Opal.def(self, '$on', $Event_on$13 = function $$on() {
        var self = this, $ret_or_3 = nil;

        if ($truthy(($ret_or_3 = self.on))) {
          return $ret_or_3
        } else {
          return $$($nesting, 'Target').$convert(self["native"].currentTarget)
        }
      }, $Event_on$13.$$arity = 0);
      
      Opal.def(self, '$target', $Event_target$14 = function $$target() {
        var self = this;

        return $$($nesting, 'Target').$convert(self["native"].srcElement || self["native"].target)
      }, $Event_target$14.$$arity = 0);
      
      Opal.def(self, '$arguments', $Event_arguments$15 = function() {
        var self = this;

        return self["native"].arguments || []
      }, $Event_arguments$15.$$arity = 0);
      
      Opal.def(self, '$arguments=', $Event_arguments$eq$16 = function(args) {
        var self = this;

        return self["native"].arguments = args
      }, $Event_arguments$eq$16.$$arity = 1);
      self.$alias_native("bubbles?", "bubbles");
      self.$alias_native("cancelable?", "cancelable");
      self.$alias_native("data");
      self.$alias_native("phase", "eventPhase");
      self.$alias_native("at", "timeStamp");
      
      Opal.def(self, '$off', $Event_off$17 = function $$off() {
        var self = this;

        if ($truthy(self.callback)) {
          return self.callback.$off()
        } else {
          return nil
        }
      }, $Event_off$17.$$arity = 0);
      
      Opal.def(self, '$stopped?', $Event_stopped$ques$18 = function() {
        var self = this;

        return !!self["native"].stopped
      }, $Event_stopped$ques$18.$$arity = 0);
      
      Opal.def(self, '$stop', $Event_stop$19 = function $$stop() {
        var self = this;

        
        if ($truthy((typeof(self["native"].stopPropagation) !== "undefined"))) {
          self["native"].stopPropagation()};
        return self["native"].stopped = true;
      }, $Event_stop$19.$$arity = 0);
      
      Opal.def(self, '$prevent', $Event_prevent$20 = function $$prevent() {
        var self = this;

        
        if ($truthy((typeof(self["native"].preventDefault) !== "undefined"))) {
          self["native"].preventDefault()};
        return self["native"].prevented = true;
      }, $Event_prevent$20.$$arity = 0);
      
      Opal.def(self, '$prevented?', $Event_prevented$ques$21 = function() {
        var self = this;

        return !!self["native"].prevented
      }, $Event_prevented$ques$21.$$arity = 0);
      return (Opal.def(self, '$stop!', $Event_stop$excl$22 = function() {
        var self = this;

        
        self.$prevent();
        return self.$stop();
      }, $Event_stop$excl$22.$$arity = 0), nil) && 'stop!';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["browser/window/view"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_n', '$supports?', '$raise']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Window');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'View');

        var $nesting = [self].concat($parent_nesting), $View_initialize$1, $View_width$2, $View_height$3, $View_height$4, $View_width$5, $View_width$6, $View_height$7;

        self.$$prototype["native"] = nil;
        
        
        Opal.def(self, '$initialize', $View_initialize$1 = function $$initialize(window) {
          var self = this;

          
          self.window = window;
          return (self["native"] = window.$to_n());
        }, $View_initialize$1.$$arity = 1);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Window.innerSize"))) {
          
          
          Opal.def(self, '$width', $View_width$2 = function $$width() {
            var self = this;

            return self["native"].innerWidth
          }, $View_width$2.$$arity = 0);
          return (Opal.def(self, '$height', $View_height$3 = function $$height() {
            var self = this;

            return self["native"].innerHeight
          }, $View_height$3.$$arity = 0), nil) && 'height';
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Element.clientSize"))) {
          
          
          Opal.def(self, '$height', $View_height$4 = function $$height() {
            var self = this;

            return self["native"].document.documentElement.clientHeight
          }, $View_height$4.$$arity = 0);
          return (Opal.def(self, '$width', $View_width$5 = function $$width() {
            var self = this;

            return self["native"].document.documentElement.clientWidth
          }, $View_width$5.$$arity = 0), nil) && 'width';
        } else {
          
          
          Opal.def(self, '$width', $View_width$6 = function $$width() {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "window size unsupported")
          }, $View_width$6.$$arity = 0);
          return (Opal.def(self, '$height', $View_height$7 = function $$height() {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "window size unsupported")
          }, $View_height$7.$$arity = 0), nil) && 'height';
        };
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/window/size"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$to_n', '$===', '$first', '$values_at', '$width', '$height', '$supports?', '$raise', '$set']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Window');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Size');

        var $nesting = [self].concat($parent_nesting), $Size_initialize$1, $Size_set$2, $Size_width$3, $Size_height$4, $Size_width$5, $Size_height$6, $Size_width$eq$7, $Size_height$eq$8;

        self.$$prototype["native"] = nil;
        
        
        Opal.def(self, '$initialize', $Size_initialize$1 = function $$initialize(window) {
          var self = this;

          
          self.window = window;
          return (self["native"] = window.$to_n());
        }, $Size_initialize$1.$$arity = 1);
        
        Opal.def(self, '$set', $Size_set$2 = function $$set($a) {
          var $post_args, args, $b, $c, self = this, width = nil, height = nil, $ret_or_1 = nil, $ret_or_2 = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ($truthy($$($nesting, 'Hash')['$==='](args.$first()))) {
            $c = args.$first().$values_at("width", "height"), $b = Opal.to_ary($c), (width = ($b[0] == null ? nil : $b[0])), (height = ($b[1] == null ? nil : $b[1])), $c
          } else {
            $c = args, $b = Opal.to_ary($c), (width = ($b[0] == null ? nil : $b[0])), (height = ($b[1] == null ? nil : $b[1])), $c
          };
          width = (function() {if ($truthy(($ret_or_1 = width))) {
            return $ret_or_1
          } else {
            return self.$width()
          }; return nil; })();
          height = (function() {if ($truthy(($ret_or_2 = height))) {
            return $ret_or_2
          } else {
            return self.$height()
          }; return nil; })();
          self["native"].resizeTo(width, height);
          return self;
        }, $Size_set$2.$$arity = -1);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Window.outerSize"))) {
          
          
          Opal.def(self, '$width', $Size_width$3 = function $$width() {
            var self = this;

            return self["native"].outerWidth
          }, $Size_width$3.$$arity = 0);
          
          Opal.def(self, '$height', $Size_height$4 = function $$height() {
            var self = this;

            return self["native"].outerHeight
          }, $Size_height$4.$$arity = 0);
        } else {
          
          
          Opal.def(self, '$width', $Size_width$5 = function $$width() {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "window outer size not supported")
          }, $Size_width$5.$$arity = 0);
          
          Opal.def(self, '$height', $Size_height$6 = function $$height() {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "window outer size not supported")
          }, $Size_height$6.$$arity = 0);
        };
        
        Opal.def(self, '$width=', $Size_width$eq$7 = function(value) {
          var self = this;

          return self.$set($hash2(["width"], {"width": value}))
        }, $Size_width$eq$7.$$arity = 1);
        return (Opal.def(self, '$height=', $Size_height$eq$8 = function(value) {
          var self = this;

          return self.$set($hash2(["height"], {"height": value}))
        }, $Size_height$eq$8.$$arity = 1), nil) && 'height=';
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/window/scroll"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_n', '$supports?', '$new', '$raise', '$x', '$position', '$y', '$[]']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Window');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Scroll');

        var $nesting = [self].concat($parent_nesting), $Scroll_initialize$1, $Scroll_position$2, $Scroll_position$3, $Scroll_position$4, $Scroll_x$5, $Scroll_y$6, $Scroll_to$7, $Scroll_by$8;

        self.$$prototype["native"] = nil;
        
        
        Opal.def(self, '$initialize', $Scroll_initialize$1 = function $$initialize(window) {
          var self = this;

          
          self.window = window;
          return (self["native"] = window.$to_n());
        }, $Scroll_initialize$1.$$arity = 1);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Window.scroll"))) {
          
          Opal.def(self, '$position', $Scroll_position$2 = function $$position() {
            var self = this;

            
            
        var doc  = self["native"].document,
            root = doc.documentElement,
            body = doc.body;

        var x = root.scrollLeft || body.scrollLeft,
            y = root.scrollTop  || body.scrollTop;
      ;
            return $$($nesting, 'Position').$new(x, y);
          }, $Scroll_position$2.$$arity = 0)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Window.pageOffset"))) {
          
          Opal.def(self, '$position', $Scroll_position$3 = function $$position() {
            var self = this;

            return $$($nesting, 'Position').$new(self["native"].pageXOffset, self["native"].pageYOffset)
          }, $Scroll_position$3.$$arity = 0)
        } else {
          
          Opal.def(self, '$position', $Scroll_position$4 = function $$position() {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "window scroll unsupported")
          }, $Scroll_position$4.$$arity = 0)
        };
        
        Opal.def(self, '$x', $Scroll_x$5 = function $$x() {
          var self = this;

          return self.$position().$x()
        }, $Scroll_x$5.$$arity = 0);
        
        Opal.def(self, '$y', $Scroll_y$6 = function $$y() {
          var self = this;

          return self.$position().$y()
        }, $Scroll_y$6.$$arity = 0);
        
        Opal.def(self, '$to', $Scroll_to$7 = function $$to(what) {
          var self = this, x = nil, $ret_or_1 = nil, y = nil, $ret_or_2 = nil;

          
          x = (function() {if ($truthy(($ret_or_1 = what['$[]']("x")))) {
            return $ret_or_1
          } else {
            return self.$x()
          }; return nil; })();
          y = (function() {if ($truthy(($ret_or_2 = what['$[]']("y")))) {
            return $ret_or_2
          } else {
            return self.$y()
          }; return nil; })();
          self["native"].scrollTo(x, y);
          return self;
        }, $Scroll_to$7.$$arity = 1);
        return (Opal.def(self, '$by', $Scroll_by$8 = function $$by(what) {
          var self = this, x = nil, $ret_or_3 = nil, y = nil, $ret_or_4 = nil;

          
          x = (function() {if ($truthy(($ret_or_3 = what['$[]']("x")))) {
            return $ret_or_3
          } else {
            return 0
          }; return nil; })();
          y = (function() {if ($truthy(($ret_or_4 = what['$[]']("y")))) {
            return $ret_or_4
          } else {
            return 0
          }; return nil; })();
          self["native"].scrollBy(x, y);
          return self;
        }, $Scroll_by$8.$$arity = 1), nil) && 'by';
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/window"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$delete', '$join', '$map', '$===', '$new', '$include', '$target', '$supports?', '$[]', '$raise', '$alert', '$prompt', '$confirm']);
  
  self.$require("browser/window/view");
  self.$require("browser/window/size");
  self.$require("browser/window/scroll");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Window');

      var $nesting = [self].concat($parent_nesting), $Window_open$1, $Window$3, $Window_alert$4, $Window_prompt$5, $Window_confirm$6, $Window_view$7, $Window_size$8, $Window_scroll$9, $Window_send$10, $Window_send$11, $Window_close$12;

      self.$$prototype["native"] = nil;
      
      Opal.defs(self, '$open', $Window_open$1 = function $$open(url, options) {
        var $$2, self = this, name = nil, features = nil;

        
        name = options.$delete("name");
        features = $send(options, 'map', [], ($$2 = function(key, value){var self = $$2.$$s == null ? this : $$2.$$s, $case = nil;

          
          
          if (key == null) {
            key = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          value = (function() {$case = value;
          if (true['$===']($case)) {return "yes"}
          else if (false['$===']($case)) {return "no"}
          else {return value}})();
          return "" + (key) + "=" + (value);}, $$2.$$s = self, $$2.$$arity = 2, $$2)).$join(",");
        
      var win = window.open(url, name, features);

      if (win == null) {
        return nil;
      }

      return self.$new(win);
    ;
      }, $Window_open$1.$$arity = 2);
      self.$include($$($nesting, 'Native'));
      self.$include($$$($$($nesting, 'Event'), 'Target'));
      $send(self, 'target', [], ($Window$3 = function(value){var self = $Window$3.$$s == null ? this : $Window$3.$$s;
        if ($gvars.window == null) $gvars.window = nil;

        
        
        if (value == null) {
          value = nil;
        };
        if ($truthy(value == window)) {
          return $gvars.window
        } else {
          return nil
        };}, $Window$3.$$s = self, $Window$3.$$arity = 1, $Window$3));
      
      Opal.def(self, '$alert', $Window_alert$4 = function $$alert(value) {
        var self = this;

        
        self["native"].alert(value);
        return value;
      }, $Window_alert$4.$$arity = 1);
      
      Opal.def(self, '$prompt', $Window_prompt$5 = function $$prompt(value) {
        var self = this;

        return self["native"].prompt(value) || nil
      }, $Window_prompt$5.$$arity = 1);
      
      Opal.def(self, '$confirm', $Window_confirm$6 = function $$confirm(value) {
        var self = this;

        return self["native"].confirm(value) || false
      }, $Window_confirm$6.$$arity = 1);
      
      Opal.def(self, '$view', $Window_view$7 = function $$view() {
        var self = this;

        return $$($nesting, 'View').$new(self)
      }, $Window_view$7.$$arity = 0);
      
      Opal.def(self, '$size', $Window_size$8 = function $$size() {
        var self = this;

        return $$($nesting, 'Size').$new(self)
      }, $Window_size$8.$$arity = 0);
      
      Opal.def(self, '$scroll', $Window_scroll$9 = function $$scroll() {
        var self = this;

        return $$($nesting, 'Scroll').$new(self)
      }, $Window_scroll$9.$$arity = 0);
      if ($truthy($$($nesting, 'Browser')['$supports?']("Window.send"))) {
        
        Opal.def(self, '$send', $Window_send$10 = function $$send(message, options) {
          var self = this, $ret_or_1 = nil;

          
          
          if (options == null) {
            options = $hash2([], {});
          };
          return self["native"].postMessage(message, (function() {if ($truthy(($ret_or_1 = options['$[]']("to")))) {
            return $ret_or_1
          } else {
            return "*"
          }; return nil; })());
        }, $Window_send$10.$$arity = -2)
      } else {
        
        Opal.def(self, '$send', $Window_send$11 = function $$send(message, options) {
          var self = this;

          
          
          if (options == null) {
            options = $hash2([], {});
          };
          return self.$raise($$($nesting, 'NotImplementedError'), "message sending unsupported");
        }, $Window_send$11.$$arity = -2)
      };
      return (Opal.def(self, '$close', $Window_close$12 = function $$close() {
        var self = this;

        
      return (window.open('', '_self', '') && window.close()) ||
             (window.opener = null && window.close()) ||
             (window.opener = '' && window.close());
    
      }, $Window_close$12.$$arity = 0), nil) && 'close';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  $gvars.window = $$$($$($nesting, 'Browser'), 'Window').$new(window);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_alert$13, $Kernel_prompt$14, $Kernel_confirm$15;

    
    
    Opal.def(self, '$alert', $Kernel_alert$13 = function $$alert(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$alert(value)
    }, $Kernel_alert$13.$$arity = 1);
    
    Opal.def(self, '$prompt', $Kernel_prompt$14 = function $$prompt(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$prompt(value)
    }, $Kernel_prompt$14.$$arity = 1);
    return (Opal.def(self, '$confirm', $Kernel_confirm$15 = function $$confirm(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$confirm(value)
    }, $Kernel_confirm$15.$$arity = 1), nil) && 'confirm';
  })($nesting[0], $nesting);
};

Opal.modules["browser/dom/node_set"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$uniq', '$map', '$flatten', '$DOM', '$convert', '$respond_to?', '$each', '$__send__', '$to_proc', '$===', '$at_css', '$at_xpath', '$[]', '$css', '$select', '$=~', '$search', '$xpath']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NodeSet');

        var $nesting = [self].concat($parent_nesting), $NodeSet_$$$1, $NodeSet_initialize$3, $NodeSet_method_missing$4, $NodeSet_at_css$6, $NodeSet_at_xpath$8, $NodeSet_css$10, $NodeSet_filter$12, $NodeSet_search$14, $NodeSet_xpath$16, $NodeSet_to_ary$18;

        self.$$prototype.literal = nil;
        
        Opal.defs(self, '$[]', $NodeSet_$$$1 = function($a) {
          var $post_args, nodes, $$2, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          nodes = $post_args;;
          return self.$new($send(nodes.$flatten(), 'map', [], ($$2 = function(x){var self = $$2.$$s == null ? this : $$2.$$s;

            
            
            if (x == null) {
              x = nil;
            };
            return self.$DOM($$($nesting, 'Native').$convert(x));}, $$2.$$s = self, $$2.$$arity = 1, $$2)).$uniq());
        }, $NodeSet_$$$1.$$arity = -1);
        
        Opal.def(self, '$initialize', $NodeSet_initialize$3 = function $$initialize(literal) {
          var self = this;

          return (self.literal = literal)
        }, $NodeSet_initialize$3.$$arity = 1);
        
        Opal.def(self, '$method_missing', $NodeSet_method_missing$4 = function $$method_missing(name, $a) {
          var $iter = $NodeSet_method_missing$4.$$p, block = $iter || nil, $post_args, args, $$5, self = this, result = nil;

          if ($iter) $NodeSet_method_missing$4.$$p = null;
          
          
          if ($iter) $NodeSet_method_missing$4.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy(self.literal['$respond_to?'](name))) {
          } else {
            
            $send(self, 'each', [], ($$5 = function(el){var self = $$5.$$s == null ? this : $$5.$$s;

              
              
              if (el == null) {
                el = nil;
              };
              return $send(el, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc());}, $$5.$$s = self, $$5.$$arity = 1, $$5));
            return self;
          };
          result = $send(self.literal, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc());
          if ($truthy(result === self.literal)) {
            return self
          } else if ($truthy($$($nesting, 'Array')['$==='](result))) {
            return $$($nesting, 'NodeSet').$new(result)
          } else {
            return result
          };
        }, $NodeSet_method_missing$4.$$arity = -2);
        
        Opal.def(self, '$at_css', $NodeSet_at_css$6 = function $$at_css($a) {try {

          var $post_args, rules, $$7, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          rules = $post_args;;
          $send(self, 'each', [], ($$7 = function(node){var self = $$7.$$s == null ? this : $$7.$$s;

            
            
            if (node == null) {
              node = nil;
            };
            if ($truthy((node = $send(node, 'at_css', Opal.to_a(rules))))) {
              Opal.ret(node)
            } else {
              return nil
            };}, $$7.$$s = self, $$7.$$arity = 1, $$7));
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $NodeSet_at_css$6.$$arity = -1);
        
        Opal.def(self, '$at_xpath', $NodeSet_at_xpath$8 = function $$at_xpath($a) {try {

          var $post_args, paths, $$9, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          paths = $post_args;;
          $send(self, 'each', [], ($$9 = function(node){var self = $$9.$$s == null ? this : $$9.$$s;

            
            
            if (node == null) {
              node = nil;
            };
            if ($truthy((node = $send(node, 'at_xpath', Opal.to_a(paths))))) {
              Opal.ret(node)
            } else {
              return nil
            };}, $$9.$$s = self, $$9.$$arity = 1, $$9));
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $NodeSet_at_xpath$8.$$arity = -1);
        
        Opal.def(self, '$css', $NodeSet_css$10 = function $$css(path) {
          var $$11, self = this;

          return $$($nesting, 'NodeSet')['$[]']($send(self.literal, 'map', [], ($$11 = function(node){var self = $$11.$$s == null ? this : $$11.$$s;

            
            
            if (node == null) {
              node = nil;
            };
            return node.$css(path);}, $$11.$$s = self, $$11.$$arity = 1, $$11)))
        }, $NodeSet_css$10.$$arity = 1);
        
        Opal.def(self, '$filter', $NodeSet_filter$12 = function $$filter(expression) {
          var $$13, self = this;

          return $send(self.literal, 'select', [], ($$13 = function(node){var self = $$13.$$s == null ? this : $$13.$$s;

            
            
            if (node == null) {
              node = nil;
            };
            return node['$=~'](expression);}, $$13.$$s = self, $$13.$$arity = 1, $$13))
        }, $NodeSet_filter$12.$$arity = 1);
        
        Opal.def(self, '$search', $NodeSet_search$14 = function $$search($a) {
          var $post_args, what, $$15, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          what = $post_args;;
          return $$($nesting, 'NodeSet')['$[]']($send(self.literal, 'map', [], ($$15 = function(node){var self = $$15.$$s == null ? this : $$15.$$s;

            
            
            if (node == null) {
              node = nil;
            };
            return $send(node, 'search', Opal.to_a(what));}, $$15.$$s = self, $$15.$$arity = 1, $$15)));
        }, $NodeSet_search$14.$$arity = -1);
        
        Opal.def(self, '$xpath', $NodeSet_xpath$16 = function $$xpath(path) {
          var $$17, self = this;

          return $$($nesting, 'NodeSet')['$[]']($send(self.literal, 'map', [], ($$17 = function(node){var self = $$17.$$s == null ? this : $$17.$$s;

            
            
            if (node == null) {
              node = nil;
            };
            return node.$xpath(path);}, $$17.$$s = self, $$17.$$arity = 1, $$17)))
        }, $NodeSet_xpath$16.$$arity = 1);
        return (Opal.def(self, '$to_ary', $NodeSet_to_ary$18 = function $$to_ary() {
          var self = this;

          return self.literal
        }, $NodeSet_to_ary$18.$$arity = 0), nil) && 'to_ary';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/node"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $alias = Opal.alias, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$convert', '$respond_to?', '$each', '$<<', '$native?', '$===', '$>>', '$DOM', '$to_proc', '$parent', '$last', '$pop', '$select!', '$=~', '$remove_child', '$remove', '$children', '$supports?', '$node_type', '$first', '$select', '$element_children', '$to_s', '$next', '$!', '$element?', '$previous', '$try_convert', '$name']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Node');

        var $nesting = [self].concat($parent_nesting), $Node_new$1, $Node_$eq_eq$2, $Node_$lt$lt$3, $Node_$gt$gt$5, $Node_add_child$7, $Node_add_next_sibling$8, $Node_add_previous_sibling$9, $Node_append_to$10, $Node_ancestors$11, $Node_remove$13, $Node_clear$14, $Node_content$15, $Node_content$eq$16, $Node_content$17, $Node_content$eq$18, $Node_content$19, $Node_content$eq$20, $Node_blank$ques$21, $Node_cdata$ques$22, $Node_child$23, $Node_children$24, $Node_children$eq$25, $Node_comment$ques$26, $Node_document$27, $Node_document$ques$28, $Node_elem$ques$29, $Node_element_children$30, $Node_first_element_child$31, $Node_fragment$ques$32, $Node_inner_html$33, $Node_inner_html$eq$34, $Node_last_element_child$35, $Node_name$36, $Node_name$eq$37, $Node_namespace$38, $Node_next$39, $Node_next_element$40, $Node_node_type$41, $Node_parent$42, $Node_parent$eq$43, $Node_parse$44, $Node_path$45, $Node_prepend_to$46, $Node_previous$47, $Node_previous_element$48, $Node_remove_child$49, $Node_replace$50, $Node_text$ques$51, $Node_traverse$52, $Node_value$53, $Node_value$eq$54, $Node_inspect$55;

        self.$$prototype["native"] = nil;
        
        self.$include($$($nesting, 'Native'));
        Opal.const_set($nesting[0], 'ELEMENT_NODE', 1);
        Opal.const_set($nesting[0], 'ATTRIBUTE_NODE', 2);
        Opal.const_set($nesting[0], 'TEXT_NODE', 3);
        Opal.const_set($nesting[0], 'CDATA_SECTION_NODE', 4);
        Opal.const_set($nesting[0], 'ENTITY_REFERENCE_NOCE', 5);
        Opal.const_set($nesting[0], 'ENTITY_NODE', 6);
        Opal.const_set($nesting[0], 'PROCESSING_INSTRUCTION_NODE', 7);
        Opal.const_set($nesting[0], 'COMMENT_NODE', 8);
        Opal.const_set($nesting[0], 'DOCUMENT_NODE', 9);
        Opal.const_set($nesting[0], 'DOCUMENT_TYPE_NODE', 10);
        Opal.const_set($nesting[0], 'DOCUMENT_FRAGMENT_NODE', 11);
        Opal.const_set($nesting[0], 'NOTATION_NODE', 12);
        Opal.defs(self, '$new', $Node_new$1 = function(value) {
          var $iter = $Node_new$1.$$p, $yield = $iter || nil, self = this, $ret_or_1 = nil, klass = nil;
          if (self.classes == null) self.classes = nil;

          if ($iter) $Node_new$1.$$p = null;
          if (self['$==']($$($nesting, 'Node'))) {
            
            self.classes = (function() {if ($truthy(($ret_or_1 = self.classes))) {
              return $ret_or_1
            } else {
              return [nil, $$($nesting, 'Element'), $$($nesting, 'Attribute'), $$($nesting, 'Text'), $$($nesting, 'CDATA'), nil, nil, nil, $$($nesting, 'Comment'), $$($nesting, 'Document'), nil, $$($nesting, 'DocumentFragment')]
            }; return nil; })();
            if ($truthy((klass = self.classes['$[]'](value.nodeType)))) {
              return klass.$new(value)
            } else {
              return self.$raise($$($nesting, 'ArgumentError'), "cannot instantiate a non derived Node object")
            };
          } else {
            return $send2(self, $find_super(self, 'new', $Node_new$1, false, true), 'new', [value], $iter)
          }
        }, $Node_new$1.$$arity = 1);
        
        Opal.def(self, '$==', $Node_$eq_eq$2 = function(other) {
          var self = this;

          return self["native"] === $$($nesting, 'Native').$convert(other)
        }, $Node_$eq_eq$2.$$arity = 1);
        
        Opal.def(self, '$<<', $Node_$lt$lt$3 = function(node) {
          var $$4, self = this;

          
          if ($truthy($$($nesting, 'Opal')['$respond_to?'](node, "each"))) {
            
            $send(node, 'each', [], ($$4 = function(n){var self = $$4.$$s == null ? this : $$4.$$s;

              
              
              if (n == null) {
                n = nil;
              };
              return self['$<<'](n);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
            return self;};
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy($$($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
          } else {
            node = $$($nesting, 'Native').$convert(node)
          };
          self["native"].appendChild(node);
          return self;
        }, $Node_$lt$lt$3.$$arity = 1);
        
        Opal.def(self, '$>>', $Node_$gt$gt$5 = function(node) {
          var $$6, self = this;

          
          if ($truthy($$($nesting, 'Opal')['$respond_to?'](node, "each"))) {
            
            $send(node, 'each', [], ($$6 = function(n){var self = $$6.$$s == null ? this : $$6.$$s;

              
              
              if (n == null) {
                n = nil;
              };
              return self['$>>'](n);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
            return self;};
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy($$($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
          } else {
            node = $$($nesting, 'Native').$convert(node)
          };
          if ($truthy(self["native"].firstChild == null)) {
            self["native"].appendChild(node)
          } else {
            self["native"].insertBefore(node, self["native"].firstChild)
          };
          return self;
        }, $Node_$gt$gt$5.$$arity = 1);
        
        Opal.def(self, '$add_child', $Node_add_child$7 = function $$add_child(node) {
          var $iter = $Node_add_child$7.$$p, block = $iter || nil, self = this;

          if ($iter) $Node_add_child$7.$$p = null;
          
          
          if ($iter) $Node_add_child$7.$$p = null;;
          
          if (node == null) {
            node = nil;
          };
          if ($truthy(node)) {
          } else {
            node = $send(self, 'DOM', [], block.$to_proc())
          };
          return self['$<<'](node);
        }, $Node_add_child$7.$$arity = -1);
        
        Opal.def(self, '$add_next_sibling', $Node_add_next_sibling$8 = function $$add_next_sibling(node) {
          var $iter = $Node_add_next_sibling$8.$$p, block = $iter || nil, self = this;

          if ($iter) $Node_add_next_sibling$8.$$p = null;
          
          
          if ($iter) $Node_add_next_sibling$8.$$p = null;;
          
          if (node == null) {
            node = nil;
          };
          if ($truthy(node)) {
          } else {
            node = $send(self, 'DOM', [], block.$to_proc())
          };
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy($$($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
          } else {
            node = $$($nesting, 'Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"].nextSibling);
        }, $Node_add_next_sibling$8.$$arity = -1);
        
        Opal.def(self, '$add_previous_sibling', $Node_add_previous_sibling$9 = function $$add_previous_sibling(node) {
          var $iter = $Node_add_previous_sibling$9.$$p, block = $iter || nil, self = this;

          if ($iter) $Node_add_previous_sibling$9.$$p = null;
          
          
          if ($iter) $Node_add_previous_sibling$9.$$p = null;;
          
          if (node == null) {
            node = nil;
          };
          if ($truthy(node)) {
          } else {
            node = $send(self, 'DOM', [], block.$to_proc())
          };
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy($$($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
          } else {
            node = $$($nesting, 'Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"]);
        }, $Node_add_previous_sibling$9.$$arity = -1);
        $alias(self, "after", "add_next_sibling");
        
        Opal.def(self, '$append_to', $Node_append_to$10 = function $$append_to(node) {
          var self = this;

          return node['$<<'](self)
        }, $Node_append_to$10.$$arity = 1);
        
        Opal.def(self, '$ancestors', $Node_ancestors$11 = function $$ancestors(expression) {
          var $a, $$12, self = this, parents = nil, parent = nil;

          
          
          if (expression == null) {
            expression = nil;
          };
          if ($truthy(self.$parent())) {
          } else {
            return $$($nesting, 'NodeSet')['$[]']()
          };
          parents = [self.$parent()];
          while ($truthy((parent = parents.$last().$parent()))) {
            parents['$<<'](parent)
          };
          if ($truthy($$($nesting, 'Document')['$==='](parents.$last()))) {
            parents.$pop()};
          if ($truthy(expression)) {
            $send(parents, 'select!', [], ($$12 = function(p){var self = $$12.$$s == null ? this : $$12.$$s;

              
              
              if (p == null) {
                p = nil;
              };
              return p['$=~'](expression);}, $$12.$$s = self, $$12.$$arity = 1, $$12))};
          return $$($nesting, 'NodeSet').$new(parents);
        }, $Node_ancestors$11.$$arity = -1);
        $alias(self, "before", "add_previous_sibling");
        
        Opal.def(self, '$remove', $Node_remove$13 = function $$remove() {
          var self = this;

          if ($truthy(self.$parent())) {
            return self.$parent().$remove_child(self)
          } else {
            return nil
          }
        }, $Node_remove$13.$$arity = 0);
        
        Opal.def(self, '$clear', $Node_clear$14 = function $$clear() {
          var self = this;

          return self.$children().$remove()
        }, $Node_clear$14.$$arity = 0);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Element.textContent"))) {
          
          
          Opal.def(self, '$content', $Node_content$15 = function $$content() {
            var self = this;

            return self["native"].textContent
          }, $Node_content$15.$$arity = 0);
          
          Opal.def(self, '$content=', $Node_content$eq$16 = function(value) {
            var self = this;

            return self["native"].textContent = value
          }, $Node_content$eq$16.$$arity = 1);
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Element.innerText"))) {
          
          
          Opal.def(self, '$content', $Node_content$17 = function $$content() {
            var self = this;

            return self["native"].innerText
          }, $Node_content$17.$$arity = 0);
          
          Opal.def(self, '$content=', $Node_content$eq$18 = function(value) {
            var self = this;

            return self["native"].innerText = value
          }, $Node_content$eq$18.$$arity = 1);
        } else {
          
          
          Opal.def(self, '$content', $Node_content$19 = function $$content() {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "node text content unsupported")
          }, $Node_content$19.$$arity = 0);
          
          Opal.def(self, '$content=', $Node_content$eq$20 = function(value) {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "node text content unsupported")
          }, $Node_content$eq$20.$$arity = 1);
        };
        
        Opal.def(self, '$blank?', $Node_blank$ques$21 = function() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $Node_blank$ques$21.$$arity = 0);
        
        Opal.def(self, '$cdata?', $Node_cdata$ques$22 = function() {
          var self = this;

          return self.$node_type()['$==']($$($nesting, 'CDATA_SECTION_NODE'))
        }, $Node_cdata$ques$22.$$arity = 0);
        
        Opal.def(self, '$child', $Node_child$23 = function $$child() {
          var self = this;

          return self.$children().$first()
        }, $Node_child$23.$$arity = 0);
        
        Opal.def(self, '$children', $Node_children$24 = function $$children() {
          var self = this;

          return $$($nesting, 'NodeSet')['$[]']($$$($$($nesting, 'Native'), 'Array').$new(self["native"].childNodes))
        }, $Node_children$24.$$arity = 0);
        
        Opal.def(self, '$children=', $Node_children$eq$25 = function(node) {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $Node_children$eq$25.$$arity = 1);
        
        Opal.def(self, '$comment?', $Node_comment$ques$26 = function() {
          var self = this;

          return self.$node_type()['$==']($$($nesting, 'COMMENT_NODE'))
        }, $Node_comment$ques$26.$$arity = 0);
        
        Opal.def(self, '$document', $Node_document$27 = function $$document() {
          var self = this;

          if ($truthy((typeof(self["native"].ownerDocument) !== "undefined"))) {
            return self.$DOM(self["native"].ownerDocument)
          } else {
            return nil
          }
        }, $Node_document$27.$$arity = 0);
        
        Opal.def(self, '$document?', $Node_document$ques$28 = function() {
          var self = this;

          return self.$node_type()['$==']($$($nesting, 'DOCUMENT_NODE'))
        }, $Node_document$ques$28.$$arity = 0);
        
        Opal.def(self, '$elem?', $Node_elem$ques$29 = function() {
          var self = this;

          return self.$node_type()['$==']($$($nesting, 'ELEMENT_NODE'))
        }, $Node_elem$ques$29.$$arity = 0);
        $alias(self, "element?", "elem?");
        
        Opal.def(self, '$element_children', $Node_element_children$30 = function $$element_children() {
          var self = this;

          return $send(self.$children(), 'select', [], "element?".$to_proc())
        }, $Node_element_children$30.$$arity = 0);
        $alias(self, "elements", "element_children");
        
        Opal.def(self, '$first_element_child', $Node_first_element_child$31 = function $$first_element_child() {
          var self = this;

          return self.$element_children().$first()
        }, $Node_first_element_child$31.$$arity = 0);
        
        Opal.def(self, '$fragment?', $Node_fragment$ques$32 = function() {
          var self = this;

          return self.$node_type()['$==']($$($nesting, 'DOCUMENT_FRAGMENT_NODE'))
        }, $Node_fragment$ques$32.$$arity = 0);
        
        Opal.def(self, '$inner_html', $Node_inner_html$33 = function $$inner_html() {
          var self = this;

          return self["native"].innerHTML
        }, $Node_inner_html$33.$$arity = 0);
        
        Opal.def(self, '$inner_html=', $Node_inner_html$eq$34 = function(value) {
          var self = this;

          return self["native"].innerHTML = value
        }, $Node_inner_html$eq$34.$$arity = 1);
        $alias(self, "inner_text", "content");
        $alias(self, "inner_text=", "content=");
        
        Opal.def(self, '$last_element_child', $Node_last_element_child$35 = function $$last_element_child() {
          var self = this;

          return self.$element_children().$last()
        }, $Node_last_element_child$35.$$arity = 0);
        
        Opal.def(self, '$name', $Node_name$36 = function $$name() {
          var self = this;

          return self["native"].nodeName || nil
        }, $Node_name$36.$$arity = 0);
        
        Opal.def(self, '$name=', $Node_name$eq$37 = function(value) {
          var self = this;

          return self["native"].nodeName = value.$to_s()
        }, $Node_name$eq$37.$$arity = 1);
        
        Opal.def(self, '$namespace', $Node_namespace$38 = function $$namespace() {
          var self = this;

          return self["native"].namespaceURI || nil
        }, $Node_namespace$38.$$arity = 0);
        
        Opal.def(self, '$next', $Node_next$39 = function $$next() {
          var self = this;

          if ($truthy(self["native"].nextSibling != null)) {
            return self.$DOM(self["native"].nextSibling)
          } else {
            return nil
          }
        }, $Node_next$39.$$arity = 0);
        $alias(self, "next=", "add_next_sibling");
        
        Opal.def(self, '$next_element', $Node_next_element$40 = function $$next_element() {
          var $a, self = this, current = nil, $ret_or_2 = nil;

          
          current = self.$next();
          while ($truthy((function() {if ($truthy(($ret_or_2 = current))) {
            return current['$element?']()['$!']()
          } else {
            return $ret_or_2
          }; return nil; })())) {
            current = current.$next()
          };
          return current;
        }, $Node_next_element$40.$$arity = 0);
        $alias(self, "next_sibling", "next");
        $alias(self, "node_name", "name");
        $alias(self, "node_name=", "name=");
        
        Opal.def(self, '$node_type', $Node_node_type$41 = function $$node_type() {
          var self = this;

          return self["native"].nodeType
        }, $Node_node_type$41.$$arity = 0);
        
        Opal.def(self, '$parent', $Node_parent$42 = function $$parent() {
          var self = this;

          if ($truthy(self["native"].parentNode != null)) {
            return self.$DOM(self["native"].parentNode)
          } else {
            return nil
          }
        }, $Node_parent$42.$$arity = 0);
        
        Opal.def(self, '$parent=', $Node_parent$eq$43 = function(node) {
          var self = this;

          return self["native"].parentNode = $$($nesting, 'Native').$convert(node)
        }, $Node_parent$eq$43.$$arity = 1);
        
        Opal.def(self, '$parse', $Node_parse$44 = function $$parse(text, options) {
          var self = this;

          
          
          if (options == null) {
            options = $hash2([], {});
          };
          return self.$raise($$($nesting, 'NotImplementedError'));
        }, $Node_parse$44.$$arity = -2);
        
        Opal.def(self, '$path', $Node_path$45 = function $$path() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $Node_path$45.$$arity = 0);
        
        Opal.def(self, '$prepend_to', $Node_prepend_to$46 = function $$prepend_to(node) {
          var self = this;

          return node['$>>'](self)
        }, $Node_prepend_to$46.$$arity = 1);
        
        Opal.def(self, '$previous', $Node_previous$47 = function $$previous() {
          var self = this;

          if ($truthy(self["native"].previousSibling != null)) {
            return self.$DOM(self["native"].previousSibling)
          } else {
            return nil
          }
        }, $Node_previous$47.$$arity = 0);
        $alias(self, "previous=", "add_previous_sibling");
        
        Opal.def(self, '$previous_element', $Node_previous_element$48 = function $$previous_element() {
          var $a, self = this, current = nil, $ret_or_3 = nil;

          
          current = self.$previous();
          while ($truthy((function() {if ($truthy(($ret_or_3 = current))) {
            return current['$element?']()['$!']()
          } else {
            return $ret_or_3
          }; return nil; })())) {
            current = current.$previous()
          };
          return current;
        }, $Node_previous_element$48.$$arity = 0);
        $alias(self, "previous_sibling", "previous");
        
        Opal.def(self, '$remove_child', $Node_remove_child$49 = function $$remove_child(node) {
          var self = this;

          return self["native"].removeChild($$($nesting, 'Native').$try_convert(node))
        }, $Node_remove_child$49.$$arity = 1);
        
        Opal.def(self, '$replace', $Node_replace$50 = function $$replace(node) {
          var self = this;

          
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy($$($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
          } else {
            node = $$($nesting, 'Native').$convert(node)
          };
          self["native"].parentNode.replaceChild(node, self["native"]);
          return node;
        }, $Node_replace$50.$$arity = 1);
        $alias(self, "replace_with", "replace");
        $alias(self, "text", "content");
        $alias(self, "text=", "content=");
        
        Opal.def(self, '$text?', $Node_text$ques$51 = function() {
          var self = this;

          return self.$node_type()['$==']($$($nesting, 'TEXT_NODE'))
        }, $Node_text$ques$51.$$arity = 0);
        
        Opal.def(self, '$traverse', $Node_traverse$52 = function $$traverse() {
          var $iter = $Node_traverse$52.$$p, block = $iter || nil, self = this;

          if ($iter) $Node_traverse$52.$$p = null;
          
          
          if ($iter) $Node_traverse$52.$$p = null;;
          return self.$raise($$($nesting, 'NotImplementedError'));
        }, $Node_traverse$52.$$arity = 0);
        $alias(self, "type", "node_type");
        
        Opal.def(self, '$value', $Node_value$53 = function $$value() {
          var self = this;

          return self["native"].nodeValue || nil
        }, $Node_value$53.$$arity = 0);
        
        Opal.def(self, '$value=', $Node_value$eq$54 = function(value) {
          var self = this;

          return self["native"].nodeValue = value
        }, $Node_value$eq$54.$$arity = 1);
        return (Opal.def(self, '$inspect', $Node_inspect$55 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::Node: " + (self.$name()) + ">"
        }, $Node_inspect$55.$$arity = 0), nil) && 'inspect';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/attribute"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$alias_native', '$supports?', '$==', '$name']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Attribute');

        var $nesting = [self].concat($parent_nesting), $Attribute_id$ques$1;

        
        self.$include($$($nesting, 'Native'));
        self.$alias_native("name");
        self.$alias_native("value");
        self.$alias_native("value=");
        if ($truthy($$($nesting, 'Browser')['$supports?']("Attr.isId"))) {
          return self.$alias_native("id?", "isId")
        } else {
          return (Opal.def(self, '$id?', $Attribute_id$ques$1 = function() {
            var self = this;

            return self.$name()['$==']("id")
          }, $Attribute_id$ques$1.$$arity = 0), nil) && 'id?'
        };
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/character_data"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CharacterData');

        var $nesting = [self].concat($parent_nesting), $CharacterData_append$1, $CharacterData_data$2, $CharacterData_delete$3, $CharacterData_insert$4, $CharacterData_replace$5, $CharacterData_substring$6;

        self.$$prototype["native"] = nil;
        
        
        Opal.def(self, '$append', $CharacterData_append$1 = function $$append(string) {
          var self = this;

          
          self["native"].appendData(string);
          return self;
        }, $CharacterData_append$1.$$arity = 1);
        
        Opal.def(self, '$data', $CharacterData_data$2 = function $$data() {
          var self = this;

          return self["native"].data
        }, $CharacterData_data$2.$$arity = 0);
        
        Opal.def(self, '$delete', $CharacterData_delete$3 = function(count, offset) {
          var self = this;

          
          
          if (offset == null) {
            offset = 0;
          };
          self["native"].deleteData(offset, count);
          return self;
        }, $CharacterData_delete$3.$$arity = -2);
        
        Opal.def(self, '$insert', $CharacterData_insert$4 = function $$insert(string, offset) {
          var self = this;

          
          
          if (offset == null) {
            offset = 0;
          };
          self["native"].insertData(offset, string);
          return self;
        }, $CharacterData_insert$4.$$arity = -2);
        self.$alias_native("length");
        
        Opal.def(self, '$replace', $CharacterData_replace$5 = function $$replace(string, offset, count) {
          var self = this;

          
          
          if (offset == null) {
            offset = 0;
          };
          
          if (count == null) {
            count = self["native"].length;
          };
          self["native"].replaceData(offset, count, string);
          return self;
        }, $CharacterData_replace$5.$$arity = -2);
        return (Opal.def(self, '$substring', $CharacterData_substring$6 = function $$substring(count, offset) {
          var self = this;

          
          
          if (offset == null) {
            offset = 0;
          };
          return self["native"].substringData(offset, count);
        }, $CharacterData_substring$6.$$arity = -2), nil) && 'substring';
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/text"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$create_text', '$DOM', '$data']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Text');

        var $nesting = [self].concat($parent_nesting), $Text_create$1, $Text_whole$2, $Text_split$3, $Text_inspect$4;

        self.$$prototype["native"] = nil;
        
        Opal.defs(self, '$create', $Text_create$1 = function $$create($a) {
          var $post_args, args, self = this;
          if ($gvars.document == null) $gvars.document = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send($gvars.document, 'create_text', Opal.to_a(args));
        }, $Text_create$1.$$arity = -1);
        
        Opal.def(self, '$whole', $Text_whole$2 = function $$whole() {
          var self = this;

          return self["native"].wholeText
        }, $Text_whole$2.$$arity = 0);
        
        Opal.def(self, '$split', $Text_split$3 = function $$split(offset) {
          var self = this;

          return self.$DOM(self["native"].splitText(offset))
        }, $Text_split$3.$$arity = 1);
        return (Opal.def(self, '$inspect', $Text_inspect$4 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::Text: " + (self.$data()) + ">"
        }, $Text_inspect$4.$$arity = 0), nil) && 'inspect';
      })($nesting[0], $$($nesting, 'CharacterData'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/cdata"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CDATA');

        var $nesting = [self].concat($parent_nesting), $CDATA_inspect$1;

        return (Opal.def(self, '$inspect', $CDATA_inspect$1 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::CDATA: " + (self.$value()) + ">"
        }, $CDATA_inspect$1.$$arity = 0), nil) && 'inspect'
      })($nesting[0], $$($nesting, 'Text'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/comment"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Comment');

        var $nesting = [self].concat($parent_nesting), $Comment_inspect$1;

        return (Opal.def(self, '$inspect', $Comment_inspect$1 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::Comment: " + (self.$value()) + ">"
        }, $Comment_inspect$1.$$arity = 0), nil) && 'inspect'
      })($nesting[0], $$($nesting, 'CharacterData'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/attributes"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $alias = Opal.alias;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]', '$supports?', '$==', '$to_s', '$include', '$enum_for', '$each', '$attribute_nodes', '$name', '$value', '$!', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Attributes');

          var $nesting = [self].concat($parent_nesting), $Attributes_initialize$1, $Attributes_$$$2, $Attributes_$$$eq$3, $Attributes_$$$4, $Attributes_$$$eq$5, $Attributes_each$6, $Attributes_has_key$ques$8, $Attributes_merge$excl$9, $ret_or_1 = nil;

          self.$$prototype.namespace = self.$$prototype["native"] = self.$$prototype.element = nil;
          
          self.$attr_reader("namespace");
          
          Opal.def(self, '$initialize', $Attributes_initialize$1 = function $$initialize(element, options) {
            var self = this;

            
            self.element = element;
            self["native"] = element.$to_n();
            return (self.namespace = options['$[]']("namespace"));
          }, $Attributes_initialize$1.$$arity = 2);
          if ($truthy((function() {if ($truthy(($ret_or_1 = $$($nesting, 'Browser')['$supports?']("Element.className")))) {
            return $ret_or_1
          } else {
            return $$($nesting, 'Browser')['$supports?']("Element.htmlFor")
          }; return nil; })())) {
            
            
            Opal.def(self, '$[]', $Attributes_$$$2 = function(name, options) {
              var self = this, $ret_or_2 = nil, $ret_or_3 = nil, namespace = nil, $ret_or_4 = nil;

              
              
              if (options == null) {
                options = $hash2([], {});
              };
              if ($truthy((function() {if ($truthy(($ret_or_2 = name['$==']("class")))) {
                return $$($nesting, 'Browser')['$supports?']("Element.className")
              } else {
                return $ret_or_2
              }; return nil; })())) {
                name = "className"
              } else if ($truthy((function() {if ($truthy(($ret_or_3 = name['$==']("for")))) {
                return $$($nesting, 'Browser')['$supports?']("Element.htmlFor")
              } else {
                return $ret_or_3
              }; return nil; })())) {
                name = "htmlFor"};
              if ($truthy((namespace = (function() {if ($truthy(($ret_or_4 = options['$[]']("namespace")))) {
                return $ret_or_4
              } else {
                return self.namespace
              }; return nil; })()))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil
              } else {
                return self["native"].getAttribute(name.$to_s()) || nil
              };
            }, $Attributes_$$$2.$$arity = -2);
            
            Opal.def(self, '$[]=', $Attributes_$$$eq$3 = function(name, value, options) {
              var self = this, $ret_or_5 = nil, $ret_or_6 = nil, namespace = nil, $ret_or_7 = nil;

              
              
              if (options == null) {
                options = $hash2([], {});
              };
              if ($truthy((function() {if ($truthy(($ret_or_5 = name['$==']("class")))) {
                return $$($nesting, 'Browser')['$supports?']("Element.className")
              } else {
                return $ret_or_5
              }; return nil; })())) {
                name = "className"
              } else if ($truthy((function() {if ($truthy(($ret_or_6 = name['$==']("for")))) {
                return $$($nesting, 'Browser')['$supports?']("Element.htmlFor")
              } else {
                return $ret_or_6
              }; return nil; })())) {
                name = "htmlFor"};
              if ($truthy((namespace = (function() {if ($truthy(($ret_or_7 = options['$[]']("namespace")))) {
                return $ret_or_7
              } else {
                return self.namespace
              }; return nil; })()))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value)
              } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s())
              };
            }, $Attributes_$$$eq$3.$$arity = -3);
          } else {
            
            
            Opal.def(self, '$[]', $Attributes_$$$4 = function(name, options) {
              var self = this, namespace = nil, $ret_or_8 = nil;

              
              
              if (options == null) {
                options = $hash2([], {});
              };
              if ($truthy((namespace = (function() {if ($truthy(($ret_or_8 = options['$[]']("namespace")))) {
                return $ret_or_8
              } else {
                return self.namespace
              }; return nil; })()))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil
              } else {
                return self["native"].getAttribute(name.$to_s()) || nil
              };
            }, $Attributes_$$$4.$$arity = -2);
            
            Opal.def(self, '$[]=', $Attributes_$$$eq$5 = function(name, value, options) {
              var self = this, namespace = nil, $ret_or_9 = nil;

              
              
              if (options == null) {
                options = $hash2([], {});
              };
              if ($truthy((namespace = (function() {if ($truthy(($ret_or_9 = options['$[]']("namespace")))) {
                return $ret_or_9
              } else {
                return self.namespace
              }; return nil; })()))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value)
              } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s())
              };
            }, $Attributes_$$$eq$5.$$arity = -3);
          };
          self.$include($$($nesting, 'Enumerable'));
          
          Opal.def(self, '$each', $Attributes_each$6 = function $$each() {
            var $iter = $Attributes_each$6.$$p, block = $iter || nil, $$7, self = this;

            if ($iter) $Attributes_each$6.$$p = null;
            
            
            if ($iter) $Attributes_each$6.$$p = null;;
            if ((block !== nil)) {
            } else {
              return self.$enum_for("each")
            };
            $send(self.element.$attribute_nodes(), 'each', [], ($$7 = function(attr){var self = $$7.$$s == null ? this : $$7.$$s;

              
              
              if (attr == null) {
                attr = nil;
              };
              return Opal.yieldX(block, [attr.$name(), attr.$value()]);;}, $$7.$$s = self, $$7.$$arity = 1, $$7));
            return self;
          }, $Attributes_each$6.$$arity = 0);
          $alias(self, "get", "[]");
          
          Opal.def(self, '$has_key?', $Attributes_has_key$ques$8 = function(name) {
            var self = this;

            return self['$[]'](name)['$!']()['$!']()
          }, $Attributes_has_key$ques$8.$$arity = 1);
          
          Opal.def(self, '$merge!', $Attributes_merge$excl$9 = function(hash) {
            var $$10, self = this;

            
            $send(hash, 'each', [], ($$10 = function(name, value){var self = $$10.$$s == null ? this : $$10.$$s, $writer = nil;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, value];
              $send(self, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$10.$$s = self, $$10.$$arity = 2, $$10));
            return self;
          }, $Attributes_merge$excl$9.$$arity = 1);
          return $alias(self, "set", "[]=");
        })($nesting[0], null, $nesting)
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/data"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$to_n', '$include', '$enum_for', '$call', '$each', '$attributes', '$=~', '$[]']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Data');

          var $nesting = [self].concat($parent_nesting), $Data_initialize$1, $Data_each$2, $Data_assign$4, $Data_$$$6, $Data_$$$eq$7;

          self.$$prototype["native"] = self.$$prototype.element = nil;
          
          self.$attr_reader("element");
          
          Opal.def(self, '$initialize', $Data_initialize$1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            self["native"] = element.$to_n();
            if ($truthy((typeof(self["native"].$data) !== "undefined"))) {
              return nil
            } else {
              return self["native"].$data = {}
            };
          }, $Data_initialize$1.$$arity = 1);
          self.$include($$($nesting, 'Enumerable'));
          
          Opal.def(self, '$each', $Data_each$2 = function $$each() {
            var $iter = $Data_each$2.$$p, block = $iter || nil, $$3, self = this;

            if ($iter) $Data_each$2.$$p = null;
            
            
            if ($iter) $Data_each$2.$$p = null;;
            if ($truthy(block)) {
            } else {
              return self.$enum_for("each")
            };
            
      var data = self["native"].$data;

      for (var key in data) {
        block.$call(key, data[key]);
      }
    ;
            $send(self.element.$attributes(), 'each', [], ($$3 = function(name, value){var self = $$3.$$s == null ? this : $$3.$$s, $a;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              if ($truthy(name['$=~'](/^data-(.*)$/))) {
                return block.$call((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), value)
              } else {
                return nil
              };}, $$3.$$s = self, $$3.$$arity = 2, $$3));
            return self;
          }, $Data_each$2.$$arity = 0);
          
          Opal.def(self, '$assign', $Data_assign$4 = function $$assign(data) {
            var $$5, self = this;

            
            $send(data, 'each', [], ($$5 = function(name, value){var self = $$5.$$s == null ? this : $$5.$$s;
              if (self["native"] == null) self["native"] = nil;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              return self["native"].$data[name] = value;}, $$5.$$s = self, $$5.$$arity = 2, $$5));
            return self;
          }, $Data_assign$4.$$arity = 1);
          
          Opal.def(self, '$[]', $Data_$$$6 = function(name) {
            var self = this, data = nil;

            
            if ($truthy((data = self.element['$[]']("" + "data-" + (name))))) {
              return data};
            
      var value = self["native"].$data[name];

      if (value === undefined) {
        return nil;
      }
      else {
        return value;
      }
    ;
          }, $Data_$$$6.$$arity = 1);
          return (Opal.def(self, '$[]=', $Data_$$$eq$7 = function(name, value) {
            var self = this;

            return self["native"].$data[name] = value
          }, $Data_$$$eq$7.$$arity = 2), nil) && '[]=';
        })($nesting[0], null, $nesting)
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/position"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$offset', '$get', '$parent', '$new', '$==', '$[]', '$style', '$=~', '$+', '$x', '$to_i', '$x=', '$-', '$y', '$y=']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Position');

          var $nesting = [self].concat($parent_nesting), $Position_initialize$1, $Position_get$2, $Position_x$3, $Position_y$4;

          self.$$prototype.element = nil;
          
          self.$attr_reader("element");
          
          Opal.def(self, '$initialize', $Position_initialize$1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            return (self["native"] = element.$to_n());
          }, $Position_initialize$1.$$arity = 1);
          
          Opal.def(self, '$get', $Position_get$2 = function $$get() {
            var self = this, offset = nil, position = nil, parent = nil, parent_offset = nil, $writer = nil;

            
            offset = self.element.$offset();
            position = offset.$get();
            parent = offset.$parent();
            parent_offset = $$$($$($nesting, 'Browser'), 'Position').$new(0, 0);
            if (self.element.$style()['$[]']("position")['$==']("fixed")) {
              
              if ($truthy(parent['$=~']("html"))) {
              } else {
                parent_offset = parent.$offset()
              };
              
              $writer = [$rb_plus(parent_offset.$x(), parent.$style()['$[]']("border-top-width").$to_i())];
              $send(parent_offset, 'x=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [$rb_plus(parent_offset.$y(), parent.$style()['$[]']("border-left-width").$to_i())];
              $send(parent_offset, 'y=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            return $$$($$($nesting, 'Browser'), 'Position').$new($rb_minus($rb_minus(position.$x(), parent_offset.$x()), self.element.$style()['$[]']("margin-left").$to_i()), $rb_minus($rb_minus(position.$y(), parent_offset.$y()), self.element.$style()['$[]']("margin-top").$to_i()));
          }, $Position_get$2.$$arity = 0);
          
          Opal.def(self, '$x', $Position_x$3 = function $$x() {
            var self = this;

            return self.$get().$x()
          }, $Position_x$3.$$arity = 0);
          return (Opal.def(self, '$y', $Position_y$4 = function $$y() {
            var self = this;

            return self.$get().$y()
          }, $Position_y$4.$$arity = 0), nil) && 'y';
        })($nesting[0], null, $nesting)
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/offset"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$DOM', '$root', '$document', '$x', '$get', '$set', '$y', '$supports?', '$window', '$new', '$[]', '$style!', '$==', '$[]=', '$style', '$-', '$to_u', '$===', '$first', '$+', '$px']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Offset');

          var $nesting = [self].concat($parent_nesting), $Offset_initialize$1, $Offset_parent$2, $Offset_x$3, $Offset_x$eq$4, $Offset_y$5, $Offset_y$eq$6, $Offset_get$7, $Offset_get$8, $Offset_set$9;

          self.$$prototype["native"] = self.$$prototype.element = nil;
          
          self.$attr_reader("element");
          
          Opal.def(self, '$initialize', $Offset_initialize$1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            return (self["native"] = element.$to_n());
          }, $Offset_initialize$1.$$arity = 1);
          
          Opal.def(self, '$parent', $Offset_parent$2 = function $$parent() {
            var self = this;

            return self.$DOM(self["native"].offsetParent || self.element.$document().$root().$to_n())
          }, $Offset_parent$2.$$arity = 0);
          
          Opal.def(self, '$x', $Offset_x$3 = function $$x() {
            var self = this;

            return self.$get().$x()
          }, $Offset_x$3.$$arity = 0);
          
          Opal.def(self, '$x=', $Offset_x$eq$4 = function(value) {
            var self = this;

            return self.$set(value, nil)
          }, $Offset_x$eq$4.$$arity = 1);
          
          Opal.def(self, '$y', $Offset_y$5 = function $$y() {
            var self = this;

            return self.$get().$y()
          }, $Offset_y$5.$$arity = 0);
          
          Opal.def(self, '$y=', $Offset_y$eq$6 = function(value) {
            var self = this;

            return self.$set(nil, value)
          }, $Offset_y$eq$6.$$arity = 1);
          if ($truthy($$($nesting, 'Browser')['$supports?']("Element.getBoundingClientRect"))) {
            
            Opal.def(self, '$get', $Offset_get$7 = function $$get() {
              var self = this, doc = nil, root = nil, win = nil;

              
              doc = self.element.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var box = self["native"].getBoundingClientRect(),
            y   = box.top + (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x   = box.left + (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return $$$($$($nesting, 'Browser'), 'Position').$new(x, y);
            }, $Offset_get$7.$$arity = 0)
          } else {
            
            Opal.def(self, '$get', $Offset_get$8 = function $$get() {
              var self = this, doc = nil, root = nil, win = nil;

              
              doc = self.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var y = (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x = (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return $$$($$($nesting, 'Browser'), 'Position').$new(x, y);
            }, $Offset_get$8.$$arity = 0)
          };
          return (Opal.def(self, '$set', $Offset_set$9 = function $$set($a) {
            var $post_args, value, $b, $c, self = this, position = nil, $writer = nil, offset = nil, top = nil, left = nil, x = nil, y = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            value = $post_args;;
            position = self.element['$style!']()['$[]']("position");
            if (position['$==']("static")) {
              
              $writer = ["position", "relative"];
              $send(self.element.$style(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            offset = self.$get();
            top = self.element['$style!']()['$[]']("top").$to_u();
            left = self.element['$style!']()['$[]']("left").$to_u();
            if ($truthy($$$($$($nesting, 'Browser'), 'Position')['$==='](value.$first()))) {
              $b = [value.$first().$x(), value.$first().$y()], (x = $b[0]), (y = $b[1]), $b
            } else if ($truthy($$($nesting, 'Hash')['$==='](value.$first()))) {
              $b = [value.$first()['$[]']("x"), value.$first()['$[]']("y")], (x = $b[0]), (y = $b[1]), $b
            } else {
              $c = value, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
            };
            if ($truthy(x)) {
              
              $writer = ["left", $rb_plus($rb_minus(x.$px(), offset.$x()), left)];
              $send(self.element.$style(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(y)) {
              
              $writer = ["top", $rb_plus($rb_minus(y.$px(), offset.$y()), top)];
              $send(self.element.$style(), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            } else {
              return nil
            };
          }, $Offset_set$9.$$arity = -1), nil) && 'set';
        })($nesting[0], null, $nesting)
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/scroll"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$to_n', '$supports?', '$===', '$first', '$[]', '$x', '$y', '$new', '$raise', '$position']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Scroll');

          var $nesting = [self].concat($parent_nesting), $Scroll_initialize$1, $Scroll_to$2, $Scroll_position$3, $Scroll_to$4, $Scroll_position$5, $Scroll_to$6, $Scroll_position$7, $Scroll_x$8, $Scroll_y$9, $Scroll_height$10, $Scroll_width$11, $Scroll_by$12, $Scroll_to$13, $Scroll_to$14, $Scroll_to$excl$15;

          self.$$prototype["native"] = nil;
          
          self.$attr_reader("element");
          
          Opal.def(self, '$initialize', $Scroll_initialize$1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            return (self["native"] = element.$to_n());
          }, $Scroll_initialize$1.$$arity = 1);
          if ($truthy($$($nesting, 'Browser')['$supports?']("Element.scroll"))) {
            
            
            Opal.def(self, '$to', $Scroll_to$2 = function $$to($a) {
              var $post_args, args, $b, $c, self = this, x = nil, $ret_or_1 = nil, y = nil, $ret_or_2 = nil;

              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              if ($truthy($$($nesting, 'Hash')['$==='](args.$first()))) {
                
                x = (function() {if ($truthy(($ret_or_1 = args.$first()['$[]']("x")))) {
                  return $ret_or_1
                } else {
                  return self.$x()
                }; return nil; })();
                y = (function() {if ($truthy(($ret_or_2 = args.$first()['$[]']("y")))) {
                  return $ret_or_2
                } else {
                  return self.$y()
                }; return nil; })();
              } else {
                $c = args, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
              };
              self["native"].scrollTop  = y;
              return self["native"].scrollLeft = x;
            }, $Scroll_to$2.$$arity = -1);
            
            Opal.def(self, '$position', $Scroll_position$3 = function $$position() {
              var self = this;

              return $$$($$($nesting, 'Browser'), 'Position').$new(self["native"].scrollLeft, self["native"].scrollTop)
            }, $Scroll_position$3.$$arity = 0);
          } else if ($truthy($$($nesting, 'Browser')['$supports?']("Element.pageOffset"))) {
            
            
            Opal.def(self, '$to', $Scroll_to$4 = function $$to($a) {
              var $post_args, args, $b, $c, self = this, x = nil, $ret_or_3 = nil, y = nil, $ret_or_4 = nil;

              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              if ($truthy($$($nesting, 'Hash')['$==='](args.$first()))) {
                
                x = (function() {if ($truthy(($ret_or_3 = args.$first()['$[]']("x")))) {
                  return $ret_or_3
                } else {
                  return self.$x()
                }; return nil; })();
                y = (function() {if ($truthy(($ret_or_4 = args.$first()['$[]']("y")))) {
                  return $ret_or_4
                } else {
                  return self.$y()
                }; return nil; })();
              } else {
                $c = args, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
              };
              self["native"].pageYOffset = y;
              return self["native"].pageXOffset = x;
            }, $Scroll_to$4.$$arity = -1);
            
            Opal.def(self, '$position', $Scroll_position$5 = function $$position() {
              var self = this;

              return $$($nesting, 'Position').$new(self["native"].pageXOffset, self["native"].pageYOffset)
            }, $Scroll_position$5.$$arity = 0);
          } else {
            
            
            Opal.def(self, '$to', $Scroll_to$6 = function $$to($a) {
              var $post_args, args, self = this;

              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              return self.$raise($$($nesting, 'NotImplementedError'), "scroll on element unsupported");
            }, $Scroll_to$6.$$arity = -1);
            
            Opal.def(self, '$position', $Scroll_position$7 = function $$position() {
              var self = this;

              return self.$raise($$($nesting, 'NotImplementedError'), "scroll on element unsupported")
            }, $Scroll_position$7.$$arity = 0);
          };
          
          Opal.def(self, '$x', $Scroll_x$8 = function $$x() {
            var self = this;

            return self.$position().$x()
          }, $Scroll_x$8.$$arity = 0);
          
          Opal.def(self, '$y', $Scroll_y$9 = function $$y() {
            var self = this;

            return self.$position().$y()
          }, $Scroll_y$9.$$arity = 0);
          
          Opal.def(self, '$height', $Scroll_height$10 = function $$height() {
            var self = this;

            return self["native"].scrollHeight
          }, $Scroll_height$10.$$arity = 0);
          
          Opal.def(self, '$width', $Scroll_width$11 = function $$width() {
            var self = this;

            return self["native"].scrollWidth
          }, $Scroll_width$11.$$arity = 0);
          
          Opal.def(self, '$by', $Scroll_by$12 = function $$by($a) {
            var $post_args, args, $b, $c, self = this, x = nil, $ret_or_5 = nil, y = nil, $ret_or_6 = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            if ($truthy($$($nesting, 'Hash')['$==='](args.$first()))) {
              
              x = (function() {if ($truthy(($ret_or_5 = args.$first()['$[]']("x")))) {
                return $ret_or_5
              } else {
                return 0
              }; return nil; })();
              y = (function() {if ($truthy(($ret_or_6 = args.$first()['$[]']("y")))) {
                return $ret_or_6
              } else {
                return 0
              }; return nil; })();
            } else {
              $c = args, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
            };
            self["native"].scrollBy(x, y);
            return self;
          }, $Scroll_by$12.$$arity = -1);
          if ($truthy($$($nesting, 'Browser')['$supports?']("Element.scrollIntoViewIfNeeded"))) {
            
            Opal.def(self, '$to', $Scroll_to$13 = function $$to(align) {
              var self = this;

              
              
              if (align == null) {
                align = true;
              };
              return self["native"].scrollIntoViewIfNeeded(align);
            }, $Scroll_to$13.$$arity = -1)
          } else {
            
            Opal.def(self, '$to', $Scroll_to$14 = function $$to(align) {
              var self = this;

              
              
              if (align == null) {
                align = true;
              };
              return self.$raise($$($nesting, 'NotImplementedError'));
            }, $Scroll_to$14.$$arity = -1)
          };
          return (Opal.def(self, '$to!', $Scroll_to$excl$15 = function(align) {
            var self = this;

            
            
            if (align == null) {
              align = true;
            };
            return self["native"].scrollIntoView(align);
          }, $Scroll_to$excl$15.$$arity = -1), nil) && 'to!';
        })($nesting[0], null, $nesting)
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/size"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]=', '$style', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Size');

          var $nesting = [self].concat($parent_nesting), $Size_initialize$1, $Size_width$2, $Size_width$eq$3, $Size_height$4, $Size_height$eq$5;

          self.$$prototype["native"] = self.$$prototype.element = nil;
          
          self.$attr_reader("element");
          
          Opal.def(self, '$initialize', $Size_initialize$1 = function $$initialize(element, $a) {
            var $post_args, inc, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            inc = $post_args;;
            self.element = element;
            self["native"] = element.$to_n();
            return (self.include = inc);
          }, $Size_initialize$1.$$arity = -2);
          
          Opal.def(self, '$width', $Size_width$2 = function $$width() {
            var self = this;

            return self["native"].offsetWidth
          }, $Size_width$2.$$arity = 0);
          
          Opal.def(self, '$width=', $Size_width$eq$3 = function(value) {
            var self = this, $writer = nil;

            
            $writer = ["width", value];
            $send(self.element.$style(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, $Size_width$eq$3.$$arity = 1);
          
          Opal.def(self, '$height', $Size_height$4 = function $$height() {
            var self = this;

            return self["native"].offsetHeight
          }, $Size_height$4.$$arity = 0);
          return (Opal.def(self, '$height=', $Size_height$eq$5 = function(value) {
            var self = this, $writer = nil;

            
            $writer = ["height", value];
            $send(self.element.$style(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, $Size_height$eq$5.$$arity = 1), nil) && 'height=';
        })($nesting[0], null, $nesting)
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/input"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Input');

          var $nesting = [self].concat($parent_nesting), $Input_value$1, $Input_value$eq$2, $Input_checked$ques$3, $Input_clear$4;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$value', $Input_value$1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    
          }, $Input_value$1.$$arity = 0);
          
          Opal.def(self, '$value=', $Input_value$eq$2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, $Input_value$eq$2.$$arity = 1);
          
          Opal.def(self, '$checked?', $Input_checked$ques$3 = function() {
            var self = this;

            return self["native"].checked
          }, $Input_checked$ques$3.$$arity = 0);
          return (Opal.def(self, '$clear', $Input_clear$4 = function $$clear() {
            var self = this;

            return self["native"].value = ''
          }, $Input_clear$4.$$arity = 0), nil) && 'clear';
        })($nesting[0], $$($nesting, 'Element'), $nesting)
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/select"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$[]', '$new', '$DOM', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Select');

          var $nesting = [self].concat($parent_nesting), $Select_value$1, $Select_labels$2, $Select_options$3, $Select_option$4, $Select_index$5;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$value', $Select_value$1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    
          }, $Select_value$1.$$arity = 0);
          
          Opal.def(self, '$labels', $Select_labels$2 = function $$labels() {
            var self = this;

            return $$($nesting, 'NodeSet')['$[]']($$$($$($nesting, 'Native'), 'Array').$new(self["native"].labels))
          }, $Select_labels$2.$$arity = 0);
          
          Opal.def(self, '$options', $Select_options$3 = function $$options() {
            var self = this;

            return $$($nesting, 'NodeSet')['$[]']($$$($$($nesting, 'Native'), 'Array').$new(self["native"].options))
          }, $Select_options$3.$$arity = 0);
          
          Opal.def(self, '$option', $Select_option$4 = function $$option() {
            var self = this;

            return self.$DOM(self["native"].options[self["native"].selectedIndex])
          }, $Select_option$4.$$arity = 0);
          
          Opal.def(self, '$index', $Select_index$5 = function $$index() {
            var self = this;

            return self["native"].selectedIndex
          }, $Select_index$5.$$arity = 0);
          self.$alias_native("multiple?", "multiple");
          self.$alias_native("required?", "required");
          return self.$alias_native("length");
        })($nesting[0], $$($nesting, 'Element'), $nesting)
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/image"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Image');

          var $nesting = [self].concat($parent_nesting), $Image_complete$ques$1, $Image_cross$ques$2, $Image_height$3, $Image_width$4;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$complete?', $Image_complete$ques$1 = function() {
            var self = this;

            return self["native"].complete
          }, $Image_complete$ques$1.$$arity = 0);
          
          Opal.def(self, '$cross?', $Image_cross$ques$2 = function() {
            var self = this;

            return self["native"].crossOrigin
          }, $Image_cross$ques$2.$$arity = 0);
          
          Opal.def(self, '$height', $Image_height$3 = function $$height() {
            var self = this;

            return self["native"].naturalHeight
          }, $Image_height$3.$$arity = 0);
          return (Opal.def(self, '$width', $Image_width$4 = function $$width() {
            var self = this;

            return self["native"].naturalWidth
          }, $Image_width$4.$$arity = 0), nil) && 'width';
        })($nesting[0], $$($nesting, 'Element'), $nesting);
        return Opal.const_set($nesting[0], 'Img', $$($nesting, 'Image'));
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/template"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$DOM']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Template');

          var $nesting = [self].concat($parent_nesting), $Template_content$1;

          self.$$prototype["native"] = nil;
          return (Opal.def(self, '$content', $Template_content$1 = function $$content() {
            var self = this;

            return self.$DOM(self["native"].content)
          }, $Template_content$1.$$arity = 0), nil) && 'content'
        })($nesting[0], $$($nesting, 'Element'), $nesting)
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element/textarea"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Textarea');

          var $nesting = [self].concat($parent_nesting), $Textarea_value$1, $Textarea_value$eq$2, $Textarea_clear$3;

          self.$$prototype["native"] = nil;
          
          
          Opal.def(self, '$value', $Textarea_value$1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    
          }, $Textarea_value$1.$$arity = 0);
          
          Opal.def(self, '$value=', $Textarea_value$eq$2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, $Textarea_value$eq$2.$$arity = 1);
          return (Opal.def(self, '$clear', $Textarea_clear$3 = function $$clear() {
            var self = this;

            return self["native"].value = ''
          }, $Textarea_clear$3.$$arity = 0), nil) && 'clear';
        })($nesting[0], $$($nesting, 'Element'), $nesting)
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/element"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $hash2 = Opal.hash2, $alias = Opal.alias;

  Opal.add_stubs(['$require', '$create_element', '$==', '$capitalize', '$include?', '$constants', '$new', '$const_get', '$include', '$target', '$DOM', '$supports?', '$loaded?', '$raise', '$[]', '$map', '$xpath', '$get', '$attributes', '$set', '$+', '$class_names', '$empty?', '$join', '$uniq', '$first', '$css', '$each', '$alias_native', '$reject', '$split', '$to_proc', '$===', '$assign', '$height', '$size', '$height=', '$-', '$to_s', '$clear', '$document', '$<<', '$to_a', '$downcase', '$name', '$id', '$offset', '$flatten', '$concat', '$replace', '$apply', '$to_n', '$window', '$width', '$width=']);
  
  self.$require("browser/dom/element/attributes");
  self.$require("browser/dom/element/data");
  self.$require("browser/dom/element/position");
  self.$require("browser/dom/element/offset");
  self.$require("browser/dom/element/scroll");
  self.$require("browser/dom/element/size");
  self.$require("browser/dom/element/input");
  self.$require("browser/dom/element/select");
  self.$require("browser/dom/element/image");
  self.$require("browser/dom/element/template");
  self.$require("browser/dom/element/textarea");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting), $Element_create$1, $Element_new$2, $Element$3, $Element_$eq_tilde$4, $Element_$eq_tilde$5, $Element_$eq_tilde$6, $Element_$eq_tilde$7, $Element_$eq_tilde$8, $Element_$eq_tilde$9, $Element_$eq_tilde$10, $Element_$slash$11, $Element_$$$13, $Element_$$$eq$14, $Element_add_class$15, $Element_at$16, $Element_at_css$17, $Element_at_xpath$19, $Element_attributes$21, $Element_attribute_nodes$22, $Element_class_names$23, $Element_css$24, $Element_css$25, $Element_css$26, $Element_data$27, $Element_height$28, $Element_height$eq$29, $Element_id$30, $Element_id$eq$31, $Element_inner_dom$32, $Element_inner_dom$eq$33, $Element_inspect$34, $Element_offset$35, $Element_offset$eq$36, $Element_position$37, $Element_scroll$38, $Element_search$39, $Element_style$41, $Element_style$excl$42, $Element_style$excl$43, $Element_style$excl$44, $Element_remove_attribute$45, $Element_remove_class$46, $Element_size$47, $Element_width$48, $Element_width$eq$49, $Element_window$50, $Element_xpath$51, $Element_xpath$52, $ret_or_3 = nil;

        self.$$prototype["native"] = nil;
        
        Opal.defs(self, '$create', $Element_create$1 = function $$create($a) {
          var $post_args, args, self = this;
          if ($gvars.document == null) $gvars.document = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send($gvars.document, 'create_element', Opal.to_a(args));
        }, $Element_create$1.$$arity = -1);
        Opal.defs(self, '$new', $Element_new$2 = function(node) {
          var $iter = $Element_new$2.$$p, $yield = $iter || nil, self = this, name = nil;

          if ($iter) $Element_new$2.$$p = null;
          if (self['$==']($$($nesting, 'Element'))) {
            
            name = (node.nodeName).$capitalize();
            if ($truthy($$($nesting, 'Element').$constants()['$include?'](name))) {
              return $$($nesting, 'Element').$const_get(name).$new(node)
            } else {
              return $send2(self, $find_super(self, 'new', $Element_new$2, false, true), 'new', [node], $iter)
            };
          } else {
            return $send2(self, $find_super(self, 'new', $Element_new$2, false, true), 'new', [node], $iter)
          }
        }, $Element_new$2.$$arity = 1);
        self.$include($$$($$($nesting, 'Event'), 'Target'));
        $send(self, 'target', [], ($Element$3 = function(value){var self = $Element$3.$$s == null ? this : $Element$3.$$s;

          
          
          if (value == null) {
            value = nil;
          };
          try {
            return self.$DOM(value)
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };}, $Element$3.$$s = self, $Element$3.$$arity = 1, $Element$3));
        if ($truthy($$($nesting, 'Browser')['$supports?']("Element.matches"))) {
          
          Opal.def(self, '$=~', $Element_$eq_tilde$4 = function(selector) {
            var self = this;

            return self["native"].matches(selector)
          }, $Element_$eq_tilde$4.$$arity = 1)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Element.matches (Opera)"))) {
          
          Opal.def(self, '$=~', $Element_$eq_tilde$5 = function(selector) {
            var self = this;

            return self["native"].oMatchesSelector(selector)
          }, $Element_$eq_tilde$5.$$arity = 1)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Element.matches (Internet Explorer)"))) {
          
          Opal.def(self, '$=~', $Element_$eq_tilde$6 = function(selector) {
            var self = this;

            return self["native"].msMatchesSelector(selector)
          }, $Element_$eq_tilde$6.$$arity = 1)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Element.matches (Firefox)"))) {
          
          Opal.def(self, '$=~', $Element_$eq_tilde$7 = function(selector) {
            var self = this;

            return self["native"].mozMatchesSelector(selector)
          }, $Element_$eq_tilde$7.$$arity = 1)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Element.matches (Chrome)"))) {
          
          Opal.def(self, '$=~', $Element_$eq_tilde$8 = function(selector) {
            var self = this;

            return self["native"].webkitMatchesSelector(selector)
          }, $Element_$eq_tilde$8.$$arity = 1)
        } else if ($truthy($$($nesting, 'Browser')['$loaded?']("Sizzle"))) {
          
          Opal.def(self, '$=~', $Element_$eq_tilde$9 = function(selector) {
            var self = this;

            return Sizzle.matchesSelector(self["native"], selector)
          }, $Element_$eq_tilde$9.$$arity = 1)
        } else {
          
          Opal.def(self, '$=~', $Element_$eq_tilde$10 = function(selector) {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "selector matching unsupported")
          }, $Element_$eq_tilde$10.$$arity = 1)
        };
        
        Opal.def(self, '$/', $Element_$slash$11 = function($a) {
          var $post_args, paths, $$12, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          paths = $post_args;;
          return $$($nesting, 'NodeSet')['$[]']($send(paths, 'map', [], ($$12 = function(path){var self = $$12.$$s == null ? this : $$12.$$s;

            
            
            if (path == null) {
              path = nil;
            };
            return self.$xpath(path);}, $$12.$$s = self, $$12.$$arity = 1, $$12)));
        }, $Element_$slash$11.$$arity = -1);
        
        Opal.def(self, '$[]', $Element_$$$13 = function(name, options) {
          var self = this;

          
          
          if (options == null) {
            options = $hash2([], {});
          };
          return self.$attributes().$get(name, options);
        }, $Element_$$$13.$$arity = -2);
        
        Opal.def(self, '$[]=', $Element_$$$eq$14 = function(name, value, options) {
          var self = this;

          
          
          if (options == null) {
            options = $hash2([], {});
          };
          return self.$attributes().$set(name, value, options);
        }, $Element_$$$eq$14.$$arity = -3);
        
        Opal.def(self, '$add_class', $Element_add_class$15 = function $$add_class($a) {
          var $post_args, names, self = this, classes = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          names = $post_args;;
          classes = $rb_plus(self.$class_names(), names);
          if ($truthy(classes['$empty?']())) {
          } else {
            self["native"].className = classes.$uniq().$join(" ")
          };
          return self;
        }, $Element_add_class$15.$$arity = -1);
        
        Opal.def(self, '$at', $Element_at$16 = function $$at(path_or_selector) {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$xpath(path_or_selector).$first()))) {
            return $ret_or_1
          } else {
            return self.$css(path_or_selector).$first()
          }
        }, $Element_at$16.$$arity = 1);
        
        Opal.def(self, '$at_css', $Element_at_css$17 = function $$at_css($a) {
          var $post_args, rules, $$18, self = this, result = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          rules = $post_args;;
          result = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(rules, 'each', [], ($$18 = function(rule){var self = $$18.$$s == null ? this : $$18.$$s;

            
            
            if (rule == null) {
              rule = nil;
            };
            if ($truthy((result = self.$css(rule).$first()))) {
              
              Opal.brk(nil, $brk)
            } else {
              return nil
            };}, $$18.$$s = self, $$18.$$brk = $brk, $$18.$$arity = 1, $$18))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        }, $Element_at_css$17.$$arity = -1);
        
        Opal.def(self, '$at_xpath', $Element_at_xpath$19 = function $$at_xpath($a) {
          var $post_args, paths, $$20, self = this, result = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          paths = $post_args;;
          result = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(paths, 'each', [], ($$20 = function(path){var self = $$20.$$s == null ? this : $$20.$$s;

            
            
            if (path == null) {
              path = nil;
            };
            if ($truthy((result = self.$xpath(path).$first()))) {
              
              Opal.brk(nil, $brk)
            } else {
              return nil
            };}, $$20.$$s = self, $$20.$$brk = $brk, $$20.$$arity = 1, $$20))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        }, $Element_at_xpath$19.$$arity = -1);
        $alias(self, "attr", "[]");
        $alias(self, "attribute", "[]");
        
        Opal.def(self, '$attributes', $Element_attributes$21 = function $$attributes(options) {
          var self = this;

          
          
          if (options == null) {
            options = $hash2([], {});
          };
          return $$($nesting, 'Attributes').$new(self, options);
        }, $Element_attributes$21.$$arity = -1);
        
        Opal.def(self, '$attribute_nodes', $Element_attribute_nodes$22 = function $$attribute_nodes() {
          var self = this;

          return $$($nesting, 'NodeSet')['$[]']($$$($$($nesting, 'Native'), 'Array').$new(self["native"].attributes, $hash2(["get"], {"get": "item"})))
        }, $Element_attribute_nodes$22.$$arity = 0);
        self.$alias_native("class_name", "className");
        
        Opal.def(self, '$class_names', $Element_class_names$23 = function $$class_names() {
          var self = this;

          return $send((self["native"].className).$split(/\s+/), 'reject', [], "empty?".$to_proc())
        }, $Element_class_names$23.$$arity = 0);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Query.css"))) {
          
          Opal.def(self, '$css', $Element_css$24 = function $$css(path) {
            var self = this;

            try {
              return $$($nesting, 'NodeSet')['$[]']($$$($$($nesting, 'Native'), 'Array').$new(self["native"].querySelectorAll(path)))
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  return $$($nesting, 'NodeSet')['$[]']()
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            }
          }, $Element_css$24.$$arity = 1)
        } else if ($truthy($$($nesting, 'Browser')['$loaded?']("Sizzle"))) {
          
          Opal.def(self, '$css', $Element_css$25 = function $$css(path) {
            var self = this;

            try {
              return $$($nesting, 'NodeSet')['$[]'](Sizzle(path, self["native"]))
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  return $$($nesting, 'NodeSet')['$[]']()
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            }
          }, $Element_css$25.$$arity = 1)
        } else {
          
          Opal.def(self, '$css', $Element_css$26 = function $$css(selector) {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "query by CSS selector unsupported")
          }, $Element_css$26.$$arity = 1)
        };
        
        Opal.def(self, '$data', $Element_data$27 = function $$data(value) {
          var self = this, data = nil;

          
          
          if (value == null) {
            value = nil;
          };
          data = $$($nesting, 'Data').$new(self);
          if ($truthy(value)) {
          } else {
            return data
          };
          if ($truthy($$($nesting, 'Hash')['$==='](value))) {
            data.$assign(value)
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "unknown data type")
          };
          return self;
        }, $Element_data$27.$$arity = -1);
        $alias(self, "get_attribute", "[]");
        $alias(self, "get", "[]");
        
        Opal.def(self, '$height', $Element_height$28 = function $$height() {
          var self = this;

          return self.$size().$height()
        }, $Element_height$28.$$arity = 0);
        
        Opal.def(self, '$height=', $Element_height$eq$29 = function(value) {
          var self = this, $writer = nil;

          
          $writer = [value];
          $send(self.$size(), 'height=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $Element_height$eq$29.$$arity = 1);
        
        Opal.def(self, '$id', $Element_id$30 = function $$id() {
          var self = this;

          
      var id = self["native"].id;

      if (id === "") {
        return nil;
      }
      else {
        return id;
      }
    
        }, $Element_id$30.$$arity = 0);
        
        Opal.def(self, '$id=', $Element_id$eq$31 = function(value) {
          var self = this;

          return self["native"].id = value.$to_s()
        }, $Element_id$eq$31.$$arity = 1);
        
        Opal.def(self, '$inner_dom', $Element_inner_dom$32 = function $$inner_dom() {
          var $iter = $Element_inner_dom$32.$$p, block = $iter || nil, self = this, doc = nil;

          if ($iter) $Element_inner_dom$32.$$p = null;
          
          
          if ($iter) $Element_inner_dom$32.$$p = null;;
          self.$clear();
          doc = self.$document();
          return self['$<<']($send($$($nesting, 'Builder'), 'new', [doc, self], block.$to_proc()).$to_a());
        }, $Element_inner_dom$32.$$arity = 0);
        
        Opal.def(self, '$inner_dom=', $Element_inner_dom$eq$33 = function(node) {
          var self = this;

          
          self.$clear();
          return self['$<<'](node);
        }, $Element_inner_dom$eq$33.$$arity = 1);
        
        Opal.def(self, '$inspect', $Element_inspect$34 = function $$inspect() {
          var self = this, inspect = nil;

          
          inspect = self.$name().$downcase();
          if ($truthy(self.$id())) {
            inspect = $rb_plus(inspect, $rb_plus($rb_plus(".", self.$id()), "!"))};
          if ($truthy(self.$class_names()['$empty?']())) {
          } else {
            inspect = $rb_plus(inspect, $rb_plus(".", self.$class_names().$join(".")))
          };
          return "" + "#<DOM::Element: " + (inspect) + ">";
        }, $Element_inspect$34.$$arity = 0);
        
        Opal.def(self, '$offset', $Element_offset$35 = function $$offset($a) {
          var $post_args, values, self = this, off = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          values = $post_args;;
          off = $$($nesting, 'Offset').$new(self);
          if ($truthy(values['$empty?']())) {
          } else {
            $send(off, 'set', Opal.to_a(values))
          };
          return off;
        }, $Element_offset$35.$$arity = -1);
        
        Opal.def(self, '$offset=', $Element_offset$eq$36 = function(value) {
          var self = this;

          return $send(self.$offset(), 'set', Opal.to_a(value))
        }, $Element_offset$eq$36.$$arity = 1);
        
        Opal.def(self, '$position', $Element_position$37 = function $$position() {
          var self = this;

          return $$($nesting, 'Position').$new(self)
        }, $Element_position$37.$$arity = 0);
        
        Opal.def(self, '$scroll', $Element_scroll$38 = function $$scroll() {
          var self = this;

          return $$($nesting, 'Scroll').$new(self)
        }, $Element_scroll$38.$$arity = 0);
        
        Opal.def(self, '$search', $Element_search$39 = function $$search($a) {
          var $post_args, selectors, $$40, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          selectors = $post_args;;
          return $$($nesting, 'NodeSet').$new($send(selectors, 'map', [], ($$40 = function(selector){var self = $$40.$$s == null ? this : $$40.$$s;

            
            
            if (selector == null) {
              selector = nil;
            };
            return self.$xpath(selector).$to_a().$concat(self.$css(selector).$to_a());}, $$40.$$s = self, $$40.$$arity = 1, $$40)).$flatten().$uniq());
        }, $Element_search$39.$$arity = -1);
        $alias(self, "set", "[]=");
        $alias(self, "set_attribute", "[]=");
        
        Opal.def(self, '$style', $Element_style$41 = function $$style(data) {
          var $iter = $Element_style$41.$$p, block = $iter || nil, self = this, style = nil, $ret_or_2 = nil;

          if ($iter) $Element_style$41.$$p = null;
          
          
          if ($iter) $Element_style$41.$$p = null;;
          
          if (data == null) {
            data = nil;
          };
          style = $$$($$($nesting, 'CSS'), 'Declaration').$new(self["native"].style);
          if ($truthy((function() {if ($truthy(($ret_or_2 = data))) {
            return $ret_or_2
          } else {
            return block
          }; return nil; })())) {
          } else {
            return style
          };
          if ($truthy($$($nesting, 'String')['$==='](data))) {
            style.$replace(data)
          } else if ($truthy($$($nesting, 'Hash')['$==='](data))) {
            style.$assign(data)
          } else if ($truthy(block)) {
            $send(style, 'apply', [], block.$to_proc())
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "unknown data type")
          };
          return self;
        }, $Element_style$41.$$arity = -1);
        if ($truthy($$($nesting, 'Browser')['$supports?']("CSS.computed"))) {
          
          Opal.def(self, '$style!', $Element_style$excl$42 = function() {
            var self = this;

            return $$$($$($nesting, 'CSS'), 'Declaration').$new(self.$window().$to_n().getComputedStyle(self["native"], null))
          }, $Element_style$excl$42.$$arity = 0)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("CSS.current"))) {
          
          Opal.def(self, '$style!', $Element_style$excl$43 = function() {
            var self = this;

            return $$$($$($nesting, 'CSS'), 'Declaration').$new(self["native"].currentStyle)
          }, $Element_style$excl$43.$$arity = 0)
        } else {
          
          Opal.def(self, '$style!', $Element_style$excl$44 = function() {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "computed style unsupported")
          }, $Element_style$excl$44.$$arity = 0)
        };
        
        Opal.def(self, '$remove_attribute', $Element_remove_attribute$45 = function $$remove_attribute(name) {
          var self = this;

          return self["native"].removeAttribute(name)
        }, $Element_remove_attribute$45.$$arity = 1);
        
        Opal.def(self, '$remove_class', $Element_remove_class$46 = function $$remove_class($a) {
          var $post_args, names, self = this, classes = nil;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          names = $post_args;;
          classes = $rb_minus(self.$class_names(), names);
          if ($truthy(classes['$empty?']())) {
            self["native"].removeAttribute('class')
          } else {
            self["native"].className = classes.$join(" ")
          };
          return self;
        }, $Element_remove_class$46.$$arity = -1);
        
        Opal.def(self, '$size', $Element_size$47 = function $$size($a) {
          var $post_args, inc, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          inc = $post_args;;
          return $send($$($nesting, 'Size'), 'new', [self].concat(Opal.to_a(inc)));
        }, $Element_size$47.$$arity = -1);
        
        Opal.def(self, '$width', $Element_width$48 = function $$width() {
          var self = this;

          return self.$size().$width()
        }, $Element_width$48.$$arity = 0);
        
        Opal.def(self, '$width=', $Element_width$eq$49 = function(value) {
          var self = this, $writer = nil;

          
          $writer = [value];
          $send(self.$size(), 'width=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $Element_width$eq$49.$$arity = 1);
        
        Opal.def(self, '$window', $Element_window$50 = function $$window() {
          var self = this;

          return self.$document().$window()
        }, $Element_window$50.$$arity = 0);
        if ($truthy((function() {if ($truthy(($ret_or_3 = $$($nesting, 'Browser')['$supports?']("Query.xpath")))) {
          return $ret_or_3
        } else {
          return $$($nesting, 'Browser')['$loaded?']("wicked-good-xpath")
        }; return nil; })())) {
          
          if ($truthy($$($nesting, 'Browser')['$loaded?']("wicked-good-xpath"))) {
            wgxpath.install()};
          return (Opal.def(self, '$xpath', $Element_xpath$51 = function $$xpath(path) {
            var self = this;

            try {
              return $$($nesting, 'NodeSet')['$[]']($$$($$($nesting, 'Native'), 'Array').$new((self["native"].ownerDocument || self["native"]).evaluate(path,
           self["native"], null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null), $hash2(["get", "length"], {"get": "snapshotItem", "length": "snapshotLength"})))
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  return $$($nesting, 'NodeSet')['$[]']()
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            }
          }, $Element_xpath$51.$$arity = 1), nil) && 'xpath';
        } else {
          return (Opal.def(self, '$xpath', $Element_xpath$52 = function $$xpath(path) {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "query by XPath unsupported")
          }, $Element_xpath$52.$$arity = 1), nil) && 'xpath'
        };
      })($nesting[0], $$($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["browser/dom/document"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $alias = Opal.alias, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$DOM', '$first', '$css', '$xpath', '$[]', '$supports?', '$raise', '$ready?', '$call', '$on', '$off', '$convert', '$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Document');

        var $nesting = [self].concat($parent_nesting), $Document_$$$1, $Document_body$2, $Document_create_element$3, $Document_create_text$4, $Document_document$5, $Document_head$6, $Document_inspect$7, $Document_ready$8, $Document_ready$10, $Document_ready$12, $Document_ready$ques$13, $Document_root$14, $Document_root$eq$15, $Document_style_sheets$16, $Document_title$18, $Document_title$eq$19, $Document_window$20, $Document_window$21, $Document_window$22;

        self.$$prototype["native"] = nil;
        
        
        Opal.def(self, '$[]', $Document_$$$1 = function(what) {
          var self = this, $ret_or_1 = nil;

          
          
      var result = self["native"].getElementById(what);

      if (result) {
        return self.$DOM(result);
      }
    ;
          if ($truthy(($ret_or_1 = self.$css(what).$first()))) {
            return $ret_or_1
          } else {
            return self.$xpath(what).$first()
          };
        }, $Document_$$$1.$$arity = 1);
        $alias(self, "at", "[]");
        
        Opal.def(self, '$body', $Document_body$2 = function $$body() {
          var self = this;

          return self.$DOM(self["native"].body)
        }, $Document_body$2.$$arity = 0);
        
        Opal.def(self, '$create_element', $Document_create_element$3 = function $$create_element(name, options) {
          var self = this, ns = nil;

          
          
          if (options == null) {
            options = $hash2([], {});
          };
          if ($truthy((ns = options['$[]']("namespace")))) {
            return self.$DOM(self["native"].createElementNS(ns, name))
          } else {
            return self.$DOM(self["native"].createElement(name))
          };
        }, $Document_create_element$3.$$arity = -2);
        
        Opal.def(self, '$create_text', $Document_create_text$4 = function $$create_text(content) {
          var self = this;

          return self.$DOM(self["native"].createTextNode(content))
        }, $Document_create_text$4.$$arity = 1);
        
        Opal.def(self, '$document', $Document_document$5 = function $$document() {
          var self = this;

          return self
        }, $Document_document$5.$$arity = 0);
        
        Opal.def(self, '$head', $Document_head$6 = function $$head() {
          var self = this;

          return self.$DOM(self["native"].getElementsByTagName("head")[0])
        }, $Document_head$6.$$arity = 0);
        
        Opal.def(self, '$inspect', $Document_inspect$7 = function $$inspect() {
          var self = this;

          return "#<DOM::Document>"
        }, $Document_inspect$7.$$arity = 0);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Event.addListener"))) {
          
          Opal.def(self, '$ready', $Document_ready$8 = function $$ready() {
            var $iter = $Document_ready$8.$$p, block = $iter || nil, $$9, self = this;

            if ($iter) $Document_ready$8.$$p = null;
            
            
            if ($iter) $Document_ready$8.$$p = null;;
            if ($truthy(block)) {
            } else {
              self.$raise($$($nesting, 'ArgumentError'), "no block given")
            };
            if ($truthy(self['$ready?']())) {
              return block.$call()};
            return $send(self, 'on', ["dom:load"], ($$9 = function(e){var self = $$9.$$s == null ? this : $$9.$$s;

              
              
              if (e == null) {
                e = nil;
              };
              e.$off();
              return block.$call();}, $$9.$$s = self, $$9.$$arity = 1, $$9));
          }, $Document_ready$8.$$arity = 0)
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Event.attach"))) {
          
          Opal.def(self, '$ready', $Document_ready$10 = function $$ready() {
            var $iter = $Document_ready$10.$$p, block = $iter || nil, $$11, self = this;

            if ($iter) $Document_ready$10.$$p = null;
            
            
            if ($iter) $Document_ready$10.$$p = null;;
            if ($truthy(block)) {
            } else {
              self.$raise($$($nesting, 'ArgumentError'), "no block given")
            };
            if ($truthy(self['$ready?']())) {
              return block.$call()};
            return $send(self, 'on', ["ready:state:change"], ($$11 = function(e){var self = $$11.$$s == null ? this : $$11.$$s;

              
              
              if (e == null) {
                e = nil;
              };
              if ($truthy(self['$ready?']())) {
                
                e.$off();
                return block.$call();
              } else {
                return nil
              };}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          }, $Document_ready$10.$$arity = 0)
        } else {
          
          Opal.def(self, '$ready', $Document_ready$12 = function $$ready() {
            var $iter = $Document_ready$12.$$p, block = $iter || nil, self = this;

            if ($iter) $Document_ready$12.$$p = null;
            
            
            if ($iter) $Document_ready$12.$$p = null;;
            return self.$raise($$($nesting, 'NotImplementedError'), "document ready unsupported");
          }, $Document_ready$12.$$arity = 0)
        };
        
        Opal.def(self, '$ready?', $Document_ready$ques$13 = function() {
          var self = this;

          return self["native"].readyState === "complete"
        }, $Document_ready$ques$13.$$arity = 0);
        
        Opal.def(self, '$root', $Document_root$14 = function $$root() {
          var self = this;

          return self.$DOM(self["native"].documentElement)
        }, $Document_root$14.$$arity = 0);
        
        Opal.def(self, '$root=', $Document_root$eq$15 = function(element) {
          var self = this;

          return self["native"].documentElement = $$($nesting, 'Native').$convert(element)
        }, $Document_root$eq$15.$$arity = 1);
        
        Opal.def(self, '$style_sheets', $Document_style_sheets$16 = function $$style_sheets() {
          var $$17, self = this;

          return $send($$$($$($nesting, 'Native'), 'Array'), 'new', [self["native"].styleSheets], ($$17 = function(e){var self = $$17.$$s == null ? this : $$17.$$s;

            
            
            if (e == null) {
              e = nil;
            };
            return $$$($$($nesting, 'CSS'), 'StyleSheet').$new(e);}, $$17.$$s = self, $$17.$$arity = 1, $$17))
        }, $Document_style_sheets$16.$$arity = 0);
        
        Opal.def(self, '$title', $Document_title$18 = function $$title() {
          var self = this;

          return self["native"].title
        }, $Document_title$18.$$arity = 0);
        
        Opal.def(self, '$title=', $Document_title$eq$19 = function(value) {
          var self = this;

          return self["native"].title = value
        }, $Document_title$eq$19.$$arity = 1);
        if ($truthy($$($nesting, 'Browser')['$supports?']("Document.view"))) {
          return (Opal.def(self, '$window', $Document_window$20 = function $$window() {
            var self = this;

            return $$($nesting, 'Window').$new(self["native"].defaultView)
          }, $Document_window$20.$$arity = 0), nil) && 'window'
        } else if ($truthy($$($nesting, 'Browser')['$supports?']("Document.window"))) {
          return (Opal.def(self, '$window', $Document_window$21 = function $$window() {
            var self = this;

            return $$($nesting, 'Window').$new(self["native"].parentWindow)
          }, $Document_window$21.$$arity = 0), nil) && 'window'
        } else {
          return (Opal.def(self, '$window', $Document_window$22 = function $$window() {
            var self = this;

            return self.$raise($$($nesting, 'NotImplementedError'), "window from document unsupported")
          }, $Document_window$22.$$arity = 0), nil) && 'window'
        };
      })($nesting[0], $$($nesting, 'Element'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/document_fragment"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DocumentFragment');

        var $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], $$($nesting, 'Element'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom/builder"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$<<', '$[]=', '$to_h', '$-', '$[]', '$each', '$===', '$call', '$raise', '$attr_reader', '$new', '$to_proc', '$map', '$build', '$for', '$create_text', '$document', '$create_element', '$merge!', '$attributes', '$add_class', '$on', '$inner_html=']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Utils');

    var $nesting = [self].concat($parent_nesting), $Utils_heredoc$1;

    return (Opal.defs(self, '$heredoc', $Utils_heredoc$1 = function $$heredoc(string) {
      var self = this;

      return string
    }, $Utils_heredoc$1.$$arity = 1), nil) && 'heredoc'
  })($$($nesting, 'Paggio'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Element');

    var $nesting = [self].concat($parent_nesting), $Element_on$2;

    self.$$prototype.on = nil;
    return (Opal.def(self, '$on', $Element_on$2 = function $$on($a) {
      var $iter = $Element_on$2.$$p, block = $iter || nil, $post_args, args, self = this, $ret_or_1 = nil;

      if ($iter) $Element_on$2.$$p = null;
      
      
      if ($iter) $Element_on$2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return (self.on = (function() {if ($truthy(($ret_or_1 = self.on))) {
        return $ret_or_1
      } else {
        return []
      }; return nil; })())['$<<']([args, block]);
    }, $Element_on$2.$$arity = -1), nil) && 'on'
  })($$$($$($nesting, 'Paggio'), 'HTML'), $$($nesting, 'BasicObject'), $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting), $DOM$10, $DOM$11, $DOM$15;

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Builder');

        var $nesting = [self].concat($parent_nesting), $Builder_to_h$3, $Builder_for$4, $Builder_build$5, $Builder_initialize$7, $Builder_to_a$9;

        self.$$prototype.builder = self.$$prototype.roots = nil;
        
        Opal.defs(self, '$to_h', $Builder_to_h$3 = function $$to_h() {
          var self = this, $ret_or_2 = nil;
          if (self.builders == null) self.builders = nil;

          return (self.builders = (function() {if ($truthy(($ret_or_2 = self.builders))) {
            return $ret_or_2
          } else {
            return $hash2([], {})
          }; return nil; })())
        }, $Builder_to_h$3.$$arity = 0);
        Opal.defs(self, '$for', $Builder_for$4 = function(klass) {
          var $iter = $Builder_for$4.$$p, block = $iter || nil, self = this, $writer = nil;

          if ($iter) $Builder_for$4.$$p = null;
          
          
          if ($iter) $Builder_for$4.$$p = null;;
          if ($truthy(block)) {
            
            $writer = [klass, block];
            $send(self.$to_h(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return self.$to_h()['$[]'](klass)
          };
        }, $Builder_for$4.$$arity = 1);
        Opal.defs(self, '$build', $Builder_build$5 = function $$build(builder, item) {try {

          var $$6, self = this;

          
          $send(self.$to_h(), 'each', [], ($$6 = function(klass, block){var self = $$6.$$s == null ? this : $$6.$$s;

            
            
            if (klass == null) {
              klass = nil;
            };
            
            if (block == null) {
              block = nil;
            };
            if ($truthy(klass['$==='](item))) {
              Opal.ret(block.$call(builder, item))
            } else {
              return nil
            };}, $$6.$$s = self, $$6.$$arity = 2, $$6));
          return self.$raise($$($nesting, 'ArgumentError'), "" + "cannot build unknown item " + (item));
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $Builder_build$5.$$arity = 2);
        self.$attr_reader("document", "element");
        
        Opal.def(self, '$initialize', $Builder_initialize$7 = function $$initialize(document) {
          var $iter = $Builder_initialize$7.$$p, block = $iter || nil, $$8, self = this;

          if ($iter) $Builder_initialize$7.$$p = null;
          
          
          if ($iter) $Builder_initialize$7.$$p = null;;
          self.document = document;
          self.builder = $send($$$($$($nesting, 'Paggio'), 'HTML'), 'new', [], block.$to_proc());
          return (self.roots = $send(self.builder.$each(), 'map', [], ($$8 = function(e){var self = $$8.$$s == null ? this : $$8.$$s;

            
            
            if (e == null) {
              e = nil;
            };
            return $$($nesting, 'Builder').$build(self, e);}, $$8.$$s = self, $$8.$$arity = 1, $$8)));
        }, $Builder_initialize$7.$$arity = 1);
        return (Opal.def(self, '$to_a', $Builder_to_a$9 = function $$to_a() {
          var self = this;

          return self.roots
        }, $Builder_to_a$9.$$arity = 0), nil) && 'to_a';
      })($nesting[0], null, $nesting);
      $send($$($nesting, 'Builder'), 'for', [$$($nesting, 'String')], ($DOM$10 = function(b, item){var self = $DOM$10.$$s == null ? this : $DOM$10.$$s;

        
        
        if (b == null) {
          b = nil;
        };
        
        if (item == null) {
          item = nil;
        };
        return b.$document().$create_text(item);}, $DOM$10.$$s = self, $DOM$10.$$arity = 2, $DOM$10));
      $send($$($nesting, 'Builder'), 'for', [$$$($$$($$($nesting, 'Paggio'), 'HTML'), 'Element')], ($DOM$11 = function(b, item){var self = $DOM$11.$$s == null ? this : $DOM$11.$$s, $$12, $$13, $$14, dom = nil, on = nil, inner = nil, $writer = nil;

        
        
        if (b == null) {
          b = nil;
        };
        
        if (item == null) {
          item = nil;
        };
        dom = b.$document().$create_element(item.name);
        if ($truthy($$($nesting, 'Hash')['$==='](item.attributes))) {
          dom.$attributes()['$merge!'](item.attributes)};
        $send((item.class_names), 'each', [], ($$12 = function(value){var self = $$12.$$s == null ? this : $$12.$$s;

          
          
          if (value == null) {
            value = nil;
          };
          return dom.$add_class(value);}, $$12.$$s = self, $$12.$$arity = 1, $$12));
        if ($truthy((on = item.on || nil))) {
          $send(on, 'each', [], ($$13 = function(args, block){var self = $$13.$$s == null ? this : $$13.$$s;

            
            
            if (args == null) {
              args = nil;
            };
            
            if (block == null) {
              block = nil;
            };
            return $send(dom, 'on', Opal.to_a(args), block.$to_proc());}, $$13.$$s = self, $$13.$$arity = 2, $$13))};
        if ($truthy((inner = item.inner_html || nil))) {
          
          $writer = [inner];
          $send(dom, 'inner_html=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          $send(item, 'each', [], ($$14 = function(child){var self = $$14.$$s == null ? this : $$14.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            return dom['$<<']($$($nesting, 'Builder').$build(b, child));}, $$14.$$s = self, $$14.$$arity = 1, $$14))
        };
        return dom;}, $DOM$11.$$s = self, $DOM$11.$$arity = 2, $DOM$11));
      return $send($$($nesting, 'Builder'), 'for', [$$$($$($nesting, 'DOM'), 'Node')], ($DOM$15 = function(b, item){var self = $DOM$15.$$s == null ? this : $DOM$15.$$s;

        
        
        if (b == null) {
          b = nil;
        };
        
        if (item == null) {
          item = nil;
        };
        return item;}, $DOM$15.$$s = self, $DOM$15.$$arity = 2, $DOM$15));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["browser/dom/mutation_observer"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super, $hash2 = Opal.hash2;

  Opal.add_stubs(['$supports?', '$include', '$===', '$==', '$type', '$new', '$[]', '$DOM', '$alias_native', '$call', '$map', '$convert', '$private', '$Native', '$[]=', '$-', '$to_n']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DOM');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MutationObserver');

        var $nesting = [self].concat($parent_nesting), $MutationObserver_supported$ques$1, $MutationObserver_initialize$9, $MutationObserver_observe$11, $MutationObserver_take$12, $MutationObserver_disconnect$14, $MutationObserver_convert$15;

        self.$$prototype["native"] = nil;
        
        Opal.defs(self, '$supported?', $MutationObserver_supported$ques$1 = function() {
          var self = this;

          return $$($nesting, 'Browser')['$supports?']("MutationObserver")
        }, $MutationObserver_supported$ques$1.$$arity = 0);
        self.$include($$($nesting, 'Native'));
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Record');

          var $nesting = [self].concat($parent_nesting), $Record_type$2, $Record_attribute$ques$3, $Record_tree$ques$4, $Record_cdata$ques$5, $Record_added$6, $Record_removed$7, $Record_target$8;

          self.$$prototype["native"] = nil;
          
          self.$include($$($nesting, 'Native'));
          
          Opal.def(self, '$type', $Record_type$2 = function $$type() {
            var self = this, $case = nil;

            return (function() {$case = self["native"].type;
            if ("attributes"['$===']($case)) {return "attribute"}
            else if ("childList"['$===']($case)) {return "tree"}
            else if ("characterData"['$===']($case)) {return "cdata"}
            else { return nil }})()
          }, $Record_type$2.$$arity = 0);
          
          Opal.def(self, '$attribute?', $Record_attribute$ques$3 = function() {
            var self = this;

            return self.$type()['$==']("attribute")
          }, $Record_attribute$ques$3.$$arity = 0);
          
          Opal.def(self, '$tree?', $Record_tree$ques$4 = function() {
            var self = this;

            return self.$type()['$==']("tree")
          }, $Record_tree$ques$4.$$arity = 0);
          
          Opal.def(self, '$cdata?', $Record_cdata$ques$5 = function() {
            var self = this;

            return self.$type()['$==']("cdata")
          }, $Record_cdata$ques$5.$$arity = 0);
          
          Opal.def(self, '$added', $Record_added$6 = function $$added() {
            var self = this, array = nil;

            
            array = (function() {if ($truthy(self["native"].addedNodes != null)) {
              return $$$($$($nesting, 'Native'), 'Array').$new(self["native"].addedNodes)
            } else {
              return []
            }; return nil; })();
            return $$($nesting, 'NodeSet')['$[]'](array);
          }, $Record_added$6.$$arity = 0);
          
          Opal.def(self, '$removed', $Record_removed$7 = function $$removed() {
            var self = this, array = nil;

            
            array = (function() {if ($truthy(self["native"].removedNodes != null)) {
              return $$$($$($nesting, 'Native'), 'Array').$new(self["native"].removedNodes)
            } else {
              return []
            }; return nil; })();
            return $$($nesting, 'NodeSet')['$[]'](array);
          }, $Record_removed$7.$$arity = 0);
          
          Opal.def(self, '$target', $Record_target$8 = function $$target() {
            var self = this;

            return self.$DOM(self["native"].target)
          }, $Record_target$8.$$arity = 0);
          self.$alias_native("old", "oldValue");
          self.$alias_native("name", "attributeName");
          return self.$alias_native("namespace", "attributeNamespace");
        })($nesting[0], null, $nesting);
        
        Opal.def(self, '$initialize', $MutationObserver_initialize$9 = function $$initialize() {
          var $iter = $MutationObserver_initialize$9.$$p, block = $iter || nil, $$10, self = this;

          if ($iter) $MutationObserver_initialize$9.$$p = null;
          
          
          if ($iter) $MutationObserver_initialize$9.$$p = null;;
          
      var func = function(records) {
        return block.$call($send((records), 'map', [], ($$10 = function(r){var self = $$10.$$s == null ? this : $$10.$$s;

            
            
            if (r == null) {
              r = nil;
            };
            return $$$($$$($$$($$($nesting, 'Browser'), 'DOM'), 'MutationObserver'), 'Record').$new(r);}, $$10.$$s = self, $$10.$$arity = 1, $$10)));
      }
    ;
          return $send2(self, $find_super(self, 'initialize', $MutationObserver_initialize$9, false, true), 'initialize', [new window.MutationObserver(func)], null);
        }, $MutationObserver_initialize$9.$$arity = 0);
        
        Opal.def(self, '$observe', $MutationObserver_observe$11 = function $$observe(target, options) {
          var self = this;

          
          
          if (options == null) {
            options = nil;
          };
          if ($truthy(options)) {
          } else {
            options = $hash2(["children", "tree", "attributes", "cdata"], {"children": true, "tree": true, "attributes": "old", "cdata": "old"})
          };
          self["native"].observe($$($nesting, 'Native').$convert(target), self.$convert(options));
          return self;
        }, $MutationObserver_observe$11.$$arity = -2);
        
        Opal.def(self, '$take', $MutationObserver_take$12 = function $$take() {
          var $$13, self = this;

          return $send((self["native"].takeRecords()), 'map', [], ($$13 = function(r){var self = $$13.$$s == null ? this : $$13.$$s;

            
            
            if (r == null) {
              r = nil;
            };
            return $$($nesting, 'Record').$new(r);}, $$13.$$s = self, $$13.$$arity = 1, $$13))
        }, $MutationObserver_take$12.$$arity = 0);
        
        Opal.def(self, '$disconnect', $MutationObserver_disconnect$14 = function $$disconnect() {
          var self = this;

          return self["native"].disconnect()
        }, $MutationObserver_disconnect$14.$$arity = 0);
        self.$private();
        return (Opal.def(self, '$convert', $MutationObserver_convert$15 = function $$convert(hash) {
          var self = this, options = nil, $writer = nil, attrs = nil, filter = nil, cdata = nil;

          
          options = self.$Native({});
          if ($truthy(hash['$[]']("children"))) {
            
            $writer = ["childList", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(hash['$[]']("tree"))) {
            
            $writer = ["subtree", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy((attrs = hash['$[]']("attributes")))) {
            
            
            $writer = ["attributes", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (attrs['$==']("old")) {
              
              $writer = ["attributeOldValue", true];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};};
          if ($truthy((filter = hash['$[]']("filter")))) {
            
            $writer = ["attributeFilter", filter];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy((cdata = hash['$[]']("cdata")))) {
            
            
            $writer = ["characterData", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (cdata['$==']("old")) {
              
              $writer = ["characterDataOldValue", true];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};};
          return options.$to_n();
        }, $MutationObserver_convert$15.$$arity = 1), nil) && 'convert';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/dom"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send, $klass = Opal.klass;
  if ($gvars.window == null) $gvars.window = nil;

  Opal.add_stubs(['$require', '$DOM', '$shift', '$to_a', '$new', '$to_proc', '$==', '$length', '$first', '$native?', '$===', '$try_convert', '$raise', '$document']);
  
  self.$require("browser/dom/node_set");
  self.$require("browser/dom/node");
  self.$require("browser/dom/attribute");
  self.$require("browser/dom/character_data");
  self.$require("browser/dom/text");
  self.$require("browser/dom/cdata");
  self.$require("browser/dom/comment");
  self.$require("browser/dom/element");
  self.$require("browser/dom/document");
  self.$require("browser/dom/document_fragment");
  self.$require("browser/dom/builder");
  self.$require("browser/dom/mutation_observer");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_XML$1, $Kernel_DOM$2;

    
    
    Opal.def(self, '$XML', $Kernel_XML$1 = function $$XML(what) {
      var self = this;

      
      
      var doc;

      if (window.DOMParser) {
        doc = new DOMParser().parseFromString(what, 'text/xml');
      }
      else {
        doc       = new ActiveXObject('Microsoft.XMLDOM');
        doc.async = 'false';
        doc.loadXML(what);
      }
    ;
      return self.$DOM(doc);
    }, $Kernel_XML$1.$$arity = 1);
    return (Opal.def(self, '$DOM', $Kernel_DOM$2 = function $$DOM($a) {
      var $iter = $Kernel_DOM$2.$$p, block = $iter || nil, $post_args, args, self = this, document = nil, $ret_or_1 = nil, roots = nil, what = nil, $ret_or_2 = nil;
      if ($gvars.document == null) $gvars.document = nil;

      if ($iter) $Kernel_DOM$2.$$p = null;
      
      
      if ($iter) $Kernel_DOM$2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(block)) {
        
        document = (function() {if ($truthy(($ret_or_1 = args.$shift()))) {
          return $ret_or_1
        } else {
          return $gvars.document
        }; return nil; })();
        roots = $send($$$($$$($$($nesting, 'Browser'), 'DOM'), 'Builder'), 'new', [document], block.$to_proc()).$to_a();
        if (roots.$length()['$=='](1)) {
          return roots.$first()
        } else {
          return $$$($$$($$($nesting, 'Browser'), 'DOM'), 'NodeSet').$new(roots)
        };
      } else {
        
        what = args.$shift();
        document = (function() {if ($truthy(($ret_or_2 = args.$shift()))) {
          return $ret_or_2
        } else {
          return $gvars.document
        }; return nil; })();
        if ($truthy(self['$native?'](what))) {
          return $$$($$$($$($nesting, 'Browser'), 'DOM'), 'Node').$new(what)
        } else if ($truthy($$$($$$($$($nesting, 'Browser'), 'DOM'), 'Node')['$==='](what))) {
          return what
        } else if ($truthy($$($nesting, 'String')['$==='](what))) {
          
          var doc = $$($nesting, 'Native').$try_convert(document).createElement('div');
          doc.innerHTML = what;

          return self.$DOM(doc.childNodes.length == 1 ? doc.childNodes[0] : doc);
        
        } else {
          return self.$raise($$($nesting, 'ArgumentError'), "argument not DOM convertible")
        };
      };
    }, $Kernel_DOM$2.$$arity = -1), nil) && 'DOM';
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Window');

      var $nesting = [self].concat($parent_nesting), $Window_document$3;

      self.$$prototype["native"] = nil;
      return (Opal.def(self, '$document', $Window_document$3 = function $$document() {
        var self = this;

        return self.$DOM(self["native"].document)
      }, $Window_document$3.$$arity = 0), nil) && 'document'
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  return ($gvars.document = $gvars.window.$document());
};

Opal.modules["browser/css/declaration"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$include', '$new', '$each', '$[]=', '$-', '$to_proc', '$important', '$name', '$value', '$to_s', '$enum_for', '$[]', '$alias_native', '$end_with?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'CSS');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Declaration');

        var $nesting = [self].concat($parent_nesting), $Declaration_rule$1, $Declaration_assign$2, $Declaration_replace$4, $Declaration_apply$5, $Declaration_delete$7, $Declaration_$$$8, $Declaration_$$$eq$9, $Declaration_important$ques$10, $Declaration_each$11, $Declaration_method_missing$12;

        self.$$prototype["native"] = nil;
        
        self.$include($$($nesting, 'Native'));
        self.$include($$($nesting, 'Enumerable'));
        
        Opal.def(self, '$rule', $Declaration_rule$1 = function $$rule() {
          var self = this;

          if ($truthy((typeof(self["native"].parentRule) !== "undefined"))) {
            return $$($nesting, 'Rule').$new(self["native"].parentRule)
          } else {
            return nil
          }
        }, $Declaration_rule$1.$$arity = 0);
        
        Opal.def(self, '$assign', $Declaration_assign$2 = function $$assign(data) {
          var $$3, self = this;

          
          $send(data, 'each', [], ($$3 = function(name, value){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (value == null) {
              value = nil;
            };
            $writer = [name, value];
            $send(self, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3));
          return self;
        }, $Declaration_assign$2.$$arity = 1);
        
        Opal.def(self, '$replace', $Declaration_replace$4 = function $$replace(string) {
          var self = this;

          return self["native"].cssText = string
        }, $Declaration_replace$4.$$arity = 1);
        
        Opal.def(self, '$apply', $Declaration_apply$5 = function $$apply() {
          var $iter = $Declaration_apply$5.$$p, block = $iter || nil, $$6, self = this;

          if ($iter) $Declaration_apply$5.$$p = null;
          
          
          if ($iter) $Declaration_apply$5.$$p = null;;
          return $send($send($$$($$$($$($nesting, 'Paggio'), 'CSS'), 'Definition'), 'new', [], block.$to_proc()), 'each', [], ($$6 = function(style){var self = $$6.$$s == null ? this : $$6.$$s;
            if (self["native"] == null) self["native"] = nil;

            
            
            if (style == null) {
              style = nil;
            };
            if ($truthy(style.$important())) {
              return self["native"].setProperty(style.$name(), style.$value(), "important")
            } else {
              return self["native"].setProperty(style.$name(), style.$value(), "")
            };}, $$6.$$s = self, $$6.$$arity = 1, $$6));
        }, $Declaration_apply$5.$$arity = 0);
        
        Opal.def(self, '$delete', $Declaration_delete$7 = function(name) {
          var self = this;

          return self["native"].removeProperty(name)
        }, $Declaration_delete$7.$$arity = 1);
        
        Opal.def(self, '$[]', $Declaration_$$$8 = function(name) {
          var self = this;

          
      var result = self["native"].getPropertyValue(name);

      if (result == null || result === "") {
        return nil;
      }

      return result;
    
        }, $Declaration_$$$8.$$arity = 1);
        
        Opal.def(self, '$[]=', $Declaration_$$$eq$9 = function(name, value) {
          var self = this;

          return self["native"].setProperty(name, value.$to_s(), "")
        }, $Declaration_$$$eq$9.$$arity = 2);
        
        Opal.def(self, '$important?', $Declaration_important$ques$10 = function(name) {
          var self = this;

          return self["native"].getPropertyPriority(name) == "important"
        }, $Declaration_important$ques$10.$$arity = 1);
        
        Opal.def(self, '$each', $Declaration_each$11 = function $$each() {
          var $iter = $Declaration_each$11.$$p, block = $iter || nil, self = this;

          if ($iter) $Declaration_each$11.$$p = null;
          
          
          if ($iter) $Declaration_each$11.$$p = null;;
          if ((block !== nil)) {
          } else {
            return self.$enum_for("each")
          };
          
      for (var i = 0, length = self["native"].length; i < length; i++) {
        var name  = self["native"].item(i);

        Opal.yieldX(block, [name, self['$[]'](name)])
      }
    ;
          return self;
        }, $Declaration_each$11.$$arity = 0);
        self.$alias_native("length");
        self.$alias_native("to_s", "cssText");
        return (Opal.def(self, '$method_missing', $Declaration_method_missing$12 = function $$method_missing(name, value) {
          var self = this, $writer = nil;

          
          
          if (value == null) {
            value = nil;
          };
          if ($truthy(name['$end_with?']("="))) {
            
            $writer = [name['$[]']($range(0, -2, false)), value];
            $send(self, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return self['$[]'](name)
          };
        }, $Declaration_method_missing$12.$$arity = -2), nil) && 'method_missing';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/css/style_sheet"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send;

  Opal.add_stubs(['$include', '$is_a?', '$to_n', '$alias_native', '$new', '$DOM', '$===', '$join', '$map', '$insert', '$length', '$find', '$rules', '$log', '$==', '$id', '$__send__', '$to_proc']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'CSS');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StyleSheet');

        var $nesting = [self].concat($parent_nesting), $StyleSheet_initialize$1, $StyleSheet_media$2, $StyleSheet_owner$3, $StyleSheet_parent$4, $StyleSheet_rules$5, $StyleSheet_delete$7, $StyleSheet_insert$8, $StyleSheet_rule$9, $StyleSheet_$$$11, $StyleSheet_method_missing$13;

        self.$$prototype["native"] = nil;
        
        self.$include($$($nesting, 'Native'));
        
        Opal.def(self, '$initialize', $StyleSheet_initialize$1 = function $$initialize(what) {
          var $iter = $StyleSheet_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $StyleSheet_initialize$1.$$p = null;
          if ($truthy(what['$is_a?']($$$($$($nesting, 'DOM'), 'Element')))) {
            return $send2(self, $find_super(self, 'initialize', $StyleSheet_initialize$1, false, true), 'initialize', [what.$to_n().sheet], null)
          } else {
            return $send2(self, $find_super(self, 'initialize', $StyleSheet_initialize$1, false, true), 'initialize', [what], null)
          }
        }, $StyleSheet_initialize$1.$$arity = 1);
        self.$alias_native("disabled?", "disabled");
        self.$alias_native("href");
        self.$alias_native("title");
        self.$alias_native("type");
        
        Opal.def(self, '$media', $StyleSheet_media$2 = function $$media() {
          var self = this;

          if ($truthy(self["native"].media != null)) {
            return $$($nesting, 'Media').$new(self["native"].media)
          } else {
            return nil
          }
        }, $StyleSheet_media$2.$$arity = 0);
        
        Opal.def(self, '$owner', $StyleSheet_owner$3 = function $$owner() {
          var self = this;

          return self.$DOM(self["native"].ownerNode)
        }, $StyleSheet_owner$3.$$arity = 0);
        
        Opal.def(self, '$parent', $StyleSheet_parent$4 = function $$parent() {
          var self = this;

          if ($truthy(self["native"].parentStyleSheet != null)) {
            return $$($nesting, 'Sheet').$new(self["native"].parentStyleSheet)
          } else {
            return nil
          }
        }, $StyleSheet_parent$4.$$arity = 0);
        
        Opal.def(self, '$rules', $StyleSheet_rules$5 = function $$rules() {
          var $$6, self = this;

          return $send($$$($$($nesting, 'Native'), 'Array'), 'new', [self["native"].cssRules], ($$6 = function(e){var self = $$6.$$s == null ? this : $$6.$$s;

            
            
            if (e == null) {
              e = nil;
            };
            return $$($nesting, 'Rule').$new(e);}, $$6.$$s = self, $$6.$$arity = 1, $$6))
        }, $StyleSheet_rules$5.$$arity = 0);
        
        Opal.def(self, '$delete', $StyleSheet_delete$7 = function(index) {
          var self = this;

          return self["native"].deleteRule(index)
        }, $StyleSheet_delete$7.$$arity = 1);
        
        Opal.def(self, '$insert', $StyleSheet_insert$8 = function $$insert(index, rule) {
          var self = this;

          return self["native"].insertRule(rule, index)
        }, $StyleSheet_insert$8.$$arity = 2);
        
        Opal.def(self, '$rule', $StyleSheet_rule$9 = function $$rule(selector, body) {
          var $$10, self = this;

          
          if ($truthy($$($nesting, 'String')['$==='](selector))) {
          } else {
            selector = selector.$join(", ")
          };
          if ($truthy($$($nesting, 'String')['$==='](body))) {
          } else {
            body = $send(body, 'map', [], ($$10 = function(name, value){var self = $$10.$$s == null ? this : $$10.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              return "" + (name) + ": " + (value) + ";";}, $$10.$$s = self, $$10.$$arity = 2, $$10)).$join("\n")
          };
          return self.$insert(self.$length(), "" + (selector) + " { " + (body) + " }");
        }, $StyleSheet_rule$9.$$arity = 2);
        
        Opal.def(self, '$[]', $StyleSheet_$$$11 = function(id) {
          var $$12, self = this;

          return $send(self.$rules(), 'find', [], ($$12 = function(r){var self = $$12.$$s == null ? this : $$12.$$s;

            
            
            if (r == null) {
              r = nil;
            };
            self.$log(r);
            return r.$id()['$=='](id);}, $$12.$$s = self, $$12.$$arity = 1, $$12))
        }, $StyleSheet_$$$11.$$arity = 1);
        
        Opal.def(self, '$method_missing', $StyleSheet_method_missing$13 = function $$method_missing($a) {
          var $iter = $StyleSheet_method_missing$13.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $StyleSheet_method_missing$13.$$p = null;
          
          
          if ($iter) $StyleSheet_method_missing$13.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$rules(), '__send__', Opal.to_a(args), block.$to_proc());
        }, $StyleSheet_method_missing$13.$$arity = -1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Media');

          var $nesting = [self].concat($parent_nesting), $Media_push$14, $Media_delete$15;

          self.$$prototype["native"] = nil;
          
          self.$alias_native("text", "mediaText");
          self.$alias_native("to_s", "mediaText");
          
          Opal.def(self, '$push', $Media_push$14 = function $$push(medium) {
            var self = this;

            
            self["native"].appendMedium(medium);
            return self;
          }, $Media_push$14.$$arity = 1);
          return (Opal.def(self, '$delete', $Media_delete$15 = function(medium) {
            var self = this;

            return self["native"].deleteMedium(medium)
          }, $Media_delete$15.$$arity = 1), nil) && 'delete';
        })($nesting[0], $$$($$($nesting, 'Native'), 'Array'), $nesting);
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/css/rule"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'CSS');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Rule');

        var $nesting = [self].concat($parent_nesting), $Rule_new$1, $Rule_parent$2, $Rule_style_sheet$3;

        self.$$prototype["native"] = nil;
        
        self.$include($$($nesting, 'Native'));
        Opal.const_set($nesting[0], 'STYLE_RULE', 1);
        Opal.const_set($nesting[0], 'CHARSET_RULE', 2);
        Opal.const_set($nesting[0], 'IMPORT_RULE', 3);
        Opal.const_set($nesting[0], 'MEDIA_RULE', 4);
        Opal.const_set($nesting[0], 'FONT_FACE_RULE', 5);
        Opal.const_set($nesting[0], 'PAGE_RULE', 6);
        Opal.const_set($nesting[0], 'KEYFRAMES_RULE', 7);
        Opal.const_set($nesting[0], 'KEYFRAME_RULE', 8);
        Opal.const_set($nesting[0], 'NAMESPACE_RULE', 10);
        Opal.const_set($nesting[0], 'COUNTER_STYLE_RULE', 11);
        Opal.const_set($nesting[0], 'SUPPORTS_RULE', 12);
        Opal.const_set($nesting[0], 'DOCUMENT_RULE', 13);
        Opal.const_set($nesting[0], 'FONT_FEATURE_VALUES_RULE', 14);
        Opal.const_set($nesting[0], 'VIEWPORT_RULE', 15);
        Opal.const_set($nesting[0], 'REGION_STYLE_RULE', 16);
        Opal.defs(self, '$new', $Rule_new$1 = function(rule) {
          var $iter = $Rule_new$1.$$p, $yield = $iter || nil, self = this, $ret_or_1 = nil, klass = nil;
          if (self.classes == null) self.classes = nil;

          if ($iter) $Rule_new$1.$$p = null;
          if (self['$==']($$($nesting, 'Rule'))) {
            
            self.classes = (function() {if ($truthy(($ret_or_1 = self.classes))) {
              return $ret_or_1
            } else {
              return [nil, $$($nesting, 'Style')]
            }; return nil; })();
            if ($truthy((klass = self.classes['$[]'](rule.type)))) {
              return klass.$new(rule)
            } else {
              return self.$raise($$($nesting, 'ArgumentError'), "cannot instantiate a non derived Rule object")
            };
          } else {
            return $send2(self, $find_super(self, 'new', $Rule_new$1, false, true), 'new', [rule], null)
          }
        }, $Rule_new$1.$$arity = 1);
        self.$alias_native("text", "cssText");
        self.$alias_native("to_s", "cssText");
        
        Opal.def(self, '$parent', $Rule_parent$2 = function $$parent() {
          var self = this;

          if ($truthy(self["native"].parentRule != null)) {
            return $$($nesting, 'Rule').$new(self["native"].parentRule)
          } else {
            return nil
          }
        }, $Rule_parent$2.$$arity = 0);
        return (Opal.def(self, '$style_sheet', $Rule_style_sheet$3 = function $$style_sheet() {
          var self = this;

          if ($truthy(self["native"].parentStyleSheet != null)) {
            return $$($nesting, 'StyleSheet').$new(self["native"].parentStyleSheet)
          } else {
            return nil
          }
        }, $Rule_style_sheet$3.$$arity = 0), nil) && 'style_sheet';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/css/rule/style"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$alias_native', '$new', '$__send__', '$declaration', '$to_proc']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'CSS');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Rule');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Style');

          var $nesting = [self].concat($parent_nesting), $Style_declaration$1, $Style_method_missing$2;

          self.$$prototype["native"] = nil;
          
          self.$alias_native("selector", "selectorText");
          self.$alias_native("id", "selectorText");
          
          Opal.def(self, '$declaration', $Style_declaration$1 = function $$declaration() {
            var self = this;

            return $$($nesting, 'Declaration').$new(self["native"].style)
          }, $Style_declaration$1.$$arity = 0);
          return (Opal.def(self, '$method_missing', $Style_method_missing$2 = function $$method_missing($a) {
            var $iter = $Style_method_missing$2.$$p, block = $iter || nil, $post_args, args, self = this;

            if ($iter) $Style_method_missing$2.$$p = null;
            
            
            if ($iter) $Style_method_missing$2.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self.$declaration(), '__send__', Opal.to_a(args), block.$to_proc());
          }, $Style_method_missing$2.$$arity = -1), nil) && 'method_missing';
        })($nesting[0], $$($nesting, 'Rule'), $nesting)
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["browser/css"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $gvars = Opal.gvars, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$create_element', '$[]=', '$-', '$css', '$to_proc', '$inner_text=']);
  
  self.$require("browser/css/declaration");
  self.$require("browser/css/style_sheet");
  self.$require("browser/css/rule");
  self.$require("browser/css/rule/style");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_CSS$1;

    return (Opal.def(self, '$CSS', $Kernel_CSS$1 = function $$CSS(text) {
      var $iter = $Kernel_CSS$1.$$p, block = $iter || nil, self = this, style = nil, $writer = nil;
      if ($gvars.document == null) $gvars.document = nil;

      if ($iter) $Kernel_CSS$1.$$p = null;
      
      
      if ($iter) $Kernel_CSS$1.$$p = null;;
      
      if (text == null) {
        text = nil;
      };
      style = $gvars.document.$create_element("style");
      
      $writer = ["type", "text/css"];
      $send(style, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      if ($truthy(block)) {
        
        $writer = [$send($$($nesting, 'Paggio'), 'css', [], block.$to_proc())];
        $send(style, 'inner_text=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      } else {
        
        $writer = [text];
        $send(style, 'inner_text=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return style;
    }, $Kernel_CSS$1.$$arity = -1), nil) && 'CSS'
  })($nesting[0], $nesting);
};

Opal.modules["browser"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("native");
  self.$require("paggio");
  self.$require("browser/version");
  self.$require("browser/utils");
  self.$require("browser/support");
  self.$require("browser/event");
  self.$require("browser/window");
  self.$require("browser/dom");
  return self.$require("browser/css");
};

Opal.modules["browser/interval"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$nil?', '$stopped?', '$aborted?', '$raise', '$call', '$tap', '$new', '$to_proc', '$every', '$every!']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Interval');

      var $nesting = [self].concat($parent_nesting), $Interval_initialize$1, $Interval_stopped$ques$2, $Interval_aborted$ques$3, $Interval_abort$4, $Interval_stop$5, $Interval_start$6, $Interval_call$7;

      self.$$prototype.id = self.$$prototype.aborted = self.$$prototype.window = self.$$prototype.block = self.$$prototype.every = nil;
      
      self.$attr_reader("every");
      
      Opal.def(self, '$initialize', $Interval_initialize$1 = function $$initialize(window, time) {
        var $iter = $Interval_initialize$1.$$p, block = $iter || nil, self = this;

        if ($iter) $Interval_initialize$1.$$p = null;
        
        
        if ($iter) $Interval_initialize$1.$$p = null;;
        self.window = $$($nesting, 'Native').$convert(window);
        self.every = time;
        self.block = block;
        return (self.aborted = false);
      }, $Interval_initialize$1.$$arity = 2);
      
      Opal.def(self, '$stopped?', $Interval_stopped$ques$2 = function() {
        var self = this;

        return self.id['$nil?']()
      }, $Interval_stopped$ques$2.$$arity = 0);
      
      Opal.def(self, '$aborted?', $Interval_aborted$ques$3 = function() {
        var self = this;

        return self.aborted
      }, $Interval_aborted$ques$3.$$arity = 0);
      
      Opal.def(self, '$abort', $Interval_abort$4 = function $$abort() {
        var self = this;

        
        self.window.clearInterval(self.id);
        self.aborted = true;
        return (self.id = nil);
      }, $Interval_abort$4.$$arity = 0);
      
      Opal.def(self, '$stop', $Interval_stop$5 = function $$stop() {
        var self = this;

        
        if ($truthy(self['$stopped?']())) {
          return nil};
        self.window.clearInterval(self.id);
        self.stopped = true;
        return (self.id = nil);
      }, $Interval_stop$5.$$arity = 0);
      
      Opal.def(self, '$start', $Interval_start$6 = function $$start() {
        var self = this;

        
        if ($truthy(self['$aborted?']())) {
          self.$raise("the interval has been aborted")};
        if ($truthy(self['$stopped?']())) {
        } else {
          return nil
        };
        return (self.id = self.window.setInterval(self.block, self.every * 1000));
      }, $Interval_start$6.$$arity = 0);
      return (Opal.def(self, '$call', $Interval_call$7 = function $$call() {
        var self = this;

        return self.block.$call()
      }, $Interval_call$7.$$arity = 0), nil) && 'call';
    })($nesting[0], null, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Window');

      var $nesting = [self].concat($parent_nesting), $Window_every$8, $Window_every$excl$9;

      self.$$prototype["native"] = nil;
      
      
      Opal.def(self, '$every', $Window_every$8 = function $$every(time) {
        var $iter = $Window_every$8.$$p, block = $iter || nil, self = this;

        if ($iter) $Window_every$8.$$p = null;
        
        
        if ($iter) $Window_every$8.$$p = null;;
        return $send($send($$($nesting, 'Interval'), 'new', [self["native"], time], block.$to_proc()), 'tap', [], "start".$to_proc());
      }, $Window_every$8.$$arity = 1);
      return (Opal.def(self, '$every!', $Window_every$excl$9 = function(time) {
        var $iter = $Window_every$excl$9.$$p, block = $iter || nil, self = this;

        if ($iter) $Window_every$excl$9.$$p = null;
        
        
        if ($iter) $Window_every$excl$9.$$p = null;;
        return $send($$($nesting, 'Interval'), 'new', [self["native"], time], block.$to_proc());
      }, $Window_every$excl$9.$$arity = 1), nil) && 'every!';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_every$10, $Kernel_every$excl$11;

    
    
    Opal.def(self, '$every', $Kernel_every$10 = function $$every(time) {
      var $iter = $Kernel_every$10.$$p, block = $iter || nil, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      if ($iter) $Kernel_every$10.$$p = null;
      
      
      if ($iter) $Kernel_every$10.$$p = null;;
      return $send($gvars.window, 'every', [time], block.$to_proc());
    }, $Kernel_every$10.$$arity = 1);
    return (Opal.def(self, '$every!', $Kernel_every$excl$11 = function(time) {
      var $iter = $Kernel_every$excl$11.$$p, block = $iter || nil, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      if ($iter) $Kernel_every$excl$11.$$p = null;
      
      
      if ($iter) $Kernel_every$excl$11.$$p = null;;
      return $send($gvars.window, 'every!', [time], block.$to_proc());
    }, $Kernel_every$excl$11.$$arity = 1), nil) && 'every!';
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Proc');

    var $nesting = [self].concat($parent_nesting), $Proc_every$12, $Proc_every$excl$13;

    
    
    Opal.def(self, '$every', $Proc_every$12 = function $$every(time) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $send($gvars.window, 'every', [time], self.$to_proc())
    }, $Proc_every$12.$$arity = 1);
    return (Opal.def(self, '$every!', $Proc_every$excl$13 = function(time) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $send($gvars.window, 'every!', [time], self.$to_proc())
    }, $Proc_every$excl$13.$$arity = 1), nil) && 'every!';
  })($nesting[0], null, $nesting);
};

Opal.modules["browser/delay"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$to_n', '$tap', '$new', '$to_proc', '$after', '$after!']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Delay');

      var $nesting = [self].concat($parent_nesting), $Delay_initialize$1, $Delay_abort$2, $Delay_start$3;

      self.$$prototype.window = self.$$prototype.id = self.$$prototype.block = self.$$prototype.after = nil;
      
      self.$attr_reader("after");
      
      Opal.def(self, '$initialize', $Delay_initialize$1 = function $$initialize(window, time) {
        var $iter = $Delay_initialize$1.$$p, block = $iter || nil, self = this;

        if ($iter) $Delay_initialize$1.$$p = null;
        
        
        if ($iter) $Delay_initialize$1.$$p = null;;
        self.window = $$($nesting, 'Native').$convert(window);
        self.after = time;
        return (self.block = block);
      }, $Delay_initialize$1.$$arity = 2);
      
      Opal.def(self, '$abort', $Delay_abort$2 = function $$abort() {
        var self = this;

        return self.window.clearTimeout(self.id)
      }, $Delay_abort$2.$$arity = 0);
      return (Opal.def(self, '$start', $Delay_start$3 = function $$start() {
        var self = this;

        return (self.id = self.window.setTimeout(self.block.$to_n(), self.after * 1000))
      }, $Delay_start$3.$$arity = 0), nil) && 'start';
    })($nesting[0], null, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Window');

      var $nesting = [self].concat($parent_nesting), $Window_after$4, $Window_after$excl$5;

      self.$$prototype["native"] = nil;
      
      
      Opal.def(self, '$after', $Window_after$4 = function $$after(time) {
        var $iter = $Window_after$4.$$p, block = $iter || nil, self = this;

        if ($iter) $Window_after$4.$$p = null;
        
        
        if ($iter) $Window_after$4.$$p = null;;
        return $send($send($$($nesting, 'Delay'), 'new', [self["native"], time], block.$to_proc()), 'tap', [], "start".$to_proc());
      }, $Window_after$4.$$arity = 1);
      return (Opal.def(self, '$after!', $Window_after$excl$5 = function(time) {
        var $iter = $Window_after$excl$5.$$p, block = $iter || nil, self = this;

        if ($iter) $Window_after$excl$5.$$p = null;
        
        
        if ($iter) $Window_after$excl$5.$$p = null;;
        return $send($$($nesting, 'Delay'), 'new', [self["native"], time], block.$to_proc());
      }, $Window_after$excl$5.$$arity = 1), nil) && 'after!';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_after$6, $Kernel_after$excl$7;

    
    
    Opal.def(self, '$after', $Kernel_after$6 = function $$after(time) {
      var $iter = $Kernel_after$6.$$p, block = $iter || nil, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      if ($iter) $Kernel_after$6.$$p = null;
      
      
      if ($iter) $Kernel_after$6.$$p = null;;
      return $send($gvars.window, 'after', [time], block.$to_proc());
    }, $Kernel_after$6.$$arity = 1);
    return (Opal.def(self, '$after!', $Kernel_after$excl$7 = function(time) {
      var $iter = $Kernel_after$excl$7.$$p, block = $iter || nil, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      if ($iter) $Kernel_after$excl$7.$$p = null;
      
      
      if ($iter) $Kernel_after$excl$7.$$p = null;;
      return $send($gvars.window, 'after!', [time], block.$to_proc());
    }, $Kernel_after$excl$7.$$arity = 1), nil) && 'after!';
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Proc');

    var $nesting = [self].concat($parent_nesting), $Proc_after$8, $Proc_after$excl$9;

    
    
    Opal.def(self, '$after', $Proc_after$8 = function $$after(time) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $send($gvars.window, 'after', [time], self.$to_proc())
    }, $Proc_after$8.$$arity = 1);
    return (Opal.def(self, '$after!', $Proc_after$excl$9 = function(time) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $send($gvars.window, 'after!', [time], self.$to_proc())
    }, $Proc_after$excl$9.$$arity = 1), nil) && 'after!';
  })($nesting[0], null, $nesting);
};

Opal.modules["hyperstack/boot"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$<<', '$receivers', '$set_var', '$new', '$each', '$call']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $a;

    if ($truthy((($a = $$($nesting, 'Operation', 'skip_raise')) ? 'constant' : nil))) {
      return nil
    } else {
      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Operation');

        var $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], null, $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Application');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Boot');

          var $nesting = [self].concat($parent_nesting);

          
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'ReactDummyParams');

            var $nesting = [self].concat($parent_nesting), $ReactDummyParams_initialize$1;

            
            self.$attr_reader("context");
            return (Opal.def(self, '$initialize', $ReactDummyParams_initialize$1 = function $$initialize(context) {
              var self = this;

              return (self.context = context)
            }, $ReactDummyParams_initialize$1.$$arity = 1), nil) && 'initialize';
          })($nesting[0], null, $nesting);
          return (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting), $on_dispatch$2, $receivers$3, $run$5;

            
            
            Opal.def(self, '$on_dispatch', $on_dispatch$2 = function $$on_dispatch() {
              var $iter = $on_dispatch$2.$$p, block = $iter || nil, self = this;

              if ($iter) $on_dispatch$2.$$p = null;
              
              
              if ($iter) $on_dispatch$2.$$p = null;;
              return self.$receivers()['$<<'](block);
            }, $on_dispatch$2.$$arity = 0);
            
            Opal.def(self, '$receivers', $receivers$3 = function $$receivers() {
              var $$4, self = this;

              return $send($$$($$($nesting, 'Hyperstack'), 'Context'), 'set_var', [self, "@receivers", $hash2(["force"], {"force": true})], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

                return []}, $$4.$$s = self, $$4.$$arity = 0, $$4))
            }, $receivers$3.$$arity = 0);
            return (Opal.def(self, '$run', $run$5 = function $$run($kwargs) {
              var context, $$6, self = this, params = nil;

              
              
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else if (!$kwargs.$$is_hash) {
                throw Opal.ArgumentError.$new('expected kwargs');
              };
              
              context = $kwargs.$$smap["context"];
              if (context == null) {
                context = nil
              };
              params = $$($nesting, 'ReactDummyParams').$new(context);
              return $send(self.$receivers(), 'each', [], ($$6 = function(receiver){var self = $$6.$$s == null ? this : $$6.$$s;

                
                
                if (receiver == null) {
                  receiver = nil;
                };
                return receiver.$call(params);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
            }, $run$5.$$arity = -1), nil) && 'run';
          })(Opal.get_singleton_class(self), $nesting);
        })($nesting[0], $$($nesting, 'Operation'), $nesting)
      })($nesting[0], null, $nesting);
    }
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/native_wrapper_compatibility"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$include?', '$instance_methods', '$include', '$extend']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Native');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Wrapper');

      var $nesting = [self].concat($parent_nesting), $Wrapper_included$1;

      return (Opal.defs(self, '$included', $Wrapper_included$1 = function $$included(klass) {
        var self = this;

        if ($truthy($$($nesting, 'Native').$instance_methods()['$include?']("to_n"))) {
          return klass.$include($$($nesting, 'Native'))
        } else {
          return klass.$extend($$$($$($nesting, 'Native'), 'Helpers'))
        }
      }, $Wrapper_included$1.$$arity = 1), nil) && 'included'
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/deprecation_warning"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$production?', '$env', '$include?', '$<<']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack_deprecation_warning$1;

    return (Opal.defs(self, '$deprecation_warning', $Hyperstack_deprecation_warning$1 = function $$deprecation_warning(name, message) {
      var self = this, $ret_or_1 = nil;
      if (self.deprecation_messages == null) self.deprecation_messages = nil;

      
      if ($truthy(self.$env()['$production?']())) {
        return nil};
      self.deprecation_messages = (function() {if ($truthy(($ret_or_1 = self.deprecation_messages))) {
        return $ret_or_1
      } else {
        return []
      }; return nil; })();
      message = "" + "Warning: Deprecated feature used in " + (name) + ". " + (message);
      if ($truthy(self.deprecation_messages['$include?'](message))) {
        return nil};
      self.deprecation_messages['$<<'](message);
      return console.warn.apply(console, [message]);;
    }, $Hyperstack_deprecation_warning$1.$$arity = 2), nil) && 'deprecation_warning'
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/string"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_json$1;

    return (Opal.def(self, '$to_json', $String_to_json$1 = function $$to_json() {
      var self = this;

      return JSON.stringify(self)
    }, $String_to_json$1.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/client_stubs"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $import$1, $imports$2, $import_tree$3;

      
      
      Opal.def(self, '$import', $import$1 = function($a) {
        var $post_args, args, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return nil;
      }, $import$1.$$arity = -1);
      
      Opal.def(self, '$imports', $imports$2 = function $$imports($a) {
        var $post_args, args, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return nil;
      }, $imports$2.$$arity = -1);
      return (Opal.def(self, '$import_tree', $import_tree$3 = function $$import_tree($a) {
        var $post_args, args, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return nil;
      }, $import_tree$3.$$arity = -1), nil) && 'import_tree';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/context"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$instance_variable_get', '$!', '$key?', '$[]', '$dup', '$[]=', '$-', '$instance_variable_set', '$each', '$run', '$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Context');

      var $nesting = [self].concat($parent_nesting), $Context_set_var$1, $Context_reset$excl$2;

      
      Opal.defs(self, '$set_var', $Context_set_var$1 = function $$set_var(ctx, var$, $kwargs) {
        var force, $iter = $Context_set_var$1.$$p, $yield = $iter || nil, self = this, inst_value_b4 = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $writer = nil, $ret_or_4 = nil, $ret_or_5 = nil;
        if (self.context == null) self.context = nil;

        if ($iter) $Context_set_var$1.$$p = null;
        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        force = $kwargs.$$smap["force"];
        if (force == null) {
          force = nil
        };
        inst_value_b4 = ctx.$instance_variable_get(var$);
        if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self.context))) {
          return self.context['$[]'](ctx)['$key?'](var$)['$!']()
        } else {
          return $ret_or_2
        }; return nil; })()))) {
          
          if ($truthy(($ret_or_3 = force))) {
            return $ret_or_3
          } else {
            return inst_value_b4['$!']()
          };
        } else {
          return $ret_or_1
        }; return nil; })())) {
          
          $writer = [var$, (function() {if ($truthy(($ret_or_4 = inst_value_b4))) {
            return inst_value_b4.$dup()
          } else {
            return $ret_or_4
          }; return nil; })()];
          $send(self.context['$[]'](ctx), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(($ret_or_5 = inst_value_b4))) {
          return $ret_or_5
        } else {
          return ctx.$instance_variable_set(var$, Opal.yieldX($yield, []))
        };
      }, $Context_set_var$1.$$arity = -3);
      return (Opal.defs(self, '$reset!', $Context_reset$excl$2 = function(reboot) {
        var $$3, $$5, self = this;
        if (self.context == null) self.context = nil;

        
        
        if (reboot == null) {
          reboot = true;
        };
        if ($truthy(self.context)) {
          
          $send(self.context, 'each', [], ($$3 = function(ctx, vars){var self = $$3.$$s == null ? this : $$3.$$s, $$4;

            
            
            if (ctx == null) {
              ctx = nil;
            };
            
            if (vars == null) {
              vars = nil;
            };
            return $send(vars, 'each', [], ($$4 = function(var$, init){var self = $$4.$$s == null ? this : $$4.$$s, $ret_or_6 = nil;

              
              
              if (var$ == null) {
                var$ = nil;
              };
              
              if (init == null) {
                init = nil;
              };
              return ctx.$instance_variable_set(var$, (function() {if ($truthy(($ret_or_6 = init))) {
                return init.$dup()
              } else {
                return $ret_or_6
              }; return nil; })());}, $$4.$$s = self, $$4.$$arity = 2, $$4));}, $$3.$$s = self, $$3.$$arity = 2, $$3));
          if ($truthy(reboot)) {
            return $$$($$$($$($nesting, 'Hyperstack'), 'Application'), 'Boot').$run()
          } else {
            return nil
          };
        } else {
          return (self.context = $send($$($nesting, 'Hash'), 'new', [], ($$5 = function(h, k){var self = $$5.$$s == null ? this : $$5.$$s, $writer = nil;

            
            
            if (h == null) {
              h = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            $writer = [k, $hash2([], {})];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$5.$$s = self, $$5.$$arity = 2, $$5)))
        };
      }, $Context_reset$excl$2.$$arity = -1), nil) && 'reset!';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/js_imports"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$!', '$each', '$raise']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $js_import$1;

      return (Opal.def(self, '$js_import', $js_import$1 = function $$js_import(value, $kwargs) {
        var defines, client_only, server_only, $$2, self = this, on_server = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'defines')) {
          throw Opal.ArgumentError.$new('missing keyword: defines');
        }
        defines = $kwargs.$$smap["defines"];;
        
        client_only = $kwargs.$$smap["client_only"];
        if (client_only == null) {
          client_only = nil
        };
        
        server_only = $kwargs.$$smap["server_only"];
        if (server_only == null) {
          server_only = nil
        };
        defines = [].concat(Opal.to_a(defines));
        
        on_server = typeof Opal.global.document === 'undefined';
        if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = server_only))) {
          return on_server['$!']()
        } else {
          return $ret_or_2
        }; return nil; })()))) {
          return $ret_or_1
        } else {
          
          if ($truthy(($ret_or_3 = client_only))) {
            return on_server
          } else {
            return $ret_or_3
          };
        }; return nil; })())) {
          return nil};
        return $send(defines, 'each', [], ($$2 = function(name){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (name == null) {
            name = nil;
          };
          if ($truthy(Opal.global[name] === undefined)) {
          } else {
            return nil;
          };
          return self.$raise("" + ("" + "The package " + (name) + " was not found. Add it to the webpack ") + ("" + ((function() {if ($truthy(client_only)) {
            return "client_only.js"
          } else {
            return "client_and_server.js"
          }; return nil; })()) + " manifest."));}, $$2.$$s = self, $$2.$$arity = 1, $$2));;
      }, $js_import$1.$$arity = 2), nil) && 'js_import'
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/on_client"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$!']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack_on_client$ques$1;

    return (Opal.defs(self, '$on_client?', $Hyperstack_on_client$ques$1 = function() {
      var self = this;

      return (typeof Opal.global.document === 'undefined')['$!']()
    }, $Hyperstack_on_client$ques$1.$$arity = 0), nil) && 'on_client?'
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/active_support_string_inquirer"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $range = Opal.range;

  Opal.add_stubs(['$private', '$==', '$[]']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ActiveSupport');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StringInquirer');

      var $nesting = [self].concat($parent_nesting), $StringInquirer_respond_to_missing$ques$1, $StringInquirer_method_missing$2;

      
      self.$private();
      
      Opal.def(self, '$respond_to_missing?', $StringInquirer_respond_to_missing$ques$1 = function(method_name, include_private) {
        var $iter = $StringInquirer_respond_to_missing$ques$1.$$p, $yield = $iter || nil, self = this, $ret_or_1 = nil;

        if ($iter) $StringInquirer_respond_to_missing$ques$1.$$p = null;
        
        
        if (include_private == null) {
          include_private = false;
        };
        if ($truthy(($ret_or_1 = method_name['$[]'](-1)['$==']("?")))) {
          return $ret_or_1
        } else {
          return $send2(self, $find_super(self, 'respond_to_missing?', $StringInquirer_respond_to_missing$ques$1, false, true), 'respond_to_missing?', [method_name, include_private], $iter)
        };
      }, $StringInquirer_respond_to_missing$ques$1.$$arity = -2);
      return (Opal.def(self, '$method_missing', $StringInquirer_method_missing$2 = function $$method_missing(method_name, $a) {
        var $post_args, arguments$, $iter = $StringInquirer_method_missing$2.$$p, $yield = $iter || nil, self = this;

        if ($iter) $StringInquirer_method_missing$2.$$p = null;
        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        arguments$ = $post_args;;
        if (method_name['$[]'](-1)['$==']("?")) {
          return self['$=='](method_name['$[]']($range(0, -2, false)))
        } else {
          return $send2(self, $find_super(self, 'method_missing', $StringInquirer_method_missing$2, false, true), 'method_missing', [method_name].concat(Opal.to_a(arguments)), $iter)
        };
      }, $StringInquirer_method_missing$2.$$arity = -2), nil) && 'method_missing';
    })($nesting[0], $$($nesting, 'String'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack_env"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack_env$1;

    return (Opal.defs(self, '$env', $Hyperstack_env$1 = function $$env() {
      var self = this, $ret_or_1 = nil;
      if (self.environment == null) self.environment = nil;

      return (self.environment = (function() {if ($truthy(($ret_or_1 = self.environment))) {
        return $ret_or_1
      } else {
        return $$$($$($nesting, 'ActiveSupport'), 'StringInquirer').$new("development")
      }; return nil; })())
    }, $Hyperstack_env$1.$$arity = 0), nil) && 'env'
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/hotloader/stub"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $a;

    if ($truthy((($a = $$($nesting, 'Hotloader', 'skip_raise')) ? 'constant' : nil))) {
      return nil
    } else {
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Hotloader');

        var $nesting = [self].concat($parent_nesting), $Hotloader_when_file_updates$1;

        return (Opal.defs(self, '$when_file_updates', $Hotloader_when_file_updates$1 = function $$when_file_updates() {
          var $iter = $Hotloader_when_file_updates$1.$$p, block = $iter || nil, self = this;

          if ($iter) $Hotloader_when_file_updates$1.$$p = null;
          
          
          if ($iter) $Hotloader_when_file_updates$1.$$p = null;;
          return nil;
        }, $Hotloader_when_file_updates$1.$$arity = 0), nil) && 'when_file_updates'
      })($nesting[0], null, $nesting)
    }
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack-config"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$require']);
  
  self.$require("hyperstack/boot");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack_naming_convention$1;

    return (Opal.defs(self, '$naming_convention', $Hyperstack_naming_convention$1 = function $$naming_convention() {
      var self = this;

      return "camelize_params"
    }, $Hyperstack_naming_convention$1.$$arity = 0), nil) && 'naming_convention'
  })($nesting[0], $nesting);
  
  self.$require("hyperstack/native_wrapper_compatibility");
  self.$require("hyperstack/deprecation_warning");
  self.$require("hyperstack/string");
  self.$require("hyperstack/client_stubs");
  self.$require("hyperstack/context");
  self.$require("hyperstack/js_imports");
  self.$require("hyperstack/on_client");
  self.$require("hyperstack/active_support_string_inquirer.rb");
  self.$require("hyperstack_env");
  return self.$require("hyperstack/hotloader/stub");;
};

Opal.modules["hyperstack/autoloader"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $class_variable_get = Opal.class_variable_get, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$new', '$history=', '$-', '$load_paths=', '$loaded=', '$loading=', '$nil?', '$name', '$guess_for_anonymous', '$load_missing_constant', '$puts', '$const_defined?', '$raise', '$qualified_name_for', '$underscore', '$search_for_module', '$include?', '$loading', '$require_or_load', '$const_get', '$respond_to?', '$parent', '$!=', '$!', '$any?', '$parents', '$const_missing', '$missing_name?', '$!~', '$message', '$=~', '$==', '$to_constant_name', '$to_s', '$loaded', '$<<', '$delete', '$pop', '$history', '$each', '$load_paths', '$+', '$===', '$sub', '$inspect', '$downcase', '$tr', '$gsub']);
  
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Autoloader');

      var $nesting = [self].concat($parent_nesting), $Autoloader_history$eq$1, $Autoloader_history$2, $Autoloader_load_paths$eq$3, $Autoloader_load_paths$4, $Autoloader_loaded$eq$5, $Autoloader_loaded$6, $Autoloader_loading$eq$7, $Autoloader_loading$8, $Autoloader_const_missing$9, $Autoloader_guess_for_anonymous$10, $Autoloader_load_missing_constant$11, $Autoloader_missing_name$ques$13, $Autoloader_qualified_name_for$14, $Autoloader_require_or_load$15, $Autoloader_search_for_module$16, $Autoloader_to_constant_name$18, $Autoloader_underscore$19, $writer = nil;

      
      Opal.defs(self, '$history=', $Autoloader_history$eq$1 = function(a) {
        var self = this;

        return $class_variable_set($nesting[0], '@@history', a)
      }, $Autoloader_history$eq$1.$$arity = 1);
      Opal.defs(self, '$history', $Autoloader_history$2 = function $$history() {
        var self = this;

        return $class_variable_get($nesting[0], '@@history', false)
      }, $Autoloader_history$2.$$arity = 0);
      
      $writer = [$$($nesting, 'Set').$new()];
      $send(self, 'history=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defs(self, '$load_paths=', $Autoloader_load_paths$eq$3 = function(a) {
        var self = this;

        return $class_variable_set($nesting[0], '@@load_paths', a)
      }, $Autoloader_load_paths$eq$3.$$arity = 1);
      Opal.defs(self, '$load_paths', $Autoloader_load_paths$4 = function $$load_paths() {
        var self = this;

        return $class_variable_get($nesting[0], '@@load_paths', false)
      }, $Autoloader_load_paths$4.$$arity = 0);
      
      $writer = [[]];
      $send(self, 'load_paths=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defs(self, '$loaded=', $Autoloader_loaded$eq$5 = function(a) {
        var self = this;

        return $class_variable_set($nesting[0], '@@loaded', a)
      }, $Autoloader_loaded$eq$5.$$arity = 1);
      Opal.defs(self, '$loaded', $Autoloader_loaded$6 = function $$loaded() {
        var self = this;

        return $class_variable_get($nesting[0], '@@loaded', false)
      }, $Autoloader_loaded$6.$$arity = 0);
      
      $writer = [$$($nesting, 'Set').$new()];
      $send(self, 'loaded=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defs(self, '$loading=', $Autoloader_loading$eq$7 = function(a) {
        var self = this;

        return $class_variable_set($nesting[0], '@@loading', a)
      }, $Autoloader_loading$eq$7.$$arity = 1);
      Opal.defs(self, '$loading', $Autoloader_loading$8 = function $$loading() {
        var self = this;

        return $class_variable_get($nesting[0], '@@loading', false)
      }, $Autoloader_loading$8.$$arity = 0);
      
      $writer = [[]];
      $send(self, 'loading=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defs(self, '$const_missing', $Autoloader_const_missing$9 = function $$const_missing(const_name, mod) {
        var self = this, from_mod = nil, e = nil;

        try {
          
          from_mod = (function() {if ($truthy(mod.$name()['$nil?']())) {
            return self.$guess_for_anonymous(const_name)
          } else {
            return mod
          }; return nil; })();
          return self.$load_missing_constant(from_mod, const_name);
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
            try {
              return self.$puts("" + "HyperStack autoloader failed attempting to load " + (mod) + "::" + (const_name) + ".  Could be a bug in autoloader")
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
      }, $Autoloader_const_missing$9.$$arity = 2);
      Opal.defs(self, '$guess_for_anonymous', $Autoloader_guess_for_anonymous$10 = function $$guess_for_anonymous(const_name) {
        var self = this;

        if ($truthy($$($nesting, 'Object')['$const_defined?'](const_name))) {
          return self.$raise($$($nesting, 'NameError').$new("" + (const_name) + " cannot be autoloaded from an anonymous class or module", const_name))
        } else {
          return $$($nesting, 'Object')
        }
      }, $Autoloader_guess_for_anonymous$10.$$arity = 1);
      Opal.defs(self, '$load_missing_constant', $Autoloader_load_missing_constant$11 = function $$load_missing_constant(from_mod, const_name) {
        var $$12, self = this, qualified_name = nil, qualified_path = nil, module_path = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, parent = nil, e = nil;

        
        qualified_name = self.$qualified_name_for(from_mod, const_name);
        qualified_path = self.$underscore(qualified_name);
        module_path = self.$search_for_module(qualified_path);
        if ($truthy(module_path)) {
          if ($truthy(self.$loading()['$include?'](module_path))) {
            return self.$raise("" + "Circular dependency detected while autoloading constant " + (qualified_name))
          } else {
            
            self.$require_or_load(from_mod, module_path);
            if ($truthy(from_mod['$const_defined?'](const_name, false))) {
            } else {
              self.$raise($$($nesting, 'LoadError'), "" + "Unable to autoload constant " + (qualified_name) + ", expected " + (module_path) + " to define it")
            };
            return from_mod.$const_get(const_name);
          }
        } else if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = from_mod['$respond_to?']("parent")))) {
          
          return (parent = from_mod.$parent());
        } else {
          return $ret_or_3
        }; return nil; })()))) {
          return parent['$!='](from_mod)
        } else {
          return $ret_or_2
        }; return nil; })()))) {
          return $send(from_mod.$parents(), 'any?', [], ($$12 = function(p){var self = $$12.$$s == null ? this : $$12.$$s;

            
            
            if (p == null) {
              p = nil;
            };
            return p['$const_defined?'](const_name, false);}, $$12.$$s = self, $$12.$$arity = 1, $$12))['$!']()
        } else {
          return $ret_or_1
        }; return nil; })())) {
          
          try {
            return parent.$const_missing(const_name)
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'NameError')])) {(e = $err)
              try {
                if ($truthy(self['$missing_name?'](e, self.$qualified_name_for(parent, const_name)))) {
                  return nil
                } else {
                  return self.$raise()
                }
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };
        } else {
          return nil
        };
      }, $Autoloader_load_missing_constant$11.$$arity = 2);
      Opal.defs(self, '$missing_name?', $Autoloader_missing_name$ques$13 = function(e, name) {
        var $a, self = this, mn = nil;

        
        mn = (function() {if ($truthy(/undefined/['$!~'](e.$message()))) {
          if ($truthy(/((::)?([A-Z]\w*)(::[A-Z]\w*)*)$/['$=~'](e.$message()))) {
            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))
          } else {
            return nil
          }
        } else {
          return nil
        }; return nil; })();
        return mn['$=='](name);
      }, $Autoloader_missing_name$ques$13.$$arity = 2);
      Opal.defs(self, '$qualified_name_for', $Autoloader_qualified_name_for$14 = function $$qualified_name_for(mod, name) {
        var self = this, mod_name = nil;

        
        mod_name = self.$to_constant_name(mod);
        if (mod_name['$==']("Object")) {
          return name.$to_s()
        } else {
          return "" + (mod_name) + "::" + (name)
        };
      }, $Autoloader_qualified_name_for$14.$$arity = 2);
      Opal.defs(self, '$require_or_load', $Autoloader_require_or_load$15 = function $$require_or_load(from_mod, module_path) {
        var self = this, result = nil;

        
        if ($truthy(self.$loaded()['$include?'](module_path))) {
          return nil};
        self.$loaded()['$<<'](module_path);
        self.$loading()['$<<'](module_path);
        
        try {
        try {
          result = self.$require(module_path)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
            try {
              
              self.$loaded().$delete(module_path);
              self.$raise($$($nesting, 'LoadError'), "" + "Unable to autoload: require_or_load " + (module_path) + " failed");
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
        } finally {
          self.$loading().$pop()
        };;
        self.$history()['$<<'](module_path);
        return result;
      }, $Autoloader_require_or_load$15.$$arity = 2);
      Opal.defs(self, '$search_for_module', $Autoloader_search_for_module$16 = function $$search_for_module(path) {try {

        var $$17, self = this;

        
        $send(self.$load_paths(), 'each', [], ($$17 = function(load_path){var self = $$17.$$s == null ? this : $$17.$$s, mod_path = nil;

          
          
          if (load_path == null) {
            load_path = nil;
          };
          mod_path = $rb_plus($rb_plus(load_path, "/"), path);
          if ($truthy(Opal.modules.hasOwnProperty(mod_path))) {
            Opal.ret(mod_path)
          } else {
            return nil
          };}, $$17.$$s = self, $$17.$$arity = 1, $$17));
        if ($truthy(Opal.modules.hasOwnProperty(path))) {
          return path};
        return nil;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, $Autoloader_search_for_module$16.$$arity = 1);
      Opal.defs(self, '$to_constant_name', $Autoloader_to_constant_name$18 = function $$to_constant_name(desc) {
        var self = this, $case = nil, $ret_or_4 = nil;

        return (function() {$case = desc;
        if ($$($nesting, 'String')['$===']($case)) {return desc.$sub(/^::/, "")}
        else if ($$($nesting, 'Symbol')['$===']($case)) {return desc.$to_s()}
        else if ($$($nesting, 'Module')['$===']($case)) {if ($truthy(($ret_or_4 = desc.$name()))) {
          return $ret_or_4
        } else {
          return self.$raise($$($nesting, 'ArgumentError'), "Anonymous modules have no name to be referenced by")
        }}
        else {return self.$raise($$($nesting, 'TypeError'), "" + "Not a valid constant descriptor: " + (desc.$inspect()))}})()
      }, $Autoloader_to_constant_name$18.$$arity = 1);
      return (Opal.defs(self, '$underscore', $Autoloader_underscore$19 = function $$underscore(string) {
        var self = this;

        return string.$gsub(/::/, "/").$gsub(/([A-Z]+)([A-Z][a-z])/, "\\1_\\2").$gsub(/([a-z\d])([A-Z])/, "\\1_\\2").$tr("-", "_").$downcase()
      }, $Autoloader_underscore$19.$$arity = 1), nil) && 'underscore';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/autoloader_starter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $send = Opal.send, $klass = Opal.klass, $alias = Opal.alias, $truthy = Opal.truthy, $writer = nil;

  Opal.add_stubs(['$load_paths=', '$-', '$_autoloader_original_const_missing', '$const_missing', '$raise']);
  
  
  $writer = [["components", "models", "operations", "stores"]];
  $send($$$($$($nesting, 'Hyperstack'), 'Autoloader'), 'load_paths=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $const_missing$1;

      
      $alias(self, "_autoloader_original_const_missing", "const_missing");
      return (Opal.def(self, '$const_missing', $const_missing$1 = function $$const_missing(const_name) {
        var self = this, e = nil, $ret_or_1 = nil;

        try {
          return self.$_autoloader_original_const_missing(const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {(e = $err)
            try {
              if ($truthy(($ret_or_1 = $$$($$($nesting, 'Hyperstack'), 'Autoloader').$const_missing(const_name, self)))) {
                return $ret_or_1
              } else {
                return self.$raise(e)
              }
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
      }, $const_missing$1.$$arity = 1), nil) && 'const_missing';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting);
};

Opal.modules["hyperstack/internal/component"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_accessor']);
  
  self.$require("hyperstack-config");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    
    nil;
    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting);

          return self.$attr_accessor("after_error_args")
        })(Opal.get_singleton_class(self), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/internal/callbacks"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$extend', '$each', '$flatten', '$callbacks_for', '$class', '$is_a?', '$method', '$send', '$define_singleton_method', '$set_var', '$lambda', '$instance_exec', '$to_proc', '$<<', '$push', '$when_file_updates', '$delete_if', '$equal?', '$call', '$+', '$respond_to?', '$superclass', '$any?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Callbacks');

        var $nesting = [self].concat($parent_nesting), $Callbacks_included$1, $Callbacks_run_callback$2;

        
        nil;
        Opal.defs(self, '$included', $Callbacks_included$1 = function $$included(base) {
          var self = this;

          return base.$extend($$($nesting, 'ClassMethods'))
        }, $Callbacks_included$1.$$arity = 1);
        
        Opal.def(self, '$run_callback', $Callbacks_run_callback$2 = function $$run_callback(name, $a) {
          var $post_args, args, $$3, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          $send(self.$class().$callbacks_for(name).$flatten(), 'each', [], ($$3 = function(callback){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (callback == null) {
              callback = nil;
            };
            if ($truthy(callback['$is_a?']($$($nesting, 'Proc')))) {
            } else {
              callback = self.$method(callback)
            };
            return (args = $send(self.$class(), 'send', ["" + "_" + (name) + "_before_call_hook", name, self, callback].concat(Opal.to_a(args))));}, $$3.$$s = self, $$3.$$arity = 1, $$3));
          return args;
        }, $Callbacks_run_callback$2.$$arity = -2);
        return (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_define_callback$4, $ClassMethods_callbacks_for$11, $ClassMethods_callbacks$ques$12;

          
          
          Opal.def(self, '$define_callback', $ClassMethods_define_callback$4 = function $$define_callback(callback_name, $kwargs) {
            var before_call_hook, after_define_hook, $$5, $$7, $$8, $iter = $ClassMethods_define_callback$4.$$p, $yield = $iter || nil, self = this, wrapper_name = nil, $ret_or_1 = nil;

            if ($iter) $ClassMethods_define_callback$4.$$p = null;
            
            
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else if (!$kwargs.$$is_hash) {
              throw Opal.ArgumentError.$new('expected kwargs');
            };
            
            before_call_hook = $kwargs.$$smap["before_call_hook"];
            if (before_call_hook == null) {
              before_call_hook = nil
            };
            
            after_define_hook = $kwargs.$$smap["after_define_hook"];
            if (after_define_hook == null) {
              after_define_hook = nil
            };
            wrapper_name = "" + "_" + (callback_name) + "_callbacks";
            $send(self, 'define_singleton_method', [wrapper_name], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s, $$6;

              return $send($$($nesting, 'Context'), 'set_var', [self, "" + "@" + (wrapper_name), $hash2(["force"], {"force": true})], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;

                return []}, $$6.$$s = self, $$6.$$arity = 0, $$6))}, $$5.$$s = self, $$5.$$arity = 0, $$5));
            before_call_hook = (function() {if ($truthy(($ret_or_1 = before_call_hook))) {
              return $ret_or_1
            } else {
              return $send(self, 'lambda', [], ($$7 = function(_name, sself, proc, $a){var self = $$7.$$s == null ? this : $$7.$$s, $post_args, args;

                
                
                if (_name == null) {
                  _name = nil;
                };
                
                if (sself == null) {
                  sself = nil;
                };
                
                if (proc == null) {
                  proc = nil;
                };
                
                $post_args = Opal.slice.call(arguments, 3, arguments.length);
                
                args = $post_args;;
                $send(sself, 'instance_exec', Opal.to_a(args), proc.$to_proc());
                return args;}, $$7.$$s = self, $$7.$$arity = -4, $$7))
            }; return nil; })();
            $send(self, 'define_singleton_method', ["" + "_" + (callback_name) + "_before_call_hook"], before_call_hook.$to_proc());
            return $send(self, 'define_singleton_method', [callback_name], ($$8 = function($a){var self = $$8.$$s == null ? this : $$8.$$s, $iter = $$8.$$p, block = $iter || nil, $post_args, args, $$9;

              
              
              if ($iter) $$8.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              if ((block !== nil)) {
                args['$<<'](block)};
              self.$send(wrapper_name).$push(args);
              $send($$($nesting, 'Hotloader'), 'when_file_updates', [], ($$9 = function(){var self = $$9.$$s == null ? this : $$9.$$s, $$10;

                return $send(self.$send(wrapper_name), 'delete_if', [], ($$10 = function(item){var self = $$10.$$s == null ? this : $$10.$$s;

                  
                  
                  if (item == null) {
                    item = nil;
                  };
                  return item['$equal?'](args);}, $$10.$$s = self, $$10.$$arity = 1, $$10))}, $$9.$$s = self, $$9.$$arity = 0, $$9));
              if ($truthy(after_define_hook)) {
                return after_define_hook.$call(self)
              } else {
                return nil
              };}, $$8.$$s = self, $$8.$$arity = -1, $$8));
          }, $ClassMethods_define_callback$4.$$arity = -2);
          
          Opal.def(self, '$callbacks_for', $ClassMethods_callbacks_for$11 = function $$callbacks_for(callback_name) {
            var self = this, wrapper_name = nil;

            
            wrapper_name = "" + "_" + (callback_name) + "_callbacks";
            return $rb_plus((function() {if ($truthy(self.$superclass()['$respond_to?']("callbacks_for"))) {
              return self.$superclass().$callbacks_for(callback_name)
            } else {
              return []
            }; return nil; })(), self.$send(wrapper_name));
          }, $ClassMethods_callbacks_for$11.$$arity = 1);
          return (Opal.def(self, '$callbacks?', $ClassMethods_callbacks$ques$12 = function(name) {
            var self = this;

            return self.$callbacks_for(name)['$any?']()
          }, $ClassMethods_callbacks$ques$12.$$arity = 1), nil) && 'callbacks?';
        })($nesting[0], $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/auto_unmount"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$include', '$class_eval', '$define_callback', '$run_callback', '$each', '$[]', '$objects_to_unmount', '$to_proc', '$delete', '$instance_variables', '$instance_variable_get', '$respond_to?', '$unmount', '$unmounted?', '$tap', '$define_singleton_method', '$abort', '$<<', '$new', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'AutoUnmount');

        var $nesting = [self].concat($parent_nesting), $AutoUnmount_included$1, $AutoUnmount_unmounted$ques$3, $AutoUnmount_unmount$4, $AutoUnmount_every$6, $AutoUnmount_after$9;

        
        Opal.defs(self, '$included', $AutoUnmount_included$1 = function $$included(base) {
          var $$2, self = this;

          
          base.$include($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Callbacks'));
          return $send(base, 'class_eval', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

            return self.$define_callback("before_unmount")}, $$2.$$s = self, $$2.$$arity = 0, $$2));
        }, $AutoUnmount_included$1.$$arity = 1);
        
        Opal.def(self, '$unmounted?', $AutoUnmount_unmounted$ques$3 = function() {
          var self = this;
          if (self.__hyperstack_internal_auto_unmount_unmounted == null) self.__hyperstack_internal_auto_unmount_unmounted = nil;

          return self.__hyperstack_internal_auto_unmount_unmounted
        }, $AutoUnmount_unmounted$ques$3.$$arity = 0);
        
        Opal.def(self, '$unmount', $AutoUnmount_unmount$4 = function $$unmount() {
          var $$5, self = this;

          
          self.$run_callback("before_unmount");
          $send($$($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self), 'each', [], "unmount".$to_proc());
          $$($nesting, 'AutoUnmount').$objects_to_unmount().$delete(self);
          $send(self.$instance_variables(), 'each', [], ($$5 = function(var$){var self = $$5.$$s == null ? this : $$5.$$s, val = nil;

            
            
            if (var$ == null) {
              var$ = nil;
            };
            val = self.$instance_variable_get(var$);
            
            try {
              if ($truthy(val['$respond_to?']("unmount"))) {
                return val.$unmount()
              } else {
                return nil
              }
            } catch ($err) {
              if (Opal.rescue($err, [$$$($$($nesting, 'JS'), 'Error')])) {
                try {
                  return nil
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            };;}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          return (self.__hyperstack_internal_auto_unmount_unmounted = true);
        }, $AutoUnmount_unmount$4.$$arity = 0);
        
        Opal.def(self, '$every', $AutoUnmount_every$6 = function $$every($a) {
          var $iter = $AutoUnmount_every$6.$$p, block = $iter || nil, $post_args, args, $$7, self = this;

          if ($iter) $AutoUnmount_every$6.$$p = null;
          
          
          if ($iter) $AutoUnmount_every$6.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ($truthy(self['$unmounted?']())) {
            return nil};
          return $send($send2(self, $find_super(self, 'every', $AutoUnmount_every$6, false, true), 'every', Opal.to_a(args), $iter), 'tap', [], ($$7 = function(id){var self = $$7.$$s == null ? this : $$7.$$s, $$8, sself = nil;

            
            
            if (id == null) {
              id = nil;
            };
            sself = self;
            $send(id, 'define_singleton_method', ["unmount"], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

              return self.$abort()}, $$8.$$s = self, $$8.$$arity = 0, $$8));
            return $$($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self)['$<<'](id);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
        }, $AutoUnmount_every$6.$$arity = -1);
        
        Opal.def(self, '$after', $AutoUnmount_after$9 = function $$after($a) {
          var $iter = $AutoUnmount_after$9.$$p, block = $iter || nil, $post_args, args, $$10, self = this;

          if ($iter) $AutoUnmount_after$9.$$p = null;
          
          
          if ($iter) $AutoUnmount_after$9.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ($truthy(self['$unmounted?']())) {
            return nil};
          return $send($send2(self, $find_super(self, 'after', $AutoUnmount_after$9, false, true), 'after', Opal.to_a(args), $iter), 'tap', [], ($$10 = function(id){var self = $$10.$$s == null ? this : $$10.$$s, $$11, sself = nil;

            
            
            if (id == null) {
              id = nil;
            };
            sself = self;
            $send(id, 'define_singleton_method', ["unmount"], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s;

              return self.$abort()}, $$11.$$s = self, $$11.$$arity = 0, $$11));
            return $$($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self)['$<<'](id);}, $$10.$$s = self, $$10.$$arity = 1, $$10));
        }, $AutoUnmount_after$9.$$arity = -1);
        return (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $objects_to_unmount$12;

          return (Opal.def(self, '$objects_to_unmount', $objects_to_unmount$12 = function $$objects_to_unmount() {
            var $$13, self = this, $ret_or_1 = nil;
            if (self.objects_to_unmount == null) self.objects_to_unmount = nil;

            return (self.objects_to_unmount = (function() {if ($truthy(($ret_or_1 = self.objects_to_unmount))) {
              return $ret_or_1
            } else {
              return $send($$($nesting, 'Hash'), 'new', [], ($$13 = function(h, k){var self = $$13.$$s == null ? this : $$13.$$s, $writer = nil;

                
                
                if (h == null) {
                  h = nil;
                };
                
                if (k == null) {
                  k = nil;
                };
                $writer = [k, $$($nesting, 'Set').$new()];
                $send(h, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, $$13.$$s = self, $$13.$$arity = 2, $$13))
            }; return nil; })())
          }, $objects_to_unmount$12.$$arity = 0), nil) && 'objects_to_unmount'
        })(Opal.get_singleton_class(self), $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/state/observer"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$observing', '$to_proc', '$update_objects_to_observe', '$remove']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'State');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Observer');

        var $nesting = [self].concat($parent_nesting), $Observer_observing$1, $Observer_update_objects_to_observe$2, $Observer_remove$3;

        
        
        Opal.def(self, '$observing', $Observer_observing$1 = function $$observing($kwargs) {
          var $iter = $Observer_observing$1.$$p, block = $iter || nil, immediate_update, rendering, update_objects, self = this;

          if ($iter) $Observer_observing$1.$$p = null;
          
          
          if ($iter) $Observer_observing$1.$$p = null;;
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          immediate_update = $kwargs.$$smap["immediate_update"];
          if (immediate_update == null) {
            immediate_update = false
          };
          
          rendering = $kwargs.$$smap["rendering"];
          if (rendering == null) {
            rendering = false
          };
          
          update_objects = $kwargs.$$smap["update_objects"];
          if (update_objects == null) {
            update_objects = false
          };
          return $send($$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper'), 'observing', [self, immediate_update, rendering, update_objects], block.$to_proc());
        }, $Observer_observing$1.$$arity = -1);
        
        Opal.def(self, '$update_objects_to_observe', $Observer_update_objects_to_observe$2 = function $$update_objects_to_observe() {
          var self = this;

          return $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper').$update_objects_to_observe(self)
        }, $Observer_update_objects_to_observe$2.$$arity = 0);
        return (Opal.def(self, '$remove', $Observer_remove$3 = function $$remove() {
          var self = this;

          return $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper').$remove(self)
        }, $Observer_remove$3.$$arity = 0), nil) && 'remove';
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/validator"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$private', '$tap', '$new', '$each', '$instance_variable_set', '$dup', '$instance_variable_get', '$build', '$to_proc', '$instance_eval', '$[]=', '$-', '$define_rule', '$coerce_native_hash_values', '$rules', '$define_all_others', '$props_wrapper', '$reject', '$[]', '$errors=', '$allow_undefined_props?', '$validate_undefined', '$defined_props', '$validate_required', '$validate_types', '$validate_allowed', '$errors', '$inject', '$select', '$include?', '$keys', '$!', '$define_param', '$is_a?', '$type_check', '$>', '$length', '$validate_value_array', '$nil?', '$respond_to?', '$_react_param_conversion', '$<<', '$each_with_index', '$Native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Validator');

          var $nesting = [self].concat($parent_nesting), $Validator_copy$1, $Validator_initialize$4, $Validator_build$5, $Validator_build$6, $Validator_requires$7, $Validator_optional$8, $Validator_event$9, $Validator_all_other_params$10, $Validator_validate$13, $Validator_default_props$15, $Validator_defined_props$18, $Validator_allow_undefined_props$ques$20, $Validator_rules$21, $Validator_define_rule$22, $Validator_errors$23, $Validator_validate_types$24, $Validator_type_check$25, $Validator_validate_allowed$26, $Validator_validate_required$27, $Validator_validate_undefined$29, $Validator_validate_value_array$31, $Validator_coerce_native_hash_values$33;

          self.$$prototype.allow_undefined_props = self.$$prototype.rules = self.$$prototype.errors = nil;
          
          self.$attr_accessor("errors");
          self.$attr_reader("props_wrapper");
          self.$private("errors", "props_wrapper");
          
          Opal.def(self, '$copy', $Validator_copy$1 = function $$copy(new_props_wrapper) {
            var $$2, self = this;

            return $send($$($nesting, 'Validator').$new(new_props_wrapper), 'tap', [], ($$2 = function(c){var self = $$2.$$s == null ? this : $$2.$$s, $$3;

              
              
              if (c == null) {
                c = nil;
              };
              return $send(["@allow_undefined_props", "@rules", "@errors"], 'each', [], ($$3 = function(var$){var self = $$3.$$s == null ? this : $$3.$$s;

                
                
                if (var$ == null) {
                  var$ = nil;
                };
                return c.$instance_variable_set(var$, self.$instance_variable_get(var$).$dup());}, $$3.$$s = self, $$3.$$arity = 1, $$3));}, $$2.$$s = self, $$2.$$arity = 1, $$2))
          }, $Validator_copy$1.$$arity = 1);
          
          Opal.def(self, '$initialize', $Validator_initialize$4 = function $$initialize(props_wrapper) {
            var self = this;

            
            
            if (props_wrapper == null) {
              props_wrapper = $$($nesting, 'Class').$new($$($nesting, 'PropsWrapper'));
            };
            return (self.props_wrapper = props_wrapper);
          }, $Validator_initialize$4.$$arity = -1);
          Opal.defs(self, '$build', $Validator_build$5 = function $$build() {
            var $iter = $Validator_build$5.$$p, block = $iter || nil, self = this;

            if ($iter) $Validator_build$5.$$p = null;
            
            
            if ($iter) $Validator_build$5.$$p = null;;
            return $send(self.$new(), 'build', [], block.$to_proc());
          }, $Validator_build$5.$$arity = 0);
          
          Opal.def(self, '$build', $Validator_build$6 = function $$build() {
            var $iter = $Validator_build$6.$$p, block = $iter || nil, self = this;

            if ($iter) $Validator_build$6.$$p = null;
            
            
            if ($iter) $Validator_build$6.$$p = null;;
            $send(self, 'instance_eval', [], block.$to_proc());
            return self;
          }, $Validator_build$6.$$arity = 0);
          
          Opal.def(self, '$requires', $Validator_requires$7 = function $$requires(name, options) {
            var self = this, $writer = nil;

            
            
            if (options == null) {
              options = $hash2([], {});
            };
            
            $writer = ["required", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$define_rule(name, options);
          }, $Validator_requires$7.$$arity = -2);
          
          Opal.def(self, '$optional', $Validator_optional$8 = function $$optional(name, options) {
            var self = this, $writer = nil;

            
            
            if (options == null) {
              options = $hash2([], {});
            };
            
            $writer = ["required", false];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$define_rule(name, options);
          }, $Validator_optional$8.$$arity = -2);
          
          Opal.def(self, '$event', $Validator_event$9 = function $$event(name) {
            var self = this, $writer = nil;

            
            $writer = [name, self.$coerce_native_hash_values($hash2(["default", "type", "allow_nil"], {"default": nil, "type": $$($nesting, 'Proc'), "allow_nil": true}))];
            $send(self.$rules(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, $Validator_event$9.$$arity = 1);
          
          Opal.def(self, '$all_other_params', $Validator_all_other_params$10 = function $$all_other_params(name) {
            var $$11, self = this;

            
            self.allow_undefined_props = true;
            return $send(self.$props_wrapper(), 'define_all_others', [name], ($$11 = function(props){var self = $$11.$$s == null ? this : $$11.$$s, $$12;

              
              
              if (props == null) {
                props = nil;
              };
              return $send(props, 'reject', [], ($$12 = function(name, value){var self = $$12.$$s == null ? this : $$12.$$s;

                
                
                if (name == null) {
                  name = nil;
                };
                
                if (value == null) {
                  value = nil;
                };
                return self.$rules()['$[]'](name);}, $$12.$$s = self, $$12.$$arity = 2, $$12));}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          }, $Validator_all_other_params$10.$$arity = 1);
          
          Opal.def(self, '$validate', $Validator_validate$13 = function $$validate(props) {
            var $$14, self = this, $writer = nil;

            
            
            $writer = [[]];
            $send(self, 'errors=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(self['$allow_undefined_props?']())) {
            } else {
              self.$validate_undefined(props)
            };
            props = self.$coerce_native_hash_values(self.$defined_props(props));
            self.$validate_required(props);
            $send(props, 'each', [], ($$14 = function(name, value){var self = $$14.$$s == null ? this : $$14.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              self.$validate_types(name, value);
              return self.$validate_allowed(name, value);}, $$14.$$s = self, $$14.$$arity = 2, $$14));
            return self.$errors();
          }, $Validator_validate$13.$$arity = 1);
          
          Opal.def(self, '$default_props', $Validator_default_props$15 = function $$default_props() {
            var $$16, $$17, self = this;

            return $send($send(self.$rules(), 'select', [], ($$16 = function(key, value){var self = $$16.$$s == null ? this : $$16.$$s;

              
              
              if (key == null) {
                key = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              return value.$keys()['$include?']("default");}, $$16.$$s = self, $$16.$$arity = 2, $$16)), 'inject', [$hash2([], {})], ($$17 = function(memo, $mlhs_tmp1){var self = $$17.$$s == null ? this : $$17.$$s, $a, $b, k = nil, v = nil, $writer = nil;

              
              
              if (memo == null) {
                memo = nil;
              };
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $b = $mlhs_tmp1, $a = Opal.to_ary($b), (k = ($a[0] == null ? nil : $a[0])), (v = ($a[1] == null ? nil : $a[1])), $b;
              
              $writer = [k, v['$[]']("default")];
              $send(memo, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return memo;}, $$17.$$s = self, $$17.$$arity = 2, $$17.$$has_top_level_mlhs_arg = true, $$17))
          }, $Validator_default_props$15.$$arity = 0);
          self.$private();
          
          Opal.def(self, '$defined_props', $Validator_defined_props$18 = function $$defined_props(props) {
            var $$19, self = this;

            return $send(props, 'select', [], ($$19 = function(name){var self = $$19.$$s == null ? this : $$19.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              return self.$rules().$keys()['$include?'](name);}, $$19.$$s = self, $$19.$$arity = 1, $$19))
          }, $Validator_defined_props$18.$$arity = 1);
          
          Opal.def(self, '$allow_undefined_props?', $Validator_allow_undefined_props$ques$20 = function() {
            var self = this;

            return self.allow_undefined_props['$!']()['$!']()
          }, $Validator_allow_undefined_props$ques$20.$$arity = 0);
          
          Opal.def(self, '$rules', $Validator_rules$21 = function $$rules() {
            var self = this, $ret_or_1 = nil;

            return (self.rules = (function() {if ($truthy(($ret_or_1 = self.rules))) {
              return $ret_or_1
            } else {
              return $hash2(["children"], {"children": $hash2(["required"], {"required": false})})
            }; return nil; })())
          }, $Validator_rules$21.$$arity = 0);
          
          Opal.def(self, '$define_rule', $Validator_define_rule$22 = function $$define_rule(name, options) {
            var self = this, $writer = nil;

            
            
            if (options == null) {
              options = $hash2([], {});
            };
            
            $writer = [name, self.$coerce_native_hash_values(options)];
            $send(self.$rules(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$props_wrapper().$define_param(name, options['$[]']("type"), options['$[]']("alias"));
          }, $Validator_define_rule$22.$$arity = -2);
          
          Opal.def(self, '$errors', $Validator_errors$23 = function $$errors() {
            var self = this, $ret_or_2 = nil;

            return (self.errors = (function() {if ($truthy(($ret_or_2 = self.errors))) {
              return $ret_or_2
            } else {
              return []
            }; return nil; })())
          }, $Validator_errors$23.$$arity = 0);
          
          Opal.def(self, '$validate_types', $Validator_validate_types$24 = function $$validate_types(prop_name, value) {
            var self = this, klass = nil, allow_nil = nil;

            
            if ($truthy((klass = self.$rules()['$[]'](prop_name)['$[]']("type")))) {
            } else {
              return nil
            };
            if ($truthy(klass['$is_a?']($$($nesting, 'Array'))['$!']())) {
              
              allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
              return self.$type_check("" + "`" + (prop_name) + "`", value, klass, allow_nil);
            } else if ($truthy($rb_gt(klass.$length(), 0))) {
              return self.$validate_value_array(prop_name, value)
            } else {
              
              allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
              return self.$type_check("" + "`" + (prop_name) + "`", value, $$($nesting, 'Array'), allow_nil);
            };
          }, $Validator_validate_types$24.$$arity = 2);
          
          Opal.def(self, '$type_check', $Validator_type_check$25 = function $$type_check(prop_name, value, klass, allow_nil) {
            var self = this, $ret_or_3 = nil, $ret_or_4 = nil;

            
            if ($truthy((function() {if ($truthy(($ret_or_3 = allow_nil))) {
              return value['$nil?']()
            } else {
              return $ret_or_3
            }; return nil; })())) {
              return nil};
            if ($truthy(value['$is_a?'](klass))) {
              return nil};
            if ($truthy((function() {if ($truthy(($ret_or_4 = klass['$respond_to?']("_react_param_conversion")))) {
              return klass.$_react_param_conversion(value, "validate_only")
            } else {
              return $ret_or_4
            }; return nil; })())) {
              return nil};
            return self.$errors()['$<<']("" + "Provided prop " + (prop_name) + " could not be converted to " + (klass));
          }, $Validator_type_check$25.$$arity = 4);
          
          Opal.def(self, '$validate_allowed', $Validator_validate_allowed$26 = function $$validate_allowed(prop_name, value) {
            var self = this, values = nil;

            
            if ($truthy((values = self.$rules()['$[]'](prop_name)['$[]']("values")))) {
            } else {
              return nil
            };
            if ($truthy(values['$include?'](value))) {
              return nil};
            return self.$errors()['$<<']("" + "Value `" + (value) + "` for prop `" + (prop_name) + "` is not an allowed value");
          }, $Validator_validate_allowed$26.$$arity = 2);
          
          Opal.def(self, '$validate_required', $Validator_validate_required$27 = function $$validate_required(props) {
            var $$28, self = this;

            return $send($rb_minus(self.$rules().$keys(), props.$keys()), 'each', [], ($$28 = function(name){var self = $$28.$$s == null ? this : $$28.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              if ($truthy(self.$rules()['$[]'](name)['$[]']("required"))) {
              } else {
                return nil;
              };
              return self.$errors()['$<<']("" + "Required prop `" + (name) + "` was not specified");}, $$28.$$s = self, $$28.$$arity = 1, $$28))
          }, $Validator_validate_required$27.$$arity = 1);
          
          Opal.def(self, '$validate_undefined', $Validator_validate_undefined$29 = function $$validate_undefined(props) {
            var $$30, self = this;

            return $send($rb_minus(props.$keys(), self.$rules().$keys()), 'each', [], ($$30 = function(prop_name){var self = $$30.$$s == null ? this : $$30.$$s;

              
              
              if (prop_name == null) {
                prop_name = nil;
              };
              return self.$errors()['$<<']("" + "Provided prop `" + (prop_name) + "` not specified in spec");}, $$30.$$s = self, $$30.$$arity = 1, $$30))
          }, $Validator_validate_undefined$29.$$arity = 1);
          
          Opal.def(self, '$validate_value_array', $Validator_validate_value_array$31 = function $$validate_value_array(name, value) {
            var $$32, self = this, klass = nil, allow_nil = nil;

            try {
              
              klass = self.$rules()['$[]'](name)['$[]']("type");
              allow_nil = self.$rules()['$[]'](name)['$[]']("allow_nil")['$!']()['$!']();
              return $send(value, 'each_with_index', [], ($$32 = function(item, index){var self = $$32.$$s == null ? this : $$32.$$s;

                
                
                if (item == null) {
                  item = nil;
                };
                
                if (index == null) {
                  index = nil;
                };
                return self.$type_check("" + "`" + (name) + "`[" + (index) + "]", self.$Native(item), klass['$[]'](0), allow_nil);}, $$32.$$s = self, $$32.$$arity = 2, $$32));
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'NoMethodError')])) {
                try {
                  return self.$errors()['$<<']("" + "Provided prop `" + (name) + "` was not an Array")
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            }
          }, $Validator_validate_value_array$31.$$arity = 2);
          return (Opal.def(self, '$coerce_native_hash_values', $Validator_coerce_native_hash_values$33 = function $$coerce_native_hash_values(hash) {
            var $$34, self = this;

            return $send(hash, 'each', [], ($$34 = function(key, value){var self = $$34.$$s == null ? this : $$34.$$s, $writer = nil;

              
              
              if (key == null) {
                key = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              $writer = [key, self.$Native(value)];
              $send(hash, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$34.$$s = self, $$34.$$arity = 2, $$34))
          }, $Validator_coerce_native_hash_values$33.$$arity = 1), nil) && 'coerce_native_hash_values';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/ext/component/string"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_event_camelize$1;

    return (Opal.def(self, '$event_camelize', $String_event_camelize$1 = function $$event_camelize() {
      var self = this;

      return self.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = true;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    })
    }, $String_event_camelize$1.$$arity = 0), nil) && 'event_camelize'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/component/element"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $alias = Opal.alias, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$attr_reader', '$attr_accessor', '$new', '$is_a?', '$!', '$empty?', '$raise', '$==', '$convert_string', '$set_native_attributes', '$_update_ref', '$[]', '$properties', '$element_type', '$ref', '$dom_node', '$each', '$!=', '$strip', '$merge_event_prop!', '$to_proc', '$shallow_to_n', '$render', '$convert_props', '$block', '$delete', '$private', '$=~', '$merge_component_event_prop!', '$gsub', '$include?', '$event_camelize', '$merge_built_in_event_prop!', '$key_code', '$instance_variable_get', '$merge!', '$Array', '$ignore_bulk_updates']);
  
  self.$require("hyperstack/ext/component/string");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting), $Element_set_native_attributes$1, $Element_props$2, $Element_convert_string$3, $Element_initialize$4, $Element_children$5, $Element__update_ref$6, $Element_ref$7, $Element_dom_node$8, $Element_on$9, $Element_render$11, $Element_$$12, $Element_merge_event_prop$excl$13, $Element_merge_built_in_event_prop$excl$15, $Element_merge_component_event_prop$excl$16;

        self.$$prototype.props = self.$$prototype._props_as_hash = self.$$prototype._child_element = self.$$prototype._ref = self.$$prototype.properties = nil;
        
        self.$attr_reader("type");
        self.$attr_reader("element_type");
        self.$attr_reader("properties");
        self.$attr_reader("block");
        self.$attr_reader("to_n");
        self.$attr_accessor("waiting_on_resources");
        
        Opal.def(self, '$set_native_attributes', $Element_set_native_attributes$1 = function $$set_native_attributes(native_element) {
          var self = this;

          
          self.key = native_element.key;
          self.props = native_element.props;
          self.ref = native_element.ref;
          self.type = native_element.type;
          self._owner = native_element._owner;
          return (self._props_as_hash = $$($nesting, 'Hash').$new(self.props));
        }, $Element_set_native_attributes$1.$$arity = 1);
        
        Opal.def(self, '$props', $Element_props$2 = function $$props() {
          var self = this;

          return self._props_as_hash
        }, $Element_props$2.$$arity = 0);
        
        Opal.def(self, '$convert_string', $Element_convert_string$3 = function $$convert_string(native_element, element_type, props, block) {
          var self = this, $ret_or_1 = nil;

          
          if ($truthy(native_element['$is_a?'])) {
          } else {
            return native_element
          };
          if ($truthy(native_element['$is_a?']($$($nesting, 'String')))) {
          } else {
            return native_element
          };
          if ($truthy((function() {if ($truthy(($ret_or_1 = props['$empty?']()['$!']()))) {
            return $ret_or_1
          } else {
            return block
          }; return nil; })())) {
            self.$raise("Internal Error Element.new called with string, but non-nil props or block")};
          if (element_type['$==']("wrap_child")) {
            return React.createElement(React.Fragment, null, [native_element]);
          } else {
            return React.createElement(native_element, null);
          };
        }, $Element_convert_string$3.$$arity = 4);
        
        Opal.def(self, '$initialize', $Element_initialize$4 = function $$initialize(native_element, element_type, properties, block) {
          var self = this, $ret_or_2 = nil;

          
          
          if (element_type == null) {
            element_type = nil;
          };
          
          if (properties == null) {
            properties = $hash2([], {});
          };
          
          if (block == null) {
            block = nil;
          };
          try {
            
            native_element = self.$convert_string(native_element, element_type, properties, block);
            if (element_type['$==']("wrap_child")) {
            } else {
              self.element_type = element_type
            };
            self.properties = (function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(typeof properties === 'undefined')) {
              return nil
            } else {
              return properties
            }; return nil; })()))) {
              return $ret_or_2
            } else {
              return $hash2([], {})
            }; return nil; })();
            self.block = block;
            self.$$typeof = native_element.$$typeof;
            self.to_n = self;
            return self.$set_native_attributes(native_element);
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };
        }, $Element_initialize$4.$$arity = -2);
        
        Opal.def(self, '$children', $Element_children$5 = function $$children() {
          var self = this;

          return self.props.children
        }, $Element_children$5.$$arity = 0);
        
        Opal.def(self, '$_update_ref', $Element__update_ref$6 = function $$_update_ref(x) {
          var self = this;

          
          self._ref = x;
          if ($truthy(self._child_element)) {
            return self._child_element.$_update_ref(x)
          } else {
            return nil
          };
        }, $Element__update_ref$6.$$arity = 1);
        
        Opal.def(self, '$ref', $Element_ref$7 = function $$ref() {
          var self = this;

          
          if ($truthy(self._ref)) {
            return self._ref};
          if ($truthy(self.$properties()['$[]']("ref"))) {
            self.$raise("" + "The instance of " + (self.$element_type()) + " has not been mounted yet")};
          return self.$raise("" + "Attempt to get a ref on " + (self.$element_type()) + " which is a static component.");
        }, $Element_ref$7.$$arity = 0);
        
        Opal.def(self, '$dom_node', $Element_dom_node$8 = function $$dom_node() {
          var self = this;

          if ($truthy(typeof self.$ref().$dom_node == 'function')) {
            return self.$ref().$dom_node()
          } else {
            return self.$ref()
          }
        }, $Element_dom_node$8.$$arity = 0);
        
        Opal.def(self, '$on', $Element_on$9 = function $$on($a) {
          var $iter = $Element_on$9.$$p, block = $iter || nil, $post_args, event_names, $$10, self = this, any_found = nil;

          if ($iter) $Element_on$9.$$p = null;
          
          
          if ($iter) $Element_on$9.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          event_names = $post_args;;
          any_found = false;
          $send(event_names, 'each', [], ($$10 = function(event_name){var self = $$10.$$s == null ? this : $$10.$$s, $ret_or_3 = nil;

            
            
            if (event_name == null) {
              event_name = nil;
            };
            if ($truthy((function() {if ($truthy(($ret_or_3 = event_name))) {
              return event_name.$strip()['$!=']("")
            } else {
              return $ret_or_3
            }; return nil; })())) {
            } else {
              return nil;
            };
            $send(self, 'merge_event_prop!', [event_name], block.$to_proc());
            return (any_found = true);}, $$10.$$s = self, $$10.$$arity = 1, $$10));
          if ($truthy(any_found)) {
            self.$set_native_attributes(React.cloneElement(self, self.properties.$shallow_to_n()))};
          return self;
        }, $Element_on$9.$$arity = -1);
        
        Opal.def(self, '$render', $Element_render$11 = function $$render($a) {
          var $post_args, props, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          props = $post_args;;
          if ($truthy(props['$empty?']())) {
            return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render(self)
          } else {
            
            props = $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper'), 'convert_props', [self.$element_type(), self.properties].concat(Opal.to_a(props)));
            return (self._child_element = $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render($$($nesting, 'Element').$new(React.cloneElement(self, props.$shallow_to_n()), self.$element_type(), props, self.$block())));
          };
        }, $Element_render$11.$$arity = -1);
        
        Opal.def(self, '$~', $Element_$$12 = function() {
          var self = this;

          return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$delete(self)
        }, $Element_$$12.$$arity = 0);
        $alias(self, "as_node", "~");
        $alias(self, "delete", "~");
        self.$private();
        
        Opal.def(self, '$merge_event_prop!', $Element_merge_event_prop$excl$13 = function(event_name) {
          var $iter = $Element_merge_event_prop$excl$13.$$p, block = $iter || nil, $$14, self = this, name = nil;

          if ($iter) $Element_merge_event_prop$excl$13.$$p = null;
          
          
          if ($iter) $Element_merge_event_prop$excl$13.$$p = null;;
          if ($truthy(event_name['$=~'](/^<(.+)>$/))) {
            return $send(self, 'merge_component_event_prop!', [event_name.$gsub(/^<(.+)>$/, "\\1")], block.$to_proc())
          } else if ($truthy($$$($$($nesting, 'Event'), 'BUILT_IN_EVENTS')['$include?']((name = "" + "on" + (event_name.$event_camelize()))))) {
            return $send(self, 'merge_built_in_event_prop!', [name], block.$to_proc())
          } else if (event_name['$==']("enter")) {
            return $send(self, 'merge_built_in_event_prop!', ["onKeyDown"], ($$14 = function(evt){var self = $$14.$$s == null ? this : $$14.$$s;

              
              
              if (evt == null) {
                evt = nil;
              };
              if (evt.$key_code()['$=='](13)) {
                return Opal.yield1(block, evt);
              } else {
                return nil
              };}, $$14.$$s = self, $$14.$$arity = 1, $$14))
          } else if ($truthy(self.$element_type().$instance_variable_get("@native_import"))) {
            return $send(self, 'merge_component_event_prop!', [name], block.$to_proc())
          } else {
            return $send(self, 'merge_component_event_prop!', ["" + "on_" + (event_name)], block.$to_proc())
          };
        }, $Element_merge_event_prop$excl$13.$$arity = 1);
        
        Opal.def(self, '$merge_built_in_event_prop!', $Element_merge_built_in_event_prop$excl$15 = function(prop_name) {
          var $iter = $Element_merge_built_in_event_prop$excl$15.$$p, block = $iter || nil, self = this;

          if ($iter) $Element_merge_built_in_event_prop$excl$15.$$p = null;
          
          
          if ($iter) $Element_merge_built_in_event_prop$excl$15.$$p = null;;
          return self.properties['$merge!']($hash(prop_name, 
            function(){
              var react_event = arguments[0];
              if (arguments.length == 0 || !react_event.nativeEvent) {
                return Opal.yieldX(block, Opal.to_a(self.$Array(arguments)))
              }
              var all_args;
              var other_args;
              if (arguments.length > 1) {
                all_args = Array.prototype.slice.call(arguments);
                other_args = all_args.slice(1, arguments.length);
                return $send($$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper'), 'ignore_bulk_updates', [$$($nesting, 'Event').$new(react_event)].concat(Opal.to_a((other_args))), block.$to_proc());
              } else {
                return $send($$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper'), 'ignore_bulk_updates', [$$($nesting, 'Event').$new(react_event)], block.$to_proc());
              }
            }
          ));
        }, $Element_merge_built_in_event_prop$excl$15.$$arity = 1);
        return (Opal.def(self, '$merge_component_event_prop!', $Element_merge_component_event_prop$excl$16 = function(prop_name) {
          var $iter = $Element_merge_component_event_prop$excl$16.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Element_merge_component_event_prop$excl$16.$$p = null;
          return self.properties['$merge!']($hash(prop_name, 
            function(){
              return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
            }
          ))
        }, $Element_merge_component_event_prop$excl$16.$$arity = 1), nil) && 'merge_component_event_prop!';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/component/native_library"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$each', '$lookup_native_name', '$create_component_wrapper', '$create_library_wrapper', '$raise', '$name', '$scope_native_name', '$+', '$downcase', '$[]', '$import_const_from_native', '$const_defined?', '$const_get', '$render', '$to_proc', '$private', '$native_react_component?', '$const_set', '$imports', '$new', '$class_eval', '$include']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NativeLibrary');

        var $nesting = [self].concat($parent_nesting);

        
        (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $imports$1, $rename$2, $import_const_from_native$4, $const_missing$5, $method_missing$6, $lookup_native_name$7, $scope_native_name$8, $create_component_wrapper$9, $create_library_wrapper$11;

          
          
          Opal.def(self, '$imports', $imports$1 = function $$imports(native_name) {
            var self = this;

            
            self.__hyperstack_component_native_prefix = "" + (native_name) + ".";
            return self;
          }, $imports$1.$$arity = 1);
          
          Opal.def(self, '$rename', $rename$2 = function $$rename(rename_list) {
            var $$3, self = this;

            return $send(rename_list, 'each', [], ($$3 = function(js_name, ruby_name){var self = $$3.$$s == null ? this : $$3.$$s, native_name = nil, $ret_or_1 = nil;

              
              
              if (js_name == null) {
                js_name = nil;
              };
              
              if (ruby_name == null) {
                ruby_name = nil;
              };
              native_name = self.$lookup_native_name(js_name);
              if ($truthy(self.$lookup_native_name(js_name))) {
                if ($truthy(($ret_or_1 = self.$create_component_wrapper(self, native_name, ruby_name)))) {
                  return $ret_or_1
                } else {
                  return self.$create_library_wrapper(self, native_name, ruby_name)
                }
              } else {
                return self.$raise("" + ("" + "class " + (self.$name()) + " < Hyperstack::Component::NativeLibrary could not import " + (js_name) + ". ") + ("" + "Native value " + (self.$scope_native_name(js_name)) + " is undefined."))
              };}, $$3.$$s = self, $$3.$$arity = 2, $$3))
          }, $rename$2.$$arity = 1);
          
          Opal.def(self, '$import_const_from_native', $import_const_from_native$4 = function $$import_const_from_native(klass, const_name, create_library) {
            var self = this, native_name = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil;

            
            native_name = (function() {if ($truthy(($ret_or_2 = self.$lookup_native_name(const_name)))) {
              return $ret_or_2
            } else {
              return self.$lookup_native_name($rb_plus(const_name['$[]'](0).$downcase(), const_name['$[]']($range(1, -1, false))))
            }; return nil; })();
            if ($truthy(($ret_or_3 = native_name))) {
              
              if ($truthy(($ret_or_4 = self.$create_component_wrapper(klass, native_name, const_name)))) {
                return $ret_or_4
              } else {
                
                if ($truthy(($ret_or_5 = create_library))) {
                  return self.$create_library_wrapper(klass, native_name, const_name)
                } else {
                  return $ret_or_5
                };
              };
            } else {
              return $ret_or_3
            };
          }, $import_const_from_native$4.$$arity = 3);
          
          Opal.def(self, '$const_missing', $const_missing$5 = function $$const_missing(const_name) {
            var $iter = $const_missing$5.$$p, $yield = $iter || nil, self = this, $ret_or_6 = nil;

            if ($iter) $const_missing$5.$$p = null;
            if ($truthy(($ret_or_6 = self.$import_const_from_native(self, const_name, true)))) {
              return $ret_or_6
            } else {
              return $send2(self, $find_super(self, 'const_missing', $const_missing$5, false, true), 'const_missing', [const_name], $iter)
            }
          }, $const_missing$5.$$arity = 1);
          
          Opal.def(self, '$method_missing', $method_missing$6 = function $$method_missing(method, $a) {
            var $iter = $method_missing$6.$$p, block = $iter || nil, $post_args, args, self = this, component_class = nil, $ret_or_7 = nil;

            if ($iter) $method_missing$6.$$p = null;
            
            
            if ($iter) $method_missing$6.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            if ($truthy(self['$const_defined?'](method, false))) {
              component_class = self.$const_get(method)};
            component_class = (function() {if ($truthy(($ret_or_7 = component_class))) {
              return $ret_or_7
            } else {
              return self.$import_const_from_native(self, method, false)
            }; return nil; })();
            if ($truthy(component_class)) {
            } else {
              self.$raise("" + "could not import a react component named: " + ("" + (self.$scope_native_name(method))))
            };
            return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [component_class].concat(Opal.to_a(args)), block.$to_proc());
          }, $method_missing$6.$$arity = -2);
          self.$private();
          
          Opal.def(self, '$lookup_native_name', $lookup_native_name$7 = function $$lookup_native_name(js_name) {
            var self = this, native_name = nil;

            try {
              
              native_name = self.$scope_native_name(js_name);
              return eval(native_name) !== undefined && native_name;
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
                try {
                  return nil
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            }
          }, $lookup_native_name$7.$$arity = 1);
          
          Opal.def(self, '$scope_native_name', $scope_native_name$8 = function $$scope_native_name(js_name) {
            var self = this;
            if (self.__hyperstack_component_native_prefix == null) self.__hyperstack_component_native_prefix = nil;

            return "" + (self.__hyperstack_component_native_prefix) + (js_name)
          }, $scope_native_name$8.$$arity = 1);
          
          Opal.def(self, '$create_component_wrapper', $create_component_wrapper$9 = function $$create_component_wrapper(klass, native_name, ruby_name) {
            var $$10, self = this, new_klass = nil;

            if ($truthy($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper')['$native_react_component?'](native_name))) {
              
              new_klass = klass.$const_set(ruby_name, $$($nesting, 'Class').$new($$($nesting, 'NativeLibrary')).$imports(native_name));
              $send(new_klass, 'class_eval', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

                
                self.$include($$($nesting, 'Component'));
                return self.$imports(native_name);}, $$10.$$s = self, $$10.$$arity = 0, $$10));
              return new_klass;
            } else {
              return nil
            }
          }, $create_component_wrapper$9.$$arity = 3);
          return (Opal.def(self, '$create_library_wrapper', $create_library_wrapper$11 = function $$create_library_wrapper(klass, native_name, ruby_name) {
            var self = this;

            return klass.$const_set(ruby_name, $$($nesting, 'Class').$new($$($nesting, 'NativeLibrary')).$imports(native_name))
          }, $create_library_wrapper$11.$$arity = 3), nil) && 'create_library_wrapper';
        })(Opal.get_singleton_class(self), $nesting);
        return self.$imports("NativeLibrary");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/react_wrapper"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $hash2 = Opal.hash2, $send = Opal.send, $class_variable_get = Opal.class_variable_get, $truthy = Opal.truthy, $lambda = Opal.lambda, $range = Opal.range;

  Opal.add_stubs(['$require', '$instance_variable_set', '$[]=', '$-', '$raise', '$stateless?', '$eval_native_react_component', '$add_after_error_hook_to_native', '$[]', '$!', '$method_defined?', '$respond_to?', '$native_mixins', '$to_n', '$static_call_backs', '$new', '$name', '$default_props', '$prop_types', '$callbacks?', '$<<', '$is_a?', '$create_native_react_class', '$include?', '$_update_ref', '$convert_props', '$shallow_to_n', '$flatten', '$call', '$each', '$split', '$==', '$merge', '$lower_camelize', '$join', '$to_key', '$ignore_mutations', '$const_defined?', '$gsub', '$html_attr?', '$private', '$first', '$concat', '$map', '$+', '$upcase']);
  
  self.$require("hyperstack/component/native_library");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ReactWrapper');

          var $nesting = [self].concat($parent_nesting), $ReactWrapper_stateless$ques$1, $ReactWrapper_import_native_component$2, $ReactWrapper_eval_native_react_component$3, $ReactWrapper_native_react_component$ques$4, $ReactWrapper_add_after_error_hook$5, $ReactWrapper_add_after_error_hook_to_native$6, $ReactWrapper_create_native_react_class$7, $ReactWrapper_create_element$8, $ReactWrapper_clear_component_class_cache$10, $ReactWrapper_convert_props$11, $ReactWrapper_lower_camelize$22;

          
          $class_variable_set($nesting[0], '@@component_classes', $hash2([], {}));
          Opal.defs(self, '$stateless?', $ReactWrapper_stateless$ques$1 = function(ncc) {
            var self = this;

            return typeof ncc === 'symbol' || (typeof ncc === 'function' && !(ncc.prototype && ncc.prototype.isReactComponent))
          }, $ReactWrapper_stateless$ques$1.$$arity = 1);
          Opal.defs(self, '$import_native_component', $ReactWrapper_import_native_component$2 = function $$import_native_component(opal_class, native_class) {
            var self = this, $writer = nil;

            
            opal_class.$instance_variable_set("@native_import", true);
            
            $writer = [opal_class, native_class];
            $send($class_variable_get($nesting[0], '@@component_classes', false), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, $ReactWrapper_import_native_component$2.$$arity = 2);
          Opal.defs(self, '$eval_native_react_component', $ReactWrapper_eval_native_react_component$3 = function $$eval_native_react_component(name) {
            var self = this, component = nil, is_component_class = nil, $ret_or_1 = nil, $ret_or_2 = nil, has_render_method = nil, $ret_or_3 = nil, $ret_or_4 = nil;

            
            component = eval(name);
            if ($truthy(component === undefined)) {
              self.$raise("" + (name) + " is not defined")};
            if ($truthy(component.__esModule)) {
              component = component.default};
            is_component_class = (function() {if ($truthy(($ret_or_1 = component.prototype !== undefined))) {
              
              if ($truthy(($ret_or_2 = !!component.prototype.isReactComponent))) {
                return $ret_or_2
              } else {
                return !!component.prototype.render
              };
            } else {
              return $ret_or_1
            }; return nil; })();
            has_render_method = typeof component.render === "function";
            if ($truthy((function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = is_component_class))) {
              return $ret_or_4
            } else {
              return self['$stateless?'](component)
            }; return nil; })()))) {
              return $ret_or_3
            } else {
              return has_render_method
            }; return nil; })())) {
            } else {
              self.$raise("does not appear to be a native react component")
            };
            return component;
          }, $ReactWrapper_eval_native_react_component$3.$$arity = 1);
          Opal.defs(self, '$native_react_component?', $ReactWrapper_native_react_component$ques$4 = function(name) {
            var self = this;

            
            
            if (name == null) {
              name = nil;
            };
            try {
              
              if ($truthy(name)) {
              } else {
                return false
              };
              self.$eval_native_react_component(name);
              return true;
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
                try {
                  return false
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            };
          }, $ReactWrapper_native_react_component$ques$4.$$arity = -1);
          Opal.defs(self, '$add_after_error_hook', $ReactWrapper_add_after_error_hook$5 = function $$add_after_error_hook(klass) {
            var self = this;

            return self.$add_after_error_hook_to_native($class_variable_get($nesting[0], '@@component_classes', false)['$[]'](klass))
          }, $ReactWrapper_add_after_error_hook$5.$$arity = 1);
          Opal.defs(self, '$add_after_error_hook_to_native', $ReactWrapper_add_after_error_hook_to_native$6 = function $$add_after_error_hook_to_native(native_comp) {
            var self = this;

            
            if ($truthy(native_comp)) {
            } else {
              return nil
            };
            
            native_comp.prototype.componentDidCatch = function(error, info) {
              this.__opalInstanceSyncSetState = false;
              this.__opalInstance.$component_did_catch(error, Opal.Hash.$new(info));
            }
          ;
          }, $ReactWrapper_add_after_error_hook_to_native$6.$$arity = 1);
          Opal.defs(self, '$create_native_react_class', $ReactWrapper_create_native_react_class$7 = function $$create_native_react_class(type) {
            var self = this, old_school = nil, render_fn = nil, $ret_or_5 = nil, $writer = nil, comp = nil, $ret_or_6 = nil;

            
            if ($truthy(typeof(createReactClass)=='undefined')) {
              self.$raise("createReactClass is undefined. Add the 'react-create-class' npm module, and import it as 'createReactClass'")};
            if ($truthy(type['$method_defined?']("render")['$!']())) {
              self.$raise("Provided class should define `render` method")};
            old_school = type['$method_defined?']("_render_wrapper")['$!']();
            render_fn = (function() {if ($truthy(old_school)) {
              return "render"
            } else {
              return "_render_wrapper"
            }; return nil; })();
            if ($truthy(($ret_or_5 = $class_variable_get($nesting[0], '@@component_classes', false)['$[]'](type)))) {
              return $ret_or_5
            } else {
              
              $writer = [type, ((comp = 
              createReactClass({
                getInitialState: function() {
                  this.mixins = (function() {if ($truthy(type['$respond_to?']("native_mixins"))) {
                return type.$native_mixins()
              } else {
                return [];
              }; return nil; })();
                  this.statics = (function() {if ($truthy(type['$respond_to?']("static_call_backs"))) {
                return type.$static_call_backs().$to_n()
              } else {
                return {};
              }; return nil; })();
                  this.__opalInstanceInitializedState = false;
                  this.__opalInstanceSyncSetState = true;
                  this.__opalInstance = type.$new(this);
                  this.__opalInstanceInitializedState = true;
                  this.__opalInstanceSyncSetState = false;
                  this.__name = type.$name();
                  return {}
                },
                displayName: type.$name(),
                getDefaultProps: function() {
                  return (function() {if ($truthy(type['$respond_to?']("default_props"))) {
                return type.$default_props().$to_n()
              } else {
                return {};
              }; return nil; })();
                },
                propTypes: (function() {if ($truthy(type['$respond_to?']("prop_types"))) {
                return type.$prop_types().$to_n()
              } else {
                return {};
              }; return nil; })(),
                componentWillMount: old_school && function() {
                  if (type['$method_defined?']("component_will_mount")) {
                    this.__opalInstanceSyncSetState = true;
                    this.__opalInstance.$component_will_mount();
                    this.__opalInstanceSyncSetState = false;
                  }
                },
                componentDidMount: function() {
                  this.__opalInstance.__hyperstack_component_is_mounted = true
                  if (type['$method_defined?']("component_did_mount")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_did_mount();
                  }
                },
                UNSAFE_componentWillReceiveProps: function(next_props) {
                  if (type['$method_defined?']("component_will_receive_props")) {
                    this.__opalInstanceSyncSetState = true;
                    this.__opalInstance.$component_will_receive_props(Opal.Hash.$new(next_props));
                    this.__opalInstanceSyncSetState = false;
                  }
                },
                shouldComponentUpdate: function(next_props, next_state) {
                  if (type['$method_defined?']("should_component_update?")) {
                    this.__opalInstanceSyncSetState = false;
                    return this.__opalInstance["$should_component_update?"](Opal.Hash.$new(next_props), Opal.Hash.$new(next_state));
                  } else { return true; }
                },
                UNSAFE_componentWillUpdate: function(next_props, next_state) {
                  if (type['$method_defined?']("component_will_update")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_will_update(Opal.Hash.$new(next_props), Opal.Hash.$new(next_state));
                  }
                },
                componentDidUpdate: function(prev_props, prev_state) {
                  if (type['$method_defined?']("component_did_update")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_did_update(Opal.Hash.$new(prev_props), Opal.Hash.$new(prev_state));
                  }
                },
                componentWillUnmount: function() {
                  if (type['$method_defined?']("component_will_unmount")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_will_unmount();
                  }
                  this.__opalInstance.__hyperstack_component_is_mounted = false;
                },
                render: function() {
                  this.__opalInstanceSyncSetState = false;
                  return this.__opalInstance.$send(render_fn).$to_n();
                }
              })
            ), (function() {if ($truthy((function() {if ($truthy(($ret_or_6 = type['$respond_to?']("callbacks?")))) {
                return type['$callbacks?']("after_error")
              } else {
                return $ret_or_6
              }; return nil; })())) {
                return self.$add_after_error_hook_to_native(comp)
              } else {
                return nil
              }; return nil; })(), comp)];
              $send($class_variable_get($nesting[0], '@@component_classes', false), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            };
          }, $ReactWrapper_create_native_react_class$7.$$arity = 1);
          Opal.defs(self, '$create_element', $ReactWrapper_create_element$8 = function $$create_element(type, $a) {
            var $iter = $ReactWrapper_create_element$8.$$p, block = $iter || nil, $post_args, args, $$9, self = this, params = nil, ncc = nil, $ret_or_7 = nil, ele = nil, ref = nil, properties = nil, a = nil;

            if ($iter) $ReactWrapper_create_element$8.$$p = null;
            
            
            if ($iter) $ReactWrapper_create_element$8.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            params = [];
            ncc = $class_variable_get($nesting[0], '@@component_classes', false)['$[]'](type);
            if ($truthy(ncc)) {
              params['$<<'](ncc)
            } else if ($truthy(type['$is_a?']($$($nesting, 'Class')))) {
              params['$<<'](self.$create_native_react_class(type))
            } else if ($truthy((function() {if ($truthy(($ret_or_7 = (block !== nil)))) {
              return $ret_or_7
            } else {
              return $$$($$($nesting, 'Tags'), 'HTML_TAGS')['$include?'](type)
            }; return nil; })())) {
              params['$<<'](type)
            } else if ($truthy(type['$is_a?']($$($nesting, 'String')))) {
              return $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element').$new(type)
            } else {
              self.$raise("" + (type) + " not implemented")
            };
            ele = nil;
            if ($truthy(self['$stateless?'](ncc))) {
            } else {
              ref = $lambda(($$9 = function(ref){var self = $$9.$$s == null ? this : $$9.$$s;

                
                
                if (ref == null) {
                  ref = nil;
                };
                return ele.$_update_ref(ref);}, $$9.$$s = self, $$9.$$arity = 1, $$9))
            };
            properties = $send(self, 'convert_props', [type, $hash2(["ref"], {"ref": ref})].concat(Opal.to_a(args)));
            params['$<<'](properties.$shallow_to_n());
            if ($truthy(block)) {
              
              a = [block.$call()].$flatten();
              
              for(var i=0, l=a.length; i<l; i++) {
                params.push(a[i].$to_n());
              }
            ;};
            return (ele = $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element').$new(React.createElement.apply(null, params), type, properties, block));
          }, $ReactWrapper_create_element$8.$$arity = -2);
          Opal.defs(self, '$clear_component_class_cache', $ReactWrapper_clear_component_class_cache$10 = function $$clear_component_class_cache() {
            var self = this;

            return $class_variable_set($nesting[0], '@@component_classes', $hash2([], {}))
          }, $ReactWrapper_clear_component_class_cache$10.$$arity = 0);
          Opal.defs(self, '$convert_props', $ReactWrapper_convert_props$11 = function $$convert_props(type, $a) {
            var $post_args, args, $$12, $$14, self = this, properties = nil, props = nil;

            
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            properties = $hash2([], {});
            $send(args, 'each', [], ($$12 = function(arg){var self = $$12.$$s == null ? this : $$12.$$s, $$13, $writer = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              if ($truthy(arg['$is_a?']($$($nesting, 'String')))) {
                
                $writer = [arg, true];
                $send(properties, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(arg['$is_a?']($$($nesting, 'Hash')))) {
                return $send(arg, 'each', [], ($$13 = function(key, value){var self = $$13.$$s == null ? this : $$13.$$s, $ret_or_8 = nil, $ret_or_9 = nil, $ret_or_10 = nil;

                  
                  
                  if (key == null) {
                    key = nil;
                  };
                  
                  if (value == null) {
                    value = nil;
                  };
                  if ($truthy(["class", "className", "class_name"]['$include?'](key))) {
                    
                    if ($truthy(value)) {
                    } else {
                      return nil;
                    };
                    if ($truthy(value['$is_a?']($$($nesting, 'String')))) {
                      value = value.$split(" ")
                    } else if ($truthy(value['$is_a?']($$($nesting, 'Array'))['$!']())) {
                      self.$raise("The class param must be a string or array of strings")};
                    
                    $writer = ["className", [].concat(Opal.to_a(properties['$[]']("className"))).concat(Opal.to_a(value))];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;
                  } else if (key['$==']("style")) {
                    
                    if ($truthy(value)) {
                    } else {
                      return nil;
                    };
                    if ($truthy(value['$is_a?']($$($nesting, 'Hash'))['$!']())) {
                      self.$raise("The style param must be a Hash")};
                    
                    $writer = ["style", (function() {if ($truthy(($ret_or_8 = properties['$[]']("style")))) {
                      return $ret_or_8
                    } else {
                      return $hash2([], {})
                    }; return nil; })().$merge(value)];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;
                  } else if ($truthy((function() {if ($truthy(($ret_or_9 = $$$($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'ReactAPI'), 'HASH_ATTRIBUTES')['$include?'](key)))) {
                    return value['$is_a?']($$($nesting, 'Hash'))
                  } else {
                    return $ret_or_9
                  }; return nil; })())) {
                    
                    $writer = [key, (function() {if ($truthy(($ret_or_10 = properties['$[]'](key)))) {
                      return $ret_or_10
                    } else {
                      return $hash2([], {})
                    }; return nil; })().$merge(value)];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    
                    $writer = [key, value];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                  };}, $$13.$$s = self, $$13.$$arity = 2, $$13))
              } else {
                return nil
              };}, $$12.$$s = self, $$12.$$arity = 1, $$12));
            props = $hash2([], {});
            $send(properties, 'each', [], ($$14 = function(key, value){var self = $$14.$$s == null ? this : $$14.$$s, $$15, $$16, $$17, $$18, $$19, $$20, $$21, $writer = nil, fn = nil, $ret_or_11 = nil;

              
              
              if (key == null) {
                key = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              if ($truthy(["style", "dangerously_set_inner_HTML"]['$include?'](key))) {
                
                $writer = [self.$lower_camelize(key), value.$to_n()];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("className")) {
                
                $writer = [key, value.$join(" ")];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("key")) {
                
                $writer = ["key", value.$to_key()];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("init")) {
                
                if ($truthy(["select", "textarea"]['$include?'](type))) {
                  key = "defaultValue"
                } else if (type['$==']("input")) {
                  key = (function() {if ($truthy(["radio", "checkbox"]['$include?'](properties['$[]']("type")))) {
                    return "defaultChecked"
                  } else {
                    return "defaultValue"
                  }; return nil; })()};
                
                $writer = [key, value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if (key['$==']("ref")) {
                
                if ($truthy(value)) {
                } else {
                  return nil;
                };
                if ($truthy(value['$respond_to?']("call"))) {
                } else {
                  self.$raise("" + "The ref and dom params must be given a Proc.\n" + "If you want to capture the ref in an instance variable use the `set` method.\n" + "For example `ref: set(:TheRef)` will capture assign the ref to `@TheRef`\n")
                };
                if ($truthy(value.__hyperstack_component_ref_is_already_wrapped)) {
                } else {
                  
                  fn = value;
                  value = 
                          function(dom_node){
                            if (dom_node !== null && dom_node.__opalInstance !== undefined && dom_node.__opalInstance !== null) {
                              $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s;

                    return fn.$call(dom_node.__opalInstance)}, $$15.$$s = self, $$15.$$arity = 0, $$15));
                            } else if(dom_node !== null && ReactDOM.findDOMNode !== undefined && dom_node.nodeType === undefined) {
                              $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s;

                    return fn.$call(ReactDOM.findDOMNode(dom_node))}, $$16.$$s = self, $$16.$$arity = 0, $$16));
                            } else if(dom_node !== null){
                              $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$17 = function(){var self = $$17.$$s == null ? this : $$17.$$s;

                    return fn.$call(dom_node)}, $$17.$$s = self, $$17.$$arity = 0, $$17));
                            }
                          }
                        ;
                  value.__hyperstack_component_ref_is_already_wrapped = true;
                };
                
                $writer = [key, value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if (key['$==']("jq_ref")) {
                
                if ($truthy(value['$respond_to?']("call"))) {
                } else {
                  self.$raise("" + "The ref and dom params must be given a Proc.\n" + "If you want to capture the dom node in an instance variable use the `set` method.\n" + "For example `dom: set(:DomNode)` will assign the dom node to `@DomNode`\n")
                };
                if ($truthy($$($nesting, 'Module')['$const_defined?']("Element"))) {
                } else {
                  self.$raise("" + "You must include 'hyperstack/component/jquery' " + "in your manifest to use the `dom` reference key.\n" + "For example if using rails include " + "`config.import 'hyperstack/component/jquery', client_only: true`" + "in your config/initializer/hyperstack.rb file")
                };
                
                $writer = ["ref", 
                              function(dom_node){
                                if (dom_node !== null && dom_node.__opalInstance !== undefined && dom_node.__opalInstance !== null) {
                                  $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$18 = function(){var self = $$18.$$s == null ? this : $$18.$$s;

                  return value.$call($$$('::', 'Element')['$[]'](dom_node.__opalInstance))}, $$18.$$s = self, $$18.$$arity = 0, $$18));
                                } else if(dom_node !== null && ReactDOM.findDOMNode !== undefined && dom_node.nodeType === undefined) {
                                  $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$19 = function(){var self = $$19.$$s == null ? this : $$19.$$s;

                  return value.$call($$$('::', 'Element')['$[]'](ReactDOM.findDOMNode(dom_node)))}, $$19.$$s = self, $$19.$$arity = 0, $$19));
                                } else if(dom_node !== null) {
                                  $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s;

                  return value.$call($$$('::', 'Element')['$[]'](dom_node))}, $$20.$$s = self, $$20.$$arity = 0, $$20));
                                }
                              }
                            ];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if ($truthy((function() {if ($truthy(($ret_or_11 = $$$($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'ReactAPI'), 'HASH_ATTRIBUTES')['$include?'](key)))) {
                return value['$is_a?']($$($nesting, 'Hash'))
              } else {
                return $ret_or_11
              }; return nil; })())) {
                return $send(value, 'each', [], ($$21 = function(k, v){var self = $$21.$$s == null ? this : $$21.$$s;

                  
                  
                  if (k == null) {
                    k = nil;
                  };
                  
                  if (v == null) {
                    v = nil;
                  };
                  $writer = ["" + (key) + "-" + (k.$gsub(/__|_/, $hash2(["__", "_"], {"__": "_", "_": "-"}))), v.$to_n()];
                  $send(props, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, $$21.$$s = self, $$21.$$arity = 2, $$21))
              } else {
                
                $writer = [(function() {if ($truthy($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'ReactAPI')['$html_attr?'](self.$lower_camelize(key)))) {
                  return self.$lower_camelize(key)
                } else {
                  return key
                }; return nil; })(), value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              };}, $$14.$$s = self, $$14.$$arity = 2, $$14));
            return props;
          }, $ReactWrapper_convert_props$11.$$arity = -2);
          self.$private();
          return (Opal.defs(self, '$lower_camelize', $ReactWrapper_lower_camelize$22 = function $$lower_camelize(snake_cased_word) {
            var $$23, self = this, words = nil, result = nil;

            
            words = snake_cased_word.$split("_");
            result = [words.$first()];
            return result.$concat($send(words['$[]']($range(1, -1, false)), 'map', [], ($$23 = function(word){var self = $$23.$$s == null ? this : $$23.$$s;

              
              
              if (word == null) {
                word = nil;
              };
              return $rb_plus(word['$[]'](0).$upcase(), word['$[]']($range(1, -1, false)));}, $$23.$$s = self, $$23.$$arity = 1, $$23))).$join("");
          }, $ReactWrapper_lower_camelize$22.$$arity = 1), nil) && 'lower_camelize';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/ext/component/hash"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_shallow_to_n$1;

    return (Opal.def(self, '$shallow_to_n', $Hash_shallow_to_n$1 = function $$shallow_to_n() {
      var $$2, self = this, hash = nil;

      
      hash = {};
      $send(self, 'each', [], ($$2 = function(key, value){var self = $$2.$$s == null ? this : $$2.$$s;

        
        
        if (key == null) {
          key = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return hash[key] = value;}, $$2.$$s = self, $$2.$$arity = 2, $$2));
      return hash;
    }, $Hash_shallow_to_n$1.$$arity = 0), nil) && 'shallow_to_n'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/internal/component/rendering_context"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var $$27, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias;

  Opal.add_stubs(['$attr_accessor', '$waiting_on_resources', '$raise_if_not_quiet?', '$raise', '$new', '$<<', '$!', '$remove_nodes_from_args', '$build', '$waiting_on_resources=', '$-', '$run_child_block', '$to_proc', '$dup', '$tap', '$create_element', '$detect', '$respond_to?', '$is_a?', '$last', '$collect', '$render', '$to_s', '$>', '$length', '$first', '$delete', '$include?', '$index', '$[]=', '$[]', '$each', '$check_for_component_return', '$dummy_value?', '$==', '$empty?', '$pushable_string?', '$try', '$log', '$loading?', '$define_method', '$unshift', '$hyper_component?', '$send']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'RenderingContext');

          var $nesting = [self].concat($parent_nesting);

          
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'NotQuiet');

            var $nesting = [self].concat($parent_nesting);

            return nil
          })($nesting[0], $$($nesting, 'Exception'), $nesting);
          return (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting), $raise_if_not_quiet$ques$1, $raise_if_not_quiet$eq$2, $quiet_test$3, $render_string$4, $render$5, $build$13, $delete$14, $rendered$ques$15, $replace$16, $remove_nodes_from_args$17, $run_child_block$19, $check_for_component_return$21, $dummy_value$ques$22, $pushable_string$ques$23, $improper_render$24;

            
            self.$attr_accessor("waiting_on_resources");
            
            Opal.def(self, '$raise_if_not_quiet?', $raise_if_not_quiet$ques$1 = function() {
              var self = this;
              if (self.raise_if_not_quiet == null) self.raise_if_not_quiet = nil;

              return self.raise_if_not_quiet
            }, $raise_if_not_quiet$ques$1.$$arity = 0);
            
            Opal.def(self, '$raise_if_not_quiet=', $raise_if_not_quiet$eq$2 = function(x) {
              var self = this;

              return (self.raise_if_not_quiet = x)
            }, $raise_if_not_quiet$eq$2.$$arity = 1);
            
            Opal.def(self, '$quiet_test', $quiet_test$3 = function $$quiet_test(component) {
              var self = this, $ret_or_1 = nil;

              
              if ($truthy((function() {if ($truthy(($ret_or_1 = component.$waiting_on_resources()))) {
                return self['$raise_if_not_quiet?']()
              } else {
                return $ret_or_1
              }; return nil; })())) {
              } else {
                return nil
              };
              return self.$raise($$($nesting, 'NotQuiet').$new("" + (component) + " is waiting on resources"));
            }, $quiet_test$3.$$arity = 1);
            
            Opal.def(self, '$render_string', $render_string$4 = function $$render_string(string) {
              var self = this, $ret_or_2 = nil;
              if (self.buffer == null) self.buffer = nil;

              
              self.buffer = (function() {if ($truthy(($ret_or_2 = self.buffer))) {
                return $ret_or_2
              } else {
                return []
              }; return nil; })();
              return self.buffer['$<<'](string);
            }, $render_string$4.$$arity = 1);
            
            Opal.def(self, '$render', $render$5 = function $$render(name, $a) {
              var $iter = $render$5.$$p, block = $iter || nil, $post_args, args, $$6, self = this, was_outer_most = nil, $ret_or_3 = nil, element = nil, $writer = nil;
              if (self.not_outer_most == null) self.not_outer_most = nil;
              if (self.buffer == null) self.buffer = nil;

              if ($iter) $render$5.$$p = null;
              
              
              if ($iter) $render$5.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 1, arguments.length);
              
              args = $post_args;;
              return (function() { try {
              
              was_outer_most = self.not_outer_most['$!']();
              self.not_outer_most = true;
              self.$remove_nodes_from_args(args);
              self.buffer = (function() {if ($truthy(($ret_or_3 = self.buffer))) {
                return $ret_or_3
              } else {
                return []
              }; return nil; })();
              if ($truthy(block)) {
                element = $send(self, 'build', [], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s, $$7, $$8, $$10, saved_waiting_on_resources = nil, $writer = nil, buffer = nil;
                  if (self.buffer == null) self.buffer = nil;

                  
                  saved_waiting_on_resources = nil;
                  
                  $writer = [nil];
                  $send(self, 'waiting_on_resources=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  $send(self, 'run_child_block', [], block.$to_proc());
                  if ($truthy(name)) {
                    
                    buffer = self.buffer.$dup();
                    return $send($send($$($nesting, 'ReactWrapper'), 'create_element', [name].concat(Opal.to_a(args)), ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s;

                      return buffer}, $$7.$$s = self, $$7.$$arity = 0, $$7)), 'tap', [], ($$8 = function(element){var self = $$8.$$s == null ? this : $$8.$$s, $$9, $ret_or_4 = nil, $ret_or_5 = nil;

                      
                      
                      if (element == null) {
                        element = nil;
                      };
                      
                      $writer = [(function() {if ($truthy(($ret_or_4 = saved_waiting_on_resources))) {
                        return $ret_or_4
                      } else {
                        return $send(buffer, 'detect', [], ($$9 = function(e){var self = $$9.$$s == null ? this : $$9.$$s;

                          
                          
                          if (e == null) {
                            e = nil;
                          };
                          if ($truthy(e['$respond_to?']("waiting_on_resources"))) {
                            return e.$waiting_on_resources()
                          } else {
                            return nil
                          };}, $$9.$$s = self, $$9.$$arity = 1, $$9))['$!']()['$!']()
                      }; return nil; })()];
                      $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      if ($truthy(buffer.$last()['$is_a?']($$($nesting, 'String')))) {
                        if ($truthy(($ret_or_5 = element.$waiting_on_resources()))) {
                          return $ret_or_5
                        } else {
                          
                          $writer = [self.$waiting_on_resources()];
                          $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                          return $writer[$rb_minus($writer["length"], 1)];
                        }
                      } else {
                        return nil
                      };}, $$8.$$s = self, $$8.$$arity = 1, $$8));
                  } else {
                    
                    buffer = $send(self.buffer, 'collect', [], ($$10 = function(item){var self = $$10.$$s == null ? this : $$10.$$s, $$11, $$12, $ret_or_6 = nil;

                      
                      
                      if (item == null) {
                        item = nil;
                      };
                      if ($truthy(item['$is_a?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                        
                        if ($truthy(($ret_or_6 = item.$waiting_on_resources()))) {
                          $ret_or_6
                        } else {
                          
                          $writer = [saved_waiting_on_resources];
                          $send(item, 'waiting_on_resources=', Opal.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                        };
                        return item;
                      } else {
                        return $send($send($$($nesting, 'RenderingContext'), 'render', ["span"], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s;

                          return item.$to_s()}, $$11.$$s = self, $$11.$$arity = 0, $$11)), 'tap', [], ($$12 = function(element){var self = $$12.$$s == null ? this : $$12.$$s;

                          
                          
                          if (element == null) {
                            element = nil;
                          };
                          $writer = [saved_waiting_on_resources];
                          $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                          return $writer[$rb_minus($writer["length"], 1)];}, $$12.$$s = self, $$12.$$arity = 1, $$12))
                      };}, $$10.$$s = self, $$10.$$arity = 1, $$10));
                    if ($truthy($rb_gt(buffer.$length(), 1))) {
                      return buffer
                    } else {
                      return buffer.$first()
                    };
                  };}, $$6.$$s = self, $$6.$$arity = 0, $$6))
              } else if ($truthy(name['$is_a?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                element = name
              } else {
                
                element = $send($$($nesting, 'ReactWrapper'), 'create_element', [name].concat(Opal.to_a(args)));
                
                $writer = [self.$waiting_on_resources()];
                $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
              };
              self.buffer['$<<'](element);
              
              $writer = [nil];
              $send(self, 'waiting_on_resources=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return element;
              } finally {
                (function() {if ($truthy(was_outer_most)) {
                  return (self.not_outer_most = (self.buffer = nil))
                } else {
                  return nil
                }; return nil; })()
              }; })();
            }, $render$5.$$arity = -2);
            
            Opal.def(self, '$build', $build$13 = function $$build() {
              var $iter = $build$13.$$p, $yield = $iter || nil, self = this, current = nil, return_val = nil;
              if (self.buffer == null) self.buffer = nil;

              if ($iter) $build$13.$$p = null;
              
              current = self.buffer;
              self.buffer = [];
              return_val = Opal.yield1($yield, self.buffer);
              self.buffer = current;
              return return_val;
            }, $build$13.$$arity = 0);
            
            Opal.def(self, '$delete', $delete$14 = function(element) {
              var self = this;
              if (self.buffer == null) self.buffer = nil;

              
              self.buffer.$delete(element);
              self.last_deleted = element;
              return element;
            }, $delete$14.$$arity = 1);
            $alias(self, "as_node", "delete");
            
            Opal.def(self, '$rendered?', $rendered$ques$15 = function(element) {
              var self = this;
              if (self.buffer == null) self.buffer = nil;

              return self.buffer['$include?'](element)
            }, $rendered$ques$15.$$arity = 1);
            
            Opal.def(self, '$replace', $replace$16 = function $$replace(e1, e2) {
              var self = this, $writer = nil;
              if (self.buffer == null) self.buffer = nil;

              
              $writer = [self.buffer.$index(e1), e2];
              $send(self.buffer, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, $replace$16.$$arity = 2);
            
            Opal.def(self, '$remove_nodes_from_args', $remove_nodes_from_args$17 = function $$remove_nodes_from_args(args) {
              var $$18, self = this, $ret_or_7 = nil;

              if ($truthy((function() {if ($truthy(($ret_or_7 = args['$[]'](0)))) {
                return args['$[]'](0)['$is_a?']($$($nesting, 'Hash'))
              } else {
                return $ret_or_7
              }; return nil; })())) {
                return $send(args['$[]'](0), 'each', [], ($$18 = function(key, value){var self = $$18.$$s == null ? this : $$18.$$s;

                  
                  
                  if (key == null) {
                    key = nil;
                  };
                  
                  if (value == null) {
                    value = nil;
                  };
                  try {
                    if ($truthy(value['$is_a?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                      return value.$delete()
                    } else {
                      return nil
                    }
                  } catch ($err) {
                    if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
                      try {
                        return nil
                      } finally { Opal.pop_exception(); }
                    } else { throw $err; }
                  };}, $$18.$$s = self, $$18.$$arity = 2, $$18))
              } else {
                return nil
              }
            }, $remove_nodes_from_args$17.$$arity = 1);
            
            Opal.def(self, '$run_child_block', $run_child_block$19 = function $$run_child_block() {
              var $$20, $iter = $run_child_block$19.$$p, $yield = $iter || nil, self = this, result = nil;
              if (self.last_deleted == null) self.last_deleted = nil;
              if (self.buffer == null) self.buffer = nil;

              if ($iter) $run_child_block$19.$$p = null;
              
              result = Opal.yieldX($yield, []);
              self.$check_for_component_return(result);
              if ($truthy(self['$dummy_value?'](result))) {
                $send($$($nesting, 'RenderingContext'), 'render', ["span"], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s;

                  return result.$to_s()}, $$20.$$s = self, $$20.$$arity = 0, $$20))
              } else if ($truthy(result['$is_a?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                if (self.last_deleted['$=='](result)) {
                } else if ($truthy(self.buffer['$empty?']())) {
                  self.buffer['$<<'](result)}
              } else if ($truthy(self['$pushable_string?'](result))) {
                self.buffer['$<<'](result.$to_s())};
              return (self.last_deleted = nil);
            }, $run_child_block$19.$$arity = 0);
            
            Opal.def(self, '$check_for_component_return', $check_for_component_return$21 = function $$check_for_component_return(result) {
              var self = this;

              
              if ($truthy(result.$try("hyper_component?"))) {
              } else {
                return nil
              };
              return $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers').$log("" + "a component's render method returned the component class " + (result) + ", did you mean to say " + (result) + "()", "warning");
            }, $check_for_component_return$21.$$arity = 1);
            
            Opal.def(self, '$dummy_value?', $dummy_value$ques$22 = function(result) {
              var self = this, $ret_or_8 = nil;

              if ($truthy(($ret_or_8 = result['$respond_to?']("loading?")))) {
                return result['$loading?']()
              } else {
                return $ret_or_8
              }
            }, $dummy_value$ques$22.$$arity = 1);
            
            Opal.def(self, '$pushable_string?', $pushable_string$ques$23 = function(result) {
              var self = this, $ret_or_9 = nil, $ret_or_10 = nil;
              if (self.buffer == null) self.buffer = nil;

              
              if ($truthy(self.buffer['$empty?']())) {
              } else {
                return result['$is_a?']($$($nesting, 'String'))
              };
              if ($truthy(($ret_or_9 = (function() {if ($truthy(($ret_or_10 = result))) {
                return result['$respond_to?']("to_n")
              } else {
                return $ret_or_10
              }; return nil; })()))) {
                return result['$is_a?']($$($nesting, 'Array'))['$!']()
              } else {
                return $ret_or_9
              };
            }, $pushable_string$ques$23.$$arity = 1);
            return (Opal.def(self, '$improper_render', $improper_render$24 = function $$improper_render(message, solution) {
              var self = this;

              return nil
            }, $improper_render$24.$$arity = 2), nil) && 'improper_render';
          })(Opal.get_singleton_class(self), $nesting);
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object$25, $Object_para$29, $Object_br$31;

    
    $send(["span", "td", "th"], 'each', [], ($Object$25 = function(tag){var self = $Object$25.$$s == null ? this : $Object$25.$$s, $$26;

      
      
      if (tag == null) {
        tag = nil;
      };
      return $send(self, 'define_method', [tag], ($$26 = function($a){var self = $$26.$$s == null ? this : $$26.$$s, $iter = $$26.$$p, block = $iter || nil, $post_args, args, $$28, $ret_or_11 = nil;

        
        
        if ($iter) $$26.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        args.$unshift(tag);
        if ($truthy((function() {if ($truthy(($ret_or_11 = self['$respond_to?']("hyper_component?")))) {
          return self['$hyper_component?']()
        } else {
          return $ret_or_11
        }; return nil; })())) {
          return $send(self, 'send', Opal.to_a(args), block.$to_proc())};
        return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', Opal.to_a(args), ($$28 = function(){var self = $$28.$$s == null ? this : $$28.$$s;

          return self.$to_s()}, $$28.$$s = self, $$28.$$arity = 0, $$28));}, $$26.$$s = self, $$26.$$arity = -1, $$26));}, $Object$25.$$s = self, $Object$25.$$arity = 1, $Object$25));
    
    Opal.def(self, '$para', $Object_para$29 = function $$para($a) {
      var $iter = $Object_para$29.$$p, block = $iter || nil, $post_args, args, $$30, self = this, $ret_or_12 = nil;

      if ($iter) $Object_para$29.$$p = null;
      
      
      if ($iter) $Object_para$29.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      args.$unshift("p");
      if ($truthy((function() {if ($truthy(($ret_or_12 = self['$respond_to?']("hyper_component?")))) {
        return self['$hyper_component?']()
      } else {
        return $ret_or_12
      }; return nil; })())) {
        return $send(self, 'send', Opal.to_a(args), block.$to_proc())};
      return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', Opal.to_a(args), ($$30 = function(){var self = $$30.$$s == null ? this : $$30.$$s;

        return self.$to_s()}, $$30.$$s = self, $$30.$$arity = 0, $$30));
    }, $Object_para$29.$$arity = -1);
    return (Opal.def(self, '$br', $Object_br$31 = function $$br() {
      var $$32, self = this, $ret_or_13 = nil;

      
      if ($truthy((function() {if ($truthy(($ret_or_13 = self['$respond_to?']("hyper_component?")))) {
        return self['$hyper_component?']()
      } else {
        return $ret_or_13
      }; return nil; })())) {
        return self.$send("br")};
      return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [$$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'FRAGMENT')], ($$32 = function(){var self = $$32.$$s == null ? this : $$32.$$s, $$33;

        
        $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [$$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'FRAGMENT')], ($$33 = function(){var self = $$33.$$s == null ? this : $$33.$$s;

          return self.$to_s()}, $$33.$$s = self, $$33.$$arity = 0, $$33));
        return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render($$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'BR'));}, $$32.$$s = self, $$32.$$arity = 0, $$32));
    }, $Object_br$31.$$arity = 0), nil) && 'br';
  })($nesting[0], null, $nesting);
};

Opal.modules["hyperstack/component/children"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $lambda = Opal.lambda, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$each', '$to_proc', '$render', '$to_enum', '$length', '$>', '$new', '$call', '$<<', '$alias_method']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Children');

        var $nesting = [self].concat($parent_nesting), $Children_initialize$1, $Children_render$2, $Children_to_proc$3, $Children_each$5, $Children_length$7;

        self.$$prototype.children = self.$$prototype.length = nil;
        
        self.$include($$($nesting, 'Enumerable'));
        
        Opal.def(self, '$initialize', $Children_initialize$1 = function $$initialize(children) {
          var self = this;

          return (self.children = children)
        }, $Children_initialize$1.$$arity = 1);
        
        Opal.def(self, '$render', $Children_render$2 = function $$render() {
          var self = this;

          return $send(self, 'each', [], "render".$to_proc())
        }, $Children_render$2.$$arity = 0);
        
        Opal.def(self, '$to_proc', $Children_to_proc$3 = function $$to_proc() {
          var $$4, self = this;

          return $lambda(($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

            return self.$render()}, $$4.$$s = self, $$4.$$arity = 0, $$4))
        }, $Children_to_proc$3.$$arity = 0);
        
        Opal.def(self, '$each', $Children_each$5 = function $$each() {
          var $iter = $Children_each$5.$$p, block = $iter || nil, $$6, self = this, collection = nil, element = nil;

          if ($iter) $Children_each$5.$$p = null;
          
          
          if ($iter) $Children_each$5.$$p = null;;
          if ((block !== nil)) {
          } else {
            return $send(self, 'to_enum', ["each"], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;

              return self.$length()}, $$6.$$s = self, $$6.$$arity = 0, $$6))
          };
          if ($truthy($rb_gt(self.$length(), 0))) {
          } else {
            return []
          };
          collection = [];
          
          React.Children.forEach(self.children, function(context){
            ((element = $$($nesting, 'Element').$new(context, "wrap_child")), block.$call(element), collection['$<<'](element))
          })
        ;
          return collection;
        }, $Children_each$5.$$arity = 0);
        
        Opal.def(self, '$length', $Children_length$7 = function $$length() {
          var self = this, $ret_or_1 = nil;

          return (self.length = (function() {if ($truthy(($ret_or_1 = self.length))) {
            return $ret_or_1
          } else {
            return React.Children.count(self.children)
          }; return nil; })())
        }, $Children_length$7.$$arity = 0);
        return self.$alias_method("size", "length");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/instance_methods"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $lambda = Opal.lambda, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$include?', '$param_accessor_style', '$raise', '$[]', '$dom_node', '$==', '$=~', '$pluralize', '$set_or_replace_state_or_prop', '$to_proc', '$private', '$instance_eval', '$callbacks?', '$class', '$RescueWrapper', '$call', '$after_error_args=', '$-', '$__hyperstack_component_run_post_render_hooks', '$__hyperstack_component_rescue_wrapper', '$__hyperstack_router_wrapper', '$shallow_to_n']);
  
  self.$require("hyperstack/component/children");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'InstanceMethods');

          var $nesting = [self].concat($parent_nesting), $InstanceMethods_children$1, $InstanceMethods_params$2, $InstanceMethods_props$3, $InstanceMethods_dom_node$4, $InstanceMethods_jq_node$5, $InstanceMethods_mounted$ques$6, $InstanceMethods_pluralize$7, $InstanceMethods_force_update$excl$8, $InstanceMethods_set_state$9, $InstanceMethods_set_state$excl$10, $InstanceMethods___hyperstack_router_wrapper$11, $InstanceMethods___hyperstack_component_rescue_wrapper$13, $InstanceMethods___hyperstack_component_select_wrappers$14, $InstanceMethods_set_or_replace_state_or_prop$15;

          
          
          Opal.def(self, '$children', $InstanceMethods_children$1 = function $$children() {
            var self = this;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            return $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Children').$new(self.__hyperstack_component_native.props.children)
          }, $InstanceMethods_children$1.$$arity = 0);
          
          Opal.def(self, '$params', $InstanceMethods_params$2 = function $$params() {
            var self = this;
            if (self.__hyperstack_component_params_wrapper == null) self.__hyperstack_component_params_wrapper = nil;

            
            if ($truthy(["hyperstack", "accessors"]['$include?'](self.__hyperstack_component_params_wrapper.$param_accessor_style()))) {
              self.$raise("" + "params are now directly accessible via instance variables.\n" + "  to access the legacy behavior add `param_accessor_style = :legacy` " + "to your component class\n" + "  to access both behaviors add `param_accessor_style = :both` " + "to your component class")};
            return self.__hyperstack_component_params_wrapper;
          }, $InstanceMethods_params$2.$$arity = 0);
          
          Opal.def(self, '$props', $InstanceMethods_props$3 = function $$props() {
            var self = this;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            return $$($nesting, 'Hash').$new(self.__hyperstack_component_native.props)
          }, $InstanceMethods_props$3.$$arity = 0);
          
          Opal.def(self, '$dom_node', $InstanceMethods_dom_node$4 = function $$dom_node() {
            var self = this;

            return ReactDOM.findDOMNode(self.__hyperstack_component_native)
          }, $InstanceMethods_dom_node$4.$$arity = 0);
          
          Opal.def(self, '$jq_node', $InstanceMethods_jq_node$5 = function $$jq_node() {
            var self = this;

            return $$$('::', 'Element')['$[]'](self.$dom_node())
          }, $InstanceMethods_jq_node$5.$$arity = 0);
          
          Opal.def(self, '$mounted?', $InstanceMethods_mounted$ques$6 = function() {
            var self = this;

            return (self.__hyperstack_component_is_mounted === undefined) ? false : self.__hyperstack_component_is_mounted
          }, $InstanceMethods_mounted$ques$6.$$arity = 0);
          
          Opal.def(self, '$pluralize', $InstanceMethods_pluralize$7 = function $$pluralize(count, singular, plural) {
            var self = this, word = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

            
            
            if (plural == null) {
              plural = nil;
            };
            word = (function() {if ($truthy((function() {if ($truthy(($ret_or_1 = count['$=='](1)))) {
              return $ret_or_1
            } else {
              return count['$=~'](/^1(\.0+)?$/)
            }; return nil; })())) {
              return singular
            } else if ($truthy(($ret_or_2 = plural))) {
              return $ret_or_2
            } else {
              return singular.$pluralize()
            }; return nil; })();
            return "" + ((function() {if ($truthy(($ret_or_3 = count))) {
              return $ret_or_3
            } else {
              return 0
            }; return nil; })()) + " " + (word);
          }, $InstanceMethods_pluralize$7.$$arity = -3);
          
          Opal.def(self, '$force_update!', $InstanceMethods_force_update$excl$8 = function() {
            var self = this;

            
            self.__hyperstack_component_native.forceUpdate();
            return self;
          }, $InstanceMethods_force_update$excl$8.$$arity = 0);
          
          Opal.def(self, '$set_state', $InstanceMethods_set_state$9 = function $$set_state(state) {
            var $iter = $InstanceMethods_set_state$9.$$p, block = $iter || nil, self = this;

            if ($iter) $InstanceMethods_set_state$9.$$p = null;
            
            
            if ($iter) $InstanceMethods_set_state$9.$$p = null;;
            return $send(self, 'set_or_replace_state_or_prop', [state, "setState"], block.$to_proc());
          }, $InstanceMethods_set_state$9.$$arity = 1);
          
          Opal.def(self, '$set_state!', $InstanceMethods_set_state$excl$10 = function(state) {
            var $iter = $InstanceMethods_set_state$excl$10.$$p, block = $iter || nil, self = this;

            if ($iter) $InstanceMethods_set_state$excl$10.$$p = null;
            
            
            if ($iter) $InstanceMethods_set_state$excl$10.$$p = null;;
            $send(self, 'set_or_replace_state_or_prop', [state, "setState"], block.$to_proc());
            return self.__hyperstack_component_native.forceUpdate();
          }, $InstanceMethods_set_state$excl$10.$$arity = 1);
          self.$private();
          
          Opal.def(self, '$__hyperstack_router_wrapper', $InstanceMethods___hyperstack_router_wrapper$11 = function $$__hyperstack_router_wrapper() {
            var $iter = $InstanceMethods___hyperstack_router_wrapper$11.$$p, block = $iter || nil, $$12, self = this;

            if ($iter) $InstanceMethods___hyperstack_router_wrapper$11.$$p = null;
            
            
            if ($iter) $InstanceMethods___hyperstack_router_wrapper$11.$$p = null;;
            return $lambda(($$12 = function(){var self = $$12.$$s == null ? this : $$12.$$s;

              return $send(self, 'instance_eval', [], block.$to_proc())}, $$12.$$s = self, $$12.$$arity = 0, $$12));
          }, $InstanceMethods___hyperstack_router_wrapper$11.$$arity = 0);
          
          Opal.def(self, '$__hyperstack_component_rescue_wrapper', $InstanceMethods___hyperstack_component_rescue_wrapper$13 = function $$__hyperstack_component_rescue_wrapper(child) {
            var self = this;

            if ($truthy(self.$class()['$callbacks?']("__hyperstack_component_rescue_hook"))) {
              return $$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component').$RescueWrapper($hash2(["child", "children_elements"], {"child": self, "children_elements": child}))
            } else {
              return child.$call()
            }
          }, $InstanceMethods___hyperstack_component_rescue_wrapper$13.$$arity = 1);
          
          Opal.def(self, '$__hyperstack_component_select_wrappers', $InstanceMethods___hyperstack_component_select_wrappers$14 = function $$__hyperstack_component_select_wrappers() {
            var $iter = $InstanceMethods___hyperstack_component_select_wrappers$14.$$p, block = $iter || nil, self = this, $writer = nil;

            if ($iter) $InstanceMethods___hyperstack_component_select_wrappers$14.$$p = null;
            
            
            if ($iter) $InstanceMethods___hyperstack_component_select_wrappers$14.$$p = null;;
            
            $writer = [nil];
            $send($$($nesting, 'RescueWrapper'), 'after_error_args=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$__hyperstack_component_run_post_render_hooks(self.$__hyperstack_component_rescue_wrapper($send(self, '__hyperstack_router_wrapper', [], block.$to_proc())));
          }, $InstanceMethods___hyperstack_component_select_wrappers$14.$$arity = 0);
          return (Opal.def(self, '$set_or_replace_state_or_prop', $InstanceMethods_set_or_replace_state_or_prop$15 = function $$set_or_replace_state_or_prop(state_or_prop, method) {
            var $iter = $InstanceMethods_set_or_replace_state_or_prop$15.$$p, block = $iter || nil, self = this;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            if ($iter) $InstanceMethods_set_or_replace_state_or_prop$15.$$p = null;
            
            
            if ($iter) $InstanceMethods_set_or_replace_state_or_prop$15.$$p = null;;
            if ($truthy(self.__hyperstack_component_native)) {
            } else {
              self.$raise("No native ReactComponent associated")
            };
            var state_prop_n = state_or_prop.$shallow_to_n();
            if ($truthy(block)) {
              
              if (self.__hyperstack_component_native.__opalInstanceInitializedState === true) {
                self.__hyperstack_component_native[method](state_prop_n, function(){
                  block.$call();
                });
              } else {
                for (var sp in state_prop_n) {
                  if (state_prop_n.hasOwnProperty(sp)) {
                    self.__hyperstack_component_native.state[sp] = state_prop_n[sp];
                  }
                }
              }
            
            } else {
              
              if (self.__hyperstack_component_native.__opalInstanceInitializedState === true) {
                self.__hyperstack_component_native[method](state_prop_n);
              } else {
                for (var sp in state_prop_n) {
                  if (state_prop_n.hasOwnProperty(sp)) {
                    self.__hyperstack_component_native.state[sp] = state_prop_n[sp];
                  }
                }
              }
            
            };
          }, $InstanceMethods_set_or_replace_state_or_prop$15.$$arity = 2), nil) && 'set_or_replace_state_or_prop';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/internal/component/class_methods"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $alias = Opal.alias, $hash = Opal.hash;

  Opal.add_stubs(['$create_element', '$to_proc', '$render', '$deprecation_warning', '$select', '$mounted_components', '$<=', '$class', '$param_accessor_style', '$props_wrapper', '$==', '$[]', '$<<', '$each', '$before_new_params', '$included', '$is_a?', '$element_type', '$define_method', '$__hyperstack_component_select_wrappers', '$instance_eval', '$__hyperstack_component_after_render_hook', '$on', '$instance_exec', '$empty?', '$__hyperstack_component_rescue_hook', '$!', '$detect', '$before_mount', '$before_update', '$after_mount', '$after_update', '$any?', '$respond_to?', '$haml_class_name', '$superclass', '$copy', '$validator', '$new', '$validate', '$>', '$count', '$+', '$name', '$join', '$default_props', '$build', '$first', '$delete', '$merge!', '$[]=', '$-', '$key?', '$optional', '$requires', '$all_other_params', '$props', '$=~', '$gsub', '$include?', '$event_camelize', '$event', '$call', '$arity', '$last', '$pop', '$state', '$singleton_class', '$__send__', '$mutate', '$native_mixins', '$static_call_backs', '$split', '$to_n', '$add_item_to_tree', '$Native', '$create_native_react_class', '$reverse', '$import_native_component', '$eval_native_react_component', '$raise', '$message', '$!=', '$length', '$inject']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_create_element$1, $ClassMethods_insert_element$2, $ClassMethods_deprecation_warning$3, $ClassMethods_hyper_component$ques$4, $ClassMethods_allow_deprecated_render_definition$ques$5, $ClassMethods_mounted_components$6, $ClassMethods_param_accessor_style$8, $ClassMethods_backtrace$9, $ClassMethods_append_backtrace$10, $ClassMethods_before_receive_props$12, $ClassMethods_render$13, $ClassMethods_on$19, $ClassMethods_rescues$22, $ClassMethods_before_render$25, $ClassMethods_after_render$26, $ClassMethods_method_missing$27, $ClassMethods_validator$28, $ClassMethods_prop_types$29, $ClassMethods_default_props$30, $ClassMethods_params$31, $ClassMethods_props_wrapper$32, $ClassMethods_param$33, $ClassMethods_collect_other_params_as$34, $ClassMethods_fires$36, $ClassMethods_define_state$38, $ClassMethods_export_state$41, $ClassMethods_native_mixin$45, $ClassMethods_native_mixins$46, $ClassMethods_static_call_back$47, $ClassMethods_static_call_backs$48, $ClassMethods_export_component$49, $ClassMethods_imports$50, $ClassMethods_add_item_to_tree$52, $ClassMethods_to_n$54;

          
          
          Opal.def(self, '$create_element', $ClassMethods_create_element$1 = function $$create_element($a) {
            var $iter = $ClassMethods_create_element$1.$$p, children = $iter || nil, $post_args, params, self = this;

            if ($iter) $ClassMethods_create_element$1.$$p = null;
            
            
            if ($iter) $ClassMethods_create_element$1.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            params = $post_args;;
            return $send($$($nesting, 'ReactWrapper'), 'create_element', [self].concat(Opal.to_a(params)), children.$to_proc());
          }, $ClassMethods_create_element$1.$$arity = -1);
          
          Opal.def(self, '$insert_element', $ClassMethods_insert_element$2 = function $$insert_element($a) {
            var $iter = $ClassMethods_insert_element$2.$$p, children = $iter || nil, $post_args, params, self = this;

            if ($iter) $ClassMethods_insert_element$2.$$p = null;
            
            
            if ($iter) $ClassMethods_insert_element$2.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            params = $post_args;;
            return $send($$($nesting, 'RenderingContext'), 'render', [self].concat(Opal.to_a(params)), children.$to_proc());
          }, $ClassMethods_insert_element$2.$$arity = -1);
          
          Opal.def(self, '$deprecation_warning', $ClassMethods_deprecation_warning$3 = function $$deprecation_warning(message) {
            var self = this;

            return $$($nesting, 'Hyperstack').$deprecation_warning(self, message)
          }, $ClassMethods_deprecation_warning$3.$$arity = 1);
          
          Opal.def(self, '$hyper_component?', $ClassMethods_hyper_component$ques$4 = function() {
            var self = this;

            return true
          }, $ClassMethods_hyper_component$ques$4.$$arity = 0);
          
          Opal.def(self, '$allow_deprecated_render_definition?', $ClassMethods_allow_deprecated_render_definition$ques$5 = function() {
            var self = this;

            return false
          }, $ClassMethods_allow_deprecated_render_definition$ques$5.$$arity = 0);
          
          Opal.def(self, '$mounted_components', $ClassMethods_mounted_components$6 = function $$mounted_components() {
            var $$7, self = this;

            return $send($$$($$($nesting, 'Hyperstack'), 'Component').$mounted_components(), 'select', [], ($$7 = function(c){var self = $$7.$$s == null ? this : $$7.$$s;

              
              
              if (c == null) {
                c = nil;
              };
              return $rb_le(c.$class(), self);}, $$7.$$s = self, $$7.$$arity = 1, $$7))
          }, $ClassMethods_mounted_components$6.$$arity = 0);
          
          Opal.def(self, '$param_accessor_style', $ClassMethods_param_accessor_style$8 = function $$param_accessor_style($a) {
            var $post_args, args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self.$props_wrapper(), 'param_accessor_style', Opal.to_a(args));
          }, $ClassMethods_param_accessor_style$8.$$arity = -1);
          
          Opal.def(self, '$backtrace', $ClassMethods_backtrace$9 = function $$backtrace($a) {
            var $post_args, args, self = this, $ret_or_1 = nil;
            if (self.__hyperstack_component_dont_catch_exceptions == null) self.__hyperstack_component_dont_catch_exceptions = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            self.__hyperstack_component_dont_catch_exceptions = args['$[]'](0)['$==']("none");
            return (self.__hyperstack_component_backtrace_off = (function() {if ($truthy(($ret_or_1 = self.__hyperstack_component_dont_catch_exceptions))) {
              return $ret_or_1
            } else {
              
              return args['$[]'](0)['$==']("off");
            }; return nil; })());
          }, $ClassMethods_backtrace$9.$$arity = -1);
          
          Opal.def(self, '$append_backtrace', $ClassMethods_append_backtrace$10 = function $$append_backtrace(message_array, backtrace) {
            var $$11, self = this;

            
            message_array['$<<']("" + "    " + (backtrace['$[]'](0)));
            return $send(backtrace['$[]']($range(1, -1, false)), 'each', [], ($$11 = function(line){var self = $$11.$$s == null ? this : $$11.$$s;

              
              
              if (line == null) {
                line = nil;
              };
              return message_array['$<<'](line);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          }, $ClassMethods_append_backtrace$10.$$arity = 2);
          
          Opal.def(self, '$before_receive_props', $ClassMethods_before_receive_props$12 = function $$before_receive_props($a) {
            var $iter = $ClassMethods_before_receive_props$12.$$p, block = $iter || nil, $post_args, args, self = this;

            if ($iter) $ClassMethods_before_receive_props$12.$$p = null;
            
            
            if ($iter) $ClassMethods_before_receive_props$12.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            self.$deprecation_warning("'before_receive_props' is deprecated. Use the 'before_new_params' macro instead.");
            return $send(self, 'before_new_params', Opal.to_a(args), block.$to_proc());
          }, $ClassMethods_before_receive_props$12.$$arity = -1);
          
          Opal.def(self, '$render', $ClassMethods_render$13 = function $$render(container, params) {
            var $iter = $ClassMethods_render$13.$$p, block = $iter || nil, $$14, $$17, self = this;

            if ($iter) $ClassMethods_render$13.$$p = null;
            
            
            if ($iter) $ClassMethods_render$13.$$p = null;;
            
            if (container == null) {
              container = nil;
            };
            
            if (params == null) {
              params = $hash2([], {});
            };
            $$($nesting, 'Tags').$included(self);
            if ($truthy(container)) {
              
              if ($truthy(container['$is_a?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                container = container.$element_type()};
              return $send(self, 'define_method', ["__hyperstack_component_render"], ($$14 = function(){var self = $$14.$$s == null ? this : $$14.$$s, $$15;

                return $send(self, '__hyperstack_component_select_wrappers', [], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s, $$16;

                  return $send($$($nesting, 'RenderingContext'), 'render', [container, params], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s;

                    if ($truthy(block)) {
                      return $send(self, 'instance_eval', [], block.$to_proc())
                    } else {
                      return nil
                    }}, $$16.$$s = self, $$16.$$arity = 0, $$16))}, $$15.$$s = self, $$15.$$arity = 0, $$15))}, $$14.$$s = self, $$14.$$arity = 0, $$14));
            } else {
              return $send(self, 'define_method', ["__hyperstack_component_render"], ($$17 = function(){var self = $$17.$$s == null ? this : $$17.$$s, $$18;

                return $send(self, '__hyperstack_component_select_wrappers', [], ($$18 = function(){var self = $$18.$$s == null ? this : $$18.$$s;

                  return $send(self, 'instance_eval', [], block.$to_proc())}, $$18.$$s = self, $$18.$$arity = 0, $$18))}, $$17.$$s = self, $$17.$$arity = 0, $$17))
            };
          }, $ClassMethods_render$13.$$arity = -1);
          
          Opal.def(self, '$on', $ClassMethods_on$19 = function $$on($a) {
            var $iter = $ClassMethods_on$19.$$p, block = $iter || nil, $post_args, args, $$20, self = this;

            if ($iter) $ClassMethods_on$19.$$p = null;
            
            
            if ($iter) $ClassMethods_on$19.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self, '__hyperstack_component_after_render_hook', [], ($$20 = function(element){var self = $$20.$$s == null ? this : $$20.$$s, $$21;

              
              
              if (element == null) {
                element = nil;
              };
              return $send(element, 'on', Opal.to_a(args), ($$21 = function($b){var self = $$21.$$s == null ? this : $$21.$$s, $post_args, aargs;

                
                
                $post_args = Opal.slice.call(arguments, 0, arguments.length);
                
                aargs = $post_args;;
                return $send(self, 'instance_exec', Opal.to_a(aargs), block.$to_proc());}, $$21.$$s = self, $$21.$$arity = -1, $$21));}, $$20.$$s = self, $$20.$$arity = 1, $$20));
          }, $ClassMethods_on$19.$$arity = -1);
          
          Opal.def(self, '$rescues', $ClassMethods_rescues$22 = function $$rescues($a) {
            var $iter = $ClassMethods_rescues$22.$$p, block = $iter || nil, $post_args, klasses, $$23, self = this;

            if ($iter) $ClassMethods_rescues$22.$$p = null;
            
            
            if ($iter) $ClassMethods_rescues$22.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            klasses = $post_args;;
            if ($truthy(klasses['$empty?']())) {
              klasses = [$$($nesting, 'StandardError')]};
            return $send(self, '__hyperstack_component_rescue_hook', [], ($$23 = function(found, $b){var self = $$23.$$s == null ? this : $$23.$$s, $post_args, args, $$24, $ret_or_2 = nil;

              
              
              if (found == null) {
                found = nil;
              };
              
              $post_args = Opal.slice.call(arguments, 1, arguments.length);
              
              args = $post_args;;
              if ($truthy((function() {if ($truthy(($ret_or_2 = found))) {
                return $ret_or_2
              } else {
                return $send(klasses, 'detect', [], ($$24 = function(klass){var self = $$24.$$s == null ? this : $$24.$$s;

                  
                  
                  if (klass == null) {
                    klass = nil;
                  };
                  return args['$[]'](0)['$is_a?'](klass);}, $$24.$$s = self, $$24.$$arity = 1, $$24))['$!']()
              }; return nil; })())) {
                return [found].concat(Opal.to_a(args));};
              $send(self, 'instance_exec', Opal.to_a(args), block.$to_proc());
              return [true].concat(Opal.to_a(args));}, $$23.$$s = self, $$23.$$arity = -2, $$23));
          }, $ClassMethods_rescues$22.$$arity = -1);
          
          Opal.def(self, '$before_render', $ClassMethods_before_render$25 = function $$before_render($a) {
            var $iter = $ClassMethods_before_render$25.$$p, block = $iter || nil, $post_args, args, self = this;

            if ($iter) $ClassMethods_before_render$25.$$p = null;
            
            
            if ($iter) $ClassMethods_before_render$25.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $send(self, 'before_mount', Opal.to_a(args), block.$to_proc());
            return $send(self, 'before_update', Opal.to_a(args), block.$to_proc());
          }, $ClassMethods_before_render$25.$$arity = -1);
          
          Opal.def(self, '$after_render', $ClassMethods_after_render$26 = function $$after_render($a) {
            var $iter = $ClassMethods_after_render$26.$$p, block = $iter || nil, $post_args, args, self = this;

            if ($iter) $ClassMethods_after_render$26.$$p = null;
            
            
            if ($iter) $ClassMethods_after_render$26.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $send(self, 'after_mount', Opal.to_a(args), block.$to_proc());
            return $send(self, 'after_update', Opal.to_a(args), block.$to_proc());
          }, $ClassMethods_after_render$26.$$arity = -1);
          
          Opal.def(self, '$method_missing', $ClassMethods_method_missing$27 = function $$method_missing(name, $a) {
            var $iter = $ClassMethods_method_missing$27.$$p, children = $iter || nil, $post_args, args, self = this, $ret_or_3 = nil;

            if ($iter) $ClassMethods_method_missing$27.$$p = null;
            
            
            if ($iter) $ClassMethods_method_missing$27.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            if ($truthy((function() {if ($truthy(($ret_or_3 = args['$any?']()))) {
              return $ret_or_3
            } else {
              return $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')['$respond_to?']("haml_class_name")['$!']()
            }; return nil; })())) {
              return $send2(self, $find_super(self, 'method_missing', $ClassMethods_method_missing$27, false, true), 'method_missing', [name].concat(Opal.to_a(args)), $iter)
            } else {
              return $send($$($nesting, 'RenderingContext'), 'render', [self, $hash2(["class"], {"class": $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element').$haml_class_name(name)})], children.$to_proc())
            };
          }, $ClassMethods_method_missing$27.$$arity = -2);
          
          Opal.def(self, '$validator', $ClassMethods_validator$28 = function $$validator() {
            var self = this;
            if (self.__hyperstack_component_validator == null) self.__hyperstack_component_validator = nil;

            
            if ($truthy(self.__hyperstack_component_validator)) {
              return self.__hyperstack_component_validator};
            if ($truthy(self.$superclass()['$respond_to?']("validator"))) {
              return (self.__hyperstack_component_validator = self.$superclass().$validator().$copy(self.$props_wrapper()))
            } else {
              return (self.__hyperstack_component_validator = $$($nesting, 'Validator').$new(self.$props_wrapper()))
            };
          }, $ClassMethods_validator$28.$$arity = 0);
          
          Opal.def(self, '$prop_types', $ClassMethods_prop_types$29 = function $$prop_types() {
            var self = this;

            if ($truthy(self.$validator())) {
              return $hash2(["_componentValidator"], {"_componentValidator": 
                function(props, propName, componentName) {
                  var errors = self.$validator().$validate($$($nesting, 'Hash').$new(props));
                  return (function() {if ($truthy($rb_gt((errors).$count(), 0))) {
                return new Error($rb_plus("" + "In component `" + (self.$name()) + "`\n", (errors).$join("\n")))
              } else {
                return undefined;
              }; return nil; })();
                }
              })
            } else {
              return $hash2([], {})
            }
          }, $ClassMethods_prop_types$29.$$arity = 0);
          
          Opal.def(self, '$default_props', $ClassMethods_default_props$30 = function $$default_props() {
            var self = this;

            return self.$validator().$default_props()
          }, $ClassMethods_default_props$30.$$arity = 0);
          
          Opal.def(self, '$params', $ClassMethods_params$31 = function $$params() {
            var $iter = $ClassMethods_params$31.$$p, block = $iter || nil, self = this;

            if ($iter) $ClassMethods_params$31.$$p = null;
            
            
            if ($iter) $ClassMethods_params$31.$$p = null;;
            return $send(self.$validator(), 'build', [], block.$to_proc());
          }, $ClassMethods_params$31.$$arity = 0);
          
          Opal.def(self, '$props_wrapper', $ClassMethods_props_wrapper$32 = function $$props_wrapper() {
            var self = this, $ret_or_4 = nil;
            if (self.__hyperstack_component_props_wrapper == null) self.__hyperstack_component_props_wrapper = nil;

            
            if ($truthy(self.__hyperstack_component_props_wrapper)) {
              return self.__hyperstack_component_props_wrapper};
            if ($truthy(self.$superclass()['$respond_to?']("props_wrapper"))) {
              return (self.__hyperstack_component_props_wrapper = $$($nesting, 'Class').$new(self.$superclass().$props_wrapper()))
            } else {
              return (self.__hyperstack_component_props_wrapper = (function() {if ($truthy(($ret_or_4 = self.__hyperstack_component_props_wrapper))) {
                return $ret_or_4
              } else {
                return $$($nesting, 'Class').$new($$($nesting, 'PropsWrapper'))
              }; return nil; })())
            };
          }, $ClassMethods_props_wrapper$32.$$arity = 0);
          
          Opal.def(self, '$param', $ClassMethods_param$33 = function $$param($a) {
            var $post_args, args, self = this, options = nil, name = nil, default$ = nil, $ret_or_5 = nil, $ret_or_6 = nil, $writer = nil, $ret_or_7 = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            if ($truthy(args['$[]'](0)['$is_a?']($$($nesting, 'Hash')))) {
              
              options = args['$[]'](0);
              name = options.$first()['$[]'](0);
              default$ = options.$first()['$[]'](1);
              options.$delete(name);
              options['$merge!']($hash2(["default"], {"default": default$}));
            } else {
              
              name = args['$[]'](0);
              options = (function() {if ($truthy(($ret_or_5 = args['$[]'](1)))) {
                return $ret_or_5
              } else {
                return $hash2([], {})
              }; return nil; })();
            };
            if (options['$[]']("type")['$==']($$($nesting, 'Proc'))) {
              
              if ($truthy(($ret_or_6 = options['$[]']("default")))) {
                $ret_or_6
              } else {
                
                $writer = ["default", nil];
                $send(options, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              if ($truthy(options['$key?']("allow_nil"))) {
              } else {
                
                $writer = ["allow_nil", true];
                $send(options, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };};
            if (name['$==']("class")) {
              
              name = "className";
              if ($truthy(($ret_or_7 = options['$[]']("alias")))) {
                $ret_or_7
              } else {
                
                $writer = ["alias", "Class"];
                $send(options, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };};
            if ($truthy(options['$[]']("default"))) {
              return self.$validator().$optional(name, options)
            } else {
              return self.$validator().$requires(name, options)
            };
          }, $ClassMethods_param$33.$$arity = -1);
          
          Opal.def(self, '$collect_other_params_as', $ClassMethods_collect_other_params_as$34 = function $$collect_other_params_as(name) {
            var $$35, self = this;

            return $send(self.$validator(), 'all_other_params', [name], ($$35 = function(){var self = $$35.$$s == null ? this : $$35.$$s;

              return self.$props()}, $$35.$$s = self, $$35.$$arity = 0, $$35))
          }, $ClassMethods_collect_other_params_as$34.$$arity = 1);
          $alias(self, "other_params", "collect_other_params_as");
          $alias(self, "others", "collect_other_params_as");
          $alias(self, "other", "collect_other_params_as");
          $alias(self, "opts", "collect_other_params_as");
          
          Opal.def(self, '$fires', $ClassMethods_fires$36 = function $$fires(name, opts) {
            var $$37, self = this, aka = nil, $ret_or_8 = nil;

            
            
            if (opts == null) {
              opts = $hash2([], {});
            };
            aka = (function() {if ($truthy(($ret_or_8 = opts['$[]']("alias")))) {
              return $ret_or_8
            } else {
              return "" + (name) + "!"
            }; return nil; })();
            name = (function() {if ($truthy(name['$=~'](/^<(.+)>$/))) {
              return name.$gsub(/^<(.+)>$/, "\\1")
            } else if ($truthy($$$($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Event'), 'BUILT_IN_EVENTS')['$include?']("" + "on" + (name.$event_camelize())))) {
              return "" + "on" + (name.$event_camelize())
            } else {
              return "" + "on_" + (name)
            }; return nil; })();
            self.$validator().$event(name);
            return $send(self, 'define_method', [aka], ($$37 = function($a){var self = $$37.$$s == null ? this : $$37.$$s, $post_args, args, $b;

              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              return ($b = self.$props()['$[]'](name), ($b === nil || $b == null) ? nil : $send($b, 'call', Opal.to_a(args)));}, $$37.$$s = self, $$37.$$arity = -1, $$37));
          }, $ClassMethods_fires$36.$$arity = -2);
          $alias(self, "triggers", "fires");
          
          Opal.def(self, '$define_state', $ClassMethods_define_state$38 = function $$define_state($a) {
            var $iter = $ClassMethods_define_state$38.$$p, block = $iter || nil, $post_args, states, $$39, $$40, self = this, default_initial_value = nil, $ret_or_9 = nil, states_hash = nil;

            if ($iter) $ClassMethods_define_state$38.$$p = null;
            
            
            if ($iter) $ClassMethods_define_state$38.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            states = $post_args;;
            self.$deprecation_warning("'define_state' is deprecated. Use the 'state' macro to declare states.");
            default_initial_value = (function() {if ($truthy((function() {if ($truthy(($ret_or_9 = block))) {
              return block.$arity()['$=='](0)
            } else {
              return $ret_or_9
            }; return nil; })())) {
              return Opal.yieldX(block, []);
            } else {
              return nil
            }; return nil; })();
            states_hash = (function() {if ($truthy(states.$last()['$is_a?']($$($nesting, 'Hash')))) {
              return states.$pop()
            } else {
              return $hash2([], {})
            }; return nil; })();
            $send(states, 'each', [], ($$39 = function(name){var self = $$39.$$s == null ? this : $$39.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              return self.$state($hash(name, default_initial_value));}, $$39.$$s = self, $$39.$$arity = 1, $$39));
            return $send(states_hash, 'each', [], ($$40 = function(name, value){var self = $$40.$$s == null ? this : $$40.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              return self.$state($hash(name, value));}, $$40.$$s = self, $$40.$$arity = 2, $$40));
          }, $ClassMethods_define_state$38.$$arity = -1);
          
          Opal.def(self, '$export_state', $ClassMethods_export_state$41 = function $$export_state($a) {
            var $iter = $ClassMethods_export_state$41.$$p, block = $iter || nil, $post_args, states, $$42, $$43, self = this, default_initial_value = nil, $ret_or_10 = nil, states_hash = nil;

            if ($iter) $ClassMethods_export_state$41.$$p = null;
            
            
            if ($iter) $ClassMethods_export_state$41.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            states = $post_args;;
            self.$deprecation_warning("'export_state' is deprecated. Use the 'state' macro to declare states.");
            default_initial_value = (function() {if ($truthy((function() {if ($truthy(($ret_or_10 = block))) {
              return block.$arity()['$=='](0)
            } else {
              return $ret_or_10
            }; return nil; })())) {
              return Opal.yieldX(block, []);
            } else {
              return nil
            }; return nil; })();
            states_hash = (function() {if ($truthy(states.$last()['$is_a?']($$($nesting, 'Hash')))) {
              return states.$pop()
            } else {
              return $hash2([], {})
            }; return nil; })();
            $send(states, 'each', [], ($$42 = function(name){var self = $$42.$$s == null ? this : $$42.$$s, $writer = nil;

              
              
              if (name == null) {
                name = nil;
              };
              $writer = [name, default_initial_value];
              $send(states_hash, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$42.$$s = self, $$42.$$arity = 1, $$42));
            return $send(states_hash, 'each', [], ($$43 = function(name, value){var self = $$43.$$s == null ? this : $$43.$$s, $$44;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              self.$state($hash(name, value, "scope", "class", "reader", true));
              return $send(self.$singleton_class(), 'define_method', ["" + (name) + "!"], ($$44 = function($b){var self = $$44.$$s == null ? this : $$44.$$s, $post_args, args;

                
                
                $post_args = Opal.slice.call(arguments, 0, arguments.length);
                
                args = $post_args;;
                return $send(self.$mutate(), '__send__', [name].concat(Opal.to_a(args)));}, $$44.$$s = self, $$44.$$arity = -1, $$44));}, $$43.$$s = self, $$43.$$arity = 2, $$43));
          }, $ClassMethods_export_state$41.$$arity = -1);
          
          Opal.def(self, '$native_mixin', $ClassMethods_native_mixin$45 = function $$native_mixin(item) {
            var self = this;

            return self.$native_mixins()['$<<'](item)
          }, $ClassMethods_native_mixin$45.$$arity = 1);
          
          Opal.def(self, '$native_mixins', $ClassMethods_native_mixins$46 = function $$native_mixins() {
            var self = this, $ret_or_11 = nil;
            if (self.__hyperstack_component_native_mixins == null) self.__hyperstack_component_native_mixins = nil;

            return (self.__hyperstack_component_native_mixins = (function() {if ($truthy(($ret_or_11 = self.__hyperstack_component_native_mixins))) {
              return $ret_or_11
            } else {
              return []
            }; return nil; })())
          }, $ClassMethods_native_mixins$46.$$arity = 0);
          
          Opal.def(self, '$static_call_back', $ClassMethods_static_call_back$47 = function $$static_call_back(name) {
            var $iter = $ClassMethods_static_call_back$47.$$p, block = $iter || nil, self = this, $writer = nil;

            if ($iter) $ClassMethods_static_call_back$47.$$p = null;
            
            
            if ($iter) $ClassMethods_static_call_back$47.$$p = null;;
            $writer = [name, block];
            $send(self.$static_call_backs(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, $ClassMethods_static_call_back$47.$$arity = 1);
          
          Opal.def(self, '$static_call_backs', $ClassMethods_static_call_backs$48 = function $$static_call_backs() {
            var self = this, $ret_or_12 = nil;
            if (self.__hyperstack_component_static_call_backs == null) self.__hyperstack_component_static_call_backs = nil;

            return (self.__hyperstack_component_static_call_backs = (function() {if ($truthy(($ret_or_12 = self.__hyperstack_component_static_call_backs))) {
              return $ret_or_12
            } else {
              return $hash2([], {})
            }; return nil; })())
          }, $ClassMethods_static_call_backs$48.$$arity = 0);
          
          Opal.def(self, '$export_component', $ClassMethods_export_component$49 = function $$export_component(opts) {
            var self = this, export_name = nil, $ret_or_13 = nil, first_name = nil, $writer = nil;

            
            
            if (opts == null) {
              opts = $hash2([], {});
            };
            export_name = (function() {if ($truthy(($ret_or_13 = opts['$[]']("as")))) {
              return $ret_or_13
            } else {
              return self.$name()
            }; return nil; })().$split("::");
            first_name = export_name.$first();
            
            $writer = [first_name, self.$add_item_to_tree(self.$Native(Opal.global)['$[]'](first_name), $rb_plus([$$($nesting, 'ReactWrapper').$create_native_react_class(self)], export_name['$[]']($range(1, -1, false)).$reverse())).$to_n()];
            $send(self.$Native(Opal.global), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, $ClassMethods_export_component$49.$$arity = -1);
          
          Opal.def(self, '$imports', $ClassMethods_imports$50 = function $$imports(component_name) {
            var $$51, self = this, e = nil;

            return (function() { try {
            try {
              
              $$($nesting, 'ReactWrapper').$import_native_component(self, $$($nesting, 'ReactWrapper').$eval_native_react_component(component_name));
              return $send(self, 'render', [], ($$51 = function(){var self = $$51.$$s == null ? this : $$51.$$s;

                return nil}, $$51.$$s = self, $$51.$$arity = 0, $$51));
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
                try {
                  return self.$raise("" + (self) + " cannot import '" + (component_name) + "': " + (e.$message()) + ".")
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            }
            } finally {
              self
            }; })()
          }, $ClassMethods_imports$50.$$arity = 1);
          
          Opal.def(self, '$add_item_to_tree', $ClassMethods_add_item_to_tree$52 = function $$add_item_to_tree(current_tree, new_item) {
            var $$53, self = this, $ret_or_14 = nil, $writer = nil;

            if ($truthy((function() {if ($truthy(($ret_or_14 = self.$Native(current_tree).$class()['$!=']($$$($$($nesting, 'Native'), 'Object'))))) {
              return $ret_or_14
            } else {
              return new_item.$length()['$=='](1)
            }; return nil; })())) {
              return $send(new_item, 'inject', [], ($$53 = function(a, e){var self = $$53.$$s == null ? this : $$53.$$s;

                
                
                if (a == null) {
                  a = nil;
                };
                
                if (e == null) {
                  e = nil;
                };
                return $hash(e, a);}, $$53.$$s = self, $$53.$$arity = 2, $$53))
            } else {
              
              
              $writer = [new_item.$last(), self.$add_item_to_tree(self.$Native(current_tree)['$[]'](new_item.$last()), new_item['$[]']($range(0, -2, false)))];
              $send(self.$Native(current_tree), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return current_tree;
            }
          }, $ClassMethods_add_item_to_tree$52.$$arity = 2);
          return (Opal.def(self, '$to_n', $ClassMethods_to_n$54 = function $$to_n() {
            var self = this;

            return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper').$create_native_react_class(self)
          }, $ClassMethods_to_n$54.$$arity = 0), nil) && 'to_n';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/props_wrapper"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_reader', '$naming_convention', '$===', '$fix_suffix', '$camelize', '$=~', '$+', '$[]', '$respond_to?', '$superclass', '$param_accessor_style', '$dup', '$param_definitions', '$new', '$!=', '$instance_var_name_for', '$lambda', '$instance_variable_set', '$fetch_from_cache', '$==', '$[]=', '$-', '$include?', '$define_method', '$to_sym', '$props', '$call', '$to_proc', '$class', '$each_value', '$instance_exec', '$initialize', '$private', '$cache', '$equal?', '$tap', '$convert_param', '$_react_param_conversion', '$is_a?', '$collect', '$component', '$instance_variable_get']);
  
  self.$require("active_support/core_ext/string");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'PropsWrapper');

          var $nesting = [self].concat($parent_nesting), $PropsWrapper_param_accessor_style$12, $PropsWrapper_initialize$13, $PropsWrapper_reload$15, $PropsWrapper_$$$16, $PropsWrapper_fetch_from_cache$17, $PropsWrapper_convert_param$19, $PropsWrapper_cache$21, $PropsWrapper_props$23, $PropsWrapper_value_for$24;

          self.$$prototype.component = self.$$prototype.cache = nil;
          
          self.$attr_reader("component");
          (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting), $instance_var_name_for$1, $fix_suffix$2, $param_accessor_style$3, $param_definitions$4, $define_param$5, $define_all_others$9;

            
            
            Opal.def(self, '$instance_var_name_for', $instance_var_name_for$1 = function $$instance_var_name_for(name) {
              var self = this, $case = nil;

              return (function() {$case = $$($nesting, 'Hyperstack').$naming_convention();
              if ("camelize_params"['$===']($case)) {return self.$fix_suffix(name.$camelize())}
              else if ("prefix_params"['$===']($case)) {return "" + "_" + (name)}
              else {return name}})()
            }, $instance_var_name_for$1.$$arity = 1);
            
            Opal.def(self, '$fix_suffix', $fix_suffix$2 = function $$fix_suffix(name) {
              var self = this;

              
              if ($truthy(name)) {
              } else {
                return nil
              };
              if ($truthy(name['$=~'](/\?$/))) {
                return $rb_plus(name['$[]']($range(0, -2, false)), "_q")
              } else if ($truthy(name['$=~'](/\!$/))) {
                return $rb_plus(name['$[]']($range(0, -2, false)), "_b")
              } else {
                return name
              };
            }, $fix_suffix$2.$$arity = 1);
            
            Opal.def(self, '$param_accessor_style', $param_accessor_style$3 = function $$param_accessor_style(style) {
              var self = this, $ret_or_1 = nil;
              if (self.param_accessor_style == null) self.param_accessor_style = nil;

              
              
              if (style == null) {
                style = nil;
              };
              if ($truthy(style)) {
                self.param_accessor_style = style};
              return (self.param_accessor_style = (function() {if ($truthy(($ret_or_1 = self.param_accessor_style))) {
                return $ret_or_1
              } else if ($truthy(self.$superclass()['$respond_to?']("param_accessor_style"))) {
                return self.$superclass().$param_accessor_style()
              } else {
                return "hyperstack"
              }; return nil; })());
            }, $param_accessor_style$3.$$arity = -1);
            
            Opal.def(self, '$param_definitions', $param_definitions$4 = function $$param_definitions() {
              var self = this, $ret_or_2 = nil;
              if (self.param_definitions == null) self.param_definitions = nil;

              return (self.param_definitions = (function() {if ($truthy(($ret_or_2 = self.param_definitions))) {
                return $ret_or_2
              } else if ($truthy(self.$superclass()['$respond_to?']("param_definitions"))) {
                return self.$superclass().$param_definitions().$dup()
              } else {
                return $$($nesting, 'Hash').$new()
              }; return nil; })())
            }, $param_definitions$4.$$arity = 0);
            
            Opal.def(self, '$define_param', $define_param$5 = function $$define_param(name, param_type, aka) {
              var $$6, $$7, $$8, $iter = $define_param$5.$$p, $yield = $iter || nil, self = this, $ret_or_3 = nil, meth_name = nil, $ret_or_4 = nil, var_name = nil, $ret_or_5 = nil, $writer = nil;

              if ($iter) $define_param$5.$$p = null;
              
              
              if (aka == null) {
                aka = nil;
              };
              if ($truthy((function() {if ($truthy(($ret_or_3 = self.$param_accessor_style()['$!=']("legacy")))) {
                return $ret_or_3
              } else {
                return aka
              }; return nil; })())) {
                
                meth_name = (function() {if ($truthy(($ret_or_4 = aka))) {
                  return $ret_or_4
                } else {
                  return name
                }; return nil; })();
                var_name = (function() {if ($truthy(($ret_or_5 = self.$fix_suffix(aka)))) {
                  return $ret_or_5
                } else {
                  return self.$instance_var_name_for(name)
                }; return nil; })();
                
                $writer = [name, $send(self, 'lambda', [], ($$6 = function(props){var self = $$6.$$s == null ? this : $$6.$$s, val = nil;
                  if (self.component == null) self.component = nil;

                  
                  
                  if (props == null) {
                    props = nil;
                  };
                  self.component.$instance_variable_set("" + "@" + (var_name), (val = self.$fetch_from_cache(name, param_type, props)));
                  if (self.$param_accessor_style()['$==']("accessors")) {
                  } else {
                    return nil;
                  };
                  return self.component["" + "$" + (meth_name)] = function() { return val };}, $$6.$$s = self, $$6.$$arity = 1, $$6))];
                $send(self.$param_definitions(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy(["hyperstack", "accessors"]['$include?'](self.$param_accessor_style()))) {
                  return nil};};
              if (param_type['$==']($$($nesting, 'Proc'))) {
                return $send(self, 'define_method', [name.$to_sym()], ($$7 = function($a){var self = $$7.$$s == null ? this : $$7.$$s, $iter = $$7.$$p, block = $iter || nil, $post_args, args;

                  
                  
                  if ($iter) $$7.$$p = null;;
                  
                  $post_args = Opal.slice.call(arguments, 0, arguments.length);
                  
                  args = $post_args;;
                  if ($truthy(self.$props()['$[]'](name))) {
                    return $send(self.$props()['$[]'](name), 'call', Opal.to_a(args), block.$to_proc())
                  } else {
                    return nil
                  };}, $$7.$$s = self, $$7.$$arity = -1, $$7))
              } else {
                return $send(self, 'define_method', [name.$to_sym()], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

                  return self.$fetch_from_cache(name, param_type, self.$props())}, $$8.$$s = self, $$8.$$arity = 0, $$8))
              };
            }, $define_param$5.$$arity = -3);
            return (Opal.def(self, '$define_all_others', $define_all_others$9 = function $$define_all_others(name) {
              var $$10, $$11, $iter = $define_all_others$9.$$p, $yield = $iter || nil, self = this, var_name = nil, $writer = nil;

              if ($iter) $define_all_others$9.$$p = null;
              
              var_name = self.$instance_var_name_for(name);
              
              $writer = [name, $send(self, 'lambda', [], ($$10 = function(props){var self = $$10.$$s == null ? this : $$10.$$s, val = nil;
                if (self.component == null) self.component = nil;

                
                
                if (props == null) {
                  props = nil;
                };
                self.component.$instance_variable_set("" + "@" + (var_name), (val = Opal.yield1($yield, props)));
                if (self.$param_accessor_style()['$==']("accessors")) {
                } else {
                  return nil;
                };
                return self.component["" + "$" + (name)] = function() { return val };}, $$10.$$s = self, $$10.$$arity = 1, $$10))];
              $send(self.$param_definitions(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return $send(self, 'define_method', [name.$to_sym()], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s, $ret_or_6 = nil;
                if (self._all_others_cache == null) self._all_others_cache = nil;

                return (self._all_others_cache = (function() {if ($truthy(($ret_or_6 = self._all_others_cache))) {
                  return $ret_or_6
                } else {
                  return Opal.yield1($yield, self.$props());
                }; return nil; })())}, $$11.$$s = self, $$11.$$arity = 0, $$11));
            }, $define_all_others$9.$$arity = 1), nil) && 'define_all_others';
          })(Opal.get_singleton_class(self), $nesting);
          
          Opal.def(self, '$param_accessor_style', $PropsWrapper_param_accessor_style$12 = function $$param_accessor_style() {
            var self = this;

            return self.$class().$param_accessor_style()
          }, $PropsWrapper_param_accessor_style$12.$$arity = 0);
          
          Opal.def(self, '$initialize', $PropsWrapper_initialize$13 = function $$initialize(component, incoming) {
            var $$14, self = this;

            
            
            if (incoming == null) {
              incoming = nil;
            };
            self.component = component;
            return $send(self.$class().$param_definitions(), 'each_value', [], ($$14 = function(initializer){var self = $$14.$$s == null ? this : $$14.$$s, $ret_or_7 = nil;

              
              
              if (initializer == null) {
                initializer = nil;
              };
              return $send(self, 'instance_exec', [(function() {if ($truthy(($ret_or_7 = incoming))) {
                return $ret_or_7
              } else {
                return self.$props()
              }; return nil; })()], initializer.$to_proc());}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          }, $PropsWrapper_initialize$13.$$arity = -2);
          
          Opal.def(self, '$reload', $PropsWrapper_reload$15 = function $$reload(next_props) {
            var self = this;

            
            self._all_others_cache = nil;
            return self.$initialize(self.component, next_props);
          }, $PropsWrapper_reload$15.$$arity = 1);
          
          Opal.def(self, '$[]', $PropsWrapper_$$$16 = function(prop) {
            var self = this;

            return self.$props()['$[]'](prop)
          }, $PropsWrapper_$$$16.$$arity = 1);
          self.$private();
          
          Opal.def(self, '$fetch_from_cache', $PropsWrapper_fetch_from_cache$17 = function $$fetch_from_cache(name, param_type, props) {
            var $a, $b, $$18, self = this, last = nil, cached_value = nil;

            
            $b = self.$cache()['$[]'](name), $a = Opal.to_ary($b), (last = ($a[0] == null ? nil : $a[0])), (cached_value = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(last['$equal?'](props['$[]'](name)))) {
              return cached_value};
            return $send(self.$convert_param(name, param_type, props), 'tap', [], ($$18 = function(value){var self = $$18.$$s == null ? this : $$18.$$s, $writer = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, [props['$[]'](name), value]];
              $send(self.$cache(), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$18.$$s = self, $$18.$$arity = 1, $$18));
          }, $PropsWrapper_fetch_from_cache$17.$$arity = 3);
          
          Opal.def(self, '$convert_param', $PropsWrapper_convert_param$19 = function $$convert_param(name, param_type, props) {
            var $$20, self = this, $ret_or_8 = nil;

            if ($truthy(param_type['$respond_to?']("_react_param_conversion"))) {
              return param_type.$_react_param_conversion(props['$[]'](name), nil)
            } else if ($truthy((function() {if ($truthy(($ret_or_8 = param_type['$is_a?']($$($nesting, 'Array'))))) {
              return param_type['$[]'](0)['$respond_to?']("_react_param_conversion")
            } else {
              return $ret_or_8
            }; return nil; })())) {
              return $send(props['$[]'](name), 'collect', [], ($$20 = function(param){var self = $$20.$$s == null ? this : $$20.$$s;

                
                
                if (param == null) {
                  param = nil;
                };
                return param_type['$[]'](0).$_react_param_conversion(param, nil);}, $$20.$$s = self, $$20.$$arity = 1, $$20))
            } else {
              return props['$[]'](name)
            }
          }, $PropsWrapper_convert_param$19.$$arity = 3);
          
          Opal.def(self, '$cache', $PropsWrapper_cache$21 = function $$cache() {
            var $$22, self = this, $ret_or_9 = nil;

            return (self.cache = (function() {if ($truthy(($ret_or_9 = self.cache))) {
              return $ret_or_9
            } else {
              return $send($$($nesting, 'Hash'), 'new', [], ($$22 = function(h, k){var self = $$22.$$s == null ? this : $$22.$$s, $writer = nil;

                
                
                if (h == null) {
                  h = nil;
                };
                
                if (k == null) {
                  k = nil;
                };
                $writer = [k, []];
                $send(h, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, $$22.$$s = self, $$22.$$arity = 2, $$22))
            }; return nil; })())
          }, $PropsWrapper_cache$21.$$arity = 0);
          
          Opal.def(self, '$props', $PropsWrapper_props$23 = function $$props() {
            var self = this;

            return self.$component().$props()
          }, $PropsWrapper_props$23.$$arity = 0);
          return (Opal.def(self, '$value_for', $PropsWrapper_value_for$24 = function $$value_for(name) {
            var self = this;

            if ($truthy(self['$[]'](name))) {
              return self['$[]'](name).$instance_variable_get("@value")
            } else {
              return nil
            }
          }, $PropsWrapper_value_for$24.$$arity = 1), nil) && 'value_for';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/component"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $lambda = Opal.lambda, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$class_eval', '$class_attribute', '$lambda', '$zero?', '$arity', '$deprecation_warning', '$instance_exec', '$to_proc', '$define_callback', '$add_after_error_hook', '$extend', '$respond_to?', '$!', '$<', '$allow_deprecated_render_definition?', '$new', '$to_a', '$mounted_components', '$each', '$include?', '$force_update!', '$name', '$class', '$event_camelize', '$to_s', '$call', '$[]', '$params', '$props_wrapper', '$on_opal_client?', '$load_context', '$observing', '$<<', '$run_callback', '$props', '$quiet_test', '$reload', '$unmount', '$remove', '$delete', '$set_state', '$==', '$method_defined?', '$raise', '$first', '$component_will_mount', '$_run_before_render_callbacks', '$render', '$waiting_on_resources']);
  
  self.$require("hyperstack/ext/component/string");
  self.$require("hyperstack/ext/component/hash");
  self.$require("active_support/core_ext/class/attribute");
  self.$require("hyperstack/internal/component/rendering_context");
  self.$require("hyperstack/internal/component");
  self.$require("hyperstack/internal/component/instance_methods");
  self.$require("hyperstack/internal/component/class_methods");
  self.$require("hyperstack/internal/component/props_wrapper");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting), $Component_included$1, $Component_mounted_components$8, $Component_force_update$excl$9, $Component_deprecation_warning$11, $Component_deprecation_warning$12, $Component_initialize$13, $Component_emit$14, $Component_component_will_mount$15, $Component_component_did_mount$17, $Component_component_will_receive_props$19, $Component_component_will_update$21, $Component_component_did_update$23, $Component_component_will_unmount$25, $Component_component_did_catch$27, $Component_mutations$29, $Component_update_react_js_state$30, $Component_render$31, $Component_waiting_on_resources$32, $Component___hyperstack_component_run_post_render_hooks$33, $Component__run_before_render_callbacks$34, $Component__render_wrapper$35;

      
      Opal.defs(self, '$included', $Component_included$1 = function $$included(base) {
        var $$2, self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        
        base.$include($$$($$$($$($nesting, 'Hyperstack'), 'State'), 'Observer'));
        base.$include($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'InstanceMethods'));
        base.$include($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'AutoUnmount'));
        base.$include($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'));
        base.$include($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ShouldComponentUpdate'));
        $send(base, 'class_eval', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $$3, $$4, $$5, $$6, $$7, method_args_deprecation_check = nil;

          
          self.$class_attribute("initial_state");
          method_args_deprecation_check = $send(self, 'lambda', [], ($$3 = function(name, sself, proc, $a){var self = $$3.$$s == null ? this : $$3.$$s, $post_args, args;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (sself == null) {
              sself = nil;
            };
            
            if (proc == null) {
              proc = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 3, arguments.length);
            
            args = $post_args;;
            if ($truthy(proc.$arity()['$zero?']())) {
              args = []
            } else {
              self.$deprecation_warning("" + "In the future " + (name) + " callbacks will not receive any parameters.")
            };
            $send(sself, 'instance_exec', Opal.to_a(args), proc.$to_proc());
            return args;}, $$3.$$s = self, $$3.$$arity = -4, $$3));
          self.$define_callback("before_mount", $hash2(["before_call_hook"], {"before_call_hook": method_args_deprecation_check}));
          self.$define_callback("after_mount");
          self.$define_callback("before_new_params", $hash2(["after_define_hook"], {"after_define_hook": $send(self, 'lambda', [], ($$4 = function(klass){var self = $$4.$$s == null ? this : $$4.$$s;

            
            
            if (klass == null) {
              klass = nil;
            };
            return klass.$deprecation_warning("" + "`before_new_params` has been deprecated.  The base " + "method componentWillReceiveProps is deprecated in React without replacement");}, $$4.$$s = self, $$4.$$arity = 1, $$4))}));
          self.$define_callback("before_update", $hash2(["before_call_hook"], {"before_call_hook": method_args_deprecation_check}));
          self.$define_callback("after_update");
          self.$define_callback("__hyperstack_component_after_render_hook", $hash2(["before_call_hook"], {"before_call_hook": $lambda(($$5 = function(_, sself, proc, $a){var self = $$5.$$s == null ? this : $$5.$$s, $post_args, args;

            
            
            if (_ == null) {
              _ = nil;
            };
            
            if (sself == null) {
              sself = nil;
            };
            
            if (proc == null) {
              proc = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 3, arguments.length);
            
            args = $post_args;;
            return [].concat(Opal.to_a($send(sself, 'instance_exec', Opal.to_a(args), proc.$to_proc())));}, $$5.$$s = self, $$5.$$arity = -4, $$5))}));
          self.$define_callback("__hyperstack_component_rescue_hook", $hash2(["before_call_hook"], {"before_call_hook": $lambda(($$6 = function(_, sself, proc, $a){var self = $$6.$$s == null ? this : $$6.$$s, $post_args, args;

            
            
            if (_ == null) {
              _ = nil;
            };
            
            if (sself == null) {
              sself = nil;
            };
            
            if (proc == null) {
              proc = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 3, arguments.length);
            
            args = $post_args;;
            return $send(sself, 'instance_exec', Opal.to_a(args), proc.$to_proc());}, $$6.$$s = self, $$6.$$arity = -4, $$6))}));
          return self.$define_callback("after_error", $hash2(["after_define_hook"], {"after_define_hook": $lambda(($$7 = function(klass){var self = $$7.$$s == null ? this : $$7.$$s;

            
            
            if (klass == null) {
              klass = nil;
            };
            return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper').$add_after_error_hook(klass);}, $$7.$$s = self, $$7.$$arity = 1, $$7))}));}, $$2.$$s = self, $$2.$$arity = 0, $$2));
        base.$extend($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ClassMethods'));
        if ($truthy(Opal.__hyperstack_component_original_defn)) {
          return nil
        } else {
          
          
         Opal.__hyperstack_component_original_defn = Opal.defn
         Opal.defn = function(klass, name, fn) {
           (function() {if ($truthy((function() {if ($truthy(($ret_or_1 = (klass)['$respond_to?']("hyper_component?")))) {
            return $rb_lt(klass, $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'NativeLibrary'))['$!']()
          } else {
            return $ret_or_1
          }; return nil; })())) {
            if ($truthy((function() {if ($truthy(($ret_or_2 = name == '$render'))) {
              return (klass)['$allow_deprecated_render_definition?']()['$!']()
            } else {
              return $ret_or_2
            }; return nil; })())) {
              return $$($nesting, 'Hyperstack').$deprecation_warning(klass, "Do not directly define the render method. Use the render macro instead.")
            } else if ($truthy(name == '$__hyperstack_component_render')) {
              return name = '$render';
            } else {
              return nil
            }
          } else {
            return nil
          }; return nil; })()
           Opal.__hyperstack_component_original_defn(klass, name, fn)
           }
         ;
          return nil;
        };
      }, $Component_included$1.$$arity = 1);
      Opal.defs(self, '$mounted_components', $Component_mounted_components$8 = function $$mounted_components() {
        var self = this, $ret_or_3 = nil;
        if (self.__hyperstack_component_mounted_components == null) self.__hyperstack_component_mounted_components = nil;

        return (self.__hyperstack_component_mounted_components = (function() {if ($truthy(($ret_or_3 = self.__hyperstack_component_mounted_components))) {
          return $ret_or_3
        } else {
          return $$($nesting, 'Set').$new()
        }; return nil; })())
      }, $Component_mounted_components$8.$$arity = 0);
      Opal.defs(self, '$force_update!', $Component_force_update$excl$9 = function() {
        var $$10, self = this, components = nil;

        
        components = self.$mounted_components().$to_a();
        return $send(components, 'each', [], ($$10 = function(comp){var self = $$10.$$s == null ? this : $$10.$$s;

          
          
          if (comp == null) {
            comp = nil;
          };
          if ($truthy(self.$mounted_components()['$include?'](comp))) {
          } else {
            return nil;
          };
          return comp['$force_update!']();}, $$10.$$s = self, $$10.$$arity = 1, $$10));
      }, $Component_force_update$excl$9.$$arity = 0);
      Opal.defs(self, '$deprecation_warning', $Component_deprecation_warning$11 = function $$deprecation_warning(message) {
        var self = this;

        return $$($nesting, 'Hyperstack').$deprecation_warning(self.$name(), message)
      }, $Component_deprecation_warning$11.$$arity = 1);
      
      Opal.def(self, '$deprecation_warning', $Component_deprecation_warning$12 = function $$deprecation_warning(message) {
        var self = this;

        return $$($nesting, 'Hyperstack').$deprecation_warning(self.$class().$name(), message)
      }, $Component_deprecation_warning$12.$$arity = 1);
      
      Opal.def(self, '$initialize', $Component_initialize$13 = function $$initialize(native_element) {
        var self = this;

        return (self.__hyperstack_component_native = native_element)
      }, $Component_initialize$13.$$arity = 1);
      
      Opal.def(self, '$emit', $Component_emit$14 = function $$emit(event_name, $a) {
        var $post_args, args, self = this, built_in_event_name = nil;

        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        if ($truthy($$$($$($nesting, 'Event'), 'BUILT_IN_EVENTS')['$include?']((built_in_event_name = "" + "on" + (event_name.$to_s().$event_camelize()))))) {
          return $send(self.$params()['$[]'](built_in_event_name), 'call', Opal.to_a(args))
        } else {
          return $send(self.$params()['$[]']("" + "on_" + (event_name)), 'call', Opal.to_a(args))
        };
      }, $Component_emit$14.$$arity = -2);
      
      Opal.def(self, '$component_will_mount', $Component_component_will_mount$15 = function $$component_will_mount() {
        var $$16, self = this;

        
        self.__hyperstack_component_params_wrapper = self.$class().$props_wrapper().$new(self);
        if ($truthy($$($nesting, 'IsomorphicHelpers')['$on_opal_client?']())) {
          $$($nesting, 'IsomorphicHelpers').$load_context(true)};
        return $send(self, 'observing', [$hash2(["immediate_update"], {"immediate_update": true})], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s;

          
          $$$($$($nesting, 'Hyperstack'), 'Component').$mounted_components()['$<<'](self);
          return self.$run_callback("before_mount", self.$props());}, $$16.$$s = self, $$16.$$arity = 0, $$16));
      }, $Component_component_will_mount$15.$$arity = 0);
      
      Opal.def(self, '$component_did_mount', $Component_component_did_mount$17 = function $$component_did_mount() {
        var $$18, self = this;

        return $send(self, 'observing', [$hash2(["update_objects"], {"update_objects": true})], ($$18 = function(){var self = $$18.$$s == null ? this : $$18.$$s;

          
          self.$run_callback("after_mount");
          return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$quiet_test(self);}, $$18.$$s = self, $$18.$$arity = 0, $$18))
      }, $Component_component_did_mount$17.$$arity = 0);
      
      Opal.def(self, '$component_will_receive_props', $Component_component_will_receive_props$19 = function $$component_will_receive_props(next_props) {
        var $$20, self = this;

        
        $send(self, 'observing', [$hash2(["immediate_update"], {"immediate_update": true})], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s;

          return self.$run_callback("before_new_params", next_props)}, $$20.$$s = self, $$20.$$arity = 0, $$20));
        return (self.__hyperstack_component_receiving_props = true);
      }, $Component_component_will_receive_props$19.$$arity = 1);
      
      Opal.def(self, '$component_will_update', $Component_component_will_update$21 = function $$component_will_update(next_props, next_state) {
        var $$22, self = this;
        if (self.__hyperstack_component_receiving_props == null) self.__hyperstack_component_receiving_props = nil;
        if (self.__hyperstack_component_params_wrapper == null) self.__hyperstack_component_params_wrapper = nil;

        
        $send(self, 'observing', [], ($$22 = function(){var self = $$22.$$s == null ? this : $$22.$$s;

          return self.$run_callback("before_update", next_props, next_state)}, $$22.$$s = self, $$22.$$arity = 0, $$22));
        if ($truthy(self.__hyperstack_component_receiving_props)) {
          self.__hyperstack_component_params_wrapper.$reload(next_props)};
        return (self.__hyperstack_component_receiving_props = false);
      }, $Component_component_will_update$21.$$arity = 2);
      
      Opal.def(self, '$component_did_update', $Component_component_did_update$23 = function $$component_did_update(prev_props, prev_state) {
        var $$24, self = this;

        return $send(self, 'observing', [$hash2(["update_objects"], {"update_objects": true})], ($$24 = function(){var self = $$24.$$s == null ? this : $$24.$$s;

          
          self.$run_callback("after_update", prev_props, prev_state);
          return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$quiet_test(self);}, $$24.$$s = self, $$24.$$arity = 0, $$24))
      }, $Component_component_did_update$23.$$arity = 2);
      
      Opal.def(self, '$component_will_unmount', $Component_component_will_unmount$25 = function $$component_will_unmount() {
        var $$26, self = this;

        return $send(self, 'observing', [], ($$26 = function(){var self = $$26.$$s == null ? this : $$26.$$s;

          
          self.$unmount();
          self.$remove();
          return $$$($$($nesting, 'Hyperstack'), 'Component').$mounted_components().$delete(self);}, $$26.$$s = self, $$26.$$arity = 0, $$26))
      }, $Component_component_will_unmount$25.$$arity = 0);
      
      Opal.def(self, '$component_did_catch', $Component_component_did_catch$27 = function $$component_did_catch(error, info) {
        var $$28, self = this;

        return $send(self, 'observing', [], ($$28 = function(){var self = $$28.$$s == null ? this : $$28.$$s;

          return self.$run_callback("after_error", error, info)}, $$28.$$s = self, $$28.$$arity = 0, $$28))
      }, $Component_component_did_catch$27.$$arity = 2);
      
      Opal.def(self, '$mutations', $Component_mutations$29 = function $$mutations(_objects) {
        var self = this;

        return self.$set_state($hash2(["***_state_updated_at-***"], {"***_state_updated_at-***": Date.now() + Math.random()}))
      }, $Component_mutations$29.$$arity = 1);
      
      Opal.def(self, '$update_react_js_state', $Component_update_react_js_state$30 = function $$update_react_js_state(object, name, value) {
        var self = this;

        if ($truthy(object)) {
          
          if (object['$=='](self)) {
          } else {
            name = "" + (object.$class()) + "." + (name)
          };
          return self.$set_state($hash("***_state_updated_at-***", Date.now() + Math.random(), name, value));
        } else {
          return self.$set_state($hash(name, value))
        }
      }, $Component_update_react_js_state$30.$$arity = 3);
      if ($truthy(self['$method_defined?']("render"))) {
      } else {
        
        Opal.def(self, '$render', $Component_render$31 = function $$render() {
          var self = this;

          return self.$raise("no render defined")
        }, $Component_render$31.$$arity = 0)
      };
      
      Opal.def(self, '$waiting_on_resources', $Component_waiting_on_resources$32 = function $$waiting_on_resources() {
        var self = this;
        if (self.__hyperstack_component_waiting_on_resources == null) self.__hyperstack_component_waiting_on_resources = nil;

        return self.__hyperstack_component_waiting_on_resources
      }, $Component_waiting_on_resources$32.$$arity = 0);
      
      Opal.def(self, '$__hyperstack_component_run_post_render_hooks', $Component___hyperstack_component_run_post_render_hooks$33 = function $$__hyperstack_component_run_post_render_hooks(element) {
        var self = this;

        return self.$run_callback("__hyperstack_component_after_render_hook", element).$first()
      }, $Component___hyperstack_component_run_post_render_hooks$33.$$arity = 1);
      
      Opal.def(self, '$_run_before_render_callbacks', $Component__run_before_render_callbacks$34 = function $$_run_before_render_callbacks() {
        var self = this;
        if (self.__component_mounted == null) self.__component_mounted = nil;

        
        if ($truthy(self.__component_mounted)) {
        } else {
          self.$component_will_mount()
        };
        return (self.__component_mounted = true);
      }, $Component__run_before_render_callbacks$34.$$arity = 0);
      return (Opal.def(self, '$_render_wrapper', $Component__render_wrapper$35 = function $$_render_wrapper() {
        var $$36, self = this;

        
        self.$_run_before_render_callbacks();
        return $send(self, 'observing', [$hash2(["rendering"], {"rendering": true})], ($$36 = function(){var self = $$36.$$s == null ? this : $$36.$$s, $$37, element = nil;

          
          element = $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [nil], ($$37 = function(){var self = $$37.$$s == null ? this : $$37.$$s, $ret_or_4 = nil;

            if ($truthy(($ret_or_4 = self.$render()))) {
              return $ret_or_4
            } else {
              return ""
            }}, $$37.$$s = self, $$37.$$arity = 0, $$37));
          if ($truthy(element['$respond_to?']("waiting_on_resources"))) {
            self.__hyperstack_component_waiting_on_resources = element.$waiting_on_resources()};
          return element;}, $$36.$$s = self, $$36.$$arity = 0, $$36));
      }, $Component__render_wrapper$35.$$arity = 0), nil) && '_render_wrapper';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/internal/component/should_component_update"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$observing', '$respond_to?', '$!', '$call_needs_update', '$props_changed?', '$native_state_changed?', '$define_singleton_method', '$needs_update?', '$new', '$!=']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'ShouldComponentUpdate');

          var $nesting = [self].concat($parent_nesting), $ShouldComponentUpdate_should_component_update$ques$1, $ShouldComponentUpdate_call_needs_update$3, $ShouldComponentUpdate_native_state_changed$ques$6, $ShouldComponentUpdate_props_changed$ques$7;

          
          
          Opal.def(self, '$should_component_update?', $ShouldComponentUpdate_should_component_update$ques$1 = function(next_props, next_state) {
            var $$2, self = this;

            return $send(self, 'observing', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $ret_or_1 = nil;

              if ($truthy(self['$respond_to?']("needs_update?"))) {
                return self.$call_needs_update(next_props, next_state)['$!']()['$!']()
              } else if ($truthy(($ret_or_1 = self['$props_changed?'](next_props)))) {
                return $ret_or_1
              } else {
                return self['$native_state_changed?'](next_state)
              }}, $$2.$$s = self, $$2.$$arity = 0, $$2))
          }, $ShouldComponentUpdate_should_component_update$ques$1.$$arity = 2);
          
          Opal.def(self, '$call_needs_update', $ShouldComponentUpdate_call_needs_update$3 = function $$call_needs_update(next_params, next_state) {
            var $$4, $$5, self = this, component = nil;

            
            component = self;
            $send(next_params, 'define_singleton_method', ["changed?"], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

              return component['$props_changed?'](self)}, $$4.$$s = self, $$4.$$arity = 0, $$4));
            $send(next_state, 'define_singleton_method', ["changed?"], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

              return component['$native_state_changed?'](next_state)}, $$5.$$s = self, $$5.$$arity = 0, $$5));
            return self['$needs_update?'](next_params, next_state);
          }, $ShouldComponentUpdate_call_needs_update$3.$$arity = 2);
          
          Opal.def(self, '$native_state_changed?', $ShouldComponentUpdate_native_state_changed$ques$6 = function(next_state_hash) {
            var self = this, state_hash = nil;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            
            state_hash = $$($nesting, 'Hash').$new(self.__hyperstack_component_native.state);
            return next_state_hash['$!='](state_hash);
          }, $ShouldComponentUpdate_native_state_changed$ques$6.$$arity = 1);
          return (Opal.def(self, '$props_changed?', $ShouldComponentUpdate_props_changed$ques$7 = function(next_props) {
            var self = this, props = nil;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            
            props = $$($nesting, 'Hash').$new(self.__hyperstack_component_native.props);
            return next_props['$!='](props);
          }, $ShouldComponentUpdate_props_changed$ques$7.$$arity = 1), nil) && 'props_changed?';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/tags"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $klass = Opal.klass;

  Opal.add_stubs(['$+', '$each', '$define_method', '$upcase', '$render', '$to_proc', '$const_set', '$new', '$include', '$import_native_component', '$downcase', '$=~', '$include?', '$create_element', '$find_component', '$find_name_and_parent', '$extend', '$private', '$name', '$split', '$>', '$length', '$last', '$[]', '$inject', '$const_get', '$lookup_const', '$!', '$method_defined?', '$raise', '$_reactrb_import_component_class', '$==', '$reverse', '$to_s', '$class', '$detect', '$const_defined?', '$respond_to?']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting), $Component$3;

        return (function($base, $parent_nesting) {
          var self = $module($base, 'Tags');

          var $nesting = [self].concat($parent_nesting), $Tags$1, $Tags$4, $Tags_html_tag_class_for$6, $Tags_method_missing$7, $Tags_find_component$13, $Tags_lookup_const$14;

          
          Opal.const_set($nesting[0], 'HTML_TAGS', $rb_plus(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"], ["circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]));
          $send($$($nesting, 'HTML_TAGS'), 'each', [], ($Tags$1 = function(tag){var self = $Tags$1.$$s == null ? this : $Tags$1.$$s, $$2;

            
            
            if (tag == null) {
              tag = nil;
            };
            $send(self, 'define_method', [tag.$upcase()], ($$2 = function($a){var self = $$2.$$s == null ? this : $$2.$$s, $iter = $$2.$$p, children = $iter || nil, $post_args, params;

              
              
              if ($iter) $$2.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              params = $post_args;;
              return $send($$($nesting, 'RenderingContext'), 'render', [tag].concat(Opal.to_a(params)), children.$to_proc());}, $$2.$$s = self, $$2.$$arity = -1, $$2));
            return self.$const_set(tag.$upcase(), tag);}, $Tags$1.$$s = self, $Tags$1.$$arity = 1, $Tags$1));
          self.$const_set("FRAGMENT", $send($$($nesting, 'Class'), 'new', [], ($Tags$4 = function(){var self = $Tags$4.$$s == null ? this : $Tags$4.$$s, $$5;

            
            self.$include($$$($$($nesting, 'Hyperstack'), 'Component'));
            $send(self, 'render', [], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

              return nil}, $$5.$$s = self, $$5.$$arity = 0, $$5));
            return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper').$import_native_component(self, React.Fragment);}, $Tags$4.$$s = self, $Tags$4.$$arity = 0, $Tags$4)));
          Opal.defs(self, '$html_tag_class_for', $Tags_html_tag_class_for$6 = function $$html_tag_class_for(tag) {
            var self = this, downcased_tag = nil, $ret_or_1 = nil;

            
            downcased_tag = tag.$downcase();
            if ($truthy((function() {if ($truthy(($ret_or_1 = tag['$=~'](/^[A-Z]+$/)))) {
              return $$($nesting, 'HTML_TAGS')['$include?'](downcased_tag)
            } else {
              return $ret_or_1
            }; return nil; })())) {
              return $$($nesting, 'Object').$const_set(tag, $$($nesting, 'ReactWrapper').$create_element(downcased_tag))
            } else {
              return nil
            };
          }, $Tags_html_tag_class_for$6.$$arity = 1);
          
          Opal.def(self, '$method_missing', $Tags_method_missing$7 = function $$method_missing(name, $a) {
            var $iter = $Tags_method_missing$7.$$p, children = $iter || nil, $post_args, params, self = this, component = nil;

            if ($iter) $Tags_method_missing$7.$$p = null;
            
            
            if ($iter) $Tags_method_missing$7.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            params = $post_args;;
            component = self.$find_component(name);
            if ($truthy(component)) {
              return $send($$($nesting, 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc())};
            return $send2(self, $find_super(self, 'method_missing', $Tags_method_missing$7, false, true), 'method_missing', [name].concat(Opal.to_a(params)), $iter);
          }, $Tags_method_missing$7.$$arity = -2);
          (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting), $included$8, $find_name_and_parent$11;

            
            
            Opal.def(self, '$included', $included$8 = function $$included(component) {
              var $a, $b, $$9, $iter = $included$8.$$p, $yield = $iter || nil, self = this, name = nil, parent = nil, tag_names_module = nil;

              if ($iter) $included$8.$$p = null;
              
              $b = self.$find_name_and_parent(component), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (parent = ($a[1] == null ? nil : $a[1])), $b;
              tag_names_module = $send($$($nesting, 'Module'), 'new', [], ($$9 = function(){var self = $$9.$$s == null ? this : $$9.$$s, $$10;

                return $send(self, 'define_method', [name], ($$10 = function($c){var self = $$10.$$s == null ? this : $$10.$$s, $iter = $$10.$$p, children = $iter || nil, $post_args, params;

                  
                  
                  if ($iter) $$10.$$p = null;;
                  
                  $post_args = Opal.slice.call(arguments, 0, arguments.length);
                  
                  params = $post_args;;
                  return $send($$($nesting, 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc());}, $$10.$$s = self, $$10.$$arity = -1, $$10))}, $$9.$$s = self, $$9.$$arity = 0, $$9));
              return parent.$extend(tag_names_module);
            }, $included$8.$$arity = 1);
            self.$private();
            return (Opal.def(self, '$find_name_and_parent', $find_name_and_parent$11 = function $$find_name_and_parent(component) {
              var $$12, self = this, split_name = nil, $ret_or_2 = nil, $ret_or_3 = nil;

              
              split_name = (function() {if ($truthy(($ret_or_2 = component.$name()))) {
                return component.$name().$split("::")
              } else {
                return $ret_or_2
              }; return nil; })();
              if ($truthy((function() {if ($truthy(($ret_or_3 = split_name))) {
                return $rb_gt(split_name.$length(), 1)
              } else {
                return $ret_or_3
              }; return nil; })())) {
                return [split_name.$last(), $send(split_name, 'inject', [[$$($nesting, 'Module')]], ($$12 = function(a, e){var self = $$12.$$s == null ? this : $$12.$$s;

                  
                  
                  if (a == null) {
                    a = nil;
                  };
                  
                  if (e == null) {
                    e = nil;
                  };
                  return $rb_plus(a, [a.$last().$const_get(e)]);}, $$12.$$s = self, $$12.$$arity = 2, $$12))['$[]'](-2)]
              } else {
                return nil
              };
            }, $find_name_and_parent$11.$$arity = 1), nil) && 'find_name_and_parent';
          })(Opal.get_singleton_class(self), $nesting);
          self.$private();
          
          Opal.def(self, '$find_component', $Tags_find_component$13 = function $$find_component(name) {
            var self = this, component = nil, $ret_or_4 = nil, $ret_or_5 = nil;

            
            component = self.$lookup_const(name);
            if ($truthy((function() {if ($truthy(($ret_or_4 = component))) {
              return component['$method_defined?']("render")['$!']()
            } else {
              return $ret_or_4
            }; return nil; })())) {
              self.$raise("" + (name) + " does not appear to be a react component.")};
            if ($truthy(($ret_or_5 = component))) {
              return $ret_or_5
            } else {
              return $$($nesting, 'Object').$_reactrb_import_component_class(name)
            };
          }, $Tags_find_component$13.$$arity = 1);
          return (Opal.def(self, '$lookup_const', $Tags_lookup_const$14 = function $$lookup_const(name) {
            var $$15, $$16, self = this, scopes = nil, scope = nil;

            
            if ($truthy(name['$=~'](/^[A-Z]/))) {
            } else {
              return nil
            };
            if (name['$==']("FRAGMENT")) {
              return $$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'FRAGMENT')};
            scopes = $send(self.$class().$name().$to_s().$split("::"), 'inject', [[$$($nesting, 'Object')]], ($$15 = function(nesting, next_const){var self = $$15.$$s == null ? this : $$15.$$s;

              
              
              if (nesting == null) {
                nesting = nil;
              };
              
              if (next_const == null) {
                next_const = nil;
              };
              return $rb_plus(nesting, [nesting.$last().$const_get(next_const)]);}, $$15.$$s = self, $$15.$$arity = 2, $$15)).$reverse();
            scope = $send(scopes, 'detect', [], ($$16 = function(s){var self = $$16.$$s == null ? this : $$16.$$s;

              
              
              if (s == null) {
                s = nil;
              };
              return s['$const_defined?'](name, false);}, $$16.$$s = self, $$16.$$arity = 1, $$16));
            if ($truthy(scope)) {
              return scope.$const_get(name, false)
            } else {
              return nil
            };
          }, $Tags_lookup_const$14.$$arity = 1), nil) && 'lookup_const';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  if ($truthy($$($nesting, 'Object')['$respond_to?']("_reactrb_import_component_class"))) {
    return nil
  } else {
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Object');

      var $nesting = [self].concat($parent_nesting), $Object__reactrb_import_component_class$17;

      return (Opal.defs(self, '$_reactrb_import_component_class', $Object__reactrb_import_component_class$17 = function $$_reactrb_import_component_class(_name) {
        var self = this;

        return nil
      }, $Object__reactrb_import_component_class$17.$$arity = 1), nil) && '_reactrb_import_component_class'
    })($nesting[0], null, $nesting)
  };
};

Opal.modules["hyperstack/component/event"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Event');

        var $nesting = [self].concat($parent_nesting), $Event_initialize$1;

        
        self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
        self.$alias_native("bubbles", "bubbles");
        self.$alias_native("cancelable", "cancelable");
        self.$alias_native("current_target", "currentTarget");
        self.$alias_native("default_prevented", "defaultPrevented");
        self.$alias_native("event_phase", "eventPhase");
        self.$alias_native("is_trusted?", "isTrusted");
        self.$alias_native("native_event", "nativeEvent");
        self.$alias_native("target", "target");
        self.$alias_native("timestamp", "timeStamp");
        self.$alias_native("event_type", "type");
        self.$alias_native("prevent_default", "preventDefault");
        self.$alias_native("stop_propagation", "stopPropagation");
        self.$alias_native("clipboard_data", "clipboardData");
        self.$alias_native("alt_key", "altKey");
        self.$alias_native("char_code", "charCode");
        self.$alias_native("ctrl_key", "ctrlKey");
        self.$alias_native("get_modifier_state", "getModifierState");
        self.$alias_native("key", "key");
        self.$alias_native("key_code", "keyCode");
        self.$alias_native("locale", "locale");
        self.$alias_native("location", "location");
        self.$alias_native("meta_key", "metaKey");
        self.$alias_native("repeat", "repeat");
        self.$alias_native("shift_key", "shiftKey");
        self.$alias_native("which", "which");
        self.$alias_native("related_target", "relatedTarget");
        self.$alias_native("button", "button");
        self.$alias_native("buttons", "buttons");
        self.$alias_native("client_x", "clientX");
        self.$alias_native("client_y", "clientY");
        self.$alias_native("get_modifier_state", "getModifierState");
        self.$alias_native("page_x", "pageX");
        self.$alias_native("page_y", "pageY");
        self.$alias_native("screen_x", "screen_x");
        self.$alias_native("screen_y", "screen_y");
        self.$alias_native("changed_touches", "changedTouches");
        self.$alias_native("target_touches", "targetTouches");
        self.$alias_native("touches", "touches");
        self.$alias_native("detail", "detail");
        self.$alias_native("view", "view");
        self.$alias_native("delta_mode", "deltaMode");
        self.$alias_native("delta_x", "deltaX");
        self.$alias_native("delta_y", "deltaY");
        self.$alias_native("delta_z", "deltaZ");
        Opal.const_set($nesting[0], 'BUILT_IN_EVENTS', ["onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onClick", "onContextMenu", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onSelect", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll", "onWheel"]);
        return (Opal.def(self, '$initialize', $Event_initialize$1 = function $$initialize(native_event) {
          var self = this;

          return (self["native"] = native_event)
        }, $Event_initialize$1.$$arity = 1), nil) && 'initialize';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/ext/component/object"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $alias = Opal.alias, $truthy = Opal.truthy;

  Opal.add_stubs(['$_reactrb_tag_original_const_missing', '$html_tag_class_for', '$raise', '$object_id']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_to_key$2;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Object');

      var $nesting = [self].concat($parent_nesting);

      return (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $const_missing$1;

        
        $alias(self, "_reactrb_tag_original_const_missing", "const_missing");
        return (Opal.def(self, '$const_missing', $const_missing$1 = function $$const_missing(const_name) {
          var self = this, e = nil, $ret_or_1 = nil;

          try {
            return self.$_reactrb_tag_original_const_missing(const_name)
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {(e = $err)
              try {
                if ($truthy(($ret_or_1 = $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags').$html_tag_class_for(const_name)))) {
                  return $ret_or_1
                } else {
                  return self.$raise(e)
                }
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          }
        }, $const_missing$1.$$arity = 1), nil) && 'const_missing';
      })(Opal.get_singleton_class(self), $nesting)
    })($nesting[0], null, $nesting);
    return (Opal.def(self, '$to_key', $Object_to_key$2 = function $$to_key() {
      var self = this;

      return self.$object_id()
    }, $Object_to_key$2.$$arity = 0), nil) && 'to_key';
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/ext/component/kernel"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $alias = Opal.alias;

  Opal.add_stubs(['$tap', '$new', '$after', '$resolve', '$call']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_pause$1;

    
    
    Opal.def(self, '$pause', $Kernel_pause$1 = function $$pause(s) {
      var $iter = $Kernel_pause$1.$$p, block = $iter || nil, $$2, self = this;

      if ($iter) $Kernel_pause$1.$$p = null;
      
      
      if ($iter) $Kernel_pause$1.$$p = null;;
      return $send($$($nesting, 'Promise').$new(), 'tap', [], ($$2 = function(p){var self = $$2.$$s == null ? this : $$2.$$s, $$3;

        
        
        if (p == null) {
          p = nil;
        };
        return $send(self, 'after', [s], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $ret_or_1 = nil;

          return $send(p, 'resolve', Opal.to_a((function() {if ($truthy(($ret_or_1 = block))) {
            return [block.$call()]
          } else {
            return $ret_or_1
          }; return nil; })()))}, $$3.$$s = self, $$3.$$arity = 0, $$3));}, $$2.$$s = self, $$2.$$arity = 1, $$2));
    }, $Kernel_pause$1.$$arity = 1);
    $alias(self, "busy_sleep", "sleep");
    return $alias(self, "sleep", "pause");
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/ext/component/number"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Number');

    var $nesting = [self].concat($parent_nesting), $Number_to_key$1;

    return (Opal.def(self, '$to_key', $Number_to_key$1 = function $$to_key() {
      var self = this;

      return self
    }, $Number_to_key$1.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/ext/component/boolean"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean_to_key$1;

    return (Opal.def(self, '$to_key', $Boolean_to_key$1 = function $$to_key() {
      var self = this;

      return self
    }, $Boolean_to_key$1.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/ext/component/array"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_enum', '$size', '$reject!', '$<<']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_extract$excl$1;

    return (Opal.def(self, '$extract!', $Array_extract$excl$1 = function() {
      var $$2, $$3, $iter = $Array_extract$excl$1.$$p, $yield = $iter || nil, self = this, extracted_elements = nil;

      if ($iter) $Array_extract$excl$1.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'to_enum', ["extract!"], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

          return self.$size()}, $$2.$$s = self, $$2.$$arity = 0, $$2))
      };
      extracted_elements = [];
      $send(self, 'reject!', [], ($$3 = function(element){var self = $$3.$$s == null ? this : $$3.$$s;

        
        
        if (element == null) {
          element = nil;
        };
        if ($truthy(Opal.yield1($yield, element))) {
          return extracted_elements['$<<'](element)
        } else {
          return nil
        };}, $$3.$$s = self, $$3.$$arity = 1, $$3));
      return extracted_elements;
    }, $Array_extract$excl$1.$$arity = 0), nil) && 'extract!'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/ext/component/enumerable"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$private_constant', '$each', '$[]=', '$-', '$!=', '$to_enum', '$respond_to?', '$size']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_index_with$1;

    
    Opal.const_set($nesting[0], 'INDEX_WITH_DEFAULT', $$($nesting, 'Object').$new());
    self.$private_constant("INDEX_WITH_DEFAULT");
    return (Opal.def(self, '$index_with', $Enumerable_index_with$1 = function $$index_with(default$) {
      var $$2, $$3, $$4, $iter = $Enumerable_index_with$1.$$p, $yield = $iter || nil, self = this, result = nil;

      if ($iter) $Enumerable_index_with$1.$$p = null;
      
      
      if (default$ == null) {
        default$ = $$($nesting, 'INDEX_WITH_DEFAULT');
      };
      if (($yield !== nil)) {
        
        result = $hash2([], {});
        $send(self, 'each', [], ($$2 = function(elem){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;

          
          
          if (elem == null) {
            elem = nil;
          };
          $writer = [elem, Opal.yield1($yield, elem)];
          $send(result, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        return result;
      } else if ($truthy(default$['$!=']($$($nesting, 'INDEX_WITH_DEFAULT')))) {
        
        result = $hash2([], {});
        $send(self, 'each', [], ($$3 = function(elem){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil;

          
          
          if (elem == null) {
            elem = nil;
          };
          $writer = [elem, default$];
          $send(result, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        return result;
      } else {
        return $send(self, 'to_enum', ["index_with"], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

          if ($truthy(self['$respond_to?']("size"))) {
            return self.$size()
          } else {
            return nil
          }}, $$4.$$s = self, $$4.$$arity = 0, $$4))
      };
    }, $Enumerable_index_with$1.$$arity = -1), nil) && 'index_with';
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/ext/component/time"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  Opal.add_stubs(['$to_json', '$strftime']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_to_json$1;

    return (Opal.def(self, '$to_json', $Time_to_json$1 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T.%3N%z").$to_json()
    }, $Time_to_json$1.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/component/isomorphic_helpers"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $class_variable_get = Opal.class_variable_get, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$!', '$!=', '$unique_id', '$on_opal_server?', '$log', '$new', '$is_a?', '$==', '$production?', '$env', '$+', '$[]', '$class', '$on_opal_client?', '$join', '$collect', '$prerender_footer_blocks', '$call', '$attr_reader', '$[]=', '$-', '$run', '$each', '$before_first_mount_blocks', '$send_to_opal', '$eval', '$load!', '$tr', '$<<', '$first', '$send_to_server', '$to_json', '$parse', '$controller', '$context', '$register_before_first_mount_block', '$to_proc', '$register_prerender_footer_block', '$send', '$result']);
  
  self.$require("hyperstack/internal/component");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'IsomorphicHelpers');

        var $nesting = [self].concat($parent_nesting), $IsomorphicHelpers_included$1, $IsomorphicHelpers_load_context$2, $IsomorphicHelpers_context$3, $IsomorphicHelpers_log$4, $IsomorphicHelpers_on_opal_server$ques$5, $IsomorphicHelpers_on_opal_client$ques$6, $IsomorphicHelpers_log$7, $IsomorphicHelpers_on_opal_server$ques$8, $IsomorphicHelpers_on_opal_client$ques$9, $IsomorphicHelpers_prerender_footers$10;

        
        Opal.defs(self, '$included', $IsomorphicHelpers_included$1 = function $$included(base) {
          var self = this;

          return base.$extend($$($nesting, 'ClassMethods'))
        }, $IsomorphicHelpers_included$1.$$arity = 1);
        Opal.defs(self, '$load_context', $IsomorphicHelpers_load_context$2 = function $$load_context(unique_id, name) {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, message = nil;
          if (self.context == null) self.context = nil;

          
          
          if (unique_id == null) {
            unique_id = nil;
          };
          
          if (name == null) {
            name = nil;
          };
          if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = unique_id['$!']()))) {
            return $ret_or_2
          } else {
            return self.context['$!']()
          }; return nil; })()))) {
            return $ret_or_1
          } else {
            return self.context.$unique_id()['$!='](unique_id)
          }; return nil; })())) {
            
            message = (function() {if ($truthy(self['$on_opal_server?']())) {
              
              try {
                console.history = []
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    nil
                  } finally { Opal.pop_exception(); }
                } else { throw $err; }
              };
              return "" + "************************ React Prerendering Context Initialized " + (name) + " ***********************";
            } else {
              return "************************ React Browser Context Initialized ****************************"
            }; return nil; })();
            self.$log(message);
            self.context = $$($nesting, 'Context').$new(unique_id);};
          return true;
        }, $IsomorphicHelpers_load_context$2.$$arity = -1);
        Opal.defs(self, '$context', $IsomorphicHelpers_context$3 = function $$context() {
          var self = this;
          if (self.context == null) self.context = nil;

          return self.context
        }, $IsomorphicHelpers_context$3.$$arity = 0);
        Opal.defs(self, '$log', $IsomorphicHelpers_log$4 = function $$log(message, message_type) {
          var self = this, $ret_or_3 = nil, $ret_or_4 = nil, style = nil;

          
          
          if (message_type == null) {
            message_type = "info";
          };
          if ($truthy(message['$is_a?']($$($nesting, 'Array')))) {
          } else {
            message = [message]
          };
          if ($truthy((function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = message_type['$==']("info")))) {
            return $ret_or_4
          } else {
            return message_type['$==']("warning")
          }; return nil; })()))) {
            return $$($nesting, 'Hyperstack').$env()['$production?']()
          } else {
            return $ret_or_3
          }; return nil; })())) {
            return nil};
          if (message_type['$==']("info")) {
            
            if ($truthy(self['$on_opal_server?']())) {
              style = "background: #00FFFF; color: red"
            } else {
              style = "background: #222; color: #bada55"
            };
            message = $rb_plus([$rb_plus("%c", message['$[]'](0)), style], message['$[]']($range(1, -1, false)));
            return console.log.apply(console, message);;
          } else if (message_type['$==']("warning")) {
            return console.warn.apply(console, message);
          } else {
            return console.error.apply(console, message);
          };
        }, $IsomorphicHelpers_log$4.$$arity = -2);
        
        Opal.defs(self, '$on_opal_server?', $IsomorphicHelpers_on_opal_server$ques$5 = function() {
          var self = this;

          return typeof Opal.global.document === 'undefined';
        }, $IsomorphicHelpers_on_opal_server$ques$5.$$arity = 0);
        Opal.defs(self, '$on_opal_client?', $IsomorphicHelpers_on_opal_client$ques$6 = function() {
          var self = this;

          return self['$on_opal_server?']()['$!']()
        }, $IsomorphicHelpers_on_opal_client$ques$6.$$arity = 0);;
        
        Opal.def(self, '$log', $IsomorphicHelpers_log$7 = function $$log($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send($$($nesting, 'IsomorphicHelpers'), 'log', Opal.to_a(args));
        }, $IsomorphicHelpers_log$7.$$arity = -1);
        
        Opal.def(self, '$on_opal_server?', $IsomorphicHelpers_on_opal_server$ques$8 = function() {
          var self = this;

          return self.$class()['$on_opal_server?']()
        }, $IsomorphicHelpers_on_opal_server$ques$8.$$arity = 0);
        
        Opal.def(self, '$on_opal_client?', $IsomorphicHelpers_on_opal_client$ques$9 = function() {
          var self = this;

          return self.$class()['$on_opal_client?']()
        }, $IsomorphicHelpers_on_opal_client$ques$9.$$arity = 0);
        Opal.defs(self, '$prerender_footers', $IsomorphicHelpers_prerender_footers$10 = function $$prerender_footers(controller) {
          var $$11, self = this, footer = nil;

          
          
          if (controller == null) {
            controller = nil;
          };
          footer = $send($$($nesting, 'Context').$prerender_footer_blocks(), 'collect', [], ($$11 = function(block){var self = $$11.$$s == null ? this : $$11.$$s;

            
            
            if (block == null) {
              block = nil;
            };
            return block.$call(controller);}, $$11.$$s = self, $$11.$$arity = 1, $$11)).$join("\n");
          nil;
          return footer;
        }, $IsomorphicHelpers_prerender_footers$10.$$arity = -1);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Context');

          var $nesting = [self].concat($parent_nesting), $Context_define_isomorphic_method$12, $Context_before_first_mount_blocks$13, $Context_prerender_footer_blocks$14, $Context_initialize$15, $Context_load_opal_context$17, $Context_eval$18, $Context_send_to_opal$19, $Context_register_before_first_mount_block$21, $Context_register_prerender_footer_block$22;

          self.$$prototype.unique_id = self.$$prototype.cname = self.$$prototype.ctx = nil;
          
          self.$attr_reader("controller");
          self.$attr_reader("unique_id");
          Opal.defs(self, '$define_isomorphic_method', $Context_define_isomorphic_method$12 = function $$define_isomorphic_method(method_name) {
            var $iter = $Context_define_isomorphic_method$12.$$p, block = $iter || nil, $a, self = this, $ret_or_5 = nil, $writer = nil;

            if ($iter) $Context_define_isomorphic_method$12.$$p = null;
            
            
            if ($iter) $Context_define_isomorphic_method$12.$$p = null;;
            $class_variable_set($nesting[0], '@@ctx_methods', (function() {if ($truthy((($a = $nesting[0].$$cvars['@@ctx_methods'], $a != null) ? 'class variable' : nil))) {
              
              if ($truthy(($ret_or_5 = $class_variable_get($nesting[0], '@@ctx_methods', false)))) {
                return $ret_or_5
              } else {
                return $hash2([], {})
              };
            } else {
              return $hash2([], {})
            }; return nil; })());
            
            $writer = [method_name, block];
            $send($class_variable_get($nesting[0], '@@ctx_methods', false), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, $Context_define_isomorphic_method$12.$$arity = 1);
          Opal.defs(self, '$before_first_mount_blocks', $Context_before_first_mount_blocks$13 = function $$before_first_mount_blocks() {
            var self = this, $ret_or_6 = nil;
            if (self.before_first_mount_blocks == null) self.before_first_mount_blocks = nil;

            return (self.before_first_mount_blocks = (function() {if ($truthy(($ret_or_6 = self.before_first_mount_blocks))) {
              return $ret_or_6
            } else {
              return []
            }; return nil; })())
          }, $Context_before_first_mount_blocks$13.$$arity = 0);
          Opal.defs(self, '$prerender_footer_blocks', $Context_prerender_footer_blocks$14 = function $$prerender_footer_blocks() {
            var self = this, $ret_or_7 = nil;
            if (self.prerender_footer_blocks == null) self.prerender_footer_blocks = nil;

            return (self.prerender_footer_blocks = (function() {if ($truthy(($ret_or_7 = self.prerender_footer_blocks))) {
              return $ret_or_7
            } else {
              return []
            }; return nil; })())
          }, $Context_prerender_footer_blocks$14.$$arity = 0);
          
          Opal.def(self, '$initialize', $Context_initialize$15 = function $$initialize(unique_id, ctx, controller, cname) {
            var $$16, self = this;

            
            
            if (ctx == null) {
              ctx = nil;
            };
            
            if (controller == null) {
              controller = nil;
            };
            
            if (cname == null) {
              cname = nil;
            };
            self.unique_id = unique_id;
            self.cname = cname;
            nil;
            $$$($$$($$($nesting, 'Hyperstack'), 'Application'), 'Boot').$run($hash2(["context"], {"context": self}));
            return $send(self.$class().$before_first_mount_blocks(), 'each', [], ($$16 = function(block){var self = $$16.$$s == null ? this : $$16.$$s;

              
              
              if (block == null) {
                block = nil;
              };
              return block.$call(self);}, $$16.$$s = self, $$16.$$arity = 1, $$16));
          }, $Context_initialize$15.$$arity = -2);
          
          Opal.def(self, '$load_opal_context', $Context_load_opal_context$17 = function $$load_opal_context() {
            var self = this;

            return self.$send_to_opal("load_context", self.unique_id, self.cname)
          }, $Context_load_opal_context$17.$$arity = 0);
          
          Opal.def(self, '$eval', $Context_eval$18 = function(js) {
            var self = this;

            if ($truthy(self.ctx)) {
              return self.ctx.$eval(js)
            } else {
              return nil
            }
          }, $Context_eval$18.$$arity = 1);
          
          Opal.def(self, '$send_to_opal', $Context_send_to_opal$19 = function $$send_to_opal(method_name, $a) {
            var $post_args, args, $$20, self = this, method_args = nil;

            
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            if ($truthy(self.ctx)) {
            } else {
              return nil
            };
            $$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Rails'), 'ComponentLoader').$new(self.ctx)['$load!']();
            method_args = $send(args, 'collect', [], ($$20 = function(arg){var self = $$20.$$s == null ? this : $$20.$$s, quarg = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              quarg = ("" + (arg)).$tr("\"", "'");
              return "" + "\"" + (quarg) + "\"";}, $$20.$$s = self, $$20.$$arity = 1, $$20)).$join(", ");
            return self.ctx.$eval("" + "Opal.Hyperstack.$const_get('Component').$const_get('IsomorphicHelpers').$" + (method_name) + "(" + (method_args) + ")");
          }, $Context_send_to_opal$19.$$arity = -2);
          Opal.defs(self, '$register_before_first_mount_block', $Context_register_before_first_mount_block$21 = function $$register_before_first_mount_block() {
            var $iter = $Context_register_before_first_mount_block$21.$$p, block = $iter || nil, self = this;

            if ($iter) $Context_register_before_first_mount_block$21.$$p = null;
            
            
            if ($iter) $Context_register_before_first_mount_block$21.$$p = null;;
            return self.$before_first_mount_blocks()['$<<'](block);
          }, $Context_register_before_first_mount_block$21.$$arity = 0);
          return (Opal.defs(self, '$register_prerender_footer_block', $Context_register_prerender_footer_block$22 = function $$register_prerender_footer_block() {
            var $iter = $Context_register_prerender_footer_block$22.$$p, block = $iter || nil, self = this;

            if ($iter) $Context_register_prerender_footer_block$22.$$p = null;
            
            
            if ($iter) $Context_register_prerender_footer_block$22.$$p = null;;
            return self.$prerender_footer_blocks()['$<<'](block);
          }, $Context_register_prerender_footer_block$22.$$arity = 0), nil) && 'register_prerender_footer_block';
        })($nesting[0], null, $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'IsomorphicProcCall');

          var $nesting = [self].concat($parent_nesting), $IsomorphicProcCall_result$23, $IsomorphicProcCall_initialize$24, $IsomorphicProcCall_when_on_client$25, $IsomorphicProcCall_send_to_server$26, $IsomorphicProcCall_when_on_server$27;

          self.$$prototype.result = self.$$prototype.name = nil;
          
          self.$attr_reader("context");
          
          Opal.def(self, '$result', $IsomorphicProcCall_result$23 = function $$result() {
            var self = this;

            if ($truthy(self.result)) {
              return self.result.$first()
            } else {
              return nil
            }
          }, $IsomorphicProcCall_result$23.$$arity = 0);
          
          Opal.def(self, '$initialize', $IsomorphicProcCall_initialize$24 = function $$initialize(name, block, context, $a) {
            var $post_args, args, self = this, $ret_or_8 = nil;

            
            
            $post_args = Opal.slice.call(arguments, 3, arguments.length);
            
            args = $post_args;;
            self.name = name;
            self.context = context;
            $send(block, 'call', [self].concat(Opal.to_a(args)));
            return (self.result = (function() {if ($truthy(($ret_or_8 = self.result))) {
              return $ret_or_8
            } else {
              return $send(self, 'send_to_server', Opal.to_a(args))
            }; return nil; })());
          }, $IsomorphicProcCall_initialize$24.$$arity = -4);
          
          Opal.def(self, '$when_on_client', $IsomorphicProcCall_when_on_client$25 = function $$when_on_client() {
            var $iter = $IsomorphicProcCall_when_on_client$25.$$p, block = $iter || nil, self = this;

            if ($iter) $IsomorphicProcCall_when_on_client$25.$$p = null;
            
            
            if ($iter) $IsomorphicProcCall_when_on_client$25.$$p = null;;
            if ($truthy($$($nesting, 'IsomorphicHelpers')['$on_opal_client?']())) {
              return (self.result = [block.$call()])
            } else {
              return nil
            };
          }, $IsomorphicProcCall_when_on_client$25.$$arity = 0);
          
          Opal.def(self, '$send_to_server', $IsomorphicProcCall_send_to_server$26 = function $$send_to_server($a) {
            var $post_args, args, self = this, method_string = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            if ($truthy($$($nesting, 'IsomorphicHelpers')['$on_opal_server?']())) {
              
              method_string = $rb_plus($rb_plus($rb_plus($rb_plus("ServerSideIsomorphicMethod.", self.name), "("), args.$to_json()), ")");
              return (self.result = [$$($nesting, 'JSON').$parse(eval(method_string))]);
            } else {
              return nil
            };
          }, $IsomorphicProcCall_send_to_server$26.$$arity = -1);
          return (Opal.def(self, '$when_on_server', $IsomorphicProcCall_when_on_server$27 = function $$when_on_server() {
            var $iter = $IsomorphicProcCall_when_on_server$27.$$p, block = $iter || nil, self = this, $ret_or_9 = nil;

            if ($iter) $IsomorphicProcCall_when_on_server$27.$$p = null;
            
            
            if ($iter) $IsomorphicProcCall_when_on_server$27.$$p = null;;
            if ($truthy((function() {if ($truthy(($ret_or_9 = $$($nesting, 'IsomorphicHelpers')['$on_opal_client?']()))) {
              return $ret_or_9
            } else {
              return $$($nesting, 'IsomorphicHelpers')['$on_opal_server?']()
            }; return nil; })())) {
              return nil
            } else {
              return (self.result = [block.$call().$to_json()])
            };
          }, $IsomorphicProcCall_when_on_server$27.$$arity = 0), nil) && 'when_on_server';
        })($nesting[0], null, $nesting);
        return (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_on_opal_server$ques$28, $ClassMethods_on_opal_client$ques$29, $ClassMethods_log$30, $ClassMethods_controller$31, $ClassMethods_before_first_mount$32, $ClassMethods_prerender_footer$33, $ClassMethods_isomorphic_method$34;

          
          
          Opal.def(self, '$on_opal_server?', $ClassMethods_on_opal_server$ques$28 = function() {
            var self = this;

            return $$($nesting, 'IsomorphicHelpers')['$on_opal_server?']()
          }, $ClassMethods_on_opal_server$ques$28.$$arity = 0);
          
          Opal.def(self, '$on_opal_client?', $ClassMethods_on_opal_client$ques$29 = function() {
            var self = this;

            return $$($nesting, 'IsomorphicHelpers')['$on_opal_client?']()
          }, $ClassMethods_on_opal_client$ques$29.$$arity = 0);
          
          Opal.def(self, '$log', $ClassMethods_log$30 = function $$log($a) {
            var $post_args, args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send($$($nesting, 'IsomorphicHelpers'), 'log', Opal.to_a(args));
          }, $ClassMethods_log$30.$$arity = -1);
          
          Opal.def(self, '$controller', $ClassMethods_controller$31 = function $$controller() {
            var self = this;

            return $$($nesting, 'IsomorphicHelpers').$context().$controller()
          }, $ClassMethods_controller$31.$$arity = 0);
          
          Opal.def(self, '$before_first_mount', $ClassMethods_before_first_mount$32 = function $$before_first_mount() {
            var $iter = $ClassMethods_before_first_mount$32.$$p, block = $iter || nil, self = this;

            if ($iter) $ClassMethods_before_first_mount$32.$$p = null;
            
            
            if ($iter) $ClassMethods_before_first_mount$32.$$p = null;;
            return $send($$$($$($nesting, 'IsomorphicHelpers'), 'Context'), 'register_before_first_mount_block', [], block.$to_proc());
          }, $ClassMethods_before_first_mount$32.$$arity = 0);
          
          Opal.def(self, '$prerender_footer', $ClassMethods_prerender_footer$33 = function $$prerender_footer() {
            var $iter = $ClassMethods_prerender_footer$33.$$p, block = $iter || nil, self = this;

            if ($iter) $ClassMethods_prerender_footer$33.$$p = null;
            
            
            if ($iter) $ClassMethods_prerender_footer$33.$$p = null;;
            return $send($$$($$($nesting, 'IsomorphicHelpers'), 'Context'), 'register_prerender_footer_block', [], block.$to_proc());
          }, $ClassMethods_prerender_footer$33.$$arity = 0);
          return (Opal.def(self, '$isomorphic_method', $ClassMethods_isomorphic_method$34 = function $$isomorphic_method(name) {
            var $iter = $ClassMethods_isomorphic_method$34.$$p, block = $iter || nil, $$35, self = this;

            if ($iter) $ClassMethods_isomorphic_method$34.$$p = null;
            
            
            if ($iter) $ClassMethods_isomorphic_method$34.$$p = null;;
            return $send(self.$class(), 'send', ["define_method", name], ($$35 = function($a){var self = $$35.$$s == null ? this : $$35.$$s, $post_args, args;

              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              return $send($$$($$($nesting, 'IsomorphicHelpers'), 'IsomorphicProcCall'), 'new', [name, block, self].concat(Opal.to_a(args))).$result();}, $$35.$$s = self, $$35.$$arity = -1, $$35));
          }, $ClassMethods_isomorphic_method$34.$$arity = 1), nil) && 'isomorphic_method';
        })($nesting[0], $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/component/react_api"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$+', '$create_element', '$to_proc', '$raise', '$to_n', '$kind_of?', '$!', '$build']);
  
  self.$require("native");
  self.$require("active_support/core_ext/object/try");
  self.$require("hyperstack/internal/component/tags");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'ReactAPI');

        var $nesting = [self].concat($parent_nesting), $ReactAPI_html_tag$ques$1, $ReactAPI_html_attr$ques$2, $ReactAPI_create_element$3, $ReactAPI_render$4, $ReactAPI_is_valid_element$5, $ReactAPI_is_valid_element$ques$6, $ReactAPI_render_to_string$7, $ReactAPI_render_to_static_markup$9, $ReactAPI_unmount_component_at_node$11;

        
        Opal.const_set($nesting[0], 'ATTRIBUTES', $rb_plus(["accept", "acceptCharset", "accessKey", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoPlay", "cellPadding", "cellSpacing", "charSet", "checked", "classID", "className", "cols", "colSpan", "content", "contentEditable", "contextMenu", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "dir", "disabled", "download", "draggable", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "height", "hidden", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "label", "lang", "list", "loop", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "multiple", "muted", "name", "noValidate", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "readOnly", "rel", "required", "role", "rows", "rowSpan", "sandbox", "scope", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "spellCheck", "src", "srcDoc", "srcSet", "start", "step", "style", "tabIndex", "target", "title", "type", "useMap", "value", "width", "wmode", "dangerouslySetInnerHTML"], ["clipPath", "cx", "cy", "d", "dx", "dy", "fill", "fillOpacity", "fontFamily", "fontSize", "fx", "fy", "gradientTransform", "gradientUnits", "markerEnd", "markerMid", "markerStart", "offset", "opacity", "patternContentUnits", "patternUnits", "points", "preserveAspectRatio", "r", "rx", "ry", "spreadMethod", "stopColor", "stopOpacity", "stroke", "strokeDasharray", "strokeLinecap", "strokeOpacity", "strokeWidth", "textAnchor", "transform", "version", "viewBox", "x1", "x2", "x", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlSpace", "y1", "y2", "y"]));
        Opal.const_set($nesting[0], 'HASH_ATTRIBUTES', ["data", "aria"]);
        Opal.const_set($nesting[0], 'HTML_TAGS', $$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'HTML_TAGS'));
        Opal.defs(self, '$html_tag?', $ReactAPI_html_tag$ques$1 = function(name) {
          var self = this, tags = nil;

          
          tags = $$($nesting, 'HTML_TAGS');
          
          for(var i = 0; i < tags.length; i++) {
            if(tags[i] === name)
              return true;
          }
          return false;
        ;
        }, $ReactAPI_html_tag$ques$1.$$arity = 1);
        Opal.defs(self, '$html_attr?', $ReactAPI_html_attr$ques$2 = function(name) {
          var self = this, attrs = nil;

          
          attrs = $$($nesting, 'ATTRIBUTES');
          
          for(var i = 0; i < attrs.length; i++) {
            if(attrs[i] === name)
              return true;
          }
          return false;
        ;
        }, $ReactAPI_html_attr$ques$2.$$arity = 1);
        Opal.defs(self, '$create_element', $ReactAPI_create_element$3 = function $$create_element(type, $a) {
          var $iter = $ReactAPI_create_element$3.$$p, block = $iter || nil, $post_args, properties, self = this;

          if ($iter) $ReactAPI_create_element$3.$$p = null;
          
          
          if ($iter) $ReactAPI_create_element$3.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          properties = $post_args;;
          return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper'), 'create_element', [type].concat(Opal.to_a(properties)), block.$to_proc());
        }, $ReactAPI_create_element$3.$$arity = -2);
        Opal.defs(self, '$render', $ReactAPI_render$4 = function $$render(element, container) {
          var $iter = $ReactAPI_render$4.$$p, $yield = $iter || nil, self = this, cb = nil, native$ = nil;

          if ($iter) $ReactAPI_render$4.$$p = null;
          
          if ($truthy(typeof ReactDOM === 'undefined')) {
            self.$raise("ReactDOM.render is not defined.  In React >= v15 you must import it with ReactDOM")};
          container = container.$$class ? container[0] : container;
          if (($yield !== nil)) {
            
            cb = 
            function(){
              setTimeout(function(){
                Opal.yieldX($yield, [])
              }, 0)
            }
          ;
            native$ = ReactDOM.render(element.$to_n(), container, cb);
          } else {
            native$ = ReactDOM.render(element.$to_n(), container)
          };
          if ($truthy(native$ !== null)) {
          } else {
            return nil
          };
          if ($truthy(native$.__opalInstance !== undefined && native$.__opalInstance !== null)) {
            return native$.__opalInstance
          } else if ($truthy(ReactDOM.findDOMNode !== undefined && native$.nodeType === undefined)) {
            return ReactDOM.findDOMNode(native$)
          } else {
            return native$
          };
        }, $ReactAPI_render$4.$$arity = 2);
        Opal.defs(self, '$is_valid_element', $ReactAPI_is_valid_element$5 = function $$is_valid_element(element) {
          var self = this, $ret_or_1 = nil;

          
           console.error("Warning: `is_valid_element` is deprecated in favor of `is_valid_element?`.");;
          if ($truthy(($ret_or_1 = element['$kind_of?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element'))))) {
            return React.isValidElement(element.$to_n())
          } else {
            return $ret_or_1
          };
        }, $ReactAPI_is_valid_element$5.$$arity = 1);
        Opal.defs(self, '$is_valid_element?', $ReactAPI_is_valid_element$ques$6 = function(element) {
          var self = this, $ret_or_2 = nil;

          if ($truthy(($ret_or_2 = element['$kind_of?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element'))))) {
            return React.isValidElement(element.$to_n())
          } else {
            return $ret_or_2
          }
        }, $ReactAPI_is_valid_element$ques$6.$$arity = 1);
        Opal.defs(self, '$render_to_string', $ReactAPI_render_to_string$7 = function $$render_to_string(element) {
          var $$8, self = this;

          
           console.error("Warning: `Hyperstack::Component::ReactAPI.render_to_string` is deprecated in favor of `React::Server.render_to_string`.");;
          if ($truthy((typeof ReactDOMServer === 'undefined')['$!']())) {
            return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'build', [], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

              return ReactDOMServer.renderToString(element.$to_n())}, $$8.$$s = self, $$8.$$arity = 0, $$8))
          } else {
            return self.$raise("renderToString is not defined.  In React >= v15 you must import it with ReactDOMServer")
          };
        }, $ReactAPI_render_to_string$7.$$arity = 1);
        Opal.defs(self, '$render_to_static_markup', $ReactAPI_render_to_static_markup$9 = function $$render_to_static_markup(element) {
          var $$10, self = this;

          
           console.error("Warning: `Hyperstack::Component::ReactAPI.render_to_static_markup` is deprecated in favor of `React::Server.render_to_static_markup`.");;
          if ($truthy((typeof ReactDOMServer === 'undefined')['$!']())) {
            return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'build', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

              return ReactDOMServer.renderToStaticMarkup(element.$to_n())}, $$10.$$s = self, $$10.$$arity = 0, $$10))
          } else {
            return self.$raise("renderToStaticMarkup is not defined.  In React >= v15 you must import it with ReactDOMServer")
          };
        }, $ReactAPI_render_to_static_markup$9.$$arity = 1);
        return (Opal.defs(self, '$unmount_component_at_node', $ReactAPI_unmount_component_at_node$11 = function $$unmount_component_at_node(node) {
          var self = this;

          if ($truthy((typeof ReactDOM === 'undefined')['$!']())) {
            return ReactDOM.unmountComponentAtNode(node.$$class ? node[0] : node);
          } else {
            return self.$raise("unmountComponentAtNode is not defined.  In React >= v15 you must import it with ReactDOM")
          }
        }, $ReactAPI_unmount_component_at_node$11.$$arity = 1), nil) && 'unmount_component_at_node';
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/internal/component/top_level_rails_component"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$export_component', '$param', '$backtrace', '$top_level_render', '$start_with?', '$<<', '$const_get', '$each', '$search_path', '$class', '$name', '$!=', '$method_defined?', '$render', '$raise', '$join', '$search_path=', '$-', '$!', '$include?', '$add_to_react_search_path']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'TopLevelRailsComponent');

          var $nesting = [self].concat($parent_nesting), $TopLevelRailsComponent_search_path$1, $TopLevelRailsComponent_allow_deprecated_render_definition$ques$2, $TopLevelRailsComponent_render$3, $TopLevelRailsComponent_top_level_render$4;

          self.$$prototype.ComponentName = self.$$prototype.RenderParams = self.$$prototype.Controller = nil;
          
          self.$include($$$($$($nesting, 'Hyperstack'), 'Component'));
          Opal.defs(self, '$search_path', $TopLevelRailsComponent_search_path$1 = function $$search_path() {
            var self = this, $ret_or_1 = nil;
            if (self.search_path == null) self.search_path = nil;

            return (self.search_path = (function() {if ($truthy(($ret_or_1 = self.search_path))) {
              return $ret_or_1
            } else {
              return [$$($nesting, 'Object')]
            }; return nil; })())
          }, $TopLevelRailsComponent_search_path$1.$$arity = 0);
          self.$export_component();
          self.$param("component_name");
          self.$param("controller");
          self.$param("render_params");
          self.$backtrace("off");
          Opal.defs(self, '$allow_deprecated_render_definition?', $TopLevelRailsComponent_allow_deprecated_render_definition$ques$2 = function() {
            var self = this;

            return true
          }, $TopLevelRailsComponent_allow_deprecated_render_definition$ques$2.$$arity = 0);
          
          Opal.def(self, '$render', $TopLevelRailsComponent_render$3 = function $$render() {
            var self = this;

            return self.$top_level_render()
          }, $TopLevelRailsComponent_render$3.$$arity = 0);
          return (Opal.def(self, '$top_level_render', $TopLevelRailsComponent_top_level_render$4 = function $$top_level_render() {
            var $$5, $$6, self = this, paths_searched = nil, component = nil, $ret_or_2 = nil;

            
            paths_searched = [];
            component = nil;
            if ($truthy(self.ComponentName['$start_with?']("::"))) {
              
              paths_searched['$<<'](self.ComponentName);
              component = (function() { try {
                return $$($nesting, 'Object').$const_get(self.ComponentName)
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'NameError')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception(); }
                } else { throw $err; }
              }})();
            } else {
              
              (function(){var $brk = Opal.new_brk(); try {return $send(self.$class().$search_path(), 'each', [], ($$5 = function(scope){var self = $$5.$$s == null ? this : $$5.$$s;
                if (self.Controller == null) self.Controller = nil;
                if (self.ComponentName == null) self.ComponentName = nil;

                
                
                if (scope == null) {
                  scope = nil;
                };
                paths_searched['$<<']("" + (scope.$name()) + "::" + (self.Controller) + "::" + (self.ComponentName));
                component = (function() { try {
                  return scope.$const_get(self.Controller, false).$const_get(self.ComponentName, false)
                } catch ($err) {
                  if (Opal.rescue($err, [$$($nesting, 'NameError')])) {
                    try {
                      return nil
                    } finally { Opal.pop_exception(); }
                  } else { throw $err; }
                }})();
                if ($truthy(component['$!='](nil))) {
                  
                  Opal.brk(nil, $brk)
                } else {
                  return nil
                };}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 1, $$5))
              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
              if ($truthy(component)) {
              } else {
                (function(){var $brk = Opal.new_brk(); try {return $send(self.$class().$search_path(), 'each', [], ($$6 = function(scope){var self = $$6.$$s == null ? this : $$6.$$s;
                  if (self.ComponentName == null) self.ComponentName = nil;

                  
                  
                  if (scope == null) {
                    scope = nil;
                  };
                  paths_searched['$<<']("" + (scope.$name()) + "::" + (self.ComponentName));
                  component = (function() { try {
                    return scope.$const_get(self.ComponentName, false)
                  } catch ($err) {
                    if (Opal.rescue($err, [$$($nesting, 'NameError')])) {
                      try {
                        return nil
                      } finally { Opal.pop_exception(); }
                    } else { throw $err; }
                  }})();
                  if ($truthy(component['$!='](nil))) {
                    
                    Opal.brk(nil, $brk)
                  } else {
                    return nil
                  };}, $$6.$$s = self, $$6.$$brk = $brk, $$6.$$arity = 1, $$6))
                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
              };
            };
            if ($truthy((function() {if ($truthy(($ret_or_2 = component))) {
              return component['$method_defined?']("render")
            } else {
              return $ret_or_2
            }; return nil; })())) {
              return $$($nesting, 'RenderingContext').$render(component, self.RenderParams)};
            return self.$raise("" + "Could not find component class '" + (self.ComponentName) + "' for @Controller '" + (self.Controller) + "' in any component directory. Tried [" + (paths_searched.$join(", ")) + "]");
          }, $TopLevelRailsComponent_top_level_render$4.$$arity = 0), nil) && 'top_level_render';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_add_to_react_search_path$7;

    return (Opal.def(self, '$add_to_react_search_path', $Module_add_to_react_search_path$7 = function $$add_to_react_search_path(replace_search_path) {
      var self = this, $writer = nil;

      
      
      if (replace_search_path == null) {
        replace_search_path = nil;
      };
      if ($truthy(replace_search_path)) {
        
        $writer = [[self]];
        $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent'), 'search_path=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      } else if ($truthy($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent').$search_path()['$include?'](self)['$!']())) {
        return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent').$search_path()['$<<'](self)
      } else {
        return nil
      };
    }, $Module_add_to_react_search_path$7.$$arity = -1), nil) && 'add_to_react_search_path'
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Components');

    var $nesting = [self].concat($parent_nesting);

    return self.$add_to_react_search_path()
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/component/while_loading"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$WhileLoadingWrapper', '$!', '$on_opal_client?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'WhileLoading');

        var $nesting = [self].concat($parent_nesting), $WhileLoading___hyperstack_component_rescue_wrapper$1, $WhileLoading_resources_loading$ques$2, $WhileLoading_resources_loaded$ques$3;

        
        
        Opal.def(self, '$__hyperstack_component_rescue_wrapper', $WhileLoading___hyperstack_component_rescue_wrapper$1 = function $$__hyperstack_component_rescue_wrapper(child) {
          var self = this;

          return $$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component').$WhileLoadingWrapper($hash2(["child", "children_elements"], {"child": self, "children_elements": child}))
        }, $WhileLoading___hyperstack_component_rescue_wrapper$1.$$arity = 1);
        
        Opal.def(self, '$resources_loading?', $WhileLoading_resources_loading$ques$2 = function() {
          var self = this;
          if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

          return self.__hyperstack_while_loading_waiting_on_resources
        }, $WhileLoading_resources_loading$ques$2.$$arity = 0);
        
        Opal.def(self, '$resources_loaded?', $WhileLoading_resources_loaded$ques$3 = function() {
          var self = this;
          if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

          return self.__hyperstack_while_loading_waiting_on_resources['$!']()
        }, $WhileLoading_resources_loaded$ques$3.$$arity = 0);
        if ($truthy($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers')['$on_opal_client?']())) {
          
          function onError(event) {
            if (event.message.match(/^Uncaught NotQuiet: /)) event.preventDefault();
          }

          window.addEventListener('error', onError);
         
        } else {
          return nil
        };
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/component/free_render"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $alias = Opal.alias, $truthy = Opal.truthy;

  Opal.add_stubs(['$instance_eval', '$const_defined?', '$const_get', '$is_a?', '$method_defined?', '$include?', '$render', '$to_proc', '$hyperstack_component_original_meth_missing']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'FreeRender');

        var $nesting = [self].concat($parent_nesting), $FreeRender_included$1;

        return (Opal.defs(self, '$included', $FreeRender_included$1 = function $$included(base) {
          var $$2, self = this;

          return $send(base, 'instance_eval', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $method_missing$3;

            
            $alias(self, "hyperstack_component_original_meth_missing", "method_missing");
            return (Opal.def(self, '$method_missing', $method_missing$3 = function $$method_missing(name, $a) {
              var $iter = $method_missing$3.$$p, block = $iter || nil, $post_args, args, self = this, $ret_or_1 = nil, $ret_or_2 = nil, klass = nil, $ret_or_3 = nil, $ret_or_4 = nil;

              if ($iter) $method_missing$3.$$p = null;
              
              
              if ($iter) $method_missing$3.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 1, arguments.length);
              
              args = $post_args;;
              if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self['$const_defined?'](name)))) {
                
                return (klass = self.$const_get(name));
              } else {
                return $ret_or_2
              }; return nil; })()))) {
                
                if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = klass['$is_a?']($$($nesting, 'Class'))))) {
                  return klass['$method_defined?']("render")
                } else {
                  return $ret_or_4
                }; return nil; })()))) {
                  return $ret_or_3
                } else {
                  return $$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'HTML_TAGS')['$include?'](klass)
                };
              } else {
                return $ret_or_1
              }; return nil; })())) {
                return $send(self, 'render', [klass].concat(Opal.to_a(args)), block.$to_proc())
              } else {
                return $send(self, 'hyperstack_component_original_meth_missing', [name].concat(Opal.to_a(args)), block.$to_proc())
              };
            }, $method_missing$3.$$arity = -2), nil) && 'method_missing';}, $$2.$$s = self, $$2.$$arity = 0, $$2))
        }, $FreeRender_included$1.$$arity = 1), nil) && 'included'
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/rescue_wrapper"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$param', '$render', '$call', '$attr_accessor', '$RescueMetaWrapper', '$after_error', '$after_error_args', '$run_callback', '$after_error_args=', '$-', '$raise', '$force_update!']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'RescueMetaWrapper');

          var $nesting = [self].concat($parent_nesting), $RescueMetaWrapper$1;

          
          self.$include($$$($$($nesting, 'Hyperstack'), 'Component'));
          self.$param("children_elements");
          return $send(self, 'render', [], ($RescueMetaWrapper$1 = function(){var self = $RescueMetaWrapper$1.$$s == null ? this : $RescueMetaWrapper$1.$$s;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

            return self.ChildrenElements.$call()}, $RescueMetaWrapper$1.$$s = self, $RescueMetaWrapper$1.$$arity = 0, $RescueMetaWrapper$1));
        })($nesting[0], null, $nesting);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'RescueWrapper');

          var $nesting = [self].concat($parent_nesting), $RescueWrapper$2, $RescueWrapper$3;

          
          (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting);

            return self.$attr_accessor("after_error_args")
          })(Opal.get_singleton_class(self), $nesting);
          self.$include($$$($$($nesting, 'Hyperstack'), 'Component'));
          self.$param("child");
          self.$param("children_elements");
          $send(self, 'render', [], ($RescueWrapper$2 = function(){var self = $RescueWrapper$2.$$s == null ? this : $RescueWrapper$2.$$s;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

            return self.$RescueMetaWrapper($hash2(["children_elements"], {"children_elements": self.ChildrenElements}))}, $RescueWrapper$2.$$s = self, $RescueWrapper$2.$$arity = 0, $RescueWrapper$2));
          return $send(self, 'after_error', [], ($RescueWrapper$3 = function(error, info){var self = $RescueWrapper$3.$$s == null ? this : $RescueWrapper$3.$$s, $a, $b, args = nil, $ret_or_1 = nil, found = nil, $writer = nil;
            if (self.Child == null) self.Child = nil;

            
            
            if (error == null) {
              error = nil;
            };
            
            if (info == null) {
              info = nil;
            };
            args = (function() {if ($truthy(($ret_or_1 = $$($nesting, 'RescueWrapper').$after_error_args()))) {
              return $ret_or_1
            } else {
              return [error, info]
            }; return nil; })();
            $b = $send(self.Child, 'run_callback', ["__hyperstack_component_rescue_hook", found].concat(Opal.to_a(args))), $a = Opal.to_ary($b), (found = ($a[0] == null ? nil : $a[0])), $b;
            if ($truthy(found)) {
            } else {
              
              
              $writer = [args];
              $send($$($nesting, 'RescueWrapper'), 'after_error_args=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.$raise(error);
            };
            return self.Child['$force_update!']();}, $RescueWrapper$3.$$s = self, $RescueWrapper$3.$$arity = 2, $RescueWrapper$3));
        })($nesting[0], null, $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/while_loading_wrapper"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$render', '$!', '$quiet?', '$raise_if_not_quiet=', '$-', '$instance_eval', '$mutate', '$RescueMetaWrapper', '$before_mount', '$rescues', '$class', '$instance_variable_set']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'WhileLoadingWrapper');

          var $nesting = [self].concat($parent_nesting), $WhileLoadingWrapper$1, $WhileLoadingWrapper$3;

          
          $send(self, 'render', [], ($WhileLoadingWrapper$1 = function(){var self = $WhileLoadingWrapper$1.$$s == null ? this : $WhileLoadingWrapper$1.$$s, $$2, $ret_or_1 = nil, $writer = nil;
            if (self.waiting_on_resources == null) self.waiting_on_resources = nil;
            if (self.Child == null) self.Child = nil;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

            
            if ($truthy((function() {if ($truthy(($ret_or_1 = self.waiting_on_resources))) {
              return self['$quiet?']()['$!']()
            } else {
              return $ret_or_1
            }; return nil; })())) {
              
              $writer = [false];
              $send($$($nesting, 'RenderingContext'), 'raise_if_not_quiet=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            } else {
              
              self.waiting_on_resources = false;
              $send(self.Child, 'instance_eval', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;
                if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

                
                if ($truthy(self.__hyperstack_while_loading_waiting_on_resources)) {
                  self.$mutate()};
                return (self.__hyperstack_while_loading_waiting_on_resources = false);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
              
              $writer = [true];
              $send($$($nesting, 'RenderingContext'), 'raise_if_not_quiet=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            return self.$RescueMetaWrapper($hash2(["children_elements"], {"children_elements": self.ChildrenElements}));}, $WhileLoadingWrapper$1.$$s = self, $WhileLoadingWrapper$1.$$arity = 0, $WhileLoadingWrapper$1));
          return $send(self, 'before_mount', [], ($WhileLoadingWrapper$3 = function(){var self = $WhileLoadingWrapper$3.$$s == null ? this : $WhileLoadingWrapper$3.$$s, $$4, wrapper = nil;
            if (self.Child == null) self.Child = nil;

            
            wrapper = self;
            return $send(self.Child.$class(), 'rescues', [$$$($$($nesting, 'RenderingContext'), 'NotQuiet')], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

              
              wrapper.$instance_variable_set("@waiting_on_resources", true);
              return (self.__hyperstack_while_loading_waiting_on_resources = true);}, $$4.$$s = self, $$4.$$arity = 0, $$4));}, $WhileLoadingWrapper$3.$$s = self, $WhileLoadingWrapper$3.$$arity = 0, $WhileLoadingWrapper$3));
        })($nesting[0], $$($nesting, 'RescueWrapper'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/component/version"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return Opal.const_set($nesting[0], 'VERSION', "1.0.alpha1.8")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-component"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$js_import', '$import']);
  
  self.$require("hyperstack/internal/component");
  $$($nesting, 'Hyperstack').$js_import("react/react-source-browser", $hash2(["client_only", "defines"], {"client_only": true, "defines": ["ReactDOM", "React"]}));
  $$($nesting, 'Hyperstack').$js_import("react/react-source-server", $hash2(["server_only", "defines"], {"server_only": true, "defines": "React"}));
  $$($nesting, 'Hyperstack').$import("browser/delay", $hash2(["client_only"], {"client_only": true}));
  $$($nesting, 'Hyperstack').$import("browser/interval", $hash2(["client_only"], {"client_only": true}));
  $$($nesting, 'Hyperstack').$js_import("react_ujs", $hash2(["defines"], {"defines": "ReactRailsUJS"}));
  $$($nesting, 'Hyperstack').$import("hyper-component");
  $$($nesting, 'Hyperstack').$import("hyperstack/component/auto-import");
  
  self.$require("hyperstack/internal/callbacks");
  self.$require("hyperstack/internal/auto_unmount");
  self.$require("native");
  self.$require("json");
  self.$require("hyperstack/state/observer");
  self.$require("hyperstack/internal/component/validator");
  self.$require("hyperstack/component/element");
  self.$require("hyperstack/internal/component/react_wrapper");
  self.$require("hyperstack/component");
  self.$require("hyperstack/internal/component/should_component_update");
  self.$require("hyperstack/internal/component/tags");
  self.$require("hyperstack/component/event");
  self.$require("hyperstack/internal/component/rendering_context");
  self.$require("hyperstack/ext/component/object");
  self.$require("hyperstack/ext/component/kernel");
  self.$require("hyperstack/ext/component/number");
  self.$require("hyperstack/ext/component/boolean");
  self.$require("hyperstack/ext/component/array");
  self.$require("hyperstack/ext/component/enumerable");
  self.$require("hyperstack/ext/component/time");
  self.$require("hyperstack/component/isomorphic_helpers");
  self.$require("hyperstack/component/react_api");
  self.$require("hyperstack/internal/component/top_level_rails_component");
  self.$require("hyperstack/component/while_loading");
  self.$require("hyperstack/component/free_render");
  self.$require("hyperstack/internal/component/rescue_wrapper");
  self.$require("hyperstack/internal/component/while_loading_wrapper");
  return self.$require("hyperstack/component/version");;
};

Opal.modules["hyperstack/component/auto-import"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $alias = Opal.alias, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$_reactrb_original_const_missing', '$import_const_from_native', '$raise', '$_reactrb_import_component_class', '$_reactrb_original_method_missing', '$to_proc', '$render']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $const_missing$1, $_reactrb_import_component_class$2, $method_missing$3;

      
      $alias(self, "_reactrb_original_const_missing", "const_missing");
      $alias(self, "_reactrb_original_method_missing", "method_missing");
      
      Opal.def(self, '$const_missing', $const_missing$1 = function $$const_missing(const_name) {
        var self = this, e = nil, $ret_or_1 = nil;

        try {
          return self.$_reactrb_original_const_missing(const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {(e = $err)
            try {
              if ($truthy(($ret_or_1 = $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'NativeLibrary').$import_const_from_native($$($nesting, 'Object'), const_name, true)))) {
                return $ret_or_1
              } else {
                return self.$raise(e)
              }
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
      }, $const_missing$1.$$arity = 1);
      
      Opal.def(self, '$_reactrb_import_component_class', $_reactrb_import_component_class$2 = function $$_reactrb_import_component_class(method) {
        var self = this;

        return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'NativeLibrary').$import_const_from_native(self, method, false)
      }, $_reactrb_import_component_class$2.$$arity = 1);
      return (Opal.def(self, '$method_missing', $method_missing$3 = function $$method_missing(method, $a) {
        var $iter = $method_missing$3.$$p, block = $iter || nil, $post_args, args, self = this, component_class = nil;

        if ($iter) $method_missing$3.$$p = null;
        
        
        if ($iter) $method_missing$3.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        component_class = self.$_reactrb_import_component_class(method);
        if ($truthy(component_class)) {
        } else {
          $send(self, '_reactrb_original_method_missing', [method].concat(Opal.to_a(args)), block.$to_proc())
        };
        return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [component_class].concat(Opal.to_a(args)), block.$to_proc());
      }, $method_missing$3.$$arity = -2), nil) && 'method_missing';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'NativeLibrary');

          var $nesting = [self].concat($parent_nesting);

          return nil
        })($nesting[0], $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'NativeLibrary'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/internal/state/mapper"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$+', '$observed!', '$class', '$update_objects_to_observe', '$-', '$<<', '$[]', '$new_objects', '$update_exclusions', '$delay_updates?', '$schedule_delayed_updater', '$zero?', '$key?', '$current_observers', '$each', '$mutations', '$remove_current_observers_and_objects', '$delete', '$[]=', '$current_objects', '$new', '$raise', '$empty?', '$on_client?', '$!=', '$after', '$run_delayed_updater', '$observers_to_update', '$include?', '$tap']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'State');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'Mapper');

          var $nesting = [self].concat($parent_nesting);

          
          self.rendering_level = 0;
          return (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting), $observing$1, $observed$excl$2, $mutated$excl$3, $observed$ques$5, $bulk_update$6, $ignore_bulk_updates$7, $ignore_mutations$8, $update_objects_to_observe$9, $remove$11, $new_objects$12, $current_observers$14, $current_objects$16, $update_exclusions$18, $remove_current_observers_and_objects$19, $delay_updates$ques$21, $schedule_delayed_updater$22, $run_delayed_updater$24, $observers_to_update$26;

            
            
            Opal.def(self, '$observing', $observing$1 = function $$observing(observer, immediate_update, rendering, update_objects) {
              var $a, $b, $iter = $observing$1.$$p, $yield = $iter || nil, self = this, saved_context = nil, $ret_or_1 = nil, return_value = nil;
              if (self.current_observer == null) self.current_observer = nil;
              if (self.immediate_update == null) self.immediate_update = nil;
              if (self.rendering_level == null) self.rendering_level = nil;

              if ($iter) $observing$1.$$p = null;
              return (function() { try {
              
              saved_context = [self.current_observer, self.immediate_update];
              self.current_observer = observer;
              self.immediate_update = (function() {if ($truthy(($ret_or_1 = immediate_update))) {
                return observer
              } else {
                return $ret_or_1
              }; return nil; })();
              if ($truthy(rendering)) {
                
                self.rendering_level = $rb_plus(self.rendering_level, 1);
                self['$observed!'](observer);
                self['$observed!'](observer.$class());};
              return_value = Opal.yieldX($yield, []);
              if ($truthy(update_objects)) {
                self.$update_objects_to_observe(observer)};
              return return_value;
              } finally {
                ($b = saved_context, $a = Opal.to_ary($b), (self.current_observer = ($a[0] == null ? nil : $a[0])), (self.immediate_update = ($a[1] == null ? nil : $a[1])), $b, (function() {if ($truthy(rendering)) {
                  return (self.rendering_level = $rb_minus(self.rendering_level, 1))
                } else {
                  return nil
                }; return nil; })(), return_value)
              }; })()
            }, $observing$1.$$arity = 4);
            
            Opal.def(self, '$observed!', $observed$excl$2 = function(object) {
              var self = this;
              if (self.current_observer == null) self.current_observer = nil;

              
              if ($truthy(self.current_observer)) {
              } else {
                return nil
              };
              self.$new_objects()['$[]'](self.current_observer)['$<<'](object);
              if ($truthy(self.$update_exclusions()['$[]'](object))) {
              } else {
                return nil
              };
              return self.$update_exclusions()['$[]'](object)['$<<'](self.current_observer);
            }, $observed$excl$2.$$arity = 1);
            
            Opal.def(self, '$mutated!', $mutated$excl$3 = function(object) {
              var $$4, self = this;
              if (self.ignore_mutations == null) self.ignore_mutations = nil;
              if (self.rendering_level == null) self.rendering_level = nil;

              
              if ($truthy(self.ignore_mutations)) {
                return nil};
              if ($truthy(self['$delay_updates?'](object))) {
                return self.$schedule_delayed_updater(object)
              } else if ($truthy(self.rendering_level['$zero?']())) {
                if ($truthy(self.$current_observers()['$key?'](object))) {
                  return $send(self.$current_observers()['$[]'](object), 'each', [], ($$4 = function(observer){var self = $$4.$$s == null ? this : $$4.$$s;

                    
                    
                    if (observer == null) {
                      observer = nil;
                    };
                    return observer.$mutations([object]);}, $$4.$$s = self, $$4.$$arity = 1, $$4))
                } else {
                  return nil
                }
              } else {
                return nil
              };
            }, $mutated$excl$3.$$arity = 1);
            
            Opal.def(self, '$observed?', $observed$ques$5 = function(object) {
              var self = this;

              return self.$current_observers()['$key?'](object)
            }, $observed$ques$5.$$arity = 1);
            
            Opal.def(self, '$bulk_update', $bulk_update$6 = function $$bulk_update() {
              var $iter = $bulk_update$6.$$p, $yield = $iter || nil, self = this, saved_bulk_update_flag = nil;
              if (self.bulk_update_flag == null) self.bulk_update_flag = nil;

              if ($iter) $bulk_update$6.$$p = null;
              return (function() { try {
              
              saved_bulk_update_flag = self.bulk_update_flag;
              self.bulk_update_flag = true;
              return Opal.yieldX($yield, []);;
              } finally {
                (self.bulk_update_flag = saved_bulk_update_flag)
              }; })()
            }, $bulk_update$6.$$arity = 0);
            
            Opal.def(self, '$ignore_bulk_updates', $ignore_bulk_updates$7 = function $$ignore_bulk_updates($a) {
              var $post_args, args, $iter = $ignore_bulk_updates$7.$$p, $yield = $iter || nil, self = this, saved_ignore_bulk_update_flag = nil;
              if (self.ignore_bulk_update_flag == null) self.ignore_bulk_update_flag = nil;

              if ($iter) $ignore_bulk_updates$7.$$p = null;
              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              return (function() { try {
              
              saved_ignore_bulk_update_flag = self.ignore_bulk_update_flag;
              self.ignore_bulk_update_flag = true;
              return Opal.yieldX($yield, Opal.to_a(args));;
              } finally {
                (self.ignore_bulk_update_flag = saved_ignore_bulk_update_flag)
              }; })();
            }, $ignore_bulk_updates$7.$$arity = -1);
            
            Opal.def(self, '$ignore_mutations', $ignore_mutations$8 = function $$ignore_mutations() {
              var $iter = $ignore_mutations$8.$$p, $yield = $iter || nil, self = this, saved_ignore_mutations_flag = nil;
              if (self.ignore_mutations == null) self.ignore_mutations = nil;

              if ($iter) $ignore_mutations$8.$$p = null;
              return (function() { try {
              
              saved_ignore_mutations_flag = self.ignore_mutations;
              self.ignore_mutations = true;
              return Opal.yieldX($yield, []);;
              } finally {
                (self.ignore_mutations = saved_ignore_mutations_flag)
              }; })()
            }, $ignore_mutations$8.$$arity = 0);
            
            Opal.def(self, '$update_objects_to_observe', $update_objects_to_observe$9 = function $$update_objects_to_observe(observer) {
              var $$10, self = this, objects = nil, $writer = nil;
              if (self.current_observer == null) self.current_observer = nil;

              
              
              if (observer == null) {
                observer = self.current_observer;
              };
              self.$remove_current_observers_and_objects(observer);
              objects = self.$new_objects().$delete(observer);
              if ($truthy(objects)) {
                $send(objects, 'each', [], ($$10 = function(object){var self = $$10.$$s == null ? this : $$10.$$s;

                  
                  
                  if (object == null) {
                    object = nil;
                  };
                  return self.$current_observers()['$[]'](object)['$<<'](observer);}, $$10.$$s = self, $$10.$$arity = 1, $$10))};
              
              $writer = [observer, objects];
              $send(self.$current_objects(), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            }, $update_objects_to_observe$9.$$arity = -1);
            
            Opal.def(self, '$remove', $remove$11 = function $$remove(observer) {
              var self = this;
              if (self.current_observer == null) self.current_observer = nil;
              if (self.removed_observers == null) self.removed_observers = nil;

              
              
              if (observer == null) {
                observer = self.current_observer;
              };
              self.$remove_current_observers_and_objects(observer);
              self.$new_objects().$delete(observer);
              if ($truthy(self.removed_observers)) {
                return self.removed_observers['$<<'](observer)
              } else {
                return nil
              };
            }, $remove$11.$$arity = -1);
            
            Opal.def(self, '$new_objects', $new_objects$12 = function $$new_objects() {
              var $$13, self = this, $ret_or_2 = nil;
              if (self.new_objects == null) self.new_objects = nil;

              return (self.new_objects = (function() {if ($truthy(($ret_or_2 = self.new_objects))) {
                return $ret_or_2
              } else {
                return $send($$($nesting, 'Hash'), 'new', [], ($$13 = function(h, k){var self = $$13.$$s == null ? this : $$13.$$s, $writer = nil;

                  
                  
                  if (h == null) {
                    h = nil;
                  };
                  
                  if (k == null) {
                    k = nil;
                  };
                  $writer = [k, $$($nesting, 'Set').$new()];
                  $send(h, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, $$13.$$s = self, $$13.$$arity = 2, $$13))
              }; return nil; })())
            }, $new_objects$12.$$arity = 0);
            
            Opal.def(self, '$current_observers', $current_observers$14 = function $$current_observers() {
              var $$15, self = this, $ret_or_3 = nil;
              if (self.current_observers == null) self.current_observers = nil;

              return (self.current_observers = (function() {if ($truthy(($ret_or_3 = self.current_observers))) {
                return $ret_or_3
              } else {
                return $send($$($nesting, 'Hash'), 'new', [], ($$15 = function(h, k){var self = $$15.$$s == null ? this : $$15.$$s, $writer = nil;

                  
                  
                  if (h == null) {
                    h = nil;
                  };
                  
                  if (k == null) {
                    k = nil;
                  };
                  $writer = [k, []];
                  $send(h, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, $$15.$$s = self, $$15.$$arity = 2, $$15))
              }; return nil; })())
            }, $current_observers$14.$$arity = 0);
            
            Opal.def(self, '$current_objects', $current_objects$16 = function $$current_objects() {
              var $$17, self = this, $ret_or_4 = nil;
              if (self.current_objects == null) self.current_objects = nil;

              return (self.current_objects = (function() {if ($truthy(($ret_or_4 = self.current_objects))) {
                return $ret_or_4
              } else {
                return $send($$($nesting, 'Hash'), 'new', [], ($$17 = function(h, k){var self = $$17.$$s == null ? this : $$17.$$s, $writer = nil;

                  
                  
                  if (h == null) {
                    h = nil;
                  };
                  
                  if (k == null) {
                    k = nil;
                  };
                  $writer = [k, []];
                  $send(h, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, $$17.$$s = self, $$17.$$arity = 2, $$17))
              }; return nil; })())
            }, $current_objects$16.$$arity = 0);
            
            Opal.def(self, '$update_exclusions', $update_exclusions$18 = function $$update_exclusions() {
              var self = this, $ret_or_5 = nil;
              if (self.update_exclusions == null) self.update_exclusions = nil;

              return (self.update_exclusions = (function() {if ($truthy(($ret_or_5 = self.update_exclusions))) {
                return $ret_or_5
              } else {
                return $$($nesting, 'Hash').$new()
              }; return nil; })())
            }, $update_exclusions$18.$$arity = 0);
            
            Opal.def(self, '$remove_current_observers_and_objects', $remove_current_observers_and_objects$19 = function $$remove_current_observers_and_objects(observer) {
              var $$20, self = this, deleted_objects = nil;

              
              if ($truthy(observer)) {
              } else {
                self.$raise("state management called outside of watch block")
              };
              deleted_objects = self.$current_objects().$delete(observer);
              if ($truthy(deleted_objects)) {
              } else {
                return nil
              };
              return $send(deleted_objects, 'each', [], ($$20 = function(object){var self = $$20.$$s == null ? this : $$20.$$s;

                
                
                if (object == null) {
                  object = nil;
                };
                if ($truthy(self.$current_observers()['$key?'](object))) {
                } else {
                  return nil;
                };
                self.$current_observers()['$[]'](object).$delete(observer);
                if ($truthy(self.$current_observers()['$[]'](object)['$empty?']())) {
                  return self.$current_observers().$delete(object)
                } else {
                  return nil
                };}, $$20.$$s = self, $$20.$$arity = 1, $$20));
            }, $remove_current_observers_and_objects$19.$$arity = 1);
            
            Opal.def(self, '$delay_updates?', $delay_updates$ques$21 = function(object) {
              var self = this, $ret_or_6 = nil;
              if (self.ignore_bulk_update_flag == null) self.ignore_bulk_update_flag = nil;
              if (self.bulk_update_flag == null) self.bulk_update_flag = nil;
              if (self.immediate_update == null) self.immediate_update = nil;
              if (self.current_observer == null) self.current_observer = nil;

              
              if ($truthy(self.ignore_bulk_update_flag)) {
                return false};
              if ($truthy(self.bulk_update_flag)) {
                return true};
              if ($truthy($$($nesting, 'Hyperstack')['$on_client?']())) {
              } else {
                return false
              };
              
              if ($truthy(($ret_or_6 = self.immediate_update['$!='](self.current_observer)))) {
                return $ret_or_6
              } else {
                return self.current_observer['$!='](object)
              };;
            }, $delay_updates$ques$21.$$arity = 1);
            
            Opal.def(self, '$schedule_delayed_updater', $schedule_delayed_updater$22 = function $$schedule_delayed_updater(object) {
              var $$23, self = this, $writer = nil, $ret_or_7 = nil;
              if (self.delayed_updater == null) self.delayed_updater = nil;

              
              
              $writer = [object, $$($nesting, 'Set').$new()];
              $send(self.$update_exclusions(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return (self.delayed_updater = (function() {if ($truthy(($ret_or_7 = self.delayed_updater))) {
                return $ret_or_7
              } else {
                return $send(self, 'after', [0], ($$23 = function(){var self = $$23.$$s == null ? this : $$23.$$s;

                  return self.$run_delayed_updater()}, $$23.$$s = self, $$23.$$arity = 0, $$23))
              }; return nil; })());
            }, $schedule_delayed_updater$22.$$arity = 1);
            
            Opal.def(self, '$run_delayed_updater', $run_delayed_updater$24 = function $$run_delayed_updater() {
              var $$25, self = this, current_update_exclusions = nil;
              if (self.update_exclusions == null) self.update_exclusions = nil;

              return (function() { try {
              
              current_update_exclusions = self.update_exclusions;
              self.update_exclusions = (self.delayed_updater = nil);
              self.removed_observers = $$($nesting, 'Set').$new();
              return $send(self.$observers_to_update(current_update_exclusions), 'each', [], ($$25 = function(observer, objects){var self = $$25.$$s == null ? this : $$25.$$s;
                if (self.removed_observers == null) self.removed_observers = nil;

                
                
                if (observer == null) {
                  observer = nil;
                };
                
                if (objects == null) {
                  objects = nil;
                };
                if ($truthy(self.removed_observers['$include?'](observer))) {
                  return nil
                } else {
                  return observer.$mutations(objects)
                };}, $$25.$$s = self, $$25.$$arity = 2, $$25));
              } finally {
                (self.removed_observers = nil)
              }; })()
            }, $run_delayed_updater$24.$$arity = 0);
            return (Opal.def(self, '$observers_to_update', $observers_to_update$26 = function $$observers_to_update(exclusions) {
              var $$27, $$28, self = this;

              return $send($send($$($nesting, 'Hash'), 'new', [], ($$27 = function(hash, key){var self = $$27.$$s == null ? this : $$27.$$s, $writer = nil;

                
                
                if (hash == null) {
                  hash = nil;
                };
                
                if (key == null) {
                  key = nil;
                };
                $writer = [key, $$($nesting, 'Array').$new()];
                $send(hash, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, $$27.$$s = self, $$27.$$arity = 2, $$27)), 'tap', [], ($$28 = function(updates){var self = $$28.$$s == null ? this : $$28.$$s, $$29;

                
                
                if (updates == null) {
                  updates = nil;
                };
                return $send(exclusions, 'each', [], ($$29 = function(object, excluded_observers){var self = $$29.$$s == null ? this : $$29.$$s, $$30;

                  
                  
                  if (object == null) {
                    object = nil;
                  };
                  
                  if (excluded_observers == null) {
                    excluded_observers = nil;
                  };
                  if ($truthy(self.$current_observers()['$key?'](object))) {
                    return $send(self.$current_observers()['$[]'](object), 'each', [], ($$30 = function(observer){var self = $$30.$$s == null ? this : $$30.$$s;

                      
                      
                      if (observer == null) {
                        observer = nil;
                      };
                      if ($truthy(excluded_observers['$include?'](observer))) {
                        return nil;};
                      return updates['$[]'](observer)['$<<'](object);}, $$30.$$s = self, $$30.$$arity = 1, $$30))
                  } else {
                    return nil
                  };}, $$29.$$s = self, $$29.$$arity = 2, $$29));}, $$28.$$s = self, $$28.$$arity = 1, $$28))
            }, $observers_to_update$26.$$arity = 1), nil) && 'observers_to_update';
          })(Opal.get_singleton_class(self), $nesting);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/state/variable"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$new', '$[]=', '$-', '$[]', '$legacy_map', '$observed!', '$object_id', '$mutated!', '$observed?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'State');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'Variable');

          var $nesting = [self].concat($parent_nesting);

          return (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting), $legacy_map$1, $get$4, $set$5, $observed$ques$6;

            
            
            Opal.def(self, '$legacy_map', $legacy_map$1 = function $$legacy_map() {
              var $$2, self = this, $ret_or_1 = nil;
              if (self.legacy_map == null) self.legacy_map = nil;

              return (self.legacy_map = (function() {if ($truthy(($ret_or_1 = self.legacy_map))) {
                return $ret_or_1
              } else {
                return $send($$($nesting, 'Hash'), 'new', [], ($$2 = function(h, k){var self = $$2.$$s == null ? this : $$2.$$s, $$3, $writer = nil;

                  
                  
                  if (h == null) {
                    h = nil;
                  };
                  
                  if (k == null) {
                    k = nil;
                  };
                  $writer = [k, $send($$($nesting, 'Hash'), 'new', [], ($$3 = function(h2, k2){var self = $$3.$$s == null ? this : $$3.$$s;

                    
                    
                    if (h2 == null) {
                      h2 = nil;
                    };
                    
                    if (k2 == null) {
                      k2 = nil;
                    };
                    $writer = [k2, $$($nesting, 'Array').$new()];
                    $send(h2, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3))];
                  $send(h, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 2, $$2))
              }; return nil; })())
            }, $legacy_map$1.$$arity = 0);
            
            Opal.def(self, '$get', $get$4 = function $$get(obj, name) {
              var self = this, map_object = nil;

              
              map_object = self.$legacy_map()['$[]'](obj)['$[]'](name);
              $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper')['$observed!'](map_object.$object_id());
              return map_object['$[]'](0);
            }, $get$4.$$arity = 2);
            
            Opal.def(self, '$set', $set$5 = function $$set(obj, name, value, _x) {
              var self = this, map_object = nil, $writer = nil;

              
              
              if (_x == null) {
                _x = nil;
              };
              map_object = self.$legacy_map()['$[]'](obj)['$[]'](name);
              
              $writer = [0, value];
              $send(map_object, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper')['$mutated!'](map_object.$object_id());
              return value;
            }, $set$5.$$arity = -4);
            return (Opal.def(self, '$observed?', $observed$ques$6 = function(obj, name) {
              var self = this, map_object = nil;

              
              map_object = self.$legacy_map()['$[]'](obj)['$[]'](name);
              return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper')['$observed?'](map_object.$object_id());
            }, $observed$ques$6.$$arity = 2), nil) && 'observed?';
          })(Opal.get_singleton_class(self), $nesting)
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/receiver"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $lambda = Opal.lambda;

  Opal.add_stubs(['$respond_to?', '$unmounted?', '$format_callback', '$each', '$on_dispatch', '$call', '$<<', '$[]', '$objects_to_unmount', '$is_a?', '$last', '$pop', '$send', '$empty?', '$raise']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Receiver');

        var $nesting = [self].concat($parent_nesting);

        return (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $mount$1, $format_callback$4;

          
          
          Opal.def(self, '$mount', $mount$1 = function $$mount(receiver, $a) {
            var $iter = $mount$1.$$p, block = $iter || nil, $post_args, args, $$2, self = this, $ret_or_1 = nil, callback = nil;

            if ($iter) $mount$1.$$p = null;
            
            
            if ($iter) $mount$1.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            if ($truthy((function() {if ($truthy(($ret_or_1 = receiver['$respond_to?']("unmounted?")))) {
              return receiver['$unmounted?']()
            } else {
              return $ret_or_1
            }; return nil; })())) {
              return nil};
            callback = self.$format_callback(receiver, args);
            return $send(args, 'each', [], ($$2 = function(operation){var self = $$2.$$s == null ? this : $$2.$$s, $$3, id = nil;

              
              
              if (operation == null) {
                operation = nil;
              };
              id = $send(operation, 'on_dispatch', [], ($$3 = function(params){var self = $$3.$$s == null ? this : $$3.$$s;

                
                
                if (params == null) {
                  params = nil;
                };
                if ($truthy(callback)) {
                  callback.$call(params)};
                if ($truthy(block)) {
                  return Opal.yield1(block, params);
                } else {
                  return nil
                };}, $$3.$$s = self, $$3.$$arity = 1, $$3));
              if ($truthy(receiver['$respond_to?']("unmount"))) {
                return $$($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](receiver)['$<<'](id)
              } else {
                return nil
              };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          }, $mount$1.$$arity = -2);
          return (Opal.def(self, '$format_callback', $format_callback$4 = function $$format_callback(receiver, args) {
            var $$5, self = this, call_back = nil, method_name = nil, message = nil;

            
            call_back = (function() {if ($truthy(args.$last()['$is_a?']($$($nesting, 'Symbol')))) {
              
              method_name = args.$pop();
              return $lambda(($$5 = function($a){var self = $$5.$$s == null ? this : $$5.$$s, $post_args, aargs;

                
                
                $post_args = Opal.slice.call(arguments, 0, arguments.length);
                
                aargs = $post_args;;
                return $send(receiver, 'send', ["" + (method_name)].concat(Opal.to_a(aargs)));}, $$5.$$s = self, $$5.$$arity = -1, $$5));
            } else if ($truthy(args.$last()['$is_a?']($$($nesting, 'Proc')))) {
              return args.$pop()
            } else {
              return nil
            }; return nil; })();
            if ($truthy(args['$empty?']())) {
            } else {
              return call_back
            };
            message = "At least one operation must be passed in to the 'receives' macro";
            return self.$raise($$$($$$($$($nesting, 'Legacy'), 'Store'), 'InvalidOperationError'), message);
          }, $format_callback$4.$$arity = 2), nil) && 'format_callback';
        })(Opal.get_singleton_class(self), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/state/observable"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$bulk_update', '$to_proc', '$include', '$each', '$send', '$mount', '$call', '$last', '$observed!', '$mutated!', '$instance_variable_set', '$!', '$instance_variable_get', '$==', '$naming_convention', '$!~', '$!=', '$lambda', '$mutate', '$singleton_class', '$define_method', '$tap', '$instance_exec', '$state_reader', '$state_writer', '$define_singleton_method', '$respond_to?', '$receives', '$each_object', '$<=', '$zero?', '$arity', '$method', '$initialize', '$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'State');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Observable');

        var $nesting = [self].concat($parent_nesting), $Observable_bulk_update$1, $Observable_included$2;

        
        Opal.defs(self, '$bulk_update', $Observable_bulk_update$1 = function $$bulk_update() {
          var $iter = $Observable_bulk_update$1.$$p, block = $iter || nil, self = this;

          if ($iter) $Observable_bulk_update$1.$$p = null;
          
          
          if ($iter) $Observable_bulk_update$1.$$p = null;;
          return $send($$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper'), 'bulk_update', [], block.$to_proc());
        }, $Observable_bulk_update$1.$$arity = 0);
        return (Opal.defs(self, '$included', $Observable_included$2 = function $$included(base) {
          var $$3, $$25, $$26, $iter = $Observable_included$2.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Observable_included$2.$$p = null;
          
          base.$include($$$($$($nesting, 'Internal'), 'AutoUnmount'));
          $send(["singleton_method", "method"], 'each', [], ($$3 = function(kind){var self = $$3.$$s == null ? this : $$3.$$s, $$4, $$5, $$6, $$7, $$8, $$10, $$13, $$16, $$20, $$24;

            
            
            if (kind == null) {
              kind = nil;
            };
            $send(base, 'send', ["" + "define_" + (kind), "receives"], ($$4 = function($a){var self = $$4.$$s == null ? this : $$4.$$s, $iter = $$4.$$p, block = $iter || nil, $post_args, args;

              
              
              if ($iter) $$4.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              return $send($$$($$($nesting, 'Internal'), 'Receiver'), 'mount', [self].concat(Opal.to_a(args)), block.$to_proc());}, $$4.$$s = self, $$4.$$arity = -1, $$4));
            $send(base, 'send', ["" + "define_" + (kind), "observe"], ($$5 = function($a){var self = $$5.$$s == null ? this : $$5.$$s, $iter = $$5.$$p, block = $iter || nil, $post_args, args, result = nil;

              
              
              if ($iter) $$5.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              result = (function() {if ($truthy(block)) {
                return block.$call()
              } else {
                return args.$last()
              }; return nil; })();
              $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper')['$observed!'](self);
              return result;}, $$5.$$s = self, $$5.$$arity = -1, $$5));
            $send(base, 'send', ["" + "define_" + (kind), "mutate"], ($$6 = function($a){var self = $$6.$$s == null ? this : $$6.$$s, $iter = $$6.$$p, block = $iter || nil, $post_args, args, result = nil;

              
              
              if ($iter) $$6.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              result = (function() {if ($truthy(block)) {
                return block.$call()
              } else {
                return args.$last()
              }; return nil; })();
              $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper')['$mutated!'](self);
              return result;}, $$6.$$s = self, $$6.$$arity = -1, $$6));
            $send(base, 'send', ["" + "define_" + (kind), "toggle"], ($$7 = function(var$){var self = $$7.$$s == null ? this : $$7.$$s, result = nil;

              
              
              if (var$ == null) {
                var$ = nil;
              };
              var$ = "" + "@" + (var$);
              result = self.$instance_variable_set(var$, self.$instance_variable_get(var$)['$!']());
              $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper')['$mutated!'](self);
              return result;}, $$7.$$s = self, $$7.$$arity = 1, $$7));
            $send(base, 'send', ["" + "define_" + (kind), "set"], ($$8 = function(var$){var self = $$8.$$s == null ? this : $$8.$$s, $$9, $ret_or_1 = nil, dont_mutate = nil;

              
              
              if (var$ == null) {
                var$ = nil;
              };
              if ($$($nesting, 'Hyperstack').$naming_convention()['$==']("prefix_state")) {
                if ($truthy(var$['$!~'](/^_/))) {
                  var$ = "" + "_" + (var$)}
              } else if ($truthy((function() {if ($truthy(($ret_or_1 = $$($nesting, 'Hyperstack').$naming_convention()['$!=']("none")))) {
                return var$['$!~'](/^[a-z]/)
              } else {
                return $ret_or_1
              }; return nil; })())) {
                dont_mutate = true};
              return $send(self, 'lambda', [], ($$9 = function(val){var self = $$9.$$s == null ? this : $$9.$$s;

                
                
                if (val == null) {
                  val = nil;
                };
                self[var$] = val;
                if ($truthy(dont_mutate)) {
                  return nil
                } else {
                  return self.$mutate()
                };}, $$9.$$s = self, $$9.$$arity = 1, $$9));}, $$8.$$s = self, $$8.$$arity = 1, $$8));
            $send(base.$singleton_class(), 'send', ["" + "define_" + (kind), "observer"], ($$10 = function(name){var self = $$10.$$s == null ? this : $$10.$$s, $iter = $$10.$$p, block = $iter || nil, $$11;

              
              
              if ($iter) $$10.$$p = null;;
              
              if (name == null) {
                name = nil;
              };
              return $send(self, 'define_method', [name], ($$11 = function($a){var self = $$11.$$s == null ? this : $$11.$$s, $post_args, args, $$12;

                
                
                $post_args = Opal.slice.call(arguments, 0, arguments.length);
                
                args = $post_args;;
                return $send($send(self, 'instance_exec', Opal.to_a(args), block.$to_proc()), 'tap', [], ($$12 = function(){var self = $$12.$$s == null ? this : $$12.$$s;

                  return $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper')['$observed!'](self)}, $$12.$$s = self, $$12.$$arity = 0, $$12));}, $$11.$$s = self, $$11.$$arity = -1, $$11));}, $$10.$$s = self, $$10.$$arity = 1, $$10));
            $send(base.$singleton_class(), 'send', ["" + "define_" + (kind), "mutator"], ($$13 = function(name){var self = $$13.$$s == null ? this : $$13.$$s, $iter = $$13.$$p, block = $iter || nil, $$14;

              
              
              if ($iter) $$13.$$p = null;;
              
              if (name == null) {
                name = nil;
              };
              return $send(self, 'define_method', [name], ($$14 = function($a){var self = $$14.$$s == null ? this : $$14.$$s, $post_args, args, $$15;

                
                
                $post_args = Opal.slice.call(arguments, 0, arguments.length);
                
                args = $post_args;;
                return $send($send(self, 'instance_exec', Opal.to_a(args), block.$to_proc()), 'tap', [], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s;

                  return $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper')['$mutated!'](self)}, $$15.$$s = self, $$15.$$arity = 0, $$15));}, $$14.$$s = self, $$14.$$arity = -1, $$14));}, $$13.$$s = self, $$13.$$arity = 1, $$13));
            $send(base.$singleton_class(), 'send', ["" + "define_" + (kind), "state_reader"], ($$16 = function($a){var self = $$16.$$s == null ? this : $$16.$$s, $post_args, names, $$17;

              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              names = $post_args;;
              return $send(names, 'each', [], ($$17 = function(name){var self = $$17.$$s == null ? this : $$17.$$s, $$18, var_name = nil, $ret_or_2 = nil;

                
                
                if (name == null) {
                  name = nil;
                };
                var_name = (function() {if ($truthy((function() {if ($truthy(($ret_or_2 = $$($nesting, 'Hyperstack').$naming_convention()['$==']("prefix_state")))) {
                  return name['$!~'](/^_/)
                } else {
                  return $ret_or_2
                }; return nil; })())) {
                  return "" + "_" + (name)
                } else {
                  return name
                }; return nil; })();
                return $send(self, 'define_method', [name], ($$18 = function(){var self = $$18.$$s == null ? this : $$18.$$s, $$19;

                  return $send(self.$instance_variable_get("" + "@" + (var_name)), 'tap', [], ($$19 = function(){var self = $$19.$$s == null ? this : $$19.$$s;

                    return $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper')['$observed!'](self)}, $$19.$$s = self, $$19.$$arity = 0, $$19))}, $$18.$$s = self, $$18.$$arity = 0, $$18));}, $$17.$$s = self, $$17.$$arity = 1, $$17));}, $$16.$$s = self, $$16.$$arity = -1, $$16));
            $send(base.$singleton_class(), 'send', ["" + "define_" + (kind), "state_writer"], ($$20 = function($a){var self = $$20.$$s == null ? this : $$20.$$s, $post_args, names, $$21;

              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              names = $post_args;;
              return $send(names, 'each', [], ($$21 = function(name){var self = $$21.$$s == null ? this : $$21.$$s, $$22, var_name = nil, $ret_or_3 = nil;

                
                
                if (name == null) {
                  name = nil;
                };
                var_name = (function() {if ($truthy((function() {if ($truthy(($ret_or_3 = $$($nesting, 'Hyperstack').$naming_convention()['$==']("prefix_state")))) {
                  return name['$!~'](/^_/)
                } else {
                  return $ret_or_3
                }; return nil; })())) {
                  return "" + "_" + (name)
                } else {
                  return name
                }; return nil; })();
                return $send(self, 'define_method', ["" + (name) + "="], ($$22 = function(x){var self = $$22.$$s == null ? this : $$22.$$s, $$23;

                  
                  
                  if (x == null) {
                    x = nil;
                  };
                  return $send(self.$instance_variable_set("" + "@" + (var_name), x), 'tap', [], ($$23 = function(){var self = $$23.$$s == null ? this : $$23.$$s;

                    return $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper')['$mutated!'](self)}, $$23.$$s = self, $$23.$$arity = 0, $$23));}, $$22.$$s = self, $$22.$$arity = 1, $$22));}, $$21.$$s = self, $$21.$$arity = 1, $$21));}, $$20.$$s = self, $$20.$$arity = -1, $$20));
            return $send(base.$singleton_class(), 'send', ["" + "define_" + (kind), "state_accessor"], ($$24 = function($a){var self = $$24.$$s == null ? this : $$24.$$s, $post_args, names;

              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              names = $post_args;;
              $send(self, 'state_reader', Opal.to_a(names));
              return $send(self, 'state_writer', Opal.to_a(names));}, $$24.$$s = self, $$24.$$arity = -1, $$24));}, $$3.$$s = self, $$3.$$arity = 1, $$3));
          $send(base.$singleton_class(), 'define_singleton_method', ["receives"], ($$25 = function($a){var self = $$25.$$s == null ? this : $$25.$$s, $iter = $$25.$$p, block = $iter || nil, $post_args, args;

            
            
            if ($iter) $$25.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send($$$($$($nesting, 'Internal'), 'Receiver'), 'mount', [base].concat(Opal.to_a(args)), block.$to_proc());}, $$25.$$s = self, $$25.$$arity = -1, $$25));
          if ($truthy(base['$respond_to?']("__hyperstack_state_observer_included"))) {
            return nil
          } else {
            
            $send(base, 'receives', [$$$($$$($$($nesting, 'Hyperstack'), 'Application'), 'Boot')], ($$26 = function(){var self = $$26.$$s == null ? this : $$26.$$s, $$27;

              return $send($$($nesting, 'ObjectSpace'), 'each_object', [$$($nesting, 'Class')], ($$27 = function(klass){var self = $$27.$$s == null ? this : $$27.$$s;

                
                
                if (klass == null) {
                  klass = nil;
                };
                if ($truthy($rb_le(klass, base))) {
                } else {
                  return nil;
                };
                if ($truthy(klass['$respond_to?']("initialize"))) {
                } else {
                  return nil;
                };
                if ($truthy(klass.$method("initialize").$arity()['$zero?']())) {
                } else {
                  return nil;
                };
                return klass.$initialize();}, $$27.$$s = self, $$27.$$arity = 1, $$27))}, $$26.$$s = self, $$26.$$arity = 0, $$26));
            return base.$singleton_class().$attr_reader("__hyperstack_state_observer_included");
          };
        }, $Observable_included$2.$$arity = 1), nil) && 'included';
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/state/version"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'State');

      var $nesting = [self].concat($parent_nesting);

      return Opal.const_set($nesting[0], 'VERSION', "1.0.alpha1.8")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["ext/object_space"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$loop', '$[]', '$each', '$const_get', '$respond_to?', '$include?', '$is_a?', '$<<', '$+', '$>=', '$length']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ObjectSpace');

    var $nesting = [self].concat($parent_nesting), $ObjectSpace_each_object$1;

    return (Opal.defs(self, '$each_object', $ObjectSpace_each_object$1 = function $$each_object(target_klass) {
      var $iter = $ObjectSpace_each_object$1.$$p, block = $iter || nil, $$2, self = this, klasses = nil, i = nil;

      if ($iter) $ObjectSpace_each_object$1.$$p = null;
      
      
      if ($iter) $ObjectSpace_each_object$1.$$p = null;;
      klasses = [$$($nesting, 'Object')];
      i = 0;
      return (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $$3, klass = nil, names = nil, $ret_or_1 = nil;

        
        klass = klasses['$[]'](i);
        Opal.yield1(block, klass);
        names = (function() {if ($truthy(($ret_or_1 = klass.$$const))) {
          return Object.keys(klass.$$const);
        } else {
          return $ret_or_1
        }; return nil; })();
        if ($truthy(names)) {
          $send(names, 'each', [], ($$3 = function(name){var self = $$3.$$s == null ? this : $$3.$$s, k = nil, e = nil;

            
            
            if (name == null) {
              name = nil;
            };
            try {
              
              k = (function() { try {
                return klass.$const_get(name)
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception(); }
                } else { throw $err; }
              }})();
              if ($truthy(k.$$const)) {
              } else {
                return nil;
              };
              if ($truthy(k['$respond_to?']("is_a?"))) {
              } else {
                return nil;
              };
              if ($truthy(klasses['$include?'](k))) {
                return nil;};
              if ($truthy(k['$is_a?'](target_klass))) {
                return klasses['$<<'](k)
              } else {
                return nil
              };
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
                try {
                  return nil;
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            };}, $$3.$$s = self, $$3.$$arity = 1, $$3))};
        i = $rb_plus(i, 1);
        if ($truthy($rb_ge(i, klasses.$length()))) {
          
          Opal.brk(nil, $brk)
        } else {
          return nil
        };}, $$2.$$s = self, $$2.$$brk = $brk, $$2.$$arity = 0, $$2))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
    }, $ObjectSpace_each_object$1.$$arity = 1), nil) && 'each_object'
  })($nesting[0], $nesting)
};

Opal.modules["hyper-state"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require', '$import']);
  
  self.$require("set");
  self.$require("hyperstack-config");
  $$($nesting, 'Hyperstack').$import("hyper-state");
  self.$require("hyperstack/internal/callbacks");
  self.$require("hyperstack/internal/auto_unmount");
  self.$require("hyperstack/internal/state/mapper");
  self.$require("hyperstack/internal/state/variable");
  self.$require("hyperstack/internal/auto_unmount");
  self.$require("hyperstack/internal/receiver");
  self.$require("hyperstack/state/observable");
  self.$require("hyperstack/state/observer");
  self.$require("hyperstack/state/version");
  return self.$require("ext/object_space");
};

Opal.modules["hyper-operation/version"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Operation');

      var $nesting = [self].concat($parent_nesting);

      return Opal.const_set($nesting[0], 'VERSION', "1.0.alpha1.8")
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["js"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $alias = Opal.alias;

  Opal.add_stubs(['$insert', '$<<', '$global', '$extend']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'JS');

    var $nesting = [self].concat($parent_nesting), $JS_delete$1, $JS_global$2, $JS_in$3, $JS_instanceof$4, $JS_new$5, $JS_new$6, $JS_typeof$7, $JS_void$8, $JS_call$9, $JS_$$$10;

    
    
    Opal.def(self, '$delete', $JS_delete$1 = function(object, property) {
      var self = this;

      return delete object[property]
    }, $JS_delete$1.$$arity = 2);
    
    Opal.def(self, '$global', $JS_global$2 = function $$global() {
      var self = this;

      return Opal.global;
    }, $JS_global$2.$$arity = 0);
    
    Opal.def(self, '$in', $JS_in$3 = function(property, object) {
      var self = this;

      return property in object
    }, $JS_in$3.$$arity = 2);
    
    Opal.def(self, '$instanceof', $JS_instanceof$4 = function(value, func) {
      var self = this;

      return value instanceof func
    }, $JS_instanceof$4.$$arity = 2);
    if ($truthy(typeof Function.prototype.bind == 'function')) {
      
      Opal.def(self, '$new', $JS_new$5 = function(func, $a) {
        var $iter = $JS_new$5.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $JS_new$5.$$p = null;
        
        
        if ($iter) $JS_new$5.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        args.$insert(0, this);
        if ($truthy(block)) {
          args['$<<'](block)};
        return new (func.bind.apply(func, args))();
      }, $JS_new$5.$$arity = -2)
    } else {
      
      Opal.def(self, '$new', $JS_new$6 = function(func, $a) {
        var $iter = $JS_new$6.$$p, block = $iter || nil, $post_args, args, self = this, f = nil;

        if ($iter) $JS_new$6.$$p = null;
        
        
        if ($iter) $JS_new$6.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        if ($truthy(block)) {
          args['$<<'](block)};
        f = function(){return func.apply(this, args)};
        f["prototype"] = func["prototype"];
        return new f();;
      }, $JS_new$6.$$arity = -2)
    };
    
    Opal.def(self, '$typeof', $JS_typeof$7 = function(value) {
      var self = this;

      return typeof value
    }, $JS_typeof$7.$$arity = 1);
    
    Opal.def(self, '$void', $JS_void$8 = function(expr) {
      var self = this;

      return void expr
    }, $JS_void$8.$$arity = 1);
    
    Opal.def(self, '$call', $JS_call$9 = function $$call(func, $a) {
      var $iter = $JS_call$9.$$p, block = $iter || nil, $post_args, args, self = this, g = nil;

      if ($iter) $JS_call$9.$$p = null;
      
      
      if ($iter) $JS_call$9.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      g = self.$global();
      if ($truthy(block)) {
        args['$<<'](block)};
      return g[func].apply(g, args);
    }, $JS_call$9.$$arity = -2);
    $alias(self, "method_missing", "call");
    
    Opal.def(self, '$[]', $JS_$$$10 = function(name) {
      var self = this;

      return Opal.global[name]
    }, $JS_$$$10.$$arity = 1);
    return self.$extend(self);
  })($nesting[0], $nesting)
};

Opal.modules["bigdecimal/bignumber"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BigDecimal');

    var $nesting = [self].concat($parent_nesting);

    
    var define = function (f) { Opal.const_set(self, 'BigNumber', f()); };
    define.amd = true;
    /* global Uint32Array */

    /* eslint-disable */
    /* bignumber.js v2.1.4 https://github.com/MikeMcl/bignumber.js/LICENCE */
    !function(e){"use strict";function n(e){function E(e,n){var t,r,i,o,u,s,f=this;if(!(f instanceof E))return j&&L(26,"constructor call without new",e),new E(e,n);if(null!=n&&H(n,2,64,M,"base")){if(n=0|n,s=e+"",10==n)return f=new E(e instanceof E?e:s),U(f,P+f.e+1,k);if((o="number"==typeof e)&&0*e!=0||!new RegExp("^-?"+(t="["+N.slice(0,n)+"]+")+"(?:\\."+t+")?$",37>n?"i":"").test(s))return h(f,s,o,n);o?(f.s=0>1/e?(s=s.slice(1),-1):1,j&&s.replace(/^0\.0*|\./,"").length>15&&L(M,v,e),o=!1):f.s=45===s.charCodeAt(0)?(s=s.slice(1),-1):1,s=D(s,10,n,f.s)}else{if(e instanceof E)return f.s=e.s,f.e=e.e,f.c=(e=e.c)?e.slice():e,void(M=0);if((o="number"==typeof e)&&0*e==0){if(f.s=0>1/e?(e=-e,-1):1,e===~~e){for(r=0,i=e;i>=10;i/=10,r++);return f.e=r,f.c=[e],void(M=0)}s=e+""}else{if(!g.test(s=e+""))return h(f,s,o);f.s=45===s.charCodeAt(0)?(s=s.slice(1),-1):1}}for((r=s.indexOf("."))>-1&&(s=s.replace(".","")),(i=s.search(/e/i))>0?(0>r&&(r=i),r+=+s.slice(i+1),s=s.substring(0,i)):0>r&&(r=s.length),i=0;48===s.charCodeAt(i);i++);for(u=s.length;48===s.charCodeAt(--u););if(s=s.slice(i,u+1))if(u=s.length,o&&j&&u>15&&L(M,v,f.s*e),r=r-i-1,r>z)f.c=f.e=null;else if(G>r)f.c=[f.e=0];else{if(f.e=r,f.c=[],i=(r+1)%O,0>r&&(i+=O),u>i){for(i&&f.c.push(+s.slice(0,i)),u-=O;u>i;)f.c.push(+s.slice(i,i+=O));s=s.slice(i),i=O-s.length}else i-=u;for(;i--;s+="0");f.c.push(+s)}else f.c=[f.e=0];M=0}function D(e,n,t,i){var o,u,f,c,a,h,g,p=e.indexOf("."),d=P,m=k;for(37>t&&(e=e.toLowerCase()),p>=0&&(f=J,J=0,e=e.replace(".",""),g=new E(t),a=g.pow(e.length-p),J=f,g.c=s(l(r(a.c),a.e),10,n),g.e=g.c.length),h=s(e,t,n),u=f=h.length;0==h[--f];h.pop());if(!h[0])return"0";if(0>p?--u:(a.c=h,a.e=u,a.s=i,a=C(a,g,d,m,n),h=a.c,c=a.r,u=a.e),o=u+d+1,p=h[o],f=n/2,c=c||0>o||null!=h[o+1],c=4>m?(null!=p||c)&&(0==m||m==(a.s<0?3:2)):p>f||p==f&&(4==m||c||6==m&&1&h[o-1]||m==(a.s<0?8:7)),1>o||!h[0])e=c?l("1",-d):"0";else{if(h.length=o,c)for(--n;++h[--o]>n;)h[o]=0,o||(++u,h.unshift(1));for(f=h.length;!h[--f];);for(p=0,e="";f>=p;e+=N.charAt(h[p++]));e=l(e,u)}return e}function F(e,n,t,i){var o,u,s,c,a;if(t=null!=t&&H(t,0,8,i,w)?0|t:k,!e.c)return e.toString();if(o=e.c[0],s=e.e,null==n)a=r(e.c),a=19==i||24==i&&B>=s?f(a,s):l(a,s);else if(e=U(new E(e),n,t),u=e.e,a=r(e.c),c=a.length,19==i||24==i&&(u>=n||B>=u)){for(;n>c;a+="0",c++);a=f(a,u)}else if(n-=s,a=l(a,u),u+1>c){if(--n>0)for(a+=".";n--;a+="0");}else if(n+=u-c,n>0)for(u+1==c&&(a+=".");n--;a+="0");return e.s<0&&o?"-"+a:a}function _(e,n){var t,r,i=0;for(u(e[0])&&(e=e[0]),t=new E(e[0]);++i<e.length;){if(r=new E(e[i]),!r.s){t=r;break}n.call(t,r)&&(t=r)}return t}function x(e,n,t,r,i){return(n>e||e>t||e!=c(e))&&L(r,(i||"decimal places")+(n>e||e>t?" out of range":" not an integer"),e),!0}function I(e,n,t){for(var r=1,i=n.length;!n[--i];n.pop());for(i=n[0];i>=10;i/=10,r++);return(t=r+t*O-1)>z?e.c=e.e=null:G>t?e.c=[e.e=0]:(e.e=t,e.c=n),e}function L(e,n,t){var r=new Error(["new BigNumber","cmp","config","div","divToInt","eq","gt","gte","lt","lte","minus","mod","plus","precision","random","round","shift","times","toDigits","toExponential","toFixed","toFormat","toFraction","pow","toPrecision","toString","BigNumber"][e]+"() "+n+": "+t);throw r.name="BigNumber Error",M=0,r}function U(e,n,t,r){var i,o,u,s,f,l,c,a=e.c,h=S;if(a){e:{for(i=1,s=a[0];s>=10;s/=10,i++);if(o=n-i,0>o)o+=O,u=n,f=a[l=0],c=f/h[i-u-1]%10|0;else if(l=p((o+1)/O),l>=a.length){if(!r)break e;for(;a.length<=l;a.push(0));f=c=0,i=1,o%=O,u=o-O+1}else{for(f=s=a[l],i=1;s>=10;s/=10,i++);o%=O,u=o-O+i,c=0>u?0:f/h[i-u-1]%10|0}if(r=r||0>n||null!=a[l+1]||(0>u?f:f%h[i-u-1]),r=4>t?(c||r)&&(0==t||t==(e.s<0?3:2)):c>5||5==c&&(4==t||r||6==t&&(o>0?u>0?f/h[i-u]:0:a[l-1])%10&1||t==(e.s<0?8:7)),1>n||!a[0])return a.length=0,r?(n-=e.e+1,a[0]=h[(O-n%O)%O],e.e=-n||0):a[0]=e.e=0,e;if(0==o?(a.length=l,s=1,l--):(a.length=l+1,s=h[O-o],a[l]=u>0?d(f/h[i-u]%h[u])*s:0),r)for(;;){if(0==l){for(o=1,u=a[0];u>=10;u/=10,o++);for(u=a[0]+=s,s=1;u>=10;u/=10,s++);o!=s&&(e.e++,a[0]==b&&(a[0]=1));break}if(a[l]+=s,a[l]!=b)break;a[l--]=0,s=1}for(o=a.length;0===a[--o];a.pop());}e.e>z?e.c=e.e=null:e.e<G&&(e.c=[e.e=0])}return e}var C,M=0,T=E.prototype,q=new E(1),P=20,k=4,B=-7,$=21,G=-1e7,z=1e7,j=!0,H=x,V=!1,W=1,J=100,X={decimalSeparator:".",groupSeparator:",",groupSize:3,secondaryGroupSize:0,fractionGroupSeparator:" ",fractionGroupSize:0};return E.another=n,E.ROUND_UP=0,E.ROUND_DOWN=1,E.ROUND_CEIL=2,E.ROUND_FLOOR=3,E.ROUND_HALF_UP=4,E.ROUND_HALF_DOWN=5,E.ROUND_HALF_EVEN=6,E.ROUND_HALF_CEIL=7,E.ROUND_HALF_FLOOR=8,E.EUCLID=9,E.config=function(){var e,n,t=0,r={},i=arguments,s=i[0],f=s&&"object"==typeof s?function(){return s.hasOwnProperty(n)?null!=(e=s[n]):void 0}:function(){return i.length>t?null!=(e=i[t++]):void 0};return f(n="DECIMAL_PLACES")&&H(e,0,A,2,n)&&(P=0|e),r[n]=P,f(n="ROUNDING_MODE")&&H(e,0,8,2,n)&&(k=0|e),r[n]=k,f(n="EXPONENTIAL_AT")&&(u(e)?H(e[0],-A,0,2,n)&&H(e[1],0,A,2,n)&&(B=0|e[0],$=0|e[1]):H(e,-A,A,2,n)&&(B=-($=0|(0>e?-e:e)))),r[n]=[B,$],f(n="RANGE")&&(u(e)?H(e[0],-A,-1,2,n)&&H(e[1],1,A,2,n)&&(G=0|e[0],z=0|e[1]):H(e,-A,A,2,n)&&(0|e?G=-(z=0|(0>e?-e:e)):j&&L(2,n+" cannot be zero",e))),r[n]=[G,z],f(n="ERRORS")&&(e===!!e||1===e||0===e?(M=0,H=(j=!!e)?x:o):j&&L(2,n+m,e)),r[n]=j,f(n="CRYPTO")&&(e===!!e||1===e||0===e?(V=!(!e||!a),e&&!V&&j&&L(2,"crypto unavailable",a)):j&&L(2,n+m,e)),r[n]=V,f(n="MODULO_MODE")&&H(e,0,9,2,n)&&(W=0|e),r[n]=W,f(n="POW_PRECISION")&&H(e,0,A,2,n)&&(J=0|e),r[n]=J,f(n="FORMAT")&&("object"==typeof e?X=e:j&&L(2,n+" not an object",e)),r[n]=X,r},E.max=function(){return _(arguments,T.lt)},E.min=function(){return _(arguments,T.gt)},E.random=function(){var e=9007199254740992,n=Math.random()*e&2097151?function(){return d(Math.random()*e)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)};return function(e){var t,r,i,o,u,s=0,f=[],l=new E(q);if(e=null!=e&&H(e,0,A,14)?0|e:P,o=p(e/O),V)if(a&&a.getRandomValues){for(t=a.getRandomValues(new Uint32Array(o*=2));o>s;)u=131072*t[s]+(t[s+1]>>>11),u>=9e15?(r=a.getRandomValues(new Uint32Array(2)),t[s]=r[0],t[s+1]=r[1]):(f.push(u%1e14),s+=2);s=o/2}else if(a&&a.randomBytes){for(t=a.randomBytes(o*=7);o>s;)u=281474976710656*(31&t[s])+1099511627776*t[s+1]+4294967296*t[s+2]+16777216*t[s+3]+(t[s+4]<<16)+(t[s+5]<<8)+t[s+6],u>=9e15?a.randomBytes(7).copy(t,s):(f.push(u%1e14),s+=7);s=o/7}else j&&L(14,"crypto unavailable",a);if(!s)for(;o>s;)u=n(),9e15>u&&(f[s++]=u%1e14);for(o=f[--s],e%=O,o&&e&&(u=S[O-e],f[s]=d(o/u)*u);0===f[s];f.pop(),s--);if(0>s)f=[i=0];else{for(i=-1;0===f[0];f.shift(),i-=O);for(s=1,u=f[0];u>=10;u/=10,s++);O>s&&(i-=O-s)}return l.e=i,l.c=f,l}}(),C=function(){function e(e,n,t){var r,i,o,u,s=0,f=e.length,l=n%R,c=n/R|0;for(e=e.slice();f--;)o=e[f]%R,u=e[f]/R|0,r=c*o+u*l,i=l*o+r%R*R+s,s=(i/t|0)+(r/R|0)+c*u,e[f]=i%t;return s&&e.unshift(s),e}function n(e,n,t,r){var i,o;if(t!=r)o=t>r?1:-1;else for(i=o=0;t>i;i++)if(e[i]!=n[i]){o=e[i]>n[i]?1:-1;break}return o}function r(e,n,t,r){for(var i=0;t--;)e[t]-=i,i=e[t]<n[t]?1:0,e[t]=i*r+e[t]-n[t];for(;!e[0]&&e.length>1;e.shift());}return function(i,o,u,s,f){var l,c,a,h,g,p,m,w,v,N,y,S,R,A,D,F,_,x=i.s==o.s?1:-1,I=i.c,L=o.c;if(!(I&&I[0]&&L&&L[0]))return new E(i.s&&o.s&&(I?!L||I[0]!=L[0]:L)?I&&0==I[0]||!L?0*x:x/0:NaN);for(w=new E(x),v=w.c=[],c=i.e-o.e,x=u+c+1,f||(f=b,c=t(i.e/O)-t(o.e/O),x=x/O|0),a=0;L[a]==(I[a]||0);a++);if(L[a]>(I[a]||0)&&c--,0>x)v.push(1),h=!0;else{for(A=I.length,F=L.length,a=0,x+=2,g=d(f/(L[0]+1)),g>1&&(L=e(L,g,f),I=e(I,g,f),F=L.length,A=I.length),R=F,N=I.slice(0,F),y=N.length;F>y;N[y++]=0);_=L.slice(),_.unshift(0),D=L[0],L[1]>=f/2&&D++;do{if(g=0,l=n(L,N,F,y),0>l){if(S=N[0],F!=y&&(S=S*f+(N[1]||0)),g=d(S/D),g>1)for(g>=f&&(g=f-1),p=e(L,g,f),m=p.length,y=N.length;1==n(p,N,m,y);)g--,r(p,m>F?_:L,m,f),m=p.length,l=1;else 0==g&&(l=g=1),p=L.slice(),m=p.length;if(y>m&&p.unshift(0),r(N,p,y,f),y=N.length,-1==l)for(;n(L,N,F,y)<1;)g++,r(N,y>F?_:L,y,f),y=N.length}else 0===l&&(g++,N=[0]);v[a++]=g,N[0]?N[y++]=I[R]||0:(N=[I[R]],y=1)}while((R++<A||null!=N[0])&&x--);h=null!=N[0],v[0]||v.shift()}if(f==b){for(a=1,x=v[0];x>=10;x/=10,a++);U(w,u+(w.e=a+c*O-1)+1,s,h)}else w.e=c,w.r=+h;return w}}(),h=function(){var e=/^(-?)0([xbo])(?=\w[\w.]*$)/i,n=/^([^.]+)\.$/,t=/^\.([^.]+)$/,r=/^-?(Infinity|NaN)$/,i=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(o,u,s,f){var l,c=s?u:u.replace(i,"");if(r.test(c))o.s=isNaN(c)?null:0>c?-1:1;else{if(!s&&(c=c.replace(e,function(e,n,t){return l="x"==(t=t.toLowerCase())?16:"b"==t?2:8,f&&f!=l?e:n}),f&&(l=f,c=c.replace(n,"$1").replace(t,"0.$1")),u!=c))return new E(c,l);j&&L(M,"not a"+(f?" base "+f:"")+" number",u),o.s=null}o.c=o.e=null,M=0}}(),T.absoluteValue=T.abs=function(){var e=new E(this);return e.s<0&&(e.s=1),e},T.ceil=function(){return U(new E(this),this.e+1,2)},T.comparedTo=T.cmp=function(e,n){return M=1,i(this,new E(e,n))},T.decimalPlaces=T.dp=function(){var e,n,r=this.c;if(!r)return null;if(e=((n=r.length-1)-t(this.e/O))*O,n=r[n])for(;n%10==0;n/=10,e--);return 0>e&&(e=0),e},T.dividedBy=T.div=function(e,n){return M=3,C(this,new E(e,n),P,k)},T.dividedToIntegerBy=T.divToInt=function(e,n){return M=4,C(this,new E(e,n),0,1)},T.equals=T.eq=function(e,n){return M=5,0===i(this,new E(e,n))},T.floor=function(){return U(new E(this),this.e+1,3)},T.greaterThan=T.gt=function(e,n){return M=6,i(this,new E(e,n))>0},T.greaterThanOrEqualTo=T.gte=function(e,n){return M=7,1===(n=i(this,new E(e,n)))||0===n},T.isFinite=function(){return!!this.c},T.isInteger=T.isInt=function(){return!!this.c&&t(this.e/O)>this.c.length-2},T.isNaN=function(){return!this.s},T.isNegative=T.isNeg=function(){return this.s<0},T.isZero=function(){return!!this.c&&0==this.c[0]},T.lessThan=T.lt=function(e,n){return M=8,i(this,new E(e,n))<0},T.lessThanOrEqualTo=T.lte=function(e,n){return M=9,-1===(n=i(this,new E(e,n)))||0===n},T.minus=T.sub=function(e,n){var r,i,o,u,s=this,f=s.s;if(M=10,e=new E(e,n),n=e.s,!f||!n)return new E(NaN);if(f!=n)return e.s=-n,s.plus(e);var l=s.e/O,c=e.e/O,a=s.c,h=e.c;if(!l||!c){if(!a||!h)return a?(e.s=-n,e):new E(h?s:NaN);if(!a[0]||!h[0])return h[0]?(e.s=-n,e):new E(a[0]?s:3==k?-0:0)}if(l=t(l),c=t(c),a=a.slice(),f=l-c){for((u=0>f)?(f=-f,o=a):(c=l,o=h),o.reverse(),n=f;n--;o.push(0));o.reverse()}else for(i=(u=(f=a.length)<(n=h.length))?f:n,f=n=0;i>n;n++)if(a[n]!=h[n]){u=a[n]<h[n];break}if(u&&(o=a,a=h,h=o,e.s=-e.s),n=(i=h.length)-(r=a.length),n>0)for(;n--;a[r++]=0);for(n=b-1;i>f;){if(a[--i]<h[i]){for(r=i;r&&!a[--r];a[r]=n);--a[r],a[i]+=b}a[i]-=h[i]}for(;0==a[0];a.shift(),--c);return a[0]?I(e,a,c):(e.s=3==k?-1:1,e.c=[e.e=0],e)},T.modulo=T.mod=function(e,n){var t,r,i=this;return M=11,e=new E(e,n),!i.c||!e.s||e.c&&!e.c[0]?new E(NaN):!e.c||i.c&&!i.c[0]?new E(i):(9==W?(r=e.s,e.s=1,t=C(i,e,0,3),e.s=r,t.s*=r):t=C(i,e,0,W),i.minus(t.times(e)))},T.negated=T.neg=function(){var e=new E(this);return e.s=-e.s||null,e},T.plus=T.add=function(e,n){var r,i=this,o=i.s;if(M=12,e=new E(e,n),n=e.s,!o||!n)return new E(NaN);if(o!=n)return e.s=-n,i.minus(e);var u=i.e/O,s=e.e/O,f=i.c,l=e.c;if(!u||!s){if(!f||!l)return new E(o/0);if(!f[0]||!l[0])return l[0]?e:new E(f[0]?i:0*o)}if(u=t(u),s=t(s),f=f.slice(),o=u-s){for(o>0?(s=u,r=l):(o=-o,r=f),r.reverse();o--;r.push(0));r.reverse()}for(o=f.length,n=l.length,0>o-n&&(r=l,l=f,f=r,n=o),o=0;n;)o=(f[--n]=f[n]+l[n]+o)/b|0,f[n]%=b;return o&&(f.unshift(o),++s),I(e,f,s)},T.precision=T.sd=function(e){var n,t,r=this,i=r.c;if(null!=e&&e!==!!e&&1!==e&&0!==e&&(j&&L(13,"argument"+m,e),e!=!!e&&(e=null)),!i)return null;if(t=i.length-1,n=t*O+1,t=i[t]){for(;t%10==0;t/=10,n--);for(t=i[0];t>=10;t/=10,n++);}return e&&r.e+1>n&&(n=r.e+1),n},T.round=function(e,n){var t=new E(this);return(null==e||H(e,0,A,15))&&U(t,~~e+this.e+1,null!=n&&H(n,0,8,15,w)?0|n:k),t},T.shift=function(e){var n=this;return H(e,-y,y,16,"argument")?n.times("1e"+c(e)):new E(n.c&&n.c[0]&&(-y>e||e>y)?n.s*(0>e?0:1/0):n)},T.squareRoot=T.sqrt=function(){var e,n,i,o,u,s=this,f=s.c,l=s.s,c=s.e,a=P+4,h=new E("0.5");if(1!==l||!f||!f[0])return new E(!l||0>l&&(!f||f[0])?NaN:f?s:1/0);if(l=Math.sqrt(+s),0==l||l==1/0?(n=r(f),(n.length+c)%2==0&&(n+="0"),l=Math.sqrt(n),c=t((c+1)/2)-(0>c||c%2),l==1/0?n="1e"+c:(n=l.toExponential(),n=n.slice(0,n.indexOf("e")+1)+c),i=new E(n)):i=new E(l+""),i.c[0])for(c=i.e,l=c+a,3>l&&(l=0);;)if(u=i,i=h.times(u.plus(C(s,u,a,1))),r(u.c).slice(0,l)===(n=r(i.c)).slice(0,l)){if(i.e<c&&--l,n=n.slice(l-3,l+1),"9999"!=n&&(o||"4999"!=n)){(!+n||!+n.slice(1)&&"5"==n.charAt(0))&&(U(i,i.e+P+2,1),e=!i.times(i).eq(s));break}if(!o&&(U(u,u.e+P+2,0),u.times(u).eq(s))){i=u;break}a+=4,l+=4,o=1}return U(i,i.e+P+1,k,e)},T.times=T.mul=function(e,n){var r,i,o,u,s,f,l,c,a,h,g,p,d,m,w,v=this,N=v.c,y=(M=17,e=new E(e,n)).c;if(!(N&&y&&N[0]&&y[0]))return!v.s||!e.s||N&&!N[0]&&!y||y&&!y[0]&&!N?e.c=e.e=e.s=null:(e.s*=v.s,N&&y?(e.c=[0],e.e=0):e.c=e.e=null),e;for(i=t(v.e/O)+t(e.e/O),e.s*=v.s,l=N.length,h=y.length,h>l&&(d=N,N=y,y=d,o=l,l=h,h=o),o=l+h,d=[];o--;d.push(0));for(m=b,w=R,o=h;--o>=0;){for(r=0,g=y[o]%w,p=y[o]/w|0,s=l,u=o+s;u>o;)c=N[--s]%w,a=N[s]/w|0,f=p*c+a*g,c=g*c+f%w*w+d[u]+r,r=(c/m|0)+(f/w|0)+p*a,d[u--]=c%m;d[u]=r}return r?++i:d.shift(),I(e,d,i)},T.toDigits=function(e,n){var t=new E(this);return e=null!=e&&H(e,1,A,18,"precision")?0|e:null,n=null!=n&&H(n,0,8,18,w)?0|n:k,e?U(t,e,n):t},T.toExponential=function(e,n){return F(this,null!=e&&H(e,0,A,19)?~~e+1:null,n,19)},T.toFixed=function(e,n){return F(this,null!=e&&H(e,0,A,20)?~~e+this.e+1:null,n,20)},T.toFormat=function(e,n){var t=F(this,null!=e&&H(e,0,A,21)?~~e+this.e+1:null,n,21);if(this.c){var r,i=t.split("."),o=+X.groupSize,u=+X.secondaryGroupSize,s=X.groupSeparator,f=i[0],l=i[1],c=this.s<0,a=c?f.slice(1):f,h=a.length;if(u&&(r=o,o=u,u=r,h-=r),o>0&&h>0){for(r=h%o||o,f=a.substr(0,r);h>r;r+=o)f+=s+a.substr(r,o);u>0&&(f+=s+a.slice(r)),c&&(f="-"+f)}t=l?f+X.decimalSeparator+((u=+X.fractionGroupSize)?l.replace(new RegExp("\\d{"+u+"}\\B","g"),"$&"+X.fractionGroupSeparator):l):f}return t},T.toFraction=function(e){var n,t,i,o,u,s,f,l,c,a=j,h=this,g=h.c,p=new E(q),d=t=new E(q),m=f=new E(q);if(null!=e&&(j=!1,s=new E(e),j=a,(!(a=s.isInt())||s.lt(q))&&(j&&L(22,"max denominator "+(a?"out of range":"not an integer"),e),e=!a&&s.c&&U(s,s.e+1,1).gte(q)?s:null)),!g)return h.toString();for(c=r(g),o=p.e=c.length-h.e-1,p.c[0]=S[(u=o%O)<0?O+u:u],e=!e||s.cmp(p)>0?o>0?p:d:s,u=z,z=1/0,s=new E(c),f.c[0]=0;l=C(s,p,0,1),i=t.plus(l.times(m)),1!=i.cmp(e);)t=m,m=i,d=f.plus(l.times(i=d)),f=i,p=s.minus(l.times(i=p)),s=i;return i=C(e.minus(t),m,0,1),f=f.plus(i.times(d)),t=t.plus(i.times(m)),f.s=d.s=h.s,o*=2,n=C(d,m,o,k).minus(h).abs().cmp(C(f,t,o,k).minus(h).abs())<1?[d.toString(),m.toString()]:[f.toString(),t.toString()],z=u,n},T.toNumber=function(){return+this},T.toPower=T.pow=function(e){var n,t,r=d(0>e?-e:+e),i=this;if(!H(e,-y,y,23,"exponent")&&(!isFinite(e)||r>y&&(e/=0)||parseFloat(e)!=e&&!(e=NaN)))return new E(Math.pow(+i,e));for(n=J?p(J/O+2):0,t=new E(q);;){if(r%2){if(t=t.times(i),!t.c)break;n&&t.c.length>n&&(t.c.length=n)}if(r=d(r/2),!r)break;i=i.times(i),n&&i.c&&i.c.length>n&&(i.c.length=n)}return 0>e&&(t=q.div(t)),n?U(t,J,k):t},T.toPrecision=function(e,n){return F(this,null!=e&&H(e,1,A,24,"precision")?0|e:null,n,24)},T.toString=function(e){var n,t=this,i=t.s,o=t.e;return null===o?i?(n="Infinity",0>i&&(n="-"+n)):n="NaN":(n=r(t.c),n=null!=e&&H(e,2,64,25,"base")?D(l(n,o),0|e,10,i):B>=o||o>=$?f(n,o):l(n,o),0>i&&t.c[0]&&(n="-"+n)),n},T.truncated=T.trunc=function(){return U(new E(this),this.e+1,1)},T.valueOf=T.toJSON=function(){var e,n=this,t=n.e;return null===t?n.toString():(e=r(n.c),e=B>=t||t>=$?f(e,t):l(e,t),n.s<0?"-"+e:e)},null!=e&&E.config(e),E}function t(e){var n=0|e;return e>0||e===n?n:n-1}function r(e){for(var n,t,r=1,i=e.length,o=e[0]+"";i>r;){for(n=e[r++]+"",t=O-n.length;t--;n="0"+n);o+=n}for(i=o.length;48===o.charCodeAt(--i););return o.slice(0,i+1||1)}function i(e,n){var t,r,i=e.c,o=n.c,u=e.s,s=n.s,f=e.e,l=n.e;if(!u||!s)return null;if(t=i&&!i[0],r=o&&!o[0],t||r)return t?r?0:-s:u;if(u!=s)return u;if(t=0>u,r=f==l,!i||!o)return r?0:!i^t?1:-1;if(!r)return f>l^t?1:-1;for(s=(f=i.length)<(l=o.length)?f:l,u=0;s>u;u++)if(i[u]!=o[u])return i[u]>o[u]^t?1:-1;return f==l?0:f>l^t?1:-1}function o(e,n,t){return(e=c(e))>=n&&t>=e}function u(e){return"[object Array]"==Object.prototype.toString.call(e)}function s(e,n,t){for(var r,i,o=[0],u=0,s=e.length;s>u;){for(i=o.length;i--;o[i]*=n);for(o[r=0]+=N.indexOf(e.charAt(u++));r<o.length;r++)o[r]>t-1&&(null==o[r+1]&&(o[r+1]=0),o[r+1]+=o[r]/t|0,o[r]%=t)}return o.reverse()}function f(e,n){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(0>n?"e":"e+")+n}function l(e,n){var t,r;if(0>n){for(r="0.";++n;r+="0");e=r+e}else if(t=e.length,++n>t){for(r="0",n-=t;--n;r+="0");e+=r}else t>n&&(e=e.slice(0,n)+"."+e.slice(n));return e}function c(e){return e=parseFloat(e),0>e?p(e):d(e)}var a,h,g=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,p=Math.ceil,d=Math.floor,m=" not a boolean or binary digit",w="rounding mode",v="number type has more than 15 significant digits",N="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_",b=1e14,O=14,y=9007199254740991,S=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],R=1e7,A=1e9;if("undefined"!=typeof crypto&&(a=crypto),"function"==typeof define&&define.amd)define(function(){return n()});else if("undefined"!=typeof module&&module.exports){if(module.exports=n(),!a)try{a=require("crypto")}catch(E){}}else e||(e="undefined"!=typeof self?self:Function("return this")()),e.BigNumber=n()}(this);
    /* eslint-enable */

  
  })($nesting[0], $$($nesting, 'Numeric'), $nesting)
};

Opal.modules["bigdecimal"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var $new$2, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash, $truthy = Opal.truthy, $alias = Opal.alias, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$allocate', '$initialize', '$warn', '$BigDecimal', '$===', '$attr_reader', '$new', '$class', '$bignumber', '$nan?', '$nil?', '$raise', '$<', '$coerce', '$>', '$mode', '$>=', '$==', '$/', '$zero?', '$infinite?', '$finite?']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BigDecimal');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  self.$require("js");
  self.$require("bigdecimal/bignumber");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_BigDecimal$1;

    return (Opal.def(self, '$BigDecimal', $Kernel_BigDecimal$1 = function $$BigDecimal(initial, digits) {
      var self = this, bigdecimal = nil;

      
      
      if (digits == null) {
        digits = 0;
      };
      bigdecimal = $$($nesting, 'BigDecimal').$allocate();
      bigdecimal.$initialize(initial, digits);
      return bigdecimal;
    }, $Kernel_BigDecimal$1.$$arity = -2), nil) && 'BigDecimal'
  })($nesting[0], $nesting);
  Opal.defs($$($nesting, 'BigDecimal'), '$new', $new$2 = function($a, $b) {
    var $post_args, $kwargs, args, kwargs, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    $kwargs = Opal.extract_kwargs($post_args);
    
    if ($kwargs == null) {
      $kwargs = $hash2([], {});
    } else if (!$kwargs.$$is_hash) {
      throw Opal.ArgumentError.$new('expected kwargs');
    };
    
    args = $post_args;;
    
    kwargs = Opal.kwrestargs($kwargs, {});;
    self.$warn("BigDecimal.new is deprecated; use BigDecimal() method instead.", $hash2(["uplevel"], {"uplevel": 1}));
    return $send(self, 'BigDecimal', Opal.to_a(args).concat([Opal.to_hash(kwargs)]));
  }, $new$2.$$arity = -1);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BigDecimal');

    var $nesting = [self].concat($parent_nesting), $BigDecimal_limit$3, $BigDecimal_mode$4, $BigDecimal_initialize$5, $BigDecimal_$eq_eq$6, $BigDecimal_$lt_eq_gt$7, $BigDecimal_$lt$8, $BigDecimal_$lt_eq$9, $BigDecimal_$gt$10, $BigDecimal_$gt_eq$11, $BigDecimal_abs$12, $BigDecimal_add$13, $BigDecimal_ceil$14, $BigDecimal_coerce$15, $BigDecimal_div$16, $BigDecimal_finite$ques$17, $BigDecimal_infinite$ques$18, $BigDecimal_minus$19, $BigDecimal_mult$20, $BigDecimal_nan$ques$21, $BigDecimal_quo$22, $BigDecimal_sign$23, $BigDecimal_sub$24, $BigDecimal_to_f$25, $BigDecimal_to_s$26, $BigDecimal_zero$ques$27;

    
    Opal.const_set($nesting[0], 'ROUND_MODE', 256);
    Opal.const_set($nesting[0], 'ROUND_UP', 0);
    Opal.const_set($nesting[0], 'ROUND_DOWN', 1);
    Opal.const_set($nesting[0], 'ROUND_CEILING', 2);
    Opal.const_set($nesting[0], 'ROUND_FLOOR', 3);
    Opal.const_set($nesting[0], 'ROUND_HALF_UP', 4);
    Opal.const_set($nesting[0], 'ROUND_HALF_DOWN', 5);
    Opal.const_set($nesting[0], 'ROUND_HALF_EVEN', 6);
    Opal.const_set($nesting[0], 'SIGN_NaN', 0);
    Opal.const_set($nesting[0], 'SIGN_POSITIVE_ZERO', 1);
    Opal.const_set($nesting[0], 'SIGN_NEGATIVE_ZERO', -1);
    Opal.const_set($nesting[0], 'SIGN_POSITIVE_FINITE', 2);
    Opal.const_set($nesting[0], 'SIGN_NEGATIVE_FINITE', -2);
    Opal.const_set($nesting[0], 'SIGN_POSITIVE_INFINITE', 3);
    Opal.const_set($nesting[0], 'SIGN_NEGATIVE_INFINITE', -3);
    Opal.defs(self, '$limit', $BigDecimal_limit$3 = function $$limit(digits) {
      var self = this;
      if (self.digits == null) self.digits = nil;

      
      
      if (digits == null) {
        digits = nil;
      };
      if ($truthy(digits)) {
        self.digits = digits};
      return self.digits;
    }, $BigDecimal_limit$3.$$arity = -1);
    Opal.defs(self, '$mode', $BigDecimal_mode$4 = function $$mode(mode, value) {
      var self = this, $case = nil, $ret_or_1 = nil;
      if (self.round_mode == null) self.round_mode = nil;

      
      
      if (value == null) {
        value = nil;
      };
      return (function() {$case = mode;
      if ($$($nesting, 'ROUND_MODE')['$===']($case)) {
      if ($truthy(value)) {
        self.round_mode = value};
      if ($truthy(($ret_or_1 = self.round_mode))) {
        return $ret_or_1
      } else {
        return $$($nesting, 'ROUND_HALF_UP')
      };}
      else { return nil }})();
    }, $BigDecimal_mode$4.$$arity = -2);
    self.$attr_reader("bignumber");
    
    Opal.def(self, '$initialize', $BigDecimal_initialize$5 = function $$initialize(initial, digits) {
      var self = this;

      
      
      if (digits == null) {
        digits = 0;
      };
      return (self.bignumber = $$($nesting, 'JS').$new($$($nesting, 'BigNumber'), initial));
    }, $BigDecimal_initialize$5.$$arity = -2);
    
    Opal.def(self, '$==', $BigDecimal_$eq_eq$6 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if (self.$class()['$===']($case)) {return self.$bignumber().equals(other.$bignumber())}
      else if ($$($nesting, 'Number')['$===']($case)) {return self.$bignumber().equals(other)}
      else {return false}})()
    }, $BigDecimal_$eq_eq$6.$$arity = 1);
    $alias(self, "===", "==");
    
    Opal.def(self, '$<=>', $BigDecimal_$lt_eq_gt$7 = function(other) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = other;
      if (self.$class()['$===']($case)) {return self.$bignumber().comparedTo(other.$bignumber())}
      else if ($$($nesting, 'Number')['$===']($case)) {return self.$bignumber().comparedTo(other)}
      else { return nil }})();
      return result === null ? nil : result;
    }, $BigDecimal_$lt_eq_gt$7.$$arity = 1);
    
    Opal.def(self, '$<', $BigDecimal_$lt$8 = function(other) {
      var $iter = $BigDecimal_$lt$8.$$p, $yield = $iter || nil, self = this, $ret_or_2 = nil, $ret_or_3 = nil;

      if ($iter) $BigDecimal_$lt$8.$$p = null;
      
      if ($truthy((function() {if ($truthy(($ret_or_2 = self['$nan?']()))) {
        return $ret_or_2
      } else if ($truthy(($ret_or_3 = other))) {
        return other['$nan?']()
      } else {
        return $ret_or_3
      }; return nil; })())) {
        return false};
      return $send2(self, $find_super(self, '<', $BigDecimal_$lt$8, false, true), '<', [other], $iter);
    }, $BigDecimal_$lt$8.$$arity = 1);
    
    Opal.def(self, '$<=', $BigDecimal_$lt_eq$9 = function(other) {
      var $iter = $BigDecimal_$lt_eq$9.$$p, $yield = $iter || nil, self = this, $ret_or_4 = nil, $ret_or_5 = nil;

      if ($iter) $BigDecimal_$lt_eq$9.$$p = null;
      
      if ($truthy((function() {if ($truthy(($ret_or_4 = self['$nan?']()))) {
        return $ret_or_4
      } else if ($truthy(($ret_or_5 = other))) {
        return other['$nan?']()
      } else {
        return $ret_or_5
      }; return nil; })())) {
        return false};
      return $send2(self, $find_super(self, '<=', $BigDecimal_$lt_eq$9, false, true), '<=', [other], $iter);
    }, $BigDecimal_$lt_eq$9.$$arity = 1);
    
    Opal.def(self, '$>', $BigDecimal_$gt$10 = function(other) {
      var $iter = $BigDecimal_$gt$10.$$p, $yield = $iter || nil, self = this, $ret_or_6 = nil, $ret_or_7 = nil;

      if ($iter) $BigDecimal_$gt$10.$$p = null;
      
      if ($truthy((function() {if ($truthy(($ret_or_6 = self['$nan?']()))) {
        return $ret_or_6
      } else if ($truthy(($ret_or_7 = other))) {
        return other['$nan?']()
      } else {
        return $ret_or_7
      }; return nil; })())) {
        return false};
      return $send2(self, $find_super(self, '>', $BigDecimal_$gt$10, false, true), '>', [other], $iter);
    }, $BigDecimal_$gt$10.$$arity = 1);
    
    Opal.def(self, '$>=', $BigDecimal_$gt_eq$11 = function(other) {
      var $iter = $BigDecimal_$gt_eq$11.$$p, $yield = $iter || nil, self = this, $ret_or_8 = nil, $ret_or_9 = nil;

      if ($iter) $BigDecimal_$gt_eq$11.$$p = null;
      
      if ($truthy((function() {if ($truthy(($ret_or_8 = self['$nan?']()))) {
        return $ret_or_8
      } else if ($truthy(($ret_or_9 = other))) {
        return other['$nan?']()
      } else {
        return $ret_or_9
      }; return nil; })())) {
        return false};
      return $send2(self, $find_super(self, '>=', $BigDecimal_$gt_eq$11, false, true), '>=', [other], $iter);
    }, $BigDecimal_$gt_eq$11.$$arity = 1);
    
    Opal.def(self, '$abs', $BigDecimal_abs$12 = function $$abs() {
      var self = this;

      return self.$class().$new(self.$bignumber().abs())
    }, $BigDecimal_abs$12.$$arity = 0);
    
    Opal.def(self, '$add', $BigDecimal_add$13 = function $$add(other, digits) {
      var $a, $b, self = this, _ = nil, result = nil;

      
      
      if (digits == null) {
        digits = 0;
      };
      if ($truthy(digits['$nil?']())) {
        self.$raise($$($nesting, 'TypeError'), "wrong argument type nil (expected Fixnum)")};
      if ($truthy($rb_lt(digits, 0))) {
        self.$raise($$($nesting, 'ArgumentError'), "argument must be positive")};
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      result = self.$bignumber().plus(other.$bignumber());
      if ($truthy($rb_gt(digits, 0))) {
        result = result.toDigits(digits, self.$class().$mode($$($nesting, 'ROUND_MODE')))};
      return self.$class().$new(result);
    }, $BigDecimal_add$13.$$arity = -2);
    $alias(self, "+", "add");
    
    Opal.def(self, '$ceil', $BigDecimal_ceil$14 = function $$ceil(n) {
      var self = this;

      
      
      if (n == null) {
        n = nil;
      };
      if ($truthy(self.$bignumber().isFinite())) {
      } else {
        self.$raise($$($nesting, 'FloatDomainError'), "Computation results to 'Infinity'")
      };
      if ($truthy(n['$nil?']())) {
        return self.$bignumber().round(0, $$($nesting, 'ROUND_CEILING')).toNumber()
      } else if ($truthy($rb_ge(n, 0))) {
        return self.$class().$new(self.$bignumber().round(n, $$($nesting, 'ROUND_CEILING')))
      } else {
        return self.$class().$new(self.$bignumber().round(0, $$($nesting, 'ROUND_CEILING')))
      };
    }, $BigDecimal_ceil$14.$$arity = -1);
    
    Opal.def(self, '$coerce', $BigDecimal_coerce$15 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if (self.$class()['$===']($case)) {return [other, self]}
      else if ($$($nesting, 'Number')['$===']($case)) {return [self.$class().$new(other), self]}
      else {return self.$raise($$($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into " + (self.$class()))}})()
    }, $BigDecimal_coerce$15.$$arity = 1);
    
    Opal.def(self, '$div', $BigDecimal_div$16 = function $$div(other, digits) {
      var $a, $b, self = this, _ = nil, $ret_or_10 = nil;

      
      
      if (digits == null) {
        digits = nil;
      };
      if (digits['$=='](0)) {
        return $rb_divide(self, other)};
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy((function() {if ($truthy(($ret_or_10 = self['$nan?']()))) {
        return $ret_or_10
      } else {
        return other['$nan?']()
      }; return nil; })())) {
        self.$raise($$($nesting, 'FloatDomainError'), "Computation results to 'NaN'(Not a Number)")};
      if ($truthy(digits['$nil?']())) {
        
        if ($truthy(other['$zero?']())) {
          self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")};
        if ($truthy(self['$infinite?']())) {
          self.$raise($$($nesting, 'FloatDomainError'), "Computation results to 'Infinity'")};
        return self.$class().$new(self.$bignumber().dividedToIntegerBy(other.$bignumber()));};
      return self.$class().$new(self.$bignumber().dividedBy(other.$bignumber()).round(digits, self.$class().$mode($$($nesting, 'ROUND_MODE'))));
    }, $BigDecimal_div$16.$$arity = -2);
    
    Opal.def(self, '$finite?', $BigDecimal_finite$ques$17 = function() {
      var self = this;

      return self.$bignumber().isFinite()
    }, $BigDecimal_finite$ques$17.$$arity = 0);
    
    Opal.def(self, '$infinite?', $BigDecimal_infinite$ques$18 = function() {
      var self = this, $ret_or_11 = nil;

      
      if ($truthy((function() {if ($truthy(($ret_or_11 = self['$finite?']()))) {
        return $ret_or_11
      } else {
        return self['$nan?']()
      }; return nil; })())) {
        return nil};
      if ($truthy(self.$bignumber().isNegative())) {
        return -1
      } else {
        return 1
      };
    }, $BigDecimal_infinite$ques$18.$$arity = 0);
    
    Opal.def(self, '$minus', $BigDecimal_minus$19 = function $$minus(other) {
      var $a, $b, self = this, _ = nil;

      
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      return self.$class().$new(self.$bignumber().minus(other.$bignumber()));
    }, $BigDecimal_minus$19.$$arity = 1);
    $alias(self, "-", "minus");
    
    Opal.def(self, '$mult', $BigDecimal_mult$20 = function $$mult(other, digits) {
      var $a, $b, self = this, _ = nil;

      
      
      if (digits == null) {
        digits = nil;
      };
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(digits['$nil?']())) {
        return self.$class().$new(self.$bignumber().times(other.$bignumber()))};
      return self.$class().$new(self.$bignumber().times(other.$bignumber()).round(digits, self.$class().$mode($$($nesting, 'ROUND_MODE'))));
    }, $BigDecimal_mult$20.$$arity = -2);
    $alias(self, "*", "mult");
    
    Opal.def(self, '$nan?', $BigDecimal_nan$ques$21 = function() {
      var self = this;

      return self.$bignumber().isNaN()
    }, $BigDecimal_nan$ques$21.$$arity = 0);
    
    Opal.def(self, '$quo', $BigDecimal_quo$22 = function $$quo(other) {
      var $a, $b, self = this, _ = nil;

      
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      return self.$class().$new(self.$bignumber().dividedBy(other.$bignumber()));
    }, $BigDecimal_quo$22.$$arity = 1);
    $alias(self, "/", "quo");
    
    Opal.def(self, '$sign', $BigDecimal_sign$23 = function $$sign() {
      var self = this;

      
      if ($truthy(self.$bignumber().isNaN())) {
        return $$($nesting, 'SIGN_NaN')};
      if ($truthy(self.$bignumber().isZero())) {
        return (function() {if ($truthy(self.$bignumber().isNegative())) {
          return $$($nesting, 'SIGN_NEGATIVE_ZERO')
        } else {
          return $$($nesting, 'SIGN_POSITIVE_ZERO')
        }; return nil; })()
      } else {
        return nil
      };
    }, $BigDecimal_sign$23.$$arity = 0);
    
    Opal.def(self, '$sub', $BigDecimal_sub$24 = function $$sub(other, precision) {
      var $a, $b, self = this, _ = nil;

      
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      return self.$class().$new(self.$bignumber().minus(other.$bignumber()));
    }, $BigDecimal_sub$24.$$arity = 2);
    
    Opal.def(self, '$to_f', $BigDecimal_to_f$25 = function $$to_f() {
      var self = this;

      return self.$bignumber().toNumber()
    }, $BigDecimal_to_f$25.$$arity = 0);
    
    Opal.def(self, '$to_s', $BigDecimal_to_s$26 = function $$to_s(s) {
      var self = this;

      
      
      if (s == null) {
        s = "";
      };
      return self.$bignumber().toString();
    }, $BigDecimal_to_s$26.$$arity = -1);
    $alias(self, "inspect", "to_s");
    return (Opal.def(self, '$zero?', $BigDecimal_zero$ques$27 = function() {
      var self = this;

      return self.$bignumber().isZero()
    }, $BigDecimal_zero$ques$27.$$arity = 0), nil) && 'zero?';
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
};

Opal.modules["mutations/version"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return Opal.const_set($nesting[0], 'VERSION', "0.9.1")
  })($nesting[0], $nesting)
};

Opal.modules["mutations/exception"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$errors=', '$-', '$join', '$message_list', '$errors']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ValidationException');

      var $nesting = [self].concat($parent_nesting), $ValidationException_initialize$1, $ValidationException_to_s$2;

      
      self.$attr_accessor("errors");
      
      Opal.def(self, '$initialize', $ValidationException_initialize$1 = function $$initialize(errors) {
        var self = this, $writer = nil;

        
        $writer = [errors];
        $send(self, 'errors=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $ValidationException_initialize$1.$$arity = 1);
      return (Opal.def(self, '$to_s', $ValidationException_to_s$2 = function $$to_s() {
        var self = this;

        return "" + (self.$errors().$message_list().$join("; "))
      }, $ValidationException_to_s$2.$$arity = 0), nil) && 'to_s';
    })($nesting[0], $$$('::', 'StandardError'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/errors"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$tap', '$new', '$merge!', '$[]', '$titleize', '$downcase', '$to_s', '$==', '$end_with?', '$message', '$error_message_creator', '$Array', '$each', '$symbolic', '$[]=', '$-', '$concat', '$message_list', '$map', '$flatten', '$compact']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'DefaultErrorMessageCreator');

      var $nesting = [self].concat($parent_nesting), $DefaultErrorMessageCreator$1, $DefaultErrorMessageCreator_message$2, $DefaultErrorMessageCreator_titleize$3;

      
      Opal.const_set($nesting[0], 'MESSAGES', $send($$($nesting, 'Hash').$new("is invalid"), 'tap', [], ($DefaultErrorMessageCreator$1 = function(h){var self = $DefaultErrorMessageCreator$1.$$s == null ? this : $DefaultErrorMessageCreator$1.$$s;

        
        
        if (h == null) {
          h = nil;
        };
        return h['$merge!']($hash2(["nils", "required", "string", "integer", "boolean", "hash", "array", "model", "date", "before", "after", "empty", "max_length", "min_length", "matches", "in", "class", "min", "max", "new_records"], {"nils": "can't be nil", "required": "is required", "string": "isn't a string", "integer": "isn't an integer", "boolean": "isn't a boolean", "hash": "isn't a hash", "array": "isn't an array", "model": "isn't the right class", "date": "date doesn't exist", "before": "isn't before given date", "after": "isn't after given date", "empty": "can't be blank", "max_length": "is too long", "min_length": "is too short", "matches": "isn't in the right format", "in": "isn't an option", "class": "isn't the right class", "min": "is too small", "max": "is too big", "new_records": "isn't a saved model"}));}, $DefaultErrorMessageCreator$1.$$s = self, $DefaultErrorMessageCreator$1.$$arity = 1, $DefaultErrorMessageCreator$1)));
      
      Opal.def(self, '$message', $DefaultErrorMessageCreator_message$2 = function $$message(key, error_symbol, options) {
        var self = this, $ret_or_1 = nil;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        if ($truthy(options['$[]']("index"))) {
          return "" + (self.$titleize((function() {if ($truthy(($ret_or_1 = key))) {
            return $ret_or_1
          } else {
            return "array"
          }; return nil; })())) + "[" + (options['$[]']("index")) + "] " + ($$($nesting, 'MESSAGES')['$[]'](error_symbol))
        } else {
          return "" + (self.$titleize(key)) + " " + ($$($nesting, 'MESSAGES')['$[]'](error_symbol))
        };
      }, $DefaultErrorMessageCreator_message$2.$$arity = -3);
      return (Opal.def(self, '$titleize', $DefaultErrorMessageCreator_titleize$3 = function $$titleize(key) {
        var self = this;

        
        key = key.$to_s().$downcase();
        if (key['$==']("id")) {
          return "ID"
        } else if ($truthy(key['$end_with?']("_id"))) {
          return "" + (key.$titleize()) + " ID"
        } else {
          return key.$titleize()
        };
      }, $DefaultErrorMessageCreator_titleize$3.$$arity = 1), nil) && 'titleize';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ErrorAtom');

      var $nesting = [self].concat($parent_nesting), $ErrorAtom_initialize$4, $ErrorAtom_symbolic$5, $ErrorAtom_message$6, $ErrorAtom_message_list$7;

      self.$$prototype.symbol = self.$$prototype.message = self.$$prototype.key = self.$$prototype.index = nil;
      
      
      Opal.def(self, '$initialize', $ErrorAtom_initialize$4 = function $$initialize(key, error_symbol, options) {
        var self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        self.key = key;
        self.symbol = error_symbol;
        self.message = options['$[]']("message");
        return (self.index = options['$[]']("index"));
      }, $ErrorAtom_initialize$4.$$arity = -3);
      
      Opal.def(self, '$symbolic', $ErrorAtom_symbolic$5 = function $$symbolic() {
        var self = this;

        return self.symbol
      }, $ErrorAtom_symbolic$5.$$arity = 0);
      
      Opal.def(self, '$message', $ErrorAtom_message$6 = function $$message() {
        var self = this, $ret_or_2 = nil;

        return (self.message = (function() {if ($truthy(($ret_or_2 = self.message))) {
          return $ret_or_2
        } else {
          return $$($nesting, 'Mutations').$error_message_creator().$message(self.key, self.symbol, $hash2(["index"], {"index": self.index}))
        }; return nil; })())
      }, $ErrorAtom_message$6.$$arity = 0);
      return (Opal.def(self, '$message_list', $ErrorAtom_message_list$7 = function $$message_list() {
        var self = this;

        return self.$Array(self.$message())
      }, $ErrorAtom_message_list$7.$$arity = 0), nil) && 'message_list';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ErrorHash');

      var $nesting = [self].concat($parent_nesting), $ErrorHash_symbolic$8, $ErrorHash_message$11, $ErrorHash_message_list$14;

      
      
      Opal.def(self, '$symbolic', $ErrorHash_symbolic$8 = function $$symbolic() {
        var $$9, self = this;

        return $send($$($nesting, 'HashWithIndifferentAccess').$new(), 'tap', [], ($$9 = function(hash){var self = $$9.$$s == null ? this : $$9.$$s, $$10;

          
          
          if (hash == null) {
            hash = nil;
          };
          return $send(self, 'each', [], ($$10 = function(k, v){var self = $$10.$$s == null ? this : $$10.$$s, $writer = nil;

            
            
            if (k == null) {
              k = nil;
            };
            
            if (v == null) {
              v = nil;
            };
            $writer = [k, v.$symbolic()];
            $send(hash, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$10.$$s = self, $$10.$$arity = 2, $$10));}, $$9.$$s = self, $$9.$$arity = 1, $$9))
      }, $ErrorHash_symbolic$8.$$arity = 0);
      
      Opal.def(self, '$message', $ErrorHash_message$11 = function $$message() {
        var $$12, self = this;

        return $send($$($nesting, 'HashWithIndifferentAccess').$new(), 'tap', [], ($$12 = function(hash){var self = $$12.$$s == null ? this : $$12.$$s, $$13;

          
          
          if (hash == null) {
            hash = nil;
          };
          return $send(self, 'each', [], ($$13 = function(k, v){var self = $$13.$$s == null ? this : $$13.$$s, $writer = nil;

            
            
            if (k == null) {
              k = nil;
            };
            
            if (v == null) {
              v = nil;
            };
            $writer = [k, v.$message()];
            $send(hash, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$13.$$s = self, $$13.$$arity = 2, $$13));}, $$12.$$s = self, $$12.$$arity = 1, $$12))
      }, $ErrorHash_message$11.$$arity = 0);
      return (Opal.def(self, '$message_list', $ErrorHash_message_list$14 = function $$message_list() {
        var $$15, self = this, list = nil;

        
        list = [];
        $send(self, 'each', [], ($$15 = function(k, v){var self = $$15.$$s == null ? this : $$15.$$s;

          
          
          if (k == null) {
            k = nil;
          };
          
          if (v == null) {
            v = nil;
          };
          return list.$concat(v.$message_list());}, $$15.$$s = self, $$15.$$arity = 2, $$15));
        return list;
      }, $ErrorHash_message_list$14.$$arity = 0), nil) && 'message_list';
    })($nesting[0], $$($nesting, 'Hash'), $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ErrorArray');

      var $nesting = [self].concat($parent_nesting), $ErrorArray_symbolic$16, $ErrorArray_message$18, $ErrorArray_message_list$20;

      
      
      Opal.def(self, '$symbolic', $ErrorArray_symbolic$16 = function $$symbolic() {
        var $$17, self = this;

        return $send(self, 'map', [], ($$17 = function(e){var self = $$17.$$s == null ? this : $$17.$$s, $ret_or_3 = nil;

          
          
          if (e == null) {
            e = nil;
          };
          if ($truthy(($ret_or_3 = e))) {
            return e.$symbolic()
          } else {
            return $ret_or_3
          };}, $$17.$$s = self, $$17.$$arity = 1, $$17))
      }, $ErrorArray_symbolic$16.$$arity = 0);
      
      Opal.def(self, '$message', $ErrorArray_message$18 = function $$message() {
        var $$19, self = this;

        return $send(self, 'map', [], ($$19 = function(e){var self = $$19.$$s == null ? this : $$19.$$s, $ret_or_4 = nil;

          
          
          if (e == null) {
            e = nil;
          };
          if ($truthy(($ret_or_4 = e))) {
            return e.$message()
          } else {
            return $ret_or_4
          };}, $$19.$$s = self, $$19.$$arity = 1, $$19))
      }, $ErrorArray_message$18.$$arity = 0);
      return (Opal.def(self, '$message_list', $ErrorArray_message_list$20 = function $$message_list() {
        var $$21, self = this;

        return $send(self.$compact(), 'map', [], ($$21 = function(e){var self = $$21.$$s == null ? this : $$21.$$s;

          
          
          if (e == null) {
            e = nil;
          };
          return e.$message_list();}, $$21.$$s = self, $$21.$$arity = 1, $$21)).$flatten()
      }, $ErrorArray_message_list$20.$$arity = 0), nil) && 'message_list';
    })($nesting[0], $$($nesting, 'Array'), $nesting);
  })($nesting[0], $nesting)
};

Opal.modules["mutations/input_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$merge', '$default_options', '$class', '$options=', '$-', '$has_key?', '$options', '$[]', '$!']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'InputFilter');

      var $nesting = [self].concat($parent_nesting), $InputFilter_default_options$1, $InputFilter_initialize$2, $InputFilter_filter$3, $InputFilter_has_default$ques$4, $InputFilter_default$5, $InputFilter_discard_nils$ques$6, $InputFilter_discard_empty$ques$7, $InputFilter_discard_invalid$ques$8;

      
      Opal.defs(self, '$default_options', $InputFilter_default_options$1 = function $$default_options() {
        var self = this, $ret_or_1 = nil;
        if (self.default_options == null) self.default_options = nil;

        return (self.default_options = (function() {if ($truthy(($ret_or_1 = self.default_options))) {
          return $ret_or_1
        } else {
          return $hash2([], {})
        }; return nil; })())
      }, $InputFilter_default_options$1.$$arity = 0);
      self.$attr_accessor("options");
      
      Opal.def(self, '$initialize', $InputFilter_initialize$2 = function $$initialize(opts) {
        var self = this, $writer = nil, $ret_or_2 = nil;

        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        $writer = [(function() {if ($truthy(($ret_or_2 = self.$class().$default_options()))) {
          return $ret_or_2
        } else {
          return $hash2([], {})
        }; return nil; })().$merge(opts)];
        $send(self, 'options=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $InputFilter_initialize$2.$$arity = -1);
      
      Opal.def(self, '$filter', $InputFilter_filter$3 = function $$filter(data) {
        var self = this;

        return [data, nil]
      }, $InputFilter_filter$3.$$arity = 1);
      
      Opal.def(self, '$has_default?', $InputFilter_has_default$ques$4 = function() {
        var self = this;

        return self.$options()['$has_key?']("default")
      }, $InputFilter_has_default$ques$4.$$arity = 0);
      
      Opal.def(self, '$default', $InputFilter_default$5 = function() {
        var self = this;

        return self.$options()['$[]']("default")
      }, $InputFilter_default$5.$$arity = 0);
      
      Opal.def(self, '$discard_nils?', $InputFilter_discard_nils$ques$6 = function() {
        var self = this;

        return self.$options()['$[]']("nils")['$!']()
      }, $InputFilter_discard_nils$ques$6.$$arity = 0);
      
      Opal.def(self, '$discard_empty?', $InputFilter_discard_empty$ques$7 = function() {
        var self = this;

        return self.$options()['$[]']("discard_empty")
      }, $InputFilter_discard_empty$ques$7.$$arity = 0);
      return (Opal.def(self, '$discard_invalid?', $InputFilter_discard_invalid$ques$8 = function() {
        var self = this;

        return self.$options()['$[]']("discard_invalid")
      }, $InputFilter_discard_invalid$ques$8.$$arity = 0), nil) && 'discard_invalid?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/hash_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy;

  Opal.add_stubs(['$define_method', '$to_sym', '$new', '$to_proc', '$[]=', '$-', '$attr_accessor', '$instance_eval', '$each_pair', '$optional_inputs', '$required_inputs', '$keys', '$nil?', '$[]', '$options', '$respond_to?', '$is_a?', '$with_indifferent_access', '$to_hash', '$each', '$==', '$has_key?', '$filter', '$!', '$discard_invalid?', '$delete', '$discard_empty?', '$discard_nils?', '$has_default?', '$default', '$any?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HashFilter');

      var $nesting = [self].concat($parent_nesting), $HashFilter_register_additional_filter$1, $HashFilter_initialize$3, $HashFilter_dup$4, $HashFilter_required$7, $HashFilter_optional$8, $HashFilter_required_keys$9, $HashFilter_optional_keys$10, $HashFilter_hash$11, $HashFilter_model$12, $HashFilter_array$13, $HashFilter_filter$14;

      self.$$prototype.required_inputs = self.$$prototype.optional_inputs = self.$$prototype.current_inputs = nil;
      
      Opal.defs(self, '$register_additional_filter', $HashFilter_register_additional_filter$1 = function $$register_additional_filter(type_class, type_name) {
        var $$2, $iter = $HashFilter_register_additional_filter$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $HashFilter_register_additional_filter$1.$$p = null;
        return $send(self, 'define_method', [type_name], ($$2 = function(name, options){var self = $$2.$$s == null ? this : $$2.$$s, $iter = $$2.$$p, block = $iter || nil, $writer = nil;
          if (self.current_inputs == null) self.current_inputs = nil;

          
          
          if ($iter) $$2.$$p = null;;
          
          if (name == null) {
            name = nil;
          };
          
          if (options == null) {
            options = $hash2([], {});
          };
          $writer = [name.$to_sym(), $send(type_class, 'new', [options], block.$to_proc())];
          $send(self.current_inputs, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = -2, $$2))
      }, $HashFilter_register_additional_filter$1.$$arity = 2);
      self.default_options = $hash2(["nils"], {"nils": false});
      self.$attr_accessor("optional_inputs");
      self.$attr_accessor("required_inputs");
      
      Opal.def(self, '$initialize', $HashFilter_initialize$3 = function $$initialize(opts) {
        var $iter = $HashFilter_initialize$3.$$p, block = $iter || nil, self = this;

        if ($iter) $HashFilter_initialize$3.$$p = null;
        
        
        if ($iter) $HashFilter_initialize$3.$$p = null;;
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        $send2(self, $find_super(self, 'initialize', $HashFilter_initialize$3, false, true), 'initialize', [opts], null);
        self.optional_inputs = $hash2([], {});
        self.required_inputs = $hash2([], {});
        self.current_inputs = self.required_inputs;
        if ((block !== nil)) {
          return $send(self, 'instance_eval', [], block.$to_proc())
        } else {
          return nil
        };
      }, $HashFilter_initialize$3.$$arity = -1);
      
      Opal.def(self, '$dup', $HashFilter_dup$4 = function $$dup() {
        var $$5, $$6, self = this, dupped = nil;

        
        dupped = $$($nesting, 'HashFilter').$new();
        $send(self.optional_inputs, 'each_pair', [], ($$5 = function(k, v){var self = $$5.$$s == null ? this : $$5.$$s, $writer = nil;

          
          
          if (k == null) {
            k = nil;
          };
          
          if (v == null) {
            v = nil;
          };
          $writer = [k, v];
          $send(dupped.$optional_inputs(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$5.$$s = self, $$5.$$arity = 2, $$5));
        $send(self.required_inputs, 'each_pair', [], ($$6 = function(k, v){var self = $$6.$$s == null ? this : $$6.$$s, $writer = nil;

          
          
          if (k == null) {
            k = nil;
          };
          
          if (v == null) {
            v = nil;
          };
          $writer = [k, v];
          $send(dupped.$required_inputs(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$6.$$s = self, $$6.$$arity = 2, $$6));
        return dupped;
      }, $HashFilter_dup$4.$$arity = 0);
      
      Opal.def(self, '$required', $HashFilter_required$7 = function $$required() {
        var $iter = $HashFilter_required$7.$$p, block = $iter || nil, self = this;

        if ($iter) $HashFilter_required$7.$$p = null;
        
        
        if ($iter) $HashFilter_required$7.$$p = null;;
        self.current_inputs = self.required_inputs;
        return $send(self, 'instance_eval', [], block.$to_proc());
      }, $HashFilter_required$7.$$arity = 0);
      
      Opal.def(self, '$optional', $HashFilter_optional$8 = function $$optional() {
        var $iter = $HashFilter_optional$8.$$p, block = $iter || nil, self = this;

        if ($iter) $HashFilter_optional$8.$$p = null;
        
        
        if ($iter) $HashFilter_optional$8.$$p = null;;
        self.current_inputs = self.optional_inputs;
        return $send(self, 'instance_eval', [], block.$to_proc());
      }, $HashFilter_optional$8.$$arity = 0);
      
      Opal.def(self, '$required_keys', $HashFilter_required_keys$9 = function $$required_keys() {
        var self = this;

        return self.required_inputs.$keys()
      }, $HashFilter_required_keys$9.$$arity = 0);
      
      Opal.def(self, '$optional_keys', $HashFilter_optional_keys$10 = function $$optional_keys() {
        var self = this;

        return self.optional_inputs.$keys()
      }, $HashFilter_optional_keys$10.$$arity = 0);
      
      Opal.def(self, '$hash', $HashFilter_hash$11 = function $$hash(name, options) {
        var $iter = $HashFilter_hash$11.$$p, block = $iter || nil, self = this, $writer = nil;

        if ($iter) $HashFilter_hash$11.$$p = null;
        
        
        if ($iter) $HashFilter_hash$11.$$p = null;;
        
        if (options == null) {
          options = $hash2([], {});
        };
        $writer = [name.$to_sym(), $send($$($nesting, 'HashFilter'), 'new', [options], block.$to_proc())];
        $send(self.current_inputs, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $HashFilter_hash$11.$$arity = -2);
      
      Opal.def(self, '$model', $HashFilter_model$12 = function $$model(name, options) {
        var self = this, $writer = nil;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        $writer = [name.$to_sym(), $$($nesting, 'ModelFilter').$new(name.$to_sym(), options)];
        $send(self.current_inputs, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $HashFilter_model$12.$$arity = -2);
      
      Opal.def(self, '$array', $HashFilter_array$13 = function $$array(name, options) {
        var $iter = $HashFilter_array$13.$$p, block = $iter || nil, self = this, name_sym = nil, $writer = nil;

        if ($iter) $HashFilter_array$13.$$p = null;
        
        
        if ($iter) $HashFilter_array$13.$$p = null;;
        
        if (options == null) {
          options = $hash2([], {});
        };
        name_sym = name.$to_sym();
        
        $writer = [name.$to_sym(), $send($$($nesting, 'ArrayFilter'), 'new', [name_sym, options], block.$to_proc())];
        $send(self.current_inputs, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $HashFilter_array$13.$$arity = -2);
      return (Opal.def(self, '$filter', $HashFilter_filter$14 = function $$filter(data) {
        var $$15, $$17, self = this, errors = nil, filtered_data = nil, wildcard_filterer = nil, filtered_keys = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ($truthy(data['$respond_to?']("to_hash"))) {
        } else {
          return [data, "hash"]
        };
        if ($truthy(data['$is_a?']($$($nesting, 'HashWithIndifferentAccess')))) {
        } else {
          data = data.$to_hash().$with_indifferent_access()
        };
        errors = $$($nesting, 'ErrorHash').$new();
        filtered_data = $$($nesting, 'HashWithIndifferentAccess').$new();
        wildcard_filterer = nil;
        $send([[self.required_inputs, true], [self.optional_inputs, false]], 'each', [], ($$15 = function($mlhs_tmp1){var self = $$15.$$s == null ? this : $$15.$$s, $a, $b, $$16, inputs = nil, is_required = nil;

          
          
          if ($mlhs_tmp1 == null) {
            $mlhs_tmp1 = nil;
          };
          $b = $mlhs_tmp1, $a = Opal.to_ary($b), (inputs = ($a[0] == null ? nil : $a[0])), (is_required = ($a[1] == null ? nil : $a[1])), $b;
          return $send(inputs, 'each_pair', [], ($$16 = function(key, filterer){var self = $$16.$$s == null ? this : $$16.$$s, $c, $d, data_element = nil, sub_data = nil, sub_error = nil, $writer = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil, error_key = nil, $ret_or_6 = nil, $ret_or_7 = nil;

            
            
            if (key == null) {
              key = nil;
            };
            
            if (filterer == null) {
              filterer = nil;
            };
            if (key['$==']("*")) {
              
              wildcard_filterer = filterer;
              return nil;;};
            data_element = data['$[]'](key);
            if ($truthy(data['$has_key?'](key))) {
              
              $d = filterer.$filter(data_element), $c = Opal.to_ary($d), (sub_data = ($c[0] == null ? nil : $c[0])), (sub_error = ($c[1] == null ? nil : $c[1])), $d;
              if ($truthy(sub_error['$nil?']())) {
                
                $writer = [key, sub_data];
                $send(filtered_data, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy((function() {if ($truthy(($ret_or_1 = is_required['$!']()))) {
                return filterer['$discard_invalid?']()
              } else {
                return $ret_or_1
              }; return nil; })())) {
                data.$delete(key)
              } else if ($truthy((function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = is_required['$!']()))) {
                return sub_error['$==']("empty")
              } else {
                return $ret_or_3
              }; return nil; })()))) {
                return filterer['$discard_empty?']()
              } else {
                return $ret_or_2
              }; return nil; })())) {
                data.$delete(key)
              } else if ($truthy((function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = is_required['$!']()))) {
                return sub_error['$==']("nils")
              } else {
                return $ret_or_5
              }; return nil; })()))) {
                return filterer['$discard_nils?']()
              } else {
                return $ret_or_4
              }; return nil; })())) {
                data.$delete(key)
              } else {
                
                error_key = (function() {if ($truthy(($ret_or_6 = filterer.$options()['$[]']("error_key")))) {
                  return $ret_or_6
                } else {
                  return key
                }; return nil; })();
                if ($truthy(sub_error['$is_a?']($$($nesting, 'Symbol')))) {
                  sub_error = $$($nesting, 'ErrorAtom').$new(error_key, sub_error)};
                
                $writer = [key, sub_error];
                $send(errors, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
              };};
            if ($truthy(data['$has_key?'](key)['$!']())) {
              if ($truthy(filterer['$has_default?']())) {
                
                $writer = [key, filterer.$default()];
                $send(filtered_data, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(is_required)) {
                
                error_key = (function() {if ($truthy(($ret_or_7 = filterer.$options()['$[]']("error_key")))) {
                  return $ret_or_7
                } else {
                  return key
                }; return nil; })();
                
                $writer = [key, $$($nesting, 'ErrorAtom').$new(error_key, "required")];
                $send(errors, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else {
                return nil
              }
            } else {
              return nil
            };}, $$16.$$s = self, $$16.$$arity = 2, $$16));}, $$15.$$s = self, $$15.$$arity = 1, $$15.$$has_top_level_mlhs_arg = true, $$15));
        if ($truthy(wildcard_filterer)) {
          
          filtered_keys = $rb_minus(data.$keys(), filtered_data.$keys());
          $send(filtered_keys, 'each', [], ($$17 = function(key){var self = $$17.$$s == null ? this : $$17.$$s, $a, $b, data_element = nil, sub_data = nil, sub_error = nil, $writer = nil, $ret_or_8 = nil, $ret_or_9 = nil;

            
            
            if (key == null) {
              key = nil;
            };
            data_element = data['$[]'](key);
            $b = wildcard_filterer.$filter(data_element), $a = Opal.to_ary($b), (sub_data = ($a[0] == null ? nil : $a[0])), (sub_error = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(sub_error['$nil?']())) {
              
              $writer = [key, sub_data];
              $send(filtered_data, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            } else if ($truthy(wildcard_filterer['$discard_invalid?']())) {
              return data.$delete(key)
            } else if ($truthy((function() {if ($truthy(($ret_or_8 = sub_error['$==']("empty")))) {
              return wildcard_filterer['$discard_empty?']()
            } else {
              return $ret_or_8
            }; return nil; })())) {
              return data.$delete(key)
            } else if ($truthy((function() {if ($truthy(($ret_or_9 = sub_error['$==']("nils")))) {
              return wildcard_filterer['$discard_nils?']()
            } else {
              return $ret_or_9
            }; return nil; })())) {
              return data.$delete(key)
            } else {
              
              if ($truthy(sub_error['$is_a?']($$($nesting, 'Symbol')))) {
                sub_error = $$($nesting, 'ErrorAtom').$new(key, sub_error)};
              
              $writer = [key, sub_error];
              $send(errors, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            };}, $$17.$$s = self, $$17.$$arity = 1, $$17));};
        if ($truthy(errors['$any?']())) {
          return [data, errors]
        } else {
          return [filtered_data, nil]
        };
      }, $HashFilter_filter$14.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'InputFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/array_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy;

  Opal.add_stubs(['$define_method', '$new', '$to_proc', '$instance_eval', '$[]', '$options', '$raise', '$to_sym', '$is_a?', '$constantize', '$[]=', '$-', '$cache_constants?', '$to_s', '$initialize_constants!', '$nil?', '$!', '$==', '$Array', '$<', '$length', '$>', '$each_with_index', '$filter_element', '$<<', '$discard_invalid?', '$filter']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ArrayFilter');

      var $nesting = [self].concat($parent_nesting), $ArrayFilter_register_additional_filter$1, $ArrayFilter_initialize$3, $ArrayFilter_hash$4, $ArrayFilter_model$5, $ArrayFilter_array$6, $ArrayFilter_initialize_constants$excl$7, $ArrayFilter_filter$8, $ArrayFilter_filter_element$10;

      self.$$prototype.element_filter = self.$$prototype.initialize_constants = nil;
      
      Opal.defs(self, '$register_additional_filter', $ArrayFilter_register_additional_filter$1 = function $$register_additional_filter(type_class, type_name) {
        var $$2, $iter = $ArrayFilter_register_additional_filter$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $ArrayFilter_register_additional_filter$1.$$p = null;
        return $send(self, 'define_method', [type_name], ($$2 = function(options){var self = $$2.$$s == null ? this : $$2.$$s, $iter = $$2.$$p, block = $iter || nil;

          
          
          if ($iter) $$2.$$p = null;;
          
          if (options == null) {
            options = $hash2([], {});
          };
          return (self.element_filter = $send(type_class, 'new', [options], block.$to_proc()));}, $$2.$$s = self, $$2.$$arity = -1, $$2))
      }, $ArrayFilter_register_additional_filter$1.$$arity = 2);
      self.default_options = $hash2(["nils", "class", "arrayize", "min_length", "max_length"], {"nils": false, "class": nil, "arrayize": false, "min_length": nil, "max_length": nil});
      
      Opal.def(self, '$initialize', $ArrayFilter_initialize$3 = function $$initialize(name, opts) {
        var $iter = $ArrayFilter_initialize$3.$$p, block = $iter || nil, self = this, $ret_or_1 = nil;

        if ($iter) $ArrayFilter_initialize$3.$$p = null;
        
        
        if ($iter) $ArrayFilter_initialize$3.$$p = null;;
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        $send2(self, $find_super(self, 'initialize', $ArrayFilter_initialize$3, false, true), 'initialize', [opts], null);
        self.name = name;
        self.element_filter = nil;
        if ((block !== nil)) {
          $send(self, 'instance_eval', [], block.$to_proc())};
        if ($truthy((function() {if ($truthy(($ret_or_1 = self.element_filter))) {
          return self.$options()['$[]']("class")
        } else {
          return $ret_or_1
        }; return nil; })())) {
          return self.$raise($$($nesting, 'ArgumentError').$new("Can't supply both a class and a filter"))
        } else {
          return nil
        };
      }, $ArrayFilter_initialize$3.$$arity = -2);
      
      Opal.def(self, '$hash', $ArrayFilter_hash$4 = function $$hash(options) {
        var $iter = $ArrayFilter_hash$4.$$p, block = $iter || nil, self = this;

        if ($iter) $ArrayFilter_hash$4.$$p = null;
        
        
        if ($iter) $ArrayFilter_hash$4.$$p = null;;
        
        if (options == null) {
          options = $hash2([], {});
        };
        return (self.element_filter = $send($$($nesting, 'HashFilter'), 'new', [options], block.$to_proc()));
      }, $ArrayFilter_hash$4.$$arity = -1);
      
      Opal.def(self, '$model', $ArrayFilter_model$5 = function $$model(name, options) {
        var self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        return (self.element_filter = $$($nesting, 'ModelFilter').$new(name.$to_sym(), options));
      }, $ArrayFilter_model$5.$$arity = -2);
      
      Opal.def(self, '$array', $ArrayFilter_array$6 = function $$array(options) {
        var $iter = $ArrayFilter_array$6.$$p, block = $iter || nil, self = this;

        if ($iter) $ArrayFilter_array$6.$$p = null;
        
        
        if ($iter) $ArrayFilter_array$6.$$p = null;;
        
        if (options == null) {
          options = $hash2([], {});
        };
        return (self.element_filter = $send($$($nesting, 'ArrayFilter'), 'new', [nil, options], block.$to_proc()));
      }, $ArrayFilter_array$6.$$arity = -1);
      
      Opal.def(self, '$initialize_constants!', $ArrayFilter_initialize_constants$excl$7 = function() {
        var self = this, $ret_or_2 = nil, $writer = nil;

        
        self.initialize_constants = (function() {if ($truthy(($ret_or_2 = self.initialize_constants))) {
          return $ret_or_2
        } else {
          
          if ($truthy(self.$options()['$[]']("class"))) {
            if ($truthy(self.$options()['$[]']("class")['$is_a?']($$($nesting, 'String')))) {
              
              $writer = ["class", self.$options()['$[]']("class").$constantize()];
              $send(self.$options(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];}};
          return true;
        }; return nil; })();
        if ($truthy($$($nesting, 'Mutations')['$cache_constants?']())) {
          return nil
        } else if ($truthy(self.$options()['$[]']("class"))) {
          
          $writer = ["class", self.$options()['$[]']("class").$to_s().$constantize()];
          $send(self.$options(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        };
      }, $ArrayFilter_initialize_constants$excl$7.$$arity = 0);
      
      Opal.def(self, '$filter', $ArrayFilter_filter$8 = function $$filter(data) {
        var $$9, self = this, $ret_or_3 = nil, errors = nil, filtered_data = nil, found_error = nil, $ret_or_4 = nil, $ret_or_5 = nil, $ret_or_6 = nil, $ret_or_7 = nil;

        
        self['$initialize_constants!']();
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ($truthy((function() {if ($truthy(($ret_or_3 = data['$is_a?']($$($nesting, 'Array'))['$!']()))) {
          return self.$options()['$[]']("arrayize")
        } else {
          return $ret_or_3
        }; return nil; })())) {
          
          if (data['$==']("")) {
            return [[], nil]};
          data = self.$Array(data);};
        if ($truthy(data['$is_a?']($$($nesting, 'Array')))) {
          
          errors = $$($nesting, 'ErrorArray').$new();
          filtered_data = [];
          found_error = false;
          if ($truthy((function() {if ($truthy(($ret_or_4 = self.$options()['$[]']("min_length")))) {
            return $rb_lt(data.$length(), self.$options()['$[]']("min_length"))
          } else {
            return $ret_or_4
          }; return nil; })())) {
            return [data, "min_length"]};
          if ($truthy((function() {if ($truthy(($ret_or_5 = self.$options()['$[]']("max_length")))) {
            return $rb_gt(data.$length(), self.$options()['$[]']("max_length"))
          } else {
            return $ret_or_5
          }; return nil; })())) {
            return [data, "max_length"]};
          $send(data, 'each_with_index', [], ($$9 = function(el, i){var self = $$9.$$s == null ? this : $$9.$$s, $a, $b, el_filtered = nil, el_error = nil;
            if (self.name == null) self.name = nil;

            
            
            if (el == null) {
              el = nil;
            };
            
            if (i == null) {
              i = nil;
            };
            $b = self.$filter_element(el), $a = Opal.to_ary($b), (el_filtered = ($a[0] == null ? nil : $a[0])), (el_error = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(el_error['$is_a?']($$($nesting, 'Symbol')))) {
              el_error = $$($nesting, 'ErrorAtom').$new(self.name, el_error, $hash2(["index"], {"index": i}))};
            errors['$<<'](el_error);
            if ($truthy(el_error)) {
              return (found_error = true)
            } else {
              return filtered_data['$<<'](el_filtered)
            };}, $$9.$$s = self, $$9.$$arity = 2, $$9));
          if ($truthy((function() {if ($truthy(($ret_or_6 = found_error))) {
            return (function() {if ($truthy(($ret_or_7 = self.element_filter))) {
              return self.element_filter['$discard_invalid?']()
            } else {
              return $ret_or_7
            }; return nil; })()['$!']()
          } else {
            return $ret_or_6
          }; return nil; })())) {
            return [data, errors]
          } else {
            return [filtered_data, nil]
          };
        } else {
          return [data, "array"]
        };
      }, $ArrayFilter_filter$8.$$arity = 1);
      return (Opal.def(self, '$filter_element', $ArrayFilter_filter_element$10 = function $$filter_element(data) {
        var $a, $b, self = this, el_errors = nil;

        
        if ($truthy(self.element_filter)) {
          
          $b = self.element_filter.$filter(data), $a = Opal.to_ary($b), (data = ($a[0] == null ? nil : $a[0])), (el_errors = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(el_errors)) {
            return [data, el_errors]};
        } else if ($truthy(self.$options()['$[]']("class"))) {
          if ($truthy(data['$is_a?'](self.$options()['$[]']("class"))['$!']())) {
            return [data, "class"]}};
        return [data, nil];
      }, $ArrayFilter_filter_element$10.$$arity = 1), nil) && 'filter_element';
    })($nesting[0], $$($nesting, 'InputFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/additional_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$underscore', '$[]', '$name', '$register_additional_filter']);
  
  self.$require("mutations/hash_filter");
  self.$require("mutations/array_filter");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'AdditionalFilter');

      var $nesting = [self].concat($parent_nesting), $AdditionalFilter_inherited$1;

      return (Opal.defs(self, '$inherited', $AdditionalFilter_inherited$1 = function $$inherited(subclass) {
        var self = this, type_name = nil;

        
        type_name = subclass.$name()['$[]'](/^Mutations::([a-zA-Z]*)Filter$/, 1).$underscore();
        $$$($$($nesting, 'Mutations'), 'HashFilter').$register_additional_filter(subclass, type_name);
        return $$$($$($nesting, 'Mutations'), 'ArrayFilter').$register_additional_filter(subclass, type_name);
      }, $AdditionalFilter_inherited$1.$$arity = 1), nil) && 'inherited'
    })($nesting[0], $$($nesting, 'InputFilter'), $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["mutations/string_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$!', '$any?', '$is_a?', '$to_s', '$gsub', '$strip', '$==', '$<', '$length', '$>', '$include?', '$!~']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StringFilter');

      var $nesting = [self].concat($parent_nesting), $StringFilter_filter$1;

      
      self.default_options = $hash2(["strip", "strict", "nils", "empty_is_nil", "empty", "min_length", "max_length", "matches", "in", "discard_empty", "allow_control_characters"], {"strip": true, "strict": false, "nils": false, "empty_is_nil": false, "empty": false, "min_length": nil, "max_length": nil, "matches": nil, "in": nil, "discard_empty": false, "allow_control_characters": false});
      return (Opal.def(self, '$filter', $StringFilter_filter$1 = function $$filter(data) {
        var $$2, self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ($truthy((function() {if ($truthy(($ret_or_1 = self.$options()['$[]']("strict")['$!']()))) {
          return $send([$$($nesting, 'TrueClass'), $$($nesting, 'FalseClass'), $$($nesting, 'Integer'), $$($nesting, 'Float'), $$($nesting, 'BigDecimal'), $$($nesting, 'Symbol')], 'any?', [], ($$2 = function(klass){var self = $$2.$$s == null ? this : $$2.$$s;

            
            
            if (klass == null) {
              klass = nil;
            };
            return data['$is_a?'](klass);}, $$2.$$s = self, $$2.$$arity = 1, $$2))
        } else {
          return $ret_or_1
        }; return nil; })())) {
          data = data.$to_s()};
        if ($truthy(data['$is_a?']($$($nesting, 'String')))) {
        } else {
          return [data, "string"]
        };
        if ($truthy(self.$options()['$[]']("allow_control_characters"))) {
        } else {
          data = data.$gsub(/((?=[[:cntrl:]])[^\t\r\n])+/, " ")
        };
        if ($truthy(self.$options()['$[]']("strip"))) {
          data = data.$strip()};
        if (data['$==']("")) {
          if ($truthy(self.$options()['$[]']("empty_is_nil"))) {
            return [nil, (function() {if ($truthy(self.$options()['$[]']("nils"))) {
              return nil
            } else {
              return "nils"
            }; return nil; })()]
          } else if ($truthy(self.$options()['$[]']("empty"))) {
            return [data, nil]
          } else {
            return [data, "empty"]
          }};
        if ($truthy((function() {if ($truthy(($ret_or_2 = self.$options()['$[]']("min_length")))) {
          return $rb_lt(data.$length(), self.$options()['$[]']("min_length"))
        } else {
          return $ret_or_2
        }; return nil; })())) {
          return [data, "min_length"]};
        if ($truthy((function() {if ($truthy(($ret_or_3 = self.$options()['$[]']("max_length")))) {
          return $rb_gt(data.$length(), self.$options()['$[]']("max_length"))
        } else {
          return $ret_or_3
        }; return nil; })())) {
          return [data, "max_length"]};
        if ($truthy((function() {if ($truthy(($ret_or_4 = self.$options()['$[]']("in")))) {
          return self.$options()['$[]']("in")['$include?'](data)['$!']()
        } else {
          return $ret_or_4
        }; return nil; })())) {
          return [data, "in"]};
        if ($truthy((function() {if ($truthy(($ret_or_5 = self.$options()['$[]']("matches")))) {
          
          return self.$options()['$[]']("matches")['$!~'](data);
        } else {
          return $ret_or_5
        }; return nil; })())) {
          return [data, "matches"]};
        return [data, nil];
      }, $StringFilter_filter$1.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/integer_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$!', '$is_a?', '$=~', '$to_i', '$<', '$>', '$include?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'IntegerFilter');

      var $nesting = [self].concat($parent_nesting), $IntegerFilter_filter$1;

      
      self.default_options = $hash2(["nils", "empty_is_nil", "min", "max", "in"], {"nils": false, "empty_is_nil": false, "min": nil, "max": nil, "in": nil});
      return (Opal.def(self, '$filter', $IntegerFilter_filter$1 = function $$filter(data) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          if ($truthy(self.$options()['$[]']("empty_is_nil"))) {
            return [nil, (function() {if ($truthy(self.$options()['$[]']("nils"))) {
              return nil
            } else {
              return "nils"
            }; return nil; })()]
          } else {
            return [data, "empty"]
          }};
        if ($truthy(data['$is_a?']($$($nesting, 'Integer'))['$!']())) {
          if ($truthy((function() {if ($truthy(($ret_or_1 = data['$is_a?']($$($nesting, 'String'))))) {
            return data['$=~'](/^-?\d/)
          } else {
            return $ret_or_1
          }; return nil; })())) {
            data = data.$to_i()
          } else {
            return [data, "integer"]
          }};
        if ($truthy((function() {if ($truthy(($ret_or_2 = self.$options()['$[]']("min")))) {
          return $rb_lt(data, self.$options()['$[]']("min"))
        } else {
          return $ret_or_2
        }; return nil; })())) {
          return [data, "min"]};
        if ($truthy((function() {if ($truthy(($ret_or_3 = self.$options()['$[]']("max")))) {
          return $rb_gt(data, self.$options()['$[]']("max"))
        } else {
          return $ret_or_3
        }; return nil; })())) {
          return [data, "max"]};
        if ($truthy((function() {if ($truthy(($ret_or_4 = self.$options()['$[]']("in")))) {
          return self.$options()['$[]']("in")['$include?'](data)['$!']()
        } else {
          return $ret_or_4
        }; return nil; })())) {
          return [data, "in"]};
        return [data, nil];
      }, $IntegerFilter_filter$1.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/float_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$!', '$is_a?', '$=~', '$to_f', '$<', '$>']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'FloatFilter');

      var $nesting = [self].concat($parent_nesting), $FloatFilter_filter$1;

      
      self.default_options = $hash2(["nils", "min", "max"], {"nils": false, "min": nil, "max": nil});
      return (Opal.def(self, '$filter', $FloatFilter_filter$1 = function $$filter(data) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        if ($truthy(data['$is_a?']($$($nesting, 'Float'))['$!']())) {
          if ($truthy((function() {if ($truthy(($ret_or_1 = data['$is_a?']($$($nesting, 'String'))))) {
            return data['$=~'](/^[-+]?\d*\.?\d+/)
          } else {
            return $ret_or_1
          }; return nil; })())) {
            data = data.$to_f()
          } else if ($truthy(data['$is_a?']($$($nesting, 'Integer')))) {
            data = data.$to_f()
          } else {
            return [data, "float"]
          }};
        if ($truthy((function() {if ($truthy(($ret_or_2 = self.$options()['$[]']("min")))) {
          return $rb_lt(data, self.$options()['$[]']("min"))
        } else {
          return $ret_or_2
        }; return nil; })())) {
          return [data, "min"]};
        if ($truthy((function() {if ($truthy(($ret_or_3 = self.$options()['$[]']("max")))) {
          return $rb_gt(data, self.$options()['$[]']("max"))
        } else {
          return $ret_or_3
        }; return nil; })())) {
          return [data, "max"]};
        return [data, nil];
      }, $FloatFilter_filter$1.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/boolean_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$is_a?', '$to_s', '$downcase']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'BooleanFilter');

      var $nesting = [self].concat($parent_nesting), $BooleanFilter_filter$1;

      
      self.default_options = $hash2(["nils"], {"nils": false});
      Opal.const_set($nesting[0], 'BOOL_MAP', $hash2(["true", "1", "false", "0"], {"true": true, "1": true, "false": false, "0": false}));
      return (Opal.def(self, '$filter', $BooleanFilter_filter$1 = function $$filter(data) {
        var self = this, $ret_or_1 = nil, res = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        if ($truthy((function() {if ($truthy(($ret_or_1 = data['$=='](true)))) {
          return $ret_or_1
        } else {
          return data['$=='](false)
        }; return nil; })())) {
          return [data, nil]};
        if ($truthy(data['$is_a?']($$($nesting, 'Integer')))) {
          data = data.$to_s()};
        if ($truthy(data['$is_a?']($$($nesting, 'String')))) {
          
          res = $$($nesting, 'BOOL_MAP')['$[]'](data.$downcase());
          if ($truthy(res['$nil?']())) {
          } else {
            return [res, nil]
          };
          return [data, "boolean"];
        } else {
          return [data, "boolean"]
        };
      }, $BooleanFilter_filter$1.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/duck_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$each', '$Array', '$respond_to?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'DuckFilter');

      var $nesting = [self].concat($parent_nesting), $DuckFilter_filter$1;

      
      self.default_options = $hash2(["nils", "methods"], {"nils": false, "methods": nil});
      return (Opal.def(self, '$filter', $DuckFilter_filter$1 = function $$filter(data) {try {

        var $$2, self = this;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        $send(self.$Array(self.$options()['$[]']("methods")), 'each', [], ($$2 = function(method){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (method == null) {
            method = nil;
          };
          if ($truthy(data['$respond_to?'](method))) {
            return nil
          } else {
            Opal.ret([data, "duck"])
          };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        return [data, nil];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, $DuckFilter_filter$1.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/date_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$is_a?', '$strptime', '$parse', '$respond_to?', '$to_date', '$<=', '$>=']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'DateFilter');

      var $nesting = [self].concat($parent_nesting), $DateFilter_filter$1;

      
      self.default_options = $hash2(["nils", "empty_is_nil", "format", "after", "before"], {"nils": false, "empty_is_nil": false, "format": nil, "after": nil, "before": nil});
      return (Opal.def(self, '$filter', $DateFilter_filter$1 = function $$filter(data) {
        var self = this, actual_date = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          if ($truthy(self.$options()['$[]']("empty_is_nil"))) {
            return [nil, (function() {if ($truthy(self.$options()['$[]']("nils"))) {
              return nil
            } else {
              return "nils"
            }; return nil; })()]
          } else {
            return [data, "empty"]
          }};
        if ($truthy(data['$is_a?']($$($nesting, 'Date')))) {
          actual_date = data
        } else if ($truthy(data['$is_a?']($$($nesting, 'String')))) {
          
          try {
            actual_date = (function() {if ($truthy(self.$options()['$[]']("format"))) {
              return $$($nesting, 'Date').$strptime(data, self.$options()['$[]']("format"))
            } else {
              return $$($nesting, 'Date').$parse(data)
            }; return nil; })()
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
              try {
                return [nil, "date"]
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };
        } else if ($truthy(data['$respond_to?']("to_date"))) {
          actual_date = data.$to_date()
        } else {
          return [nil, "date"]
        };
        if ($truthy(self.$options()['$[]']("after"))) {
          if ($truthy($rb_le(actual_date, self.$options()['$[]']("after")))) {
            return [nil, "after"]}};
        if ($truthy(self.$options()['$[]']("before"))) {
          if ($truthy($rb_ge(actual_date, self.$options()['$[]']("before")))) {
            return [nil, "before"]}};
        return [actual_date, nil];
      }, $DateFilter_filter$1.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/time_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$is_a?', '$strptime', '$parse', '$respond_to?', '$to_time', '$<=', '$>=']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TimeFilter');

      var $nesting = [self].concat($parent_nesting), $TimeFilter_filter$1;

      
      self.default_options = $hash2(["nils", "format", "after", "before"], {"nils": false, "format": nil, "after": nil, "before": nil});
      return (Opal.def(self, '$filter', $TimeFilter_filter$1 = function $$filter(data) {
        var self = this, actual_time = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (""['$=='](data)) {
          return [data, "empty"]};
        if ($truthy(data['$is_a?']($$($nesting, 'Time')))) {
          actual_time = data
        } else if ($truthy(data['$is_a?']($$($nesting, 'String')))) {
          
          try {
            actual_time = (function() {if ($truthy(self.$options()['$[]']("format"))) {
              return $$($nesting, 'Time').$strptime(data, self.$options()['$[]']("format"))
            } else {
              return $$($nesting, 'Time').$parse(data)
            }; return nil; })()
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
              try {
                return [nil, "time"]
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };
        } else if ($truthy(data['$respond_to?']("to_time"))) {
          actual_time = data.$to_time()
        } else {
          return [nil, "time"]
        };
        if ($truthy(self.$options()['$[]']("after"))) {
          if ($truthy($rb_le(actual_time, self.$options()['$[]']("after")))) {
            return [nil, "after"]}};
        if ($truthy(self.$options()['$[]']("before"))) {
          if ($truthy($rb_ge(actual_time, self.$options()['$[]']("before")))) {
            return [nil, "before"]}};
        return [actual_time, nil];
      }, $TimeFilter_filter$1.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/file_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$concat', '$each', '$respond_to?', '$is_a?', '$>', '$size']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'FileFilter');

      var $nesting = [self].concat($parent_nesting), $FileFilter_filter$1;

      
      self.default_options = $hash2(["nils", "upload", "size"], {"nils": false, "upload": false, "size": nil});
      return (Opal.def(self, '$filter', $FileFilter_filter$1 = function $$filter(data) {try {

        var $$2, self = this, methods = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        methods = ["read", "size"];
        if ($truthy(self.$options()['$[]']("upload"))) {
          methods.$concat(["original_filename", "content_type"])};
        $send(methods, 'each', [], ($$2 = function(method){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (method == null) {
            method = nil;
          };
          if ($truthy(data['$respond_to?'](method))) {
            return nil
          } else {
            Opal.ret([data, "file"])
          };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        if ($truthy(self.$options()['$[]']("size")['$is_a?']($$($nesting, 'Integer')))) {
          if ($truthy($rb_gt(data.$size(), self.$options()['$[]']("size")))) {
            return [data, "size"]}};
        return [data, nil];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, $FileFilter_filter$1.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/model_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$[]', '$options', '$camelize', '$to_s', '$is_a?', '$constantize', '$[]=', '$-', '$cache_constants?', '$initialize_constants!', '$nil?', '$run', '$success?', '$result', '$errors', '$!', '$respond_to?', '$new_record?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ModelFilter');

      var $nesting = [self].concat($parent_nesting), $ModelFilter_initialize$1, $ModelFilter_initialize_constants$excl$2, $ModelFilter_filter$3;

      self.$$prototype.initialize_constants = self.$$prototype.name = nil;
      
      self.default_options = $hash2(["nils", "class", "builder", "new_records"], {"nils": false, "class": nil, "builder": nil, "new_records": false});
      
      Opal.def(self, '$initialize', $ModelFilter_initialize$1 = function $$initialize(name, opts) {
        var $iter = $ModelFilter_initialize$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $ModelFilter_initialize$1.$$p = null;
        
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        $send2(self, $find_super(self, 'initialize', $ModelFilter_initialize$1, false, true), 'initialize', [opts], null);
        return (self.name = name);
      }, $ModelFilter_initialize$1.$$arity = -2);
      
      Opal.def(self, '$initialize_constants!', $ModelFilter_initialize_constants$excl$2 = function() {
        var self = this, $ret_or_1 = nil, class_const = nil, $ret_or_2 = nil, $writer = nil;

        
        self.initialize_constants = (function() {if ($truthy(($ret_or_1 = self.initialize_constants))) {
          return $ret_or_1
        } else {
          
          class_const = (function() {if ($truthy(($ret_or_2 = self.$options()['$[]']("class")))) {
            return $ret_or_2
          } else {
            return self.name.$to_s().$camelize()
          }; return nil; })();
          if ($truthy(class_const['$is_a?']($$($nesting, 'String')))) {
            class_const = class_const.$constantize()};
          
          $writer = ["class", class_const];
          $send(self.$options(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$options()['$[]']("builder"))) {
            if ($truthy(self.$options()['$[]']("builder")['$is_a?']($$($nesting, 'String')))) {
              
              $writer = ["builder", self.$options()['$[]']("builder").$constantize()];
              $send(self.$options(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];}};
          return true;
        }; return nil; })();
        if ($truthy($$($nesting, 'Mutations')['$cache_constants?']())) {
          return nil
        } else {
          
          if ($truthy(self.$options()['$[]']("class"))) {
            
            $writer = ["class", self.$options()['$[]']("class").$to_s().$constantize()];
            $send(self.$options(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(self.$options()['$[]']("builder"))) {
            
            $writer = ["builder", self.$options()['$[]']("builder").$to_s().$constantize()];
            $send(self.$options(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };
        };
      }, $ModelFilter_initialize_constants$excl$2.$$arity = 0);
      return (Opal.def(self, '$filter', $ModelFilter_filter$3 = function $$filter(data) {
        var self = this, $ret_or_3 = nil, ret = nil, $ret_or_4 = nil, $ret_or_5 = nil;

        
        self['$initialize_constants!']();
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ($truthy((function() {if ($truthy(($ret_or_3 = data['$is_a?']($$($nesting, 'Hash'))))) {
          return self.$options()['$[]']("builder")
        } else {
          return $ret_or_3
        }; return nil; })())) {
          
          ret = self.$options()['$[]']("builder").$run(data);
          if ($truthy(ret['$success?']())) {
            data = ret.$result()
          } else {
            return [data, ret.$errors()]
          };};
        if ($truthy(data['$is_a?'](self.$options()['$[]']("class")))) {
          
          if ($truthy((function() {if ($truthy(($ret_or_4 = self.$options()['$[]']("new_records")['$!']()))) {
            
            if ($truthy(($ret_or_5 = data['$respond_to?']("new_record?")))) {
              return data['$new_record?']()
            } else {
              return $ret_or_5
            };
          } else {
            return $ret_or_4
          }; return nil; })())) {
            return [data, "new_records"]};
          return [data, nil];};
        return [data, "model"];
      }, $ModelFilter_filter$3.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'InputFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/symbol_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$===', '$to_sym', '$!', '$include?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SymbolFilter');

      var $nesting = [self].concat($parent_nesting), $SymbolFilter_filter$1;

      
      self.default_options = $hash2(["nils", "in"], {"nils": false, "in": nil});
      return (Opal.def(self, '$filter', $SymbolFilter_filter$1 = function $$filter(data) {
        var self = this, $case = nil, $ret_or_1 = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        $case = data;
        if ($$($nesting, 'Symbol')['$===']($case)) {nil}
        else if ($$($nesting, 'String')['$===']($case)) {data = data.$to_sym()}
        else {return [nil, "symbol"]};
        if ($truthy((function() {if ($truthy(($ret_or_1 = self.$options()['$[]']("in")))) {
          return self.$options()['$[]']("in")['$include?'](data)['$!']()
        } else {
          return $ret_or_1
        }; return nil; })())) {
          return [data, "in"]};
        return [data, nil];
      }, $SymbolFilter_filter$1.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/outcome"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Outcome');

      var $nesting = [self].concat($parent_nesting), $Outcome_initialize$1, $Outcome_success$ques$2;

      self.$$prototype.success = nil;
      
      self.$attr_reader("result", "errors", "inputs");
      
      Opal.def(self, '$initialize', $Outcome_initialize$1 = function $$initialize(is_success, result, errors, inputs) {
        var $a, self = this;

        return $a = [is_success, result, errors, inputs], (self.success = $a[0]), (self.result = $a[1]), (self.errors = $a[2]), (self.inputs = $a[3]), $a
      }, $Outcome_initialize$1.$$arity = 4);
      return (Opal.def(self, '$success?', $Outcome_success$ques$2 = function() {
        var self = this;

        return self.success
      }, $Outcome_success$ques$2.$$arity = 0), nil) && 'success?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations/command"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$send', '$input_filters', '$to_proc', '$each', '$define_method', '$[]', '$has_key?', '$[]=', '$-', '$private', '$create_attr_methods', '$run', '$new', '$run!', '$validation_outcome', '$==', '$superclass', '$dup', '$inject', '$with_indifferent_access', '$respond_to?', '$raise', '$merge!', '$filter', '$has_errors?', '$validate', '$class', '$!', '$nil?', '$execute', '$success?', '$result', '$errors', '$protected', '$attr_reader', '$is_a?', '$tap', '$split', '$to_s', '$pop', '$to_sym', '$any?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Command');

      var $nesting = [self].concat($parent_nesting), $Command_initialize$12, $Command_input_filters$14, $Command_has_errors$ques$15, $Command_run$16, $Command_run$excl$17, $Command_validation_outcome$18, $Command_validate$19, $Command_execute$20, $Command_add_error$21, $Command_merge_errors$24;

      self.$$prototype.raw_inputs = self.$$prototype.errors = self.$$prototype.inputs = nil;
      
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $create_attr_methods$1, $required$6, $optional$7, $run$8, $run$excl$9, $validate$10, $input_filters$11;

        
        
        Opal.def(self, '$create_attr_methods', $create_attr_methods$1 = function $$create_attr_methods(meth) {
          var $iter = $create_attr_methods$1.$$p, block = $iter || nil, $$2, self = this, keys = nil;

          if ($iter) $create_attr_methods$1.$$p = null;
          
          
          if ($iter) $create_attr_methods$1.$$p = null;;
          $send(self.$input_filters(), 'send', [meth], block.$to_proc());
          keys = self.$input_filters().$send("" + (meth) + "_keys");
          return $send(keys, 'each', [], ($$2 = function(key){var self = $$2.$$s == null ? this : $$2.$$s, $$3, $$4, $$5;

            
            
            if (key == null) {
              key = nil;
            };
            $send(self, 'define_method', [key], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;
              if (self.inputs == null) self.inputs = nil;

              return self.inputs['$[]'](key)}, $$3.$$s = self, $$3.$$arity = 0, $$3));
            $send(self, 'define_method', ["" + (key) + "_present?"], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;
              if (self.inputs == null) self.inputs = nil;

              return self.inputs['$has_key?'](key)}, $$4.$$s = self, $$4.$$arity = 0, $$4));
            return $send(self, 'define_method', ["" + (key) + "="], ($$5 = function(v){var self = $$5.$$s == null ? this : $$5.$$s, $writer = nil;
              if (self.inputs == null) self.inputs = nil;

              
              
              if (v == null) {
                v = nil;
              };
              $writer = [key, v];
              $send(self.inputs, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$5.$$s = self, $$5.$$arity = 1, $$5));}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $create_attr_methods$1.$$arity = 1);
        self.$private("create_attr_methods");
        
        Opal.def(self, '$required', $required$6 = function $$required() {
          var $iter = $required$6.$$p, block = $iter || nil, self = this;

          if ($iter) $required$6.$$p = null;
          
          
          if ($iter) $required$6.$$p = null;;
          return $send(self, 'create_attr_methods', ["required"], block.$to_proc());
        }, $required$6.$$arity = 0);
        
        Opal.def(self, '$optional', $optional$7 = function $$optional() {
          var $iter = $optional$7.$$p, block = $iter || nil, self = this;

          if ($iter) $optional$7.$$p = null;
          
          
          if ($iter) $optional$7.$$p = null;;
          return $send(self, 'create_attr_methods', ["optional"], block.$to_proc());
        }, $optional$7.$$arity = 0);
        
        Opal.def(self, '$run', $run$8 = function $$run($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'new', Opal.to_a(args)).$run();
        }, $run$8.$$arity = -1);
        
        Opal.def(self, '$run!', $run$excl$9 = function($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'new', Opal.to_a(args))['$run!']();
        }, $run$excl$9.$$arity = -1);
        
        Opal.def(self, '$validate', $validate$10 = function $$validate($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, 'new', Opal.to_a(args)).$validation_outcome();
        }, $validate$10.$$arity = -1);
        return (Opal.def(self, '$input_filters', $input_filters$11 = function $$input_filters() {
          var self = this, $ret_or_1 = nil;
          if (self.input_filters == null) self.input_filters = nil;

          return (self.input_filters = (function() {if ($truthy(($ret_or_1 = self.input_filters))) {
            return $ret_or_1
          } else {
            
            if ($$($nesting, 'Command')['$=='](self.$superclass())) {
              return $$($nesting, 'HashFilter').$new()
            } else {
              return self.$superclass().$input_filters().$dup()
            };
          }; return nil; })())
        }, $input_filters$11.$$arity = 0), nil) && 'input_filters';
      })(Opal.get_singleton_class(self), $nesting);
      
      Opal.def(self, '$initialize', $Command_initialize$12 = function $$initialize($a) {
        var $post_args, args, $$13, $b, $c, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        self.raw_inputs = $send(args, 'inject', [$hash2([], {}).$with_indifferent_access()], ($$13 = function(h, arg){var self = $$13.$$s == null ? this : $$13.$$s;

          
          
          if (h == null) {
            h = nil;
          };
          
          if (arg == null) {
            arg = nil;
          };
          if ($truthy(arg['$respond_to?']("to_hash"))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError').$new("All arguments must be hashes"))
          };
          return h['$merge!'](arg);}, $$13.$$s = self, $$13.$$arity = 2, $$13));
        $c = self.$input_filters().$filter(self.raw_inputs), $b = Opal.to_ary($c), (self.inputs = ($b[0] == null ? nil : $b[0])), (self.errors = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(self['$has_errors?']())) {
          return nil
        } else {
          return self.$validate()
        };
      }, $Command_initialize$12.$$arity = -1);
      
      Opal.def(self, '$input_filters', $Command_input_filters$14 = function $$input_filters() {
        var self = this;

        return self.$class().$input_filters()
      }, $Command_input_filters$14.$$arity = 0);
      
      Opal.def(self, '$has_errors?', $Command_has_errors$ques$15 = function() {
        var self = this;

        return self.errors['$nil?']()['$!']()
      }, $Command_has_errors$ques$15.$$arity = 0);
      
      Opal.def(self, '$run', $Command_run$16 = function $$run() {
        var self = this;

        
        if ($truthy(self['$has_errors?']())) {
          return self.$validation_outcome()};
        return self.$validation_outcome(self.$execute());
      }, $Command_run$16.$$arity = 0);
      
      Opal.def(self, '$run!', $Command_run$excl$17 = function() {
        var self = this, outcome = nil;

        
        outcome = self.$run();
        if ($truthy(outcome['$success?']())) {
          return outcome.$result()
        } else {
          return self.$raise($$($nesting, 'ValidationException').$new(outcome.$errors()))
        };
      }, $Command_run$excl$17.$$arity = 0);
      
      Opal.def(self, '$validation_outcome', $Command_validation_outcome$18 = function $$validation_outcome(result) {
        var self = this;

        
        
        if (result == null) {
          result = nil;
        };
        return $$($nesting, 'Outcome').$new(self['$has_errors?']()['$!'](), (function() {if ($truthy(self['$has_errors?']())) {
          return nil
        } else {
          return result
        }; return nil; })(), self.errors, self.inputs);
      }, $Command_validation_outcome$18.$$arity = -1);
      self.$protected();
      self.$attr_reader("inputs", "raw_inputs");
      
      Opal.def(self, '$validate', $Command_validate$19 = function $$validate() {
        var self = this;

        return nil
      }, $Command_validate$19.$$arity = 0);
      
      Opal.def(self, '$execute', $Command_execute$20 = function $$execute() {
        var self = this;

        return nil
      }, $Command_execute$20.$$arity = 0);
      
      Opal.def(self, '$add_error', $Command_add_error$21 = function $$add_error(key, kind, message) {
        var $$22, self = this, $ret_or_2 = nil;

        
        
        if (message == null) {
          message = nil;
        };
        if ($truthy(kind['$is_a?']($$($nesting, 'Symbol')))) {
        } else {
          self.$raise($$($nesting, 'ArgumentError').$new("Invalid kind"))
        };
        self.errors = (function() {if ($truthy(($ret_or_2 = self.errors))) {
          return $ret_or_2
        } else {
          return $$($nesting, 'ErrorHash').$new()
        }; return nil; })();
        return $send(self.errors, 'tap', [], ($$22 = function(errs){var self = $$22.$$s == null ? this : $$22.$$s, $$23, path = nil, last = nil, inner = nil, $writer = nil;

          
          
          if (errs == null) {
            errs = nil;
          };
          path = key.$to_s().$split(".");
          last = path.$pop();
          inner = $send(path, 'inject', [errs], ($$23 = function(cur_errors, part){var self = $$23.$$s == null ? this : $$23.$$s, $ret_or_3 = nil, $writer = nil;

            
            
            if (cur_errors == null) {
              cur_errors = nil;
            };
            
            if (part == null) {
              part = nil;
            };
            if ($truthy(($ret_or_3 = cur_errors['$[]'](part.$to_sym())))) {
              return $ret_or_3
            } else {
              
              $writer = [part.$to_sym(), $$($nesting, 'ErrorHash').$new()];
              $send(cur_errors, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            };}, $$23.$$s = self, $$23.$$arity = 2, $$23));
          
          $writer = [last, $$($nesting, 'ErrorAtom').$new(last.$to_sym(), kind, $hash2(["message"], {"message": message}))];
          $send(inner, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, $$22.$$s = self, $$22.$$arity = 1, $$22));
      }, $Command_add_error$21.$$arity = -3);
      return (Opal.def(self, '$merge_errors', $Command_merge_errors$24 = function $$merge_errors(hash) {
        var self = this, $ret_or_4 = nil;

        if ($truthy(hash['$any?']())) {
          
          self.errors = (function() {if ($truthy(($ret_or_4 = self.errors))) {
            return $ret_or_4
          } else {
            return $$($nesting, 'ErrorHash').$new()
          }; return nil; })();
          return self.errors['$merge!'](hash);
        } else {
          return nil
        }
      }, $Command_merge_errors$24.$$arity = 1), nil) && 'merge_errors';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["mutations"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $writer = nil;

  Opal.add_stubs(['$require', '$new', '$cache_constants=', '$-']);
  
  self.$require("active_support/core_ext/hash/indifferent_access");
  self.$require("active_support/core_ext/string/inflections");
  self.$require("date");
  self.$require("time");
  self.$require("bigdecimal");
  self.$require("mutations/version");
  self.$require("mutations/exception");
  self.$require("mutations/errors");
  self.$require("mutations/input_filter");
  self.$require("mutations/additional_filter");
  self.$require("mutations/string_filter");
  self.$require("mutations/integer_filter");
  self.$require("mutations/float_filter");
  self.$require("mutations/boolean_filter");
  self.$require("mutations/duck_filter");
  self.$require("mutations/date_filter");
  self.$require("mutations/time_filter");
  self.$require("mutations/file_filter");
  self.$require("mutations/model_filter");
  self.$require("mutations/array_filter");
  self.$require("mutations/hash_filter");
  self.$require("mutations/symbol_filter");
  self.$require("mutations/outcome");
  self.$require("mutations/command");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $error_message_creator$1, $error_message_creator$eq$2, $cache_constants$eq$3, $cache_constants$ques$4;

      
      
      Opal.def(self, '$error_message_creator', $error_message_creator$1 = function $$error_message_creator() {
        var self = this, $ret_or_1 = nil;
        if (self.error_message_creator == null) self.error_message_creator = nil;

        return (self.error_message_creator = (function() {if ($truthy(($ret_or_1 = self.error_message_creator))) {
          return $ret_or_1
        } else {
          return $$($nesting, 'DefaultErrorMessageCreator').$new()
        }; return nil; })())
      }, $error_message_creator$1.$$arity = 0);
      
      Opal.def(self, '$error_message_creator=', $error_message_creator$eq$2 = function(creator) {
        var self = this;

        return (self.error_message_creator = creator)
      }, $error_message_creator$eq$2.$$arity = 1);
      
      Opal.def(self, '$cache_constants=', $cache_constants$eq$3 = function(val) {
        var self = this;

        return (self.cache_constants = val)
      }, $cache_constants$eq$3.$$arity = 1);
      return (Opal.def(self, '$cache_constants?', $cache_constants$ques$4 = function() {
        var self = this;
        if (self.cache_constants == null) self.cache_constants = nil;

        return self.cache_constants
      }, $cache_constants$ques$4.$$arity = 0), nil) && 'cache_constants?';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting);
  
  $writer = [true];
  $send($$($nesting, 'Mutations'), 'cache_constants=', Opal.to_a($writer));
  return $writer[$rb_minus($writer["length"], 1)];;
};

Opal.modules["hyper-operation/filters/outbound_filter"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'OutboundFilter');

      var $nesting = [self].concat($parent_nesting), $OutboundFilter_filter$1;

      
      self.default_options = $hash2([], {});
      return (Opal.def(self, '$filter', $OutboundFilter_filter$1 = function $$filter(data) {
        var self = this;

        return [data, "outbound"]
      }, $OutboundFilter_filter$1.$$arity = 1), nil) && 'filter';
    })($nesting[0], $$($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation/http"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$each', '$define_singleton_method', '$send', '$new', '$define_method', '$attr_reader', '$>', '$+', '$-', '$<', '$delete', '$succeed', '$fail', '$promise', '$parse', '$private', '$tap', '$proc', '$ok?', '$resolve', '$reject', '$from_object', '$call']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack$3;

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HTTP');

      var $nesting = [self].concat($parent_nesting), $HTTP$1, $HTTP_initialize$5, $HTTP_active$ques$6, $HTTP_active_requests$7, $HTTP_incr_active_requests$8, $HTTP_decr_active_requests$9, $HTTP_send$10, $HTTP_json$11, $HTTP_ok$ques$12, $HTTP_get_header$13, $HTTP_inspect$14, $HTTP_promise$15, $HTTP_succeed$18, $HTTP_fail$19;

      self.$$prototype.handler = self.$$prototype.json = self.$$prototype.body = self.$$prototype.ok = self.$$prototype.xhr = self.$$prototype.url = self.$$prototype.method = self.$$prototype.promise = self.$$prototype.status_code = nil;
      
      Opal.const_set($nesting[0], 'ACTIONS', ["get", "post", "put", "delete", "patch", "head"]);
      $send($$($nesting, 'ACTIONS'), 'each', [], ($HTTP$1 = function(action){var self = $HTTP$1.$$s == null ? this : $HTTP$1.$$s, $$2, $$4;

        
        
        if (action == null) {
          action = nil;
        };
        $send(self, 'define_singleton_method', [action], ($$2 = function(url, options){var self = $$2.$$s == null ? this : $$2.$$s, $iter = $$2.$$p, block = $iter || nil;

          
          
          if ($iter) $$2.$$p = null;;
          
          if (url == null) {
            url = nil;
          };
          
          if (options == null) {
            options = $hash2([], {});
          };
          return self.$new().$send(action, url, options, block);}, $$2.$$s = self, $$2.$$arity = -2, $$2));
        return $send(self, 'define_method', [action], ($$4 = function(url, options){var self = $$4.$$s == null ? this : $$4.$$s, $iter = $$4.$$p, block = $iter || nil;

          
          
          if ($iter) $$4.$$p = null;;
          
          if (url == null) {
            url = nil;
          };
          
          if (options == null) {
            options = $hash2([], {});
          };
          return self.$send(action, url, options, block);}, $$4.$$s = self, $$4.$$arity = -2, $$4));}, $HTTP$1.$$s = self, $HTTP$1.$$arity = 1, $HTTP$1));
      self.$attr_reader("body", "error_message", "method", "status_code", "url", "xhr");
      
      Opal.def(self, '$initialize', $HTTP_initialize$5 = function $$initialize() {
        var self = this;

        return (self.ok = true)
      }, $HTTP_initialize$5.$$arity = 0);
      Opal.defs(self, '$active?', $HTTP_active$ques$6 = function() {
        var self = this, jquery_active_requests = nil;
        if (self.active_requests == null) self.active_requests = nil;

        
        jquery_active_requests = 0;
        
        if (typeof jQuery !== "undefined" && typeof jQuery.active !== "undefined" && jQuery.active !== null) {
          jquery_active_requests = jQuery.active;
        }
      ;
        return $rb_gt($rb_plus(jquery_active_requests, self.active_requests), 0);
      }, $HTTP_active$ques$6.$$arity = 0);
      Opal.defs(self, '$active_requests', $HTTP_active_requests$7 = function $$active_requests() {
        var self = this, $ret_or_1 = nil;
        if (self.active_requests == null) self.active_requests = nil;

        
        self.active_requests = (function() {if ($truthy(($ret_or_1 = self.active_requests))) {
          return $ret_or_1
        } else {
          return 0
        }; return nil; })();
        return self.active_requests;
      }, $HTTP_active_requests$7.$$arity = 0);
      Opal.defs(self, '$incr_active_requests', $HTTP_incr_active_requests$8 = function $$incr_active_requests() {
        var self = this, $ret_or_2 = nil;
        if (self.active_requests == null) self.active_requests = nil;

        
        self.active_requests = (function() {if ($truthy(($ret_or_2 = self.active_requests))) {
          return $ret_or_2
        } else {
          return 0
        }; return nil; })();
        return (self.active_requests = $rb_plus(self.active_requests, 1));
      }, $HTTP_incr_active_requests$8.$$arity = 0);
      Opal.defs(self, '$decr_active_requests', $HTTP_decr_active_requests$9 = function $$decr_active_requests() {
        var self = this, $ret_or_3 = nil;
        if (self.active_requests == null) self.active_requests = nil;

        
        self.active_requests = (function() {if ($truthy(($ret_or_3 = self.active_requests))) {
          return $ret_or_3
        } else {
          return 0
        }; return nil; })();
        self.active_requests = $rb_minus(self.active_requests, 1);
        if ($truthy($rb_lt(self.active_requests, 0))) {
          
          console.log("Ooops, Hyperstack::HTTP active_requests out of sync!");
          return (self.active_requests = 0);
        } else {
          return nil
        };
      }, $HTTP_decr_active_requests$9.$$arity = 0);
      
      Opal.def(self, '$send', $HTTP_send$10 = function $$send(method, url, options, block) {
        var self = this;

        
        self.method = method;
        self.url = url;
        self.payload = options.$delete("payload");
        self.handler = block;
        
        var payload_to_send = null;
        var content_type = null;
        if (typeof(this.payload) === 'string') {
          payload_to_send = this.payload;
        }
        else if (this.payload != nil) {
          payload_to_send = this.payload.$to_json();
          content_type = 'application/json';
        }

        var xhr = new XMLHttpRequest();

        xhr.onreadystatechange = function() {
          if(xhr.readyState === XMLHttpRequest.DONE) {
            self.$class().$decr_active_requests();
            if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {
              return self.$succeed(xhr.responseText, xhr.status, xhr);
            } else {
              return self.$fail(xhr, xhr.status, xhr.statusText);
            }
          }
        }
        xhr.open(this.method.toUpperCase(), this.url);
        if (payload_to_send !== null && content_type !== null) {
          xhr.setRequestHeader("Content-Type", content_type);
        }
        if (options["$has_key?"]("headers")) {
          var headers = options['$[]']("headers");
          var keys = headers.$keys();
          var keys_length = keys.length;
          for (var i=0; i < keys_length; i++) {
            xhr.setRequestHeader( keys[i], headers['$[]'](keys[i]) );
          }
        }
        if (payload_to_send !== null) {
          self.$class().$incr_active_requests();
          xhr.send(payload_to_send);
        } else {
          self.$class().$incr_active_requests();
          xhr.send();
        }
      ;
        if ($truthy(self.handler)) {
          return self
        } else {
          return self.$promise()
        };
      }, $HTTP_send$10.$$arity = 4);
      
      Opal.def(self, '$json', $HTTP_json$11 = function $$json() {
        var self = this, $ret_or_4 = nil;

        return (self.json = (function() {if ($truthy(($ret_or_4 = self.json))) {
          return $ret_or_4
        } else {
          return $$($nesting, 'JSON').$parse(self.body)
        }; return nil; })())
      }, $HTTP_json$11.$$arity = 0);
      
      Opal.def(self, '$ok?', $HTTP_ok$ques$12 = function() {
        var self = this;

        return self.ok
      }, $HTTP_ok$ques$12.$$arity = 0);
      
      Opal.def(self, '$get_header', $HTTP_get_header$13 = function $$get_header(key) {
        var self = this;

        
        var value = self.xhr.getResponseHeader(key);
        return (value === null) ? nil : value;
      
      }, $HTTP_get_header$13.$$arity = 1);
      
      Opal.def(self, '$inspect', $HTTP_inspect$14 = function $$inspect() {
        var self = this;

        return "" + "#<HTTP @url=" + (self.url) + " @method=" + (self.method) + ">"
      }, $HTTP_inspect$14.$$arity = 0);
      self.$private();
      
      Opal.def(self, '$promise', $HTTP_promise$15 = function $$promise() {
        var $$16, self = this;

        
        if ($truthy(self.promise)) {
          return self.promise};
        return (self.promise = $send($$($nesting, 'Promise').$new(), 'tap', [], ($$16 = function(promise){var self = $$16.$$s == null ? this : $$16.$$s, $$17;

          
          
          if (promise == null) {
            promise = nil;
          };
          return (self.handler = $send(self, 'proc', [], ($$17 = function(res){var self = $$17.$$s == null ? this : $$17.$$s;

            
            
            if (res == null) {
              res = nil;
            };
            if ($truthy(res['$ok?']())) {
              return promise.$resolve(res)
            } else {
              return promise.$reject(res)
            };}, $$17.$$s = self, $$17.$$arity = 1, $$17)));}, $$16.$$s = self, $$16.$$arity = 1, $$16)));
      }, $HTTP_promise$15.$$arity = 0);
      
      Opal.def(self, '$succeed', $HTTP_succeed$18 = function $$succeed(data, status, xhr) {
        var self = this;

        
        
        self.body = data;
        self.xhr  = xhr;
        self.status_code = xhr.status;

        if (typeof(data) === 'object') {
          self.json = $$($nesting, 'JSON').$from_object(data);
        }
      ;
        if ($truthy(self.handler)) {
          return self.handler.$call(self)
        } else {
          return nil
        };
      }, $HTTP_succeed$18.$$arity = 3);
      return (Opal.def(self, '$fail', $HTTP_fail$19 = function $$fail(xhr, status, error) {
        var self = this;

        
        
        self.body = xhr.responseText;
        self.xhr = xhr;
        self.status_code = xhr.status;
      ;
        self.ok = false;
        if ($truthy(self.handler)) {
          return self.handler.$call(self)
        } else {
          return nil
        };
      }, $HTTP_fail$19.$$arity = 3), nil) && 'fail';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation/transport/client_drivers"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $lambda = Opal.lambda, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$opts', '$extend', '$on_opal_client?', '$client_drivers_get_acting_user_id', '$env', '$==', '$respond_to?', '$tap', '$new', '$resolve', '$each', '$is_a?', '$connect_to', '$name', '$then', '$load', '$id', '$raise', '$inspect', '$class', '$connect', '$last', '$split', '$+', '$to_s', '$include?', '$open_channels', '$<<', '$add_connection', '$gsub', '$get_queued_data', '$post', '$polling_path', '$action_cable_consumer', '$json', '$complete_connection', '$sync_dispatch', '$parse', '$get', '$include', '$dispatch_from_server', '$constantize', '$attr_reader', '$isomorphic_method', '$send_to_server', '$when_on_server', '$acting_user', '$controller', '$when_on_client', '$fail', '$zero?', '$after', '$-', '$!=', '$lambda', '$[]=', '$every']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack_anti_csrf_token$1, $Hyperstack_connect$8, $Hyperstack_connect_session$12, $Hyperstack_action_cable_consumer$13;

    
    Opal.defs(self, '$anti_csrf_token', $Hyperstack_anti_csrf_token$1 = function $$anti_csrf_token() {
      var self = this;

      return $$($nesting, 'ClientDrivers').$opts()['$[]']("form_authenticity_token")
    }, $Hyperstack_anti_csrf_token$1.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Application');

      var $nesting = [self].concat($parent_nesting), $Application_acting_user_id$2, $Application_acting_user_id$3, $Application_env$4, $Application_production$ques$5;

      
      self.$extend($$$($$$($$($nesting, 'Component'), 'IsomorphicHelpers'), 'ClassMethods'));
      if ($truthy(self['$on_opal_client?']())) {
        Opal.defs(self, '$acting_user_id', $Application_acting_user_id$2 = function $$acting_user_id() {
          var self = this;

          return $$($nesting, 'ClientDrivers').$opts()['$[]']("acting_user_id")
        }, $Application_acting_user_id$2.$$arity = 0)
      } else {
        Opal.defs(self, '$acting_user_id', $Application_acting_user_id$3 = function $$acting_user_id() {
          var self = this;

          return $$($nesting, 'ClientDrivers').$client_drivers_get_acting_user_id()
        }, $Application_acting_user_id$3.$$arity = 0)
      };
      Opal.defs(self, '$env', $Application_env$4 = function $$env() {
        var self = this;
        if (self.env == null) self.env = nil;

        
        if ($truthy(self.env)) {
        } else {
          self.env = $$($nesting, 'ClientDrivers').$env()
        };
        return self.env;
      }, $Application_env$4.$$arity = 0);
      return (Opal.defs(self, '$production?', $Application_production$ques$5 = function() {
        var self = this;

        return self.$env()['$==']("production")
      }, $Application_production$ques$5.$$arity = 0), nil) && 'production?';
    })($nesting[0], null, $nesting);
    
    (function($base, $parent_nesting) {
      var self = $module($base, 'Model');

      var $nesting = [self].concat($parent_nesting), $Model_load$6;

      if ($truthy(self['$respond_to?']("load"))) {
        return nil
      } else {
        return (Opal.defs(self, '$load', $Model_load$6 = function $$load() {
          var $$7, $iter = $Model_load$6.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Model_load$6.$$p = null;
          return $send($$($nesting, 'Promise').$new(), 'tap', [], ($$7 = function(promise){var self = $$7.$$s == null ? this : $$7.$$s;

            
            
            if (promise == null) {
              promise = nil;
            };
            return promise.$resolve(Opal.yieldX($yield, []));}, $$7.$$s = self, $$7.$$arity = 1, $$7))
        }, $Model_load$6.$$arity = 0), nil) && 'load'
      }
    })($nesting[0], $nesting);
    Opal.defs(self, '$connect', $Hyperstack_connect$8 = function $$connect($a) {
      var $post_args, channels, $$9, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      channels = $post_args;;
      return $send(channels, 'each', [], ($$9 = function(channel){var self = $$9.$$s == null ? this : $$9.$$s, $$10, $$11, $ret_or_1 = nil;

        
        
        if (channel == null) {
          channel = nil;
        };
        if ($truthy(channel['$is_a?']($$($nesting, 'Class')))) {
          return $$($nesting, 'IncomingBroadcast').$connect_to(channel.$name())
        } else if ($truthy((function() {if ($truthy(($ret_or_1 = channel['$is_a?']($$($nesting, 'String'))))) {
          return $ret_or_1
        } else {
          return channel['$is_a?']($$($nesting, 'Array'))
        }; return nil; })())) {
          return $send($$($nesting, 'IncomingBroadcast'), 'connect_to', Opal.to_a(channel))
        } else if ($truthy(channel['$respond_to?']("id"))) {
          return $send($send($$$($$($nesting, 'Hyperstack'), 'Model'), 'load', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

            return channel.$id()}, $$10.$$s = self, $$10.$$arity = 0, $$10)), 'then', [], ($$11 = function(id){var self = $$11.$$s == null ? this : $$11.$$s;

            
            
            if (id == null) {
              id = nil;
            };
            if ($truthy(id)) {
            } else {
              self.$raise("" + ("" + "Hyperstack.connect cannot connect to " + (channel.$inspect()) + ".  ") + "The id is nil. This can be caused by connecting to a model " + "that is not saved, or that does not exist.")
            };
            return $$($nesting, 'IncomingBroadcast').$connect_to(channel.$class().$name(), id);}, $$11.$$s = self, $$11.$$arity = 1, $$11))
        } else {
          return self.$raise("" + ("" + "Hyperstack.connect cannot connect to " + (channel.$inspect()) + ".\n") + "Channels must be either a class, or a class name,\n" + "a string in the form 'ClassName-id',\n" + "an array in the form [class, id] or [class-name, id],\n" + "or an object that responds to the id method with a non-nil value")
        };}, $$9.$$s = self, $$9.$$arity = 1, $$9));
    }, $Hyperstack_connect$8.$$arity = -1);
    Opal.defs(self, '$connect_session', $Hyperstack_connect_session$12 = function $$connect_session() {
      var self = this;

      return self.$connect(["Hyperstack::Session", $$($nesting, 'ClientDrivers').$opts()['$[]']("id").$split("-").$last()])
    }, $Hyperstack_connect_session$12.$$arity = 0);
    Opal.defs(self, '$action_cable_consumer', $Hyperstack_action_cable_consumer$13 = function $$action_cable_consumer() {
      var self = this;

      return $$($nesting, 'ClientDrivers').$opts()['$[]']("action_cable_consumer")
    }, $Hyperstack_action_cable_consumer$13.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'IncomingBroadcast');

      var $nesting = [self].concat($parent_nesting), $IncomingBroadcast_open_channels$14, $IncomingBroadcast_add_connection$15, $IncomingBroadcast_connect_to$16;

      
      Opal.defs(self, '$open_channels', $IncomingBroadcast_open_channels$14 = function $$open_channels() {
        var self = this, $ret_or_2 = nil;
        if (self.open_channels == null) self.open_channels = nil;

        return (self.open_channels = (function() {if ($truthy(($ret_or_2 = self.open_channels))) {
          return $ret_or_2
        } else {
          return $$($nesting, 'Set').$new()
        }; return nil; })())
      }, $IncomingBroadcast_open_channels$14.$$arity = 0);
      Opal.defs(self, '$add_connection', $IncomingBroadcast_add_connection$15 = function $$add_connection(channel_name, id) {
        var self = this, channel_string = nil;

        
        
        if (id == null) {
          id = nil;
        };
        channel_string = "" + (channel_name) + ((function() {if ($truthy(id)) {
          return $rb_plus("-", id.$to_s())
        } else {
          return nil
        }; return nil; })());
        if ($truthy(self.$open_channels()['$include?'](channel_string))) {
          return nil};
        self.$open_channels()['$<<'](channel_string);
        return channel_string;
      }, $IncomingBroadcast_add_connection$15.$$arity = -2);
      return (Opal.defs(self, '$connect_to', $IncomingBroadcast_connect_to$16 = function $$connect_to(channel_name, id) {
        var $$17, $$18, self = this, channel_string = nil, channel = nil;

        
        
        if (id == null) {
          id = nil;
        };
        channel_string = self.$add_connection(channel_name, id);
        if ($truthy(channel_string)) {
        } else {
          return nil
        };
        if ($$($nesting, 'ClientDrivers').$opts()['$[]']("transport")['$==']("pusher")) {
          
          channel = "" + ($$($nesting, 'ClientDrivers').$opts()['$[]']("channel")) + "-" + (channel_string);
          
            var channel = $$($nesting, 'ClientDrivers').$opts()['$[]']("pusher_api").subscribe(channel.$gsub("::", "=="));
            channel.bind('dispatch', $$($nesting, 'ClientDrivers').$opts()['$[]']("dispatch"))
            channel.bind('pusher:subscription_succeeded', $lambda(($$17 = function($a){var self = $$17.$$s == null ? this : $$17.$$s, $post_args, $rest_arg;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            $rest_arg = $post_args;;
            return $$($nesting, 'ClientDrivers').$get_queued_data("connect-to-transport", channel_string);}, $$17.$$s = self, $$17.$$arity = -1, $$17)))
          ;
          return (self.pusher_dispatcher_registered = true);
        } else if ($$($nesting, 'ClientDrivers').$opts()['$[]']("transport")['$==']("action_cable")) {
          
          channel = "" + ($$($nesting, 'ClientDrivers').$opts()['$[]']("channel")) + "-" + (channel_string);
          return $send($$$($$($nesting, 'Hyperstack'), 'HTTP').$post($$($nesting, 'ClientDrivers').$polling_path("action-cable-auth", channel), $hash2(["headers"], {"headers": $hash2(["X-CSRF-Token"], {"X-CSRF-Token": $$($nesting, 'ClientDrivers').$opts()['$[]']("form_authenticity_token")})})), 'then', [], ($$18 = function(response){var self = $$18.$$s == null ? this : $$18.$$s;

            
            
            if (response == null) {
              response = nil;
            };
            
              var fix_opal_0110 = 'return';
              $$($nesting, 'Hyperstack').$action_cable_consumer().subscriptions.create(
                {
                  channel: "Hyperstack::ActionCableChannel",
                  client_id: $$($nesting, 'ClientDrivers').$opts()['$[]']("id"),
                  hyperstack_channel: channel_string,
                  authorization: response.$json()['$[]']("authorization"),
                  salt: response.$json()['$[]']("salt")
                },
                {
                  connected: function() {
                    if ($$($nesting, 'ClientDrivers').$env()['$==']("development")) { console.log("ActionCable connected to: ", channel_string); }
                    $$($nesting, 'ClientDrivers').$complete_connection(channel_string)
                  },
                  received: function(data) {
                    if ($$($nesting, 'ClientDrivers').$env()['$==']("development")) { console.log("ActionCable received: ", data); }
                    $$($nesting, 'ClientDrivers').$sync_dispatch($$($nesting, 'JSON').$parse(JSON.stringify(data))['$[]']("data"))
                  }
                }
              )
            ;}, $$18.$$s = self, $$18.$$arity = 1, $$18));
        } else {
          return $$$($$($nesting, 'Hyperstack'), 'HTTP').$get($$($nesting, 'ClientDrivers').$polling_path("subscribe", channel_string))
        };
      }, $IncomingBroadcast_connect_to$16.$$arity = -2), nil) && 'connect_to';
    })($nesting[0], null, $nesting);;
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ClientDrivers');

      var $nesting = [self].concat($parent_nesting), $ClientDrivers_sync_dispatch$19, $ClientDrivers$20, $ClientDrivers$22, $ClientDrivers_complete_connection$25, $ClientDrivers_get_queued_data$28, $ClientDrivers_initialize_client_drivers_on_boot$31, $ClientDrivers_polling_path$36;

      
      self.$include($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers'));
      Opal.defs(self, '$sync_dispatch', $ClientDrivers_sync_dispatch$19 = function $$sync_dispatch(data) {
        var self = this;

        return data['$[]']("operation").$constantize().$dispatch_from_server(data['$[]']("params"))
      }, $ClientDrivers_sync_dispatch$19.$$arity = 1);
      nil;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_reader("opts")
      })(Opal.get_singleton_class(self), $nesting);
      $send(self, 'isomorphic_method', ["client_drivers_get_acting_user_id"], ($ClientDrivers$20 = function(f){var self = $ClientDrivers$20.$$s == null ? this : $ClientDrivers$20.$$s, $$21;

        
        
        if (f == null) {
          f = nil;
        };
        f.$send_to_server();
        return $send(f, 'when_on_server', [], ($$21 = function(){var self = $$21.$$s == null ? this : $$21.$$s, $ret_or_3 = nil;

          if ($truthy(($ret_or_3 = self.$controller().$acting_user()))) {
            return self.$controller().$acting_user().$id()
          } else {
            return $ret_or_3
          }}, $$21.$$s = self, $$21.$$arity = 0, $$21));}, $ClientDrivers$20.$$s = self, $ClientDrivers$20.$$arity = 1, $ClientDrivers$20));
      $send(self, 'isomorphic_method', ["env"], ($ClientDrivers$22 = function(f){var self = $ClientDrivers$22.$$s == null ? this : $ClientDrivers$22.$$s, $$23, $$24;

        
        
        if (f == null) {
          f = nil;
        };
        $send(f, 'when_on_client', [], ($$23 = function(){var self = $$23.$$s == null ? this : $$23.$$s;

          return self.$opts()['$[]']("env")}, $$23.$$s = self, $$23.$$arity = 0, $$23));
        f.$send_to_server();
        return $send(f, 'when_on_server', [], ($$24 = function(){var self = $$24.$$s == null ? this : $$24.$$s;

          return $$$('::', 'Rails').$env()}, $$24.$$s = self, $$24.$$arity = 0, $$24));}, $ClientDrivers$22.$$s = self, $ClientDrivers$22.$$arity = 1, $ClientDrivers$22));
      Opal.defs(self, '$complete_connection', $ClientDrivers_complete_connection$25 = function $$complete_connection(channel, retries) {
        var $$26, self = this;

        
        
        if (retries == null) {
          retries = 10;
        };
        return $send(self.$get_queued_data("connect-to-transport", channel), 'fail', [], ($$26 = function(){var self = $$26.$$s == null ? this : $$26.$$s, $$27;

          if ($truthy(retries['$zero?']())) {
            return nil
          } else {
            return $send(self, 'after', [0.25], ($$27 = function(){var self = $$27.$$s == null ? this : $$27.$$s;

              return self.$complete_connection(channel, $rb_minus(retries, 1))}, $$27.$$s = self, $$27.$$arity = 0, $$27))
          }}, $$26.$$s = self, $$26.$$arity = 0, $$26));
      }, $ClientDrivers_complete_connection$25.$$arity = -2);
      Opal.defs(self, '$get_queued_data', $ClientDrivers_get_queued_data$28 = function $$get_queued_data(operation, channel, opts) {
        var $$29, self = this;

        
        
        if (channel == null) {
          channel = nil;
        };
        
        if (opts == null) {
          opts = $hash2([], {});
        };
        return $send($$$($$($nesting, 'Hyperstack'), 'HTTP').$get(self.$polling_path(operation, channel), opts), 'then', [], ($$29 = function(response){var self = $$29.$$s == null ? this : $$29.$$s, $$30;

          
          
          if (response == null) {
            response = nil;
          };
          return $send(response.$json(), 'each', [], ($$30 = function(data){var self = $$30.$$s == null ? this : $$30.$$s;

            
            
            if (data == null) {
              data = nil;
            };
            if ($$($nesting, 'ClientDrivers').$env()['$==']("development")) {
              console.log("simple_poller received: ", data)};
            return self.$sync_dispatch(data['$[]'](1));}, $$30.$$s = self, $$30.$$arity = 1, $$30));}, $$29.$$s = self, $$29.$$arity = 1, $$29));
      }, $ClientDrivers_get_queued_data$28.$$arity = -2);
      Opal.defs(self, '$initialize_client_drivers_on_boot', $ClientDrivers_initialize_client_drivers_on_boot$31 = function $$initialize_client_drivers_on_boot() {
        var $$32, $$33, $$34, $$35, self = this, $ret_or_4 = nil, $ret_or_5 = nil, $writer = nil, $ret_or_6 = nil, h = nil, pusher_api = nil;
        if (self.initialized == null) self.initialized = nil;

        
        if ($truthy(self.initialized)) {
          
          if ($truthy((function() {if ($truthy(($ret_or_4 = self['$on_opal_client?']()))) {
            return $$($nesting, 'Hyperstack').$action_cable_consumer()
          } else {
            return $ret_or_4
          }; return nil; })())) {
            $send($$$($$($nesting, 'Hyperstack'), 'HTTP'), 'get', ["" + (window.HyperstackEnginePath) + "/server_up"], ($$32 = function(){var self = $$32.$$s == null ? this : $$32.$$s;

              if ($truthy($$($nesting, 'Hyperstack').$action_cable_consumer().connection.disconnected)) {
                return $$($nesting, 'Hyperstack').$action_cable_consumer().connection.open()
              } else {
                return nil
              }}, $$32.$$s = self, $$32.$$arity = 0, $$32))};
          return nil;};
        self.initialized = true;
        self.opts = $hash2([], {});
        if ($truthy(self['$on_opal_client?']())) {
          
          self.opts = $$($nesting, 'Hash').$new(window.HyperstackOpts);
          if ($truthy((function() {if ($truthy(($ret_or_5 = self.$opts()['$[]']("transport")['$!=']("none")))) {
            return typeof(window.HyperstackEnginePath) == 'undefined';
          } else {
            return $ret_or_5
          }; return nil; })())) {
            self.$raise("No hyperstack mount point found!\nCheck your Rails routes.rb file")};
          if (self.$opts()['$[]']("transport")['$==']("pusher")) {
            
            
            $writer = ["dispatch", $send(self, 'lambda', [], ($$33 = function(data){var self = $$33.$$s == null ? this : $$33.$$s;

              
              
              if (data == null) {
                data = nil;
              };
              return self.$sync_dispatch($$($nesting, 'JSON').$parse(JSON.stringify(data)));}, $$33.$$s = self, $$33.$$arity = 1, $$33))];
            $send(self.$opts(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy((function() {if ($truthy(($ret_or_6 = self.$opts()['$[]']("client_logging")))) {
              return window.console && window.console.log;
            } else {
              return $ret_or_6
            }; return nil; })())) {
              Pusher.log = function(message) {window.console.log(message);}};
            if ($truthy(self.$opts()['$[]']("pusher_fake_js"))) {
              
              $writer = ["pusher_api", eval(self.$opts()['$[]']("pusher_fake_js"))];
              $send(self.$opts(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            } else {
              
              h = nil;
              pusher_api = nil;
              
              h = {
                encrypted: self.$opts()['$[]']("encrypted"),
                cluster: self.$opts()['$[]']("cluster"),
                authEndpoint: window.HyperstackEnginePath+'/hyperstack-pusher-auth',
                auth: {headers: {'X-CSRF-Token': self.$opts()['$[]']("form_authenticity_token")}}
              };
              pusher_api = new Pusher(self.$opts()['$[]']("key"), h)
            ;
              
              $writer = ["pusher_api", pusher_api];
              $send(self.$opts(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            return $send($$($nesting, 'Hyperstack'), 'connect', Opal.to_a(self.$opts()['$[]']("auto_connect")));
          } else if (self.$opts()['$[]']("transport")['$==']("action_cable")) {
            
            
            $writer = ["action_cable_consumer", ActionCable.createConsumer.apply(ActionCable, [].concat(Opal.to_a(self.$opts()['$[]']("action_cable_consumer_url"))))];
            $send(self.$opts(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send($$($nesting, 'Hyperstack'), 'connect', Opal.to_a(self.$opts()['$[]']("auto_connect")));
          } else if (self.$opts()['$[]']("transport")['$==']("simple_poller")) {
            
            $send(self.$opts()['$[]']("auto_connect"), 'each', [], ($$34 = function(channel){var self = $$34.$$s == null ? this : $$34.$$s;

              
              
              if (channel == null) {
                channel = nil;
              };
              return $send($$($nesting, 'IncomingBroadcast'), 'add_connection', Opal.to_a(channel));}, $$34.$$s = self, $$34.$$arity = 1, $$34));
            return $send(self, 'every', [self.$opts()['$[]']("seconds_between_poll")], ($$35 = function(){var self = $$35.$$s == null ? this : $$35.$$s;

              return self.$get_queued_data("read", nil)}, $$35.$$s = self, $$35.$$arity = 0, $$35));
          } else {
            return nil
          };
        } else {
          return nil
        };
      }, $ClientDrivers_initialize_client_drivers_on_boot$31.$$arity = 0);
      return (Opal.defs(self, '$polling_path', $ClientDrivers_polling_path$36 = function $$polling_path(to, id) {
        var self = this, s = nil;

        
        
        if (id == null) {
          id = nil;
        };
        s = "" + (window.HyperstackEnginePath) + "/hyperstack-" + (to) + "/" + (self.$opts()['$[]']("id"));
        if ($truthy(id)) {
          s = "" + (s) + "/" + (id)};
        return s;
      }, $ClientDrivers_polling_path$36.$$arity = -2), nil) && 'polling_path';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation/exception"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$collect', '$[]', '$attr_accessor', '$+', '$to_s', '$on_error', '$as_json', '$errors', '$is_a?', '$new_from_error_hash']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Mutations');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ErrorArray');

      var $nesting = [self].concat($parent_nesting), $ErrorArray_new_from_error_hash$1;

      return (Opal.defs(self, '$new_from_error_hash', $ErrorArray_new_from_error_hash$1 = function $$new_from_error_hash(errors) {
        var $$2, self = this;

        return self.$new($send(errors, 'collect', [], ($$2 = function(key, values){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (key == null) {
            key = nil;
          };
          
          if (values == null) {
            values = nil;
          };
          return $$($nesting, 'ErrorAtom').$new(key, values['$[]']("symbol"), values);}, $$2.$$s = self, $$2.$$arity = 2, $$2)))
      }, $ErrorArray_new_from_error_hash$1.$$arity = 1), nil) && 'new_from_error_hash'
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'AccessViolation');

      var $nesting = [self].concat($parent_nesting), $AccessViolation_initialize$3, $AccessViolation___hyperstack_on_error$4;

      
      self.$attr_accessor("details");
      
      Opal.def(self, '$initialize', $AccessViolation_initialize$3 = function $$initialize(message, details) {
        var $iter = $AccessViolation_initialize$3.$$p, $yield = $iter || nil, self = this;

        if ($iter) $AccessViolation_initialize$3.$$p = null;
        
        
        if (message == null) {
          message = nil;
        };
        
        if (details == null) {
          details = nil;
        };
        $send2(self, $find_super(self, 'initialize', $AccessViolation_initialize$3, false, true), 'initialize', ["" + "Hyperstack::AccessViolation" + ((function() {if ($truthy(message)) {
          return $rb_plus(":", message.$to_s())
        } else {
          return nil
        }; return nil; })())], null);
        return (self.details = details);
      }, $AccessViolation_initialize$3.$$arity = -1);
      return (Opal.def(self, '$__hyperstack_on_error', $AccessViolation___hyperstack_on_error$4 = function $$__hyperstack_on_error(operation, params, fmted_message) {
        var self = this;

        return $$($nesting, 'Hyperstack').$on_error(operation, self, params, fmted_message)
      }, $AccessViolation___hyperstack_on_error$4.$$arity = 3), nil) && '__hyperstack_on_error';
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Operation');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ValidationException');

        var $nesting = [self].concat($parent_nesting), $ValidationException_as_json$5, $ValidationException_initialize$6;

        
        
        Opal.def(self, '$as_json', $ValidationException_as_json$5 = function $$as_json($a) {
          var $post_args, $rest_arg, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          $rest_arg = $post_args;;
          return self.$errors().$as_json();
        }, $ValidationException_as_json$5.$$arity = -1);
        return (Opal.def(self, '$initialize', $ValidationException_initialize$6 = function $$initialize(errors) {
          var $iter = $ValidationException_initialize$6.$$p, $yield = $iter || nil, self = this;

          if ($iter) $ValidationException_initialize$6.$$p = null;
          
          if ($truthy(errors['$is_a?']($$$($$($nesting, 'Mutations'), 'ErrorHash')))) {
          } else {
            errors = $$$($$($nesting, 'Mutations'), 'ErrorArray').$new_from_error_hash(errors)
          };
          return $send2(self, $find_super(self, 'initialize', $ValidationException_initialize$6, false, true), 'initialize', [errors], null);
        }, $ValidationException_initialize$6.$$arity = 1), nil) && 'initialize';
      })($nesting[0], $$$($$($nesting, 'Mutations'), 'ValidationException'), $nesting)
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

Opal.modules["hyper-operation/promise"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$realized?', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$raise', '$^', '$call', '$resolve!', '$exception!', '$any?', '$each', '$reject!', '$is_a?', '$result', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$trace', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$proc', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$wait', '$map', '$reduce', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Promise');

    var $nesting = [self].concat($parent_nesting), $Promise_value$1, $Promise_error$2, $Promise_when$3, $Promise_initialize$5, $Promise_value$6, $Promise_act$ques$7, $Promise_action$8, $Promise_exception$ques$9, $Promise_realized$ques$10, $Promise_resolved$ques$11, $Promise_rejected$ques$12, $Promise_pending$ques$13, $Promise_$$14, $Promise_$lt$lt$15, $Promise_$gt$gt$16, $Promise_resolve$17, $Promise_resolve$excl$18, $Promise_reject$20, $Promise_reject$excl$21, $Promise_exception$excl$23, $Promise_then$24, $Promise_then$excl$25, $Promise_fail$26, $Promise_fail$excl$27, $Promise_always$28, $Promise_always$excl$29, $Promise_trace$30, $Promise_trace$excl$31, $Promise_there_can_be_only_one$excl$32, $Promise_inspect$33;

    self.$$prototype.value = self.$$prototype.action = self.$$prototype.exception = self.$$prototype.realized = self.$$prototype.next = self.$$prototype.delayed = self.$$prototype.error = self.$$prototype.prev = nil;
    
    Opal.defs(self, '$value', $Promise_value$1 = function $$value(value) {
      var self = this;

      return self.$new().$resolve(value)
    }, $Promise_value$1.$$arity = 1);
    Opal.defs(self, '$error', $Promise_error$2 = function $$error(value) {
      var self = this;

      return self.$new().$reject(value)
    }, $Promise_error$2.$$arity = 1);
    Opal.defs(self, '$when', $Promise_when$3 = function $$when($a) {
      var $post_args, promises, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      promises = $post_args;;
      return $$($nesting, 'When').$new(promises);
    }, $Promise_when$3.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Fail');

      var $nesting = [self].concat($parent_nesting), $Fail_initialize$4;

      
      self.$attr_reader("result");
      return (Opal.def(self, '$initialize', $Fail_initialize$4 = function $$initialize(result) {
        var self = this;

        return (self.result = result)
      }, $Fail_initialize$4.$$arity = 1), nil) && 'initialize';
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    self.$attr_reader("error", "prev", "next");
    
    Opal.def(self, '$initialize', $Promise_initialize$5 = function $$initialize(action) {
      var self = this;

      
      
      if (action == null) {
        action = $hash2([], {});
      };
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return (self.next = []);
    }, $Promise_initialize$5.$$arity = -1);
    
    Opal.def(self, '$value', $Promise_value$6 = function $$value() {
      var self = this;

      if ($truthy($$($nesting, 'Promise')['$==='](self.value))) {
        return self.value.$value()
      } else {
        return self.value
      }
    }, $Promise_value$6.$$arity = 0);
    
    Opal.def(self, '$act?', $Promise_act$ques$7 = function() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.action['$has_key?']("success")))) {
        return $ret_or_1
      } else {
        return self.action['$has_key?']("always")
      }
    }, $Promise_act$ques$7.$$arity = 0);
    
    Opal.def(self, '$action', $Promise_action$8 = function $$action() {
      var self = this;

      return self.action.$keys()
    }, $Promise_action$8.$$arity = 0);
    
    Opal.def(self, '$exception?', $Promise_exception$ques$9 = function() {
      var self = this;

      return self.exception
    }, $Promise_exception$ques$9.$$arity = 0);
    
    Opal.def(self, '$realized?', $Promise_realized$ques$10 = function() {
      var self = this;

      return self.realized['$!']()['$!']()
    }, $Promise_realized$ques$10.$$arity = 0);
    
    Opal.def(self, '$resolved?', $Promise_resolved$ques$11 = function() {
      var self = this;

      return self.realized['$==']("resolve")
    }, $Promise_resolved$ques$11.$$arity = 0);
    
    Opal.def(self, '$rejected?', $Promise_rejected$ques$12 = function() {
      var self = this;

      return self.realized['$==']("reject")
    }, $Promise_rejected$ques$12.$$arity = 0);
    
    Opal.def(self, '$pending?', $Promise_pending$ques$13 = function() {
      var self = this;

      return self['$realized?']()['$!']()
    }, $Promise_pending$ques$13.$$arity = 0);
    
    Opal.def(self, '$^', $Promise_$$14 = function(promise) {
      var self = this;

      
      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, $Promise_$$14.$$arity = 1);
    
    Opal.def(self, '$<<', $Promise_$lt$lt$15 = function(promise) {
      var self = this;

      
      self.prev = promise;
      return self;
    }, $Promise_$lt$lt$15.$$arity = 1);
    
    Opal.def(self, '$>>', $Promise_$gt$gt$16 = function(promise) {
      var self = this, $ret_or_2 = nil;

      
      self.next['$<<'](promise);
      if ($truthy(self['$exception?']())) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ($truthy(self['$resolved?']())) {
        promise.$resolve((function() {if ($truthy(self.delayed)) {
          return self.delayed['$[]'](0)
        } else {
          return self.$value()
        }; return nil; })())
      } else if ($truthy(self['$rejected?']())) {
        if ($truthy((function() {if ($truthy(($ret_or_2 = self.action['$has_key?']("failure")['$!']()))) {
          return $ret_or_2
        } else {
          return $$($nesting, 'Promise')['$===']((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
          } else {
            return self.error
          }; return nil; })())
        }; return nil; })())) {
          promise.$reject((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
          } else {
            return self.$error()
          }; return nil; })())
        } else if ($truthy(promise.$action()['$include?']("always"))) {
          promise.$reject((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
          } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    }, $Promise_$gt$gt$16.$$arity = 1);
    
    Opal.def(self, '$resolve', $Promise_resolve$17 = function $$resolve(value) {
      var self = this, block = nil, $ret_or_3 = nil, e = nil;

      
      
      if (value == null) {
        value = nil;
      };
      if ($truthy(self['$realized?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "the promise has already been realized")};
      if ($truthy($$($nesting, 'Promise')['$==='](value))) {
        return value['$<<'](self.prev)['$^'](self)};
      
      try {
        
        if ($truthy((block = (function() {if ($truthy(($ret_or_3 = self.action['$[]']("success")))) {
          return $ret_or_3
        } else {
          return self.action['$[]']("always")
        }; return nil; })()))) {
          
          self.realized = "resolve";
          value = block.$call(value);};
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      };;
      return self;
    }, $Promise_resolve$17.$$arity = -1);
    
    Opal.def(self, '$resolve!', $Promise_resolve$excl$18 = function(value) {
      var $$19, self = this;

      
      self.realized = "resolve";
      self.value = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], ($$19 = function(p){var self = $$19.$$s == null ? this : $$19.$$s;

          
          
          if (p == null) {
            p = nil;
          };
          return p.$resolve(value);}, $$19.$$s = self, $$19.$$arity = 1, $$19))
      } else {
        return (self.delayed = [value])
      };
    }, $Promise_resolve$excl$18.$$arity = 1);
    
    Opal.def(self, '$reject', $Promise_reject$20 = function $$reject(value) {
      var self = this, block = nil, $ret_or_4 = nil, e = nil;

      
      
      if (value == null) {
        value = nil;
      };
      if ($truthy(self['$realized?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "the promise has already been realized")};
      if ($truthy($$($nesting, 'Promise')['$==='](value))) {
        return value['$<<'](self.prev)['$^'](self)};
      
      try {
        
        if ($truthy((block = (function() {if ($truthy(($ret_or_4 = self.action['$[]']("failure")))) {
          return $ret_or_4
        } else {
          return self.action['$[]']("always")
        }; return nil; })()))) {
          
          self.realized = "reject";
          value = block.$call(value);};
        if ($truthy(self.action['$has_key?']("always"))) {
          self['$resolve!'](value)
        } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      };;
      return self;
    }, $Promise_reject$20.$$arity = -1);
    
    Opal.def(self, '$reject!', $Promise_reject$excl$21 = function(value) {
      var $$22, self = this;

      
      self.realized = "reject";
      self.error = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], ($$22 = function(p){var self = $$22.$$s == null ? this : $$22.$$s;

          
          
          if (p == null) {
            p = nil;
          };
          return p.$reject(value);}, $$22.$$s = self, $$22.$$arity = 1, $$22))
      } else {
        return (self.delayed = [value])
      };
    }, $Promise_reject$excl$21.$$arity = 1);
    
    Opal.def(self, '$exception!', $Promise_exception$excl$23 = function(error) {
      var self = this;

      
      if ($truthy(error['$is_a?']($$$($$($nesting, 'Promise'), 'Fail')))) {
        error = error.$result()
      } else {
        self.exception = true
      };
      return self['$reject!'](error);
    }, $Promise_exception$excl$23.$$arity = 1);
    
    Opal.def(self, '$then', $Promise_then$24 = function $$then() {
      var $iter = $Promise_then$24.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_then$24.$$p = null;
      
      
      if ($iter) $Promise_then$24.$$p = null;;
      return self['$^']($$($nesting, 'Promise').$new($hash2(["success"], {"success": block})));
    }, $Promise_then$24.$$arity = 0);
    
    Opal.def(self, '$then!', $Promise_then$excl$25 = function() {
      var $iter = $Promise_then$excl$25.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_then$excl$25.$$p = null;
      
      
      if ($iter) $Promise_then$excl$25.$$p = null;;
      self['$there_can_be_only_one!']();
      return $send(self, 'then', [], block.$to_proc());
    }, $Promise_then$excl$25.$$arity = 0);
    $alias(self, "do", "then");
    $alias(self, "do!", "then!");
    
    Opal.def(self, '$fail', $Promise_fail$26 = function $$fail() {
      var $iter = $Promise_fail$26.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_fail$26.$$p = null;
      
      
      if ($iter) $Promise_fail$26.$$p = null;;
      return self['$^']($$($nesting, 'Promise').$new($hash2(["failure"], {"failure": block})));
    }, $Promise_fail$26.$$arity = 0);
    
    Opal.def(self, '$fail!', $Promise_fail$excl$27 = function() {
      var $iter = $Promise_fail$excl$27.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_fail$excl$27.$$p = null;
      
      
      if ($iter) $Promise_fail$excl$27.$$p = null;;
      self['$there_can_be_only_one!']();
      return $send(self, 'fail', [], block.$to_proc());
    }, $Promise_fail$excl$27.$$arity = 0);
    $alias(self, "rescue", "fail");
    $alias(self, "catch", "fail");
    $alias(self, "rescue!", "fail!");
    $alias(self, "catch!", "fail!");
    
    Opal.def(self, '$always', $Promise_always$28 = function $$always() {
      var $iter = $Promise_always$28.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_always$28.$$p = null;
      
      
      if ($iter) $Promise_always$28.$$p = null;;
      return self['$^']($$($nesting, 'Promise').$new($hash2(["always"], {"always": block})));
    }, $Promise_always$28.$$arity = 0);
    
    Opal.def(self, '$always!', $Promise_always$excl$29 = function() {
      var $iter = $Promise_always$excl$29.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_always$excl$29.$$p = null;
      
      
      if ($iter) $Promise_always$excl$29.$$p = null;;
      self['$there_can_be_only_one!']();
      return $send(self, 'always', [], block.$to_proc());
    }, $Promise_always$excl$29.$$arity = 0);
    $alias(self, "finally", "always");
    $alias(self, "ensure", "always");
    $alias(self, "finally!", "always!");
    $alias(self, "ensure!", "always!");
    
    Opal.def(self, '$trace', $Promise_trace$30 = function $$trace(depth) {
      var $iter = $Promise_trace$30.$$p, block = $iter || nil, self = this;

      if ($iter) $Promise_trace$30.$$p = null;
      
      
      if ($iter) $Promise_trace$30.$$p = null;;
      
      if (depth == null) {
        depth = nil;
      };
      return self['$^']($$($nesting, 'Trace').$new(depth, block));
    }, $Promise_trace$30.$$arity = -1);
    
    Opal.def(self, '$trace!', $Promise_trace$excl$31 = function($a) {
      var $iter = $Promise_trace$excl$31.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Promise_trace$excl$31.$$p = null;
      
      
      if ($iter) $Promise_trace$excl$31.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      self['$there_can_be_only_one!']();
      return $send(self, 'trace', Opal.to_a(args), block.$to_proc());
    }, $Promise_trace$excl$31.$$arity = -1);
    
    Opal.def(self, '$there_can_be_only_one!', $Promise_there_can_be_only_one$excl$32 = function() {
      var self = this;

      if ($truthy(self.next['$any?']())) {
        return self.$raise($$($nesting, 'ArgumentError'), "a promise has already been chained")
      } else {
        return nil
      }
    }, $Promise_there_can_be_only_one$excl$32.$$arity = 0);
    
    Opal.def(self, '$inspect', $Promise_inspect$33 = function $$inspect() {
      var self = this, result = nil, $ret_or_5 = nil;

      
      result = "" + "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ($truthy(self.next['$any?']())) {
        result = $rb_plus(result, "" + " >> " + (self.next.$inspect()))};
      if ($truthy(self['$realized?']())) {
        result = $rb_plus(result, "" + ": " + ((function() {if ($truthy(($ret_or_5 = self.value))) {
          return $ret_or_5
        } else {
          return self.error
        }; return nil; })().$inspect()) + ">")
      } else {
        result = $rb_plus(result, ">")
      };
      return result;
    }, $Promise_inspect$33.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Trace');

      var $nesting = [self].concat($parent_nesting), $Trace_it$34, $Trace_initialize$35;

      
      Opal.defs(self, '$it', $Trace_it$34 = function $$it(promise) {
        var self = this, current = nil, $ret_or_6 = nil, prev = nil;

        
        current = [];
        if ($truthy((function() {if ($truthy(($ret_or_6 = promise['$act?']()))) {
          return $ret_or_6
        } else {
          return promise.$prev()['$nil?']()
        }; return nil; })())) {
          current.$push(promise.$value())};
        if ($truthy((prev = promise.$prev()))) {
          return current.$concat(self.$it(prev))
        } else {
          return current
        };
      }, $Trace_it$34.$$arity = 1);
      return (Opal.def(self, '$initialize', $Trace_initialize$35 = function $$initialize(depth, block) {
        var $$36, $iter = $Trace_initialize$35.$$p, $yield = $iter || nil, self = this;

        if ($iter) $Trace_initialize$35.$$p = null;
        
        self.depth = depth;
        return $send2(self, $find_super(self, 'initialize', $Trace_initialize$35, false, true), 'initialize', [$hash2(["success"], {"success": $send(self, 'proc', [], ($$36 = function(){var self = $$36.$$s == null ? this : $$36.$$s, trace = nil, $ret_or_7 = nil;

          
          trace = $$($nesting, 'Trace').$it(self).$reverse();
          trace.$pop();
          if ($truthy((function() {if ($truthy(($ret_or_7 = depth))) {
            return $rb_le(depth, trace.$length())
          } else {
            return $ret_or_7
          }; return nil; })())) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return $send(block, 'call', Opal.to_a(trace));}, $$36.$$s = self, $$36.$$arity = 0, $$36))})], null);
      }, $Trace_initialize$35.$$arity = 2), nil) && 'initialize';
    })($nesting[0], self, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'When');

      var $nesting = [self].concat($parent_nesting), $When_initialize$37, $When_each$39, $When_collect$41, $When_inject$43, $When_wait$45, $When_$gt$gt$47, $When_try$49;

      self.$$prototype.wait = nil;
      
      
      Opal.def(self, '$initialize', $When_initialize$37 = function $$initialize(promises) {
        var $$38, $iter = $When_initialize$37.$$p, $yield = $iter || nil, self = this;

        if ($iter) $When_initialize$37.$$p = null;
        
        
        if (promises == null) {
          promises = [];
        };
        $send2(self, $find_super(self, 'initialize', $When_initialize$37, false, true), 'initialize', [], null);
        self.wait = [];
        return $send(promises, 'each', [], ($$38 = function(promise){var self = $$38.$$s == null ? this : $$38.$$s;

          
          
          if (promise == null) {
            promise = nil;
          };
          return self.$wait(promise);}, $$38.$$s = self, $$38.$$arity = 1, $$38));
      }, $When_initialize$37.$$arity = -1);
      
      Opal.def(self, '$each', $When_each$39 = function $$each() {
        var $iter = $When_each$39.$$p, block = $iter || nil, $$40, self = this;

        if ($iter) $When_each$39.$$p = null;
        
        
        if ($iter) $When_each$39.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], ($$40 = function(values){var self = $$40.$$s == null ? this : $$40.$$s;

          
          
          if (values == null) {
            values = nil;
          };
          return $send(values, 'each', [], block.$to_proc());}, $$40.$$s = self, $$40.$$arity = 1, $$40));
      }, $When_each$39.$$arity = 0);
      
      Opal.def(self, '$collect', $When_collect$41 = function $$collect() {
        var $iter = $When_collect$41.$$p, block = $iter || nil, $$42, self = this;

        if ($iter) $When_collect$41.$$p = null;
        
        
        if ($iter) $When_collect$41.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], ($$42 = function(values){var self = $$42.$$s == null ? this : $$42.$$s;

          
          
          if (values == null) {
            values = nil;
          };
          return $$($nesting, 'When').$new($send(values, 'map', [], block.$to_proc()));}, $$42.$$s = self, $$42.$$arity = 1, $$42));
      }, $When_collect$41.$$arity = 0);
      
      Opal.def(self, '$inject', $When_inject$43 = function $$inject($a) {
        var $iter = $When_inject$43.$$p, block = $iter || nil, $post_args, args, $$44, self = this;

        if ($iter) $When_inject$43.$$p = null;
        
        
        if ($iter) $When_inject$43.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return $send(self, 'then', [], ($$44 = function(values){var self = $$44.$$s == null ? this : $$44.$$s;

          
          
          if (values == null) {
            values = nil;
          };
          return $send(values, 'reduce', Opal.to_a(args), block.$to_proc());}, $$44.$$s = self, $$44.$$arity = 1, $$44));
      }, $When_inject$43.$$arity = -1);
      $alias(self, "map", "collect");
      $alias(self, "reduce", "inject");
      
      Opal.def(self, '$wait', $When_wait$45 = function $$wait(promise) {
        var $$46, self = this;

        
        if ($truthy($$($nesting, 'Promise')['$==='](promise))) {
        } else {
          promise = $$($nesting, 'Promise').$value(promise)
        };
        if ($truthy(promise['$act?']())) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        $send(promise, 'always', [], ($$46 = function(){var self = $$46.$$s == null ? this : $$46.$$s;
          if (self.next == null) self.next = nil;

          if ($truthy(self.next['$any?']())) {
            return self.$try()
          } else {
            return nil
          }}, $$46.$$s = self, $$46.$$arity = 0, $$46));
        return self;
      }, $When_wait$45.$$arity = 1);
      $alias(self, "and", "wait");
      
      Opal.def(self, '$>>', $When_$gt$gt$47 = function($a) {
        var $post_args, $rest_arg, $$48, $iter = $When_$gt$gt$47.$$p, $yield = $iter || nil, self = this;

        if ($iter) $When_$gt$gt$47.$$p = null;
        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        $rest_arg = $post_args;;
        return $send($send2(self, $find_super(self, '>>', $When_$gt$gt$47, false, true), '>>', Opal.to_a($rest_arg), $iter), 'tap', [], ($$48 = function(){var self = $$48.$$s == null ? this : $$48.$$s;

          return self.$try()}, $$48.$$s = self, $$48.$$arity = 0, $$48));
      }, $When_$gt$gt$47.$$arity = -1);
      return (Opal.def(self, '$try', $When_try$49 = function() {
        var self = this, promise = nil;

        if ($truthy($send(self.wait, 'all?', [], "realized?".$to_proc()))) {
          if ($truthy((promise = $send(self.wait, 'find', [], "rejected?".$to_proc())))) {
            return self.$reject(promise.$error())
          } else {
            return self.$resolve($send(self.wait, 'map', [], "value".$to_proc()))
          }
        } else {
          return nil
        }
      }, $When_try$49.$$arity = 0), nil) && 'try';
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting)
};

Opal.modules["hyper-operation/railway"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Operation');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation/api"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$is_a?', '$raise', '$new', '$tap', '$split', '$to_s', '$pop', '$inject', '$[]', '$to_sym', '$[]=', '$-', '$!', '$nil?', '$abort!', '$succeed!', '$_Railway', '$class', '$_run', '$instance_eval', '$process_params', '$process_validations', '$run', '$rejected?', '$dispatch', '$result', '$then', '$to_proc', '$fail', '$add_param', '$get_name_and_opts', '$merge', '$each', '$add_validation', '$add_error', '$add_step', '$add_failed', '$add_async', '$add_receiver', '$singleton_class', '$define_singleton_method', '$set_var', '$superclass', '$==', '$instance_variable_get', '$instance_variable_set', '$dup']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Operation');

      var $nesting = [self].concat($parent_nesting), $Operation_add_error$1, $Operation_has_errors$ques$4, $Operation_params$5, $Operation_abort$excl$6, $Operation_succeed$excl$7, $Operation_initialize$8;

      self.$$prototype.errors = self.$$prototype.params = nil;
      
      
      Opal.def(self, '$add_error', $Operation_add_error$1 = function $$add_error(key, kind, message) {
        var $$2, self = this, $ret_or_1 = nil;

        
        
        if (message == null) {
          message = nil;
        };
        if ($truthy(kind['$is_a?']($$($nesting, 'Symbol')))) {
        } else {
          self.$raise($$($nesting, 'ArgumentError').$new("Invalid kind"))
        };
        self.errors = (function() {if ($truthy(($ret_or_1 = self.errors))) {
          return $ret_or_1
        } else {
          return $$$($$($nesting, 'Mutations'), 'ErrorHash').$new()
        }; return nil; })();
        return $send(self.errors, 'tap', [], ($$2 = function(errs){var self = $$2.$$s == null ? this : $$2.$$s, $$3, path = nil, last = nil, inner = nil, $writer = nil;

          
          
          if (errs == null) {
            errs = nil;
          };
          path = key.$to_s().$split(".");
          last = path.$pop();
          inner = $send(path, 'inject', [errs], ($$3 = function(cur_errors, part){var self = $$3.$$s == null ? this : $$3.$$s, $ret_or_2 = nil, $writer = nil;

            
            
            if (cur_errors == null) {
              cur_errors = nil;
            };
            
            if (part == null) {
              part = nil;
            };
            if ($truthy(($ret_or_2 = cur_errors['$[]'](part.$to_sym())))) {
              return $ret_or_2
            } else {
              
              $writer = [part.$to_sym(), $$$($$($nesting, 'Mutations'), 'ErrorHash').$new()];
              $send(cur_errors, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            };}, $$3.$$s = self, $$3.$$arity = 2, $$3));
          
          $writer = [last, $$$($$($nesting, 'Mutations'), 'ErrorAtom').$new(key, kind, $hash2(["message"], {"message": message}))];
          $send(inner, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, $$2.$$s = self, $$2.$$arity = 1, $$2));
      }, $Operation_add_error$1.$$arity = -3);
      
      Opal.def(self, '$has_errors?', $Operation_has_errors$ques$4 = function() {
        var self = this;

        return self.errors['$nil?']()['$!']()
      }, $Operation_has_errors$ques$4.$$arity = 0);
      
      Opal.def(self, '$params', $Operation_params$5 = function $$params() {
        var self = this;

        return self.params
      }, $Operation_params$5.$$arity = 0);
      
      Opal.def(self, '$abort!', $Operation_abort$excl$6 = function(arg) {
        var self = this;

        
        
        if (arg == null) {
          arg = nil;
        };
        return $$($nesting, 'Railway')['$abort!'](arg);
      }, $Operation_abort$excl$6.$$arity = -1);
      
      Opal.def(self, '$succeed!', $Operation_succeed$excl$7 = function(arg) {
        var self = this;

        
        
        if (arg == null) {
          arg = nil;
        };
        return $$($nesting, 'Railway')['$succeed!'](arg);
      }, $Operation_succeed$excl$7.$$arity = -1);
      
      Opal.def(self, '$initialize', $Operation_initialize$8 = function $$initialize() {
        var self = this;

        return (self._railway = self.$class().$_Railway().$new(self))
      }, $Operation_initialize$8.$$arity = 0);
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $run$9, $_run$10, $then$12, $fail$13, $param$14, $inbound$15, $outbound$16, $validate$18, $add_error$19, $step$20, $failed$21, $async$22, $on_dispatch$23, $_Railway$24, $inherited$25;

        
        
        Opal.def(self, '$run', $run$9 = function $$run($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self, '_run', Opal.to_a(args));
        }, $run$9.$$arity = -1);
        
        Opal.def(self, '$_run', $_run$10 = function $$_run($a) {
          var $post_args, args, $$11, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$new(), 'instance_eval', [], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s, dispatch_result = nil;
            if (self._railway == null) self._railway = nil;

            
            self._railway.$process_params(args);
            self._railway.$process_validations();
            self._railway.$run();
            if ($truthy((dispatch_result = self._railway.$dispatch())['$rejected?']())) {
              return dispatch_result
            } else {
              return self._railway.$result()
            };}, $$11.$$s = self, $$11.$$arity = 0, $$11));
        }, $_run$10.$$arity = -1);
        
        Opal.def(self, '$then', $then$12 = function $$then($a) {
          var $iter = $then$12.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $then$12.$$p = null;
          
          
          if ($iter) $then$12.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send($send(self, 'run', Opal.to_a(args)), 'then', [], block.$to_proc());
        }, $then$12.$$arity = -1);
        
        Opal.def(self, '$fail', $fail$13 = function $$fail($a) {
          var $iter = $fail$13.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $fail$13.$$p = null;
          
          
          if ($iter) $fail$13.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send($send(self, 'run', Opal.to_a(args)), 'fail', [], block.$to_proc());
        }, $fail$13.$$arity = -1);
        
        Opal.def(self, '$param', $param$14 = function $$param($a) {
          var $iter = $param$14.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $param$14.$$p = null;
          
          
          if ($iter) $param$14.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$_Railway(), 'add_param', Opal.to_a(args), block.$to_proc());
        }, $param$14.$$arity = -1);
        
        Opal.def(self, '$inbound', $inbound$15 = function $$inbound($a) {
          var $iter = $inbound$15.$$p, block = $iter || nil, $post_args, args, $b, $c, self = this, name = nil, opts = nil;

          if ($iter) $inbound$15.$$p = null;
          
          
          if ($iter) $inbound$15.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          $c = $send($$($nesting, 'ParamsWrapper'), 'get_name_and_opts', Opal.to_a(args)), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (opts = ($b[1] == null ? nil : $b[1])), $c;
          return $send(self.$_Railway(), 'add_param', [name, opts.$merge($hash2(["inbound"], {"inbound": "true"}))], block.$to_proc());
        }, $inbound$15.$$arity = -1);
        
        Opal.def(self, '$outbound', $outbound$16 = function $$outbound($a) {
          var $post_args, keys, $$17, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          keys = $post_args;;
          return $send(keys, 'each', [], ($$17 = function(key){var self = $$17.$$s == null ? this : $$17.$$s;

            
            
            if (key == null) {
              key = nil;
            };
            return self.$_Railway().$add_param($hash(key, nil, "type", "outbound"));}, $$17.$$s = self, $$17.$$arity = 1, $$17));
        }, $outbound$16.$$arity = -1);
        
        Opal.def(self, '$validate', $validate$18 = function $$validate($a) {
          var $iter = $validate$18.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $validate$18.$$p = null;
          
          
          if ($iter) $validate$18.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$_Railway(), 'add_validation', Opal.to_a(args), block.$to_proc());
        }, $validate$18.$$arity = -1);
        
        Opal.def(self, '$add_error', $add_error$19 = function $$add_error(param, symbol, message, $a) {
          var $iter = $add_error$19.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $add_error$19.$$p = null;
          
          
          if ($iter) $add_error$19.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 3, arguments.length);
          
          args = $post_args;;
          return $send(self.$_Railway(), 'add_error', [param, symbol, message].concat(Opal.to_a(args)), block.$to_proc());
        }, $add_error$19.$$arity = -4);
        
        Opal.def(self, '$step', $step$20 = function $$step($a) {
          var $iter = $step$20.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $step$20.$$p = null;
          
          
          if ($iter) $step$20.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$_Railway(), 'add_step', Opal.to_a(args), block.$to_proc());
        }, $step$20.$$arity = -1);
        
        Opal.def(self, '$failed', $failed$21 = function $$failed($a) {
          var $iter = $failed$21.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $failed$21.$$p = null;
          
          
          if ($iter) $failed$21.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$_Railway(), 'add_failed', Opal.to_a(args), block.$to_proc());
        }, $failed$21.$$arity = -1);
        
        Opal.def(self, '$async', $async$22 = function $$async($a) {
          var $iter = $async$22.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $async$22.$$p = null;
          
          
          if ($iter) $async$22.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$_Railway(), 'add_async', Opal.to_a(args), block.$to_proc());
        }, $async$22.$$arity = -1);
        
        Opal.def(self, '$on_dispatch', $on_dispatch$23 = function $$on_dispatch() {
          var $iter = $on_dispatch$23.$$p, block = $iter || nil, self = this;

          if ($iter) $on_dispatch$23.$$p = null;
          
          
          if ($iter) $on_dispatch$23.$$p = null;;
          return $send(self.$_Railway(), 'add_receiver', [], block.$to_proc());
        }, $on_dispatch$23.$$arity = 0);
        
        Opal.def(self, '$_Railway', $_Railway$24 = function $$_Railway() {
          var self = this;

          return self.$singleton_class().$_Railway()
        }, $_Railway$24.$$arity = 0);
        return (Opal.def(self, '$inherited', $inherited$25 = function $$inherited(child) {
          var $$26, $$27, $$28, $$30, $$31, $$32, $$33, $$34, $$35, $iter = $inherited$25.$$p, $yield = $iter || nil, self = this;

          if ($iter) $inherited$25.$$p = null;
          
          $send(child.$singleton_class(), 'define_singleton_method', ["param"], ($$26 = function($a){var self = $$26.$$s == null ? this : $$26.$$s, $iter = $$26.$$p, block = $iter || nil, $post_args, args;

            
            
            if ($iter) $$26.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self.$_Railway(), 'add_param', Opal.to_a(args), block.$to_proc());}, $$26.$$s = self, $$26.$$arity = -1, $$26));
          $send(child.$singleton_class(), 'define_singleton_method', ["inbound"], ($$27 = function($a){var self = $$27.$$s == null ? this : $$27.$$s, $iter = $$27.$$p, block = $iter || nil, $post_args, args, $b, $c, name = nil, opts = nil;

            
            
            if ($iter) $$27.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $c = $send($$($nesting, 'ParamsWrapper'), 'get_name_and_opts', Opal.to_a(args)), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (opts = ($b[1] == null ? nil : $b[1])), $c;
            return $send(self.$_Railway(), 'add_param', [name, opts.$merge($hash2(["inbound"], {"inbound": "true"}))], block.$to_proc());}, $$27.$$s = self, $$27.$$arity = -1, $$27));
          $send(child.$singleton_class(), 'define_singleton_method', ["outbound"], ($$28 = function($a){var self = $$28.$$s == null ? this : $$28.$$s, $post_args, keys, $$29;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            keys = $post_args;;
            return $send(keys, 'each', [], ($$29 = function(key){var self = $$29.$$s == null ? this : $$29.$$s;

              
              
              if (key == null) {
                key = nil;
              };
              return self.$_Railway().$add_param($hash(key, nil, "type", "outbound"));}, $$29.$$s = self, $$29.$$arity = 1, $$29));}, $$28.$$s = self, $$28.$$arity = -1, $$28));
          $send(child.$singleton_class(), 'define_singleton_method', ["validate"], ($$30 = function($a){var self = $$30.$$s == null ? this : $$30.$$s, $iter = $$30.$$p, block = $iter || nil, $post_args, args;

            
            
            if ($iter) $$30.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self.$_Railway(), 'add_validation', Opal.to_a(args), block.$to_proc());}, $$30.$$s = self, $$30.$$arity = -1, $$30));
          $send(child.$singleton_class(), 'define_singleton_method', ["add_error"], ($$31 = function(param, symbol, message, $a){var self = $$31.$$s == null ? this : $$31.$$s, $iter = $$31.$$p, block = $iter || nil, $post_args, args;

            
            
            if ($iter) $$31.$$p = null;;
            
            if (param == null) {
              param = nil;
            };
            
            if (symbol == null) {
              symbol = nil;
            };
            
            if (message == null) {
              message = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 3, arguments.length);
            
            args = $post_args;;
            return $send(self.$_Railway(), 'add_error', [param, symbol, message].concat(Opal.to_a(args)), block.$to_proc());}, $$31.$$s = self, $$31.$$arity = -4, $$31));
          $send(child.$singleton_class(), 'define_singleton_method', ["step"], ($$32 = function($a){var self = $$32.$$s == null ? this : $$32.$$s, $iter = $$32.$$p, block = $iter || nil, $post_args, args;

            
            
            if ($iter) $$32.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self.$_Railway(), 'add_step', [$hash2(["scope"], {"scope": "class"})].concat(Opal.to_a(args)), block.$to_proc());}, $$32.$$s = self, $$32.$$arity = -1, $$32));
          $send(child.$singleton_class(), 'define_singleton_method', ["failed"], ($$33 = function($a){var self = $$33.$$s == null ? this : $$33.$$s, $iter = $$33.$$p, block = $iter || nil, $post_args, args;

            
            
            if ($iter) $$33.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self.$_Railway(), 'add_failed', [$hash2(["scope"], {"scope": "class"})].concat(Opal.to_a(args)), block.$to_proc());}, $$33.$$s = self, $$33.$$arity = -1, $$33));
          $send(child.$singleton_class(), 'define_singleton_method', ["async"], ($$34 = function($a){var self = $$34.$$s == null ? this : $$34.$$s, $iter = $$34.$$p, block = $iter || nil, $post_args, args;

            
            
            if ($iter) $$34.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self.$_Railway(), 'add_async', [$hash2(["scope"], {"scope": "class"})].concat(Opal.to_a(args)), block.$to_proc());}, $$34.$$s = self, $$34.$$arity = -1, $$34));
          return $send(child.$singleton_class(), 'define_singleton_method', ["_Railway"], ($$35 = function(){var self = $$35.$$s == null ? this : $$35.$$s, $$36;

            return $send($$$($$($nesting, 'Hyperstack'), 'Context'), 'set_var', [self, "@_railway"], ($$36 = function(){var self = $$36.$$s == null ? this : $$36.$$s, $$37, my_super = nil, $ret_or_3 = nil;

              
              my_super = (function() {if ($truthy(($ret_or_3 = self.$superclass()))) {
                return $ret_or_3
              } else {
                return (self.$$singleton_of).$superclass().$singleton_class()
              }; return nil; })();
              if (my_super['$==']($$($nesting, 'Operation').$singleton_class())) {
                return $$($nesting, 'Class').$new($$($nesting, 'Railway'))
              } else {
                return $send($$($nesting, 'Class').$new(my_super.$_Railway()), 'tap', [], ($$37 = function(wrapper){var self = $$37.$$s == null ? this : $$37.$$s, $$38;

                  
                  
                  if (wrapper == null) {
                    wrapper = nil;
                  };
                  return $send(["@validations", "@tracks", "@receivers"], 'each', [], ($$38 = function(var$){var self = $$38.$$s == null ? this : $$38.$$s, value = nil, $ret_or_4 = nil;

                    
                    
                    if (var$ == null) {
                      var$ = nil;
                    };
                    value = my_super.$_Railway().$instance_variable_get(var$);
                    return wrapper.$instance_variable_set(var$, (function() {if ($truthy(($ret_or_4 = value))) {
                      return value.$dup()
                    } else {
                      return $ret_or_4
                    }; return nil; })());}, $$38.$$s = self, $$38.$$arity = 1, $$38));}, $$37.$$s = self, $$37.$$arity = 1, $$37))
              };}, $$36.$$s = self, $$36.$$arity = 0, $$36))}, $$35.$$s = self, $$35.$$arity = 0, $$35));
        }, $inherited$25.$$arity = 1), nil) && 'inherited';
      })(Opal.get_singleton_class(self), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Railway');

        var $nesting = [self].concat($parent_nesting), $Railway_initialize$39;

        return (Opal.def(self, '$initialize', $Railway_initialize$39 = function $$initialize(operation) {
          var self = this;

          return (self.operation = operation)
        }, $Railway_initialize$39.$$arity = 1), nil) && 'initialize'
      })($nesting[0], null, $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation/railway/dispatcher"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $lambda = Opal.lambda;

  Opal.add_stubs(['$receivers', '$class', '$set_var', '$call', '$to_proc', '$define_singleton_method', '$delete', '$<<', '$then', '$result', '$each', '$dispatch_params', '$params_wrapper', '$params']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Operation');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Railway');

        var $nesting = [self].concat($parent_nesting), $Railway_receivers$1, $Railway_dispatch$7;

        
        
        Opal.def(self, '$receivers', $Railway_receivers$1 = function $$receivers() {
          var self = this;

          return self.$class().$receivers()
        }, $Railway_receivers$1.$$arity = 0);
        (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $receivers$2, $add_receiver$4;

          
          
          Opal.def(self, '$receivers', $receivers$2 = function $$receivers() {
            var $$3, self = this;

            return $send($$$($$($nesting, 'Hyperstack'), 'Context'), 'set_var', [self, "@receivers", $hash2(["force"], {"force": true})], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;

              return []}, $$3.$$s = self, $$3.$$arity = 0, $$3))
          }, $receivers$2.$$arity = 0);
          return (Opal.def(self, '$add_receiver', $add_receiver$4 = function $$add_receiver() {
            var $iter = $add_receiver$4.$$p, block = $iter || nil, $$5, $$6, self = this, cloned_block = nil, operation = nil;

            if ($iter) $add_receiver$4.$$p = null;
            
            
            if ($iter) $add_receiver$4.$$p = null;;
            cloned_block = $lambda(($$5 = function($a){var self = $$5.$$s == null ? this : $$5.$$s, $iter = $$5.$$p, b = $iter || nil, $post_args, args;

              
              
              if ($iter) $$5.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              return $send(block, 'call', Opal.to_a(args), b.$to_proc());}, $$5.$$s = self, $$5.$$arity = -1, $$5));
            operation = self;
            $send(cloned_block, 'define_singleton_method', ["unmount"], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;

              return operation.$receivers().$delete(cloned_block)}, $$6.$$s = self, $$6.$$arity = 0, $$6));
            self.$receivers()['$<<'](cloned_block);
            return cloned_block;
          }, $add_receiver$4.$$arity = 0), nil) && 'add_receiver';
        })(Opal.get_singleton_class(self), $nesting);
        return (Opal.def(self, '$dispatch', $Railway_dispatch$7 = function $$dispatch() {
          var $$8, self = this;

          return $send(self.$result(), 'then', [], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s, $$9;

            return $send(self.$receivers(), 'each', [], ($$9 = function(receiver){var self = $$9.$$s == null ? this : $$9.$$s;
              if (self.operation == null) self.operation = nil;

              
              
              if (receiver == null) {
                receiver = nil;
              };
              return receiver.$call(self.$class().$params_wrapper().$dispatch_params(self.operation.$params()), self.operation);}, $$9.$$s = self, $$9.$$arity = 1, $$9))}, $$8.$$s = self, $$8.$$arity = 0, $$8))
        }, $Railway_dispatch$7.$$arity = 0), nil) && 'dispatch';
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation/railway/params_wrapper"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$dup', '$each', '$inbound_params', '$class', '$delete', '$with_indifferent_access', '$to_s', '$to_h', '$inject', '$respond_to?', '$raise', '$new', '$merge!', '$combine_arg_array', '$filter', '$hash_filter', '$instance_eval', '$translate_args', '$to_proc', '$<<', '$key?', '$optional', '$send', '$required', '$define_method', '$[]', '$method_missing', '$[]=', '$-', '$lock', '$get_name_and_opts', '$is_a?', '$>', '$count', '$first', '$==', '$proc', '$duck', '$underscore', '$last', '$process_params', '$params_wrapper', '$add_param', '$set_var', '$superclass', '$tap', '$instance_variable_set']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Operation');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ParamsWrapper');

        var $nesting = [self].concat($parent_nesting), $ParamsWrapper_initialize$1, $ParamsWrapper_lock$2, $ParamsWrapper_to_h$3, $ParamsWrapper_to_s$5;

        self.$$prototype.inputs = self.$$prototype.locked = nil;
        
        
        Opal.def(self, '$initialize', $ParamsWrapper_initialize$1 = function $$initialize(inputs) {
          var self = this;

          return (self.inputs = inputs)
        }, $ParamsWrapper_initialize$1.$$arity = 1);
        
        Opal.def(self, '$lock', $ParamsWrapper_lock$2 = function $$lock() {
          var self = this;

          
          self.locked = true;
          return self;
        }, $ParamsWrapper_lock$2.$$arity = 0);
        
        Opal.def(self, '$to_h', $ParamsWrapper_to_h$3 = function $$to_h() {
          var $$4, self = this, inputs = nil;

          
          inputs = self.inputs;
          if ($truthy(self.locked)) {
            
            inputs = inputs.$dup();
            $send(self.$class().$inbound_params(), 'each', [], ($$4 = function(name){var self = $$4.$$s == null ? this : $$4.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              return inputs.$delete("" + (name));}, $$4.$$s = self, $$4.$$arity = 1, $$4));};
          return inputs.$with_indifferent_access();
        }, $ParamsWrapper_to_h$3.$$arity = 0);
        
        Opal.def(self, '$to_s', $ParamsWrapper_to_s$5 = function $$to_s() {
          var self = this;

          return self.$to_h().$to_s()
        }, $ParamsWrapper_to_s$5.$$arity = 0);
        return (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $combine_arg_array$6, $process_params$8, $add_param$10, $dispatch_params$15, $hash_filter$18, $inbound_params$19, $translate_args$20, $get_name_and_opts$23;

          
          
          Opal.def(self, '$combine_arg_array', $combine_arg_array$6 = function $$combine_arg_array(args) {
            var $$7, self = this, hash = nil;

            return (hash = $send(args, 'inject', [$hash2([], {}).$with_indifferent_access()], ($$7 = function(h, arg){var self = $$7.$$s == null ? this : $$7.$$s;

              
              
              if (h == null) {
                h = nil;
              };
              
              if (arg == null) {
                arg = nil;
              };
              if ($truthy(arg['$respond_to?']("to_h"))) {
              } else {
                self.$raise($$($nesting, 'ArgumentError').$new("All arguments must be hashes"))
              };
              return h['$merge!'](arg.$to_h());}, $$7.$$s = self, $$7.$$arity = 2, $$7)))
          }, $combine_arg_array$6.$$arity = 1);
          
          Opal.def(self, '$process_params', $process_params$8 = function $$process_params(operation, args) {
            var $a, $b, $$9, self = this, raw_inputs = nil, inputs = nil, errors = nil, params_wrapper = nil;

            
            raw_inputs = self.$combine_arg_array(args);
            $b = self.$hash_filter().$filter(raw_inputs), $a = Opal.to_ary($b), (inputs = ($a[0] == null ? nil : $a[0])), (errors = ($a[1] == null ? nil : $a[1])), $b;
            params_wrapper = self.$new(inputs);
            return $send(operation, 'instance_eval', [], ($$9 = function(){var self = $$9.$$s == null ? this : $$9.$$s, $c;

              return $c = [raw_inputs, params_wrapper, errors], (self.raw_inputs = $c[0]), (self.params = $c[1]), (self.errors = $c[2]), $c}, $$9.$$s = self, $$9.$$arity = 0, $$9));
          }, $process_params$8.$$arity = 2);
          
          Opal.def(self, '$add_param', $add_param$10 = function $$add_param($a) {
            var $iter = $add_param$10.$$p, block = $iter || nil, $post_args, args, $b, $c, $$11, $$12, $$13, $$14, self = this, type_method = nil, name = nil, opts = nil;

            if ($iter) $add_param$10.$$p = null;
            
            
            if ($iter) $add_param$10.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $c = $send(self, 'translate_args', Opal.to_a(args), block.$to_proc()), $b = Opal.to_ary($c), (type_method = ($b[0] == null ? nil : $b[0])), (name = ($b[1] == null ? nil : $b[1])), (opts = ($b[2] == null ? nil : $b[2])), (block = ($b[3] == null ? nil : $b[3])), $c;
            if ($truthy(opts.$delete("inbound"))) {
              self.$inbound_params()['$<<']("" + (name))};
            if ($truthy(opts['$key?']("default"))) {
              $send(self.$hash_filter(), 'optional', [], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s;

                return $send(self, 'send', [type_method, name, opts], block.$to_proc())}, $$11.$$s = self, $$11.$$arity = 0, $$11))
            } else {
              $send(self.$hash_filter(), 'required', [], ($$12 = function(){var self = $$12.$$s == null ? this : $$12.$$s;

                return $send(self, 'send', [type_method, name, opts], block.$to_proc())}, $$12.$$s = self, $$12.$$arity = 0, $$12))
            };
            $send(self, 'define_method', [name], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s;
              if (self.inputs == null) self.inputs = nil;

              return self.inputs['$[]'](name)}, $$13.$$s = self, $$13.$$arity = 0, $$13));
            return $send(self, 'define_method', ["" + (name) + "="], ($$14 = function(x){var self = $$14.$$s == null ? this : $$14.$$s, $writer = nil;
              if (self.locked == null) self.locked = nil;
              if (self.inputs == null) self.inputs = nil;

              
              
              if (x == null) {
                x = nil;
              };
              if ($truthy(self.locked)) {
                self.$method_missing("" + (name) + "=", x)};
              
              $writer = [name, x];
              $send(self.inputs, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          }, $add_param$10.$$arity = -1);
          
          Opal.def(self, '$dispatch_params', $dispatch_params$15 = function $$dispatch_params(params, hashes) {
            var $$16, self = this;

            
            
            if (hashes == null) {
              hashes = $hash2([], {});
            };
            params = params.$dup();
            $send(hashes, 'each', [], ($$16 = function(hash){var self = $$16.$$s == null ? this : $$16.$$s, $$17;

              
              
              if (hash == null) {
                hash = nil;
              };
              return $send(hash, 'each', [], ($$17 = function(k, v){var self = $$17.$$s == null ? this : $$17.$$s;

                
                
                if (k == null) {
                  k = nil;
                };
                
                if (v == null) {
                  v = nil;
                };
                return params.$send("" + (k) + "=", v);}, $$17.$$s = self, $$17.$$arity = 2, $$17));}, $$16.$$s = self, $$16.$$arity = 1, $$16));
            return params.$lock();
          }, $dispatch_params$15.$$arity = -2);
          
          Opal.def(self, '$hash_filter', $hash_filter$18 = function $$hash_filter() {
            var self = this, $ret_or_1 = nil;
            if (self.hash_filter == null) self.hash_filter = nil;

            return (self.hash_filter = (function() {if ($truthy(($ret_or_1 = self.hash_filter))) {
              return $ret_or_1
            } else {
              return $$$($$($nesting, 'Mutations'), 'HashFilter').$new()
            }; return nil; })())
          }, $hash_filter$18.$$arity = 0);
          
          Opal.def(self, '$inbound_params', $inbound_params$19 = function $$inbound_params() {
            var self = this, $ret_or_2 = nil;
            if (self.inbound_params == null) self.inbound_params = nil;

            return (self.inbound_params = (function() {if ($truthy(($ret_or_2 = self.inbound_params))) {
              return $ret_or_2
            } else {
              return $$($nesting, 'Set').$new()
            }; return nil; })())
          }, $inbound_params$19.$$arity = 0);
          
          Opal.def(self, '$translate_args', $translate_args$20 = function $$translate_args($a) {
            var $iter = $translate_args$20.$$p, block = $iter || nil, $post_args, args, $b, $c, $$21, $$22, self = this, name = nil, opts = nil, type_method = nil, $writer = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil;

            if ($iter) $translate_args$20.$$p = null;
            
            
            if ($iter) $translate_args$20.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $c = $send(self, 'get_name_and_opts', Opal.to_a(args)), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (opts = ($b[1] == null ? nil : $b[1])), $c;
            if ($truthy(opts['$key?']("type"))) {
              
              type_method = opts.$delete("type");
              if ($truthy(type_method['$is_a?']($$($nesting, 'Array')))) {
                
                if ($truthy($rb_gt(type_method.$count(), 0))) {
                  
                  $writer = ["class", type_method.$first()];
                  $send(opts, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};
                type_method = $$($nesting, 'Array');
              } else if ($truthy((function() {if ($truthy(($ret_or_3 = type_method['$is_a?']($$($nesting, 'Hash'))))) {
                return $ret_or_3
              } else {
                return type_method['$==']($$($nesting, 'Hash'))
              }; return nil; })())) {
                
                type_method = $$($nesting, 'Hash');
                block = (function() {if ($truthy(($ret_or_4 = block))) {
                  return $ret_or_4
                } else {
                  return $send(self, 'proc', [], ($$21 = function(){var self = $$21.$$s == null ? this : $$21.$$s;

                    return self.$duck("*")}, $$21.$$s = self, $$21.$$arity = 0, $$21))
                }; return nil; })();};
              type_method = type_method.$to_s().$underscore();
            } else {
              type_method = "duck"
            };
            return [type_method, name, opts, (function() {if ($truthy(($ret_or_5 = block))) {
              return $ret_or_5
            } else {
              return $send(self, 'proc', [], ($$22 = function(){var self = $$22.$$s == null ? this : $$22.$$s;

                return nil}, $$22.$$s = self, $$22.$$arity = 0, $$22))
            }; return nil; })()];
          }, $translate_args$20.$$arity = -1);
          return (Opal.def(self, '$get_name_and_opts', $get_name_and_opts$23 = function $$get_name_and_opts($a) {
            var $post_args, args, self = this, opts = nil, name = nil, $writer = nil, $ret_or_6 = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            if ($truthy(args['$[]'](0)['$is_a?']($$($nesting, 'Hash')))) {
              
              opts = args['$[]'](0);
              name = opts.$first().$first();
              
              $writer = ["default", opts.$first().$last()];
              $send(opts, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              opts.$delete(name);
            } else {
              
              name = args['$[]'](0);
              opts = (function() {if ($truthy(($ret_or_6 = args['$[]'](1)))) {
                return $ret_or_6
              } else {
                return $hash2([], {})
              }; return nil; })();
            };
            return [name, opts];
          }, $get_name_and_opts$23.$$arity = -1), nil) && 'get_name_and_opts';
        })(Opal.get_singleton_class(self), $nesting);
      })($nesting[0], null, $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Railway');

        var $nesting = [self].concat($parent_nesting), $Railway_process_params$24, $Railway_add_param$25, $Railway_params_wrapper$26;

        self.$$prototype.operation = nil;
        
        
        Opal.def(self, '$process_params', $Railway_process_params$24 = function $$process_params(args) {
          var self = this;

          return self.$class().$params_wrapper().$process_params(self.operation, args)
        }, $Railway_process_params$24.$$arity = 1);
        Opal.defs(self, '$add_param', $Railway_add_param$25 = function $$add_param($a) {
          var $iter = $Railway_add_param$25.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $Railway_add_param$25.$$p = null;
          
          
          if ($iter) $Railway_add_param$25.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$params_wrapper(), 'add_param', Opal.to_a(args), block.$to_proc());
        }, $Railway_add_param$25.$$arity = -1);
        return (Opal.defs(self, '$params_wrapper', $Railway_params_wrapper$26 = function $$params_wrapper() {
          var $$27, self = this;

          return $send($$$($$($nesting, 'Hyperstack'), 'Context'), 'set_var', [self, "@params_wrapper"], ($$27 = function(){var self = $$27.$$s == null ? this : $$27.$$s, $$28;

            if ($$($nesting, 'Railway')['$=='](self.$superclass())) {
              return $$($nesting, 'Class').$new($$($nesting, 'ParamsWrapper'))
            } else {
              return $send($$($nesting, 'Class').$new(self.$superclass().$params_wrapper()), 'tap', [], ($$28 = function(wrapper){var self = $$28.$$s == null ? this : $$28.$$s, hash_filter = nil, $ret_or_7 = nil, inbound_params = nil, $ret_or_8 = nil;

                
                
                if (wrapper == null) {
                  wrapper = nil;
                };
                hash_filter = self.$superclass().$params_wrapper().$hash_filter();
                wrapper.$instance_variable_set("@hash_filter", (function() {if ($truthy(($ret_or_7 = hash_filter))) {
                  return hash_filter.$dup()
                } else {
                  return $ret_or_7
                }; return nil; })());
                inbound_params = self.$superclass().$params_wrapper().$inbound_params();
                return wrapper.$instance_variable_set("@inbound_params", (function() {if ($truthy(($ret_or_8 = inbound_params))) {
                  return inbound_params.$dup()
                } else {
                  return $ret_or_8
                }; return nil; })());}, $$28.$$s = self, $$28.$$arity = 1, $$28))
            }}, $$27.$$s = self, $$27.$$arity = 0, $$27))
        }, $Railway_params_wrapper$26.$$arity = 0), nil) && 'params_wrapper';
      })($nesting[0], null, $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation/railway/run"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$tracks', '$class', '$merge', '$zero?', '$count', '$is_a?', '$[]', '$==', '$<', '$proc', '$run', '$params', '$instance_method', '$each', '$define_method', '$<<', '$build_tie', '$raise', '$new', '$then', '$apply', '$always', '$rejected?', '$!=', '$resolve', '$step', '$method', '$arity', '$instance_exec', '$to_proc', '$state', '$result', '$call', '$bind', '$include?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Operation');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Exit');

        var $nesting = [self].concat($parent_nesting), $Exit_initialize$1, $Exit_to_s$2;

        self.$$prototype.state = nil;
        
        self.$attr_reader("state");
        self.$attr_reader("result");
        
        Opal.def(self, '$initialize', $Exit_initialize$1 = function $$initialize(state, result) {
          var self = this;

          
          
          if (result == null) {
            result = nil;
          };
          self.state = state;
          return (self.result = result);
        }, $Exit_initialize$1.$$arity = -2);
        return (Opal.def(self, '$to_s', $Exit_to_s$2 = function $$to_s() {
          var self = this;

          return self.state
        }, $Exit_to_s$2.$$arity = 0), nil) && 'to_s';
      })($nesting[0], $$($nesting, 'StandardError'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Railway');

        var $nesting = [self].concat($parent_nesting), $Railway_tracks$3, $Railway$9, $Railway_step$12, $Railway_failed$14, $Railway_async$16, $Railway_apply$17, $Railway_run$18, $Railway_result$20;

        self.$$prototype.promise_chain = self.$$prototype.last_async_result = self.$$prototype.state = self.$$prototype.operation = self.$$prototype.promise_chain_start = self.$$prototype.last_result = self.$$prototype.result = nil;
        
        
        Opal.def(self, '$tracks', $Railway_tracks$3 = function $$tracks() {
          var self = this;

          return self.$class().$tracks()
        }, $Railway_tracks$3.$$arity = 0);
        (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $tracks$4, $build_tie$5, $$7, $abort$excl$10, $succeed$excl$11;

          
          
          Opal.def(self, '$tracks', $tracks$4 = function $$tracks() {
            var self = this, $ret_or_1 = nil;
            if (self.tracks == null) self.tracks = nil;

            return (self.tracks = (function() {if ($truthy(($ret_or_1 = self.tracks))) {
              return $ret_or_1
            } else {
              return []
            }; return nil; })())
          }, $tracks$4.$$arity = 0);
          
          Opal.def(self, '$build_tie', $build_tie$5 = function $$build_tie(tie, args, block) {
            var $$6, self = this, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil, scope = nil;

            return (function() {if ($truthy(args.$count()['$zero?']())) {
              return $hash2(["run"], {"run": block})
            } else if ($truthy(args['$[]'](0)['$is_a?']($$($nesting, 'Hash')))) {
              return $hash2(["scope", "run"], {"scope": (function() {if ($truthy(args['$[]'](0)['$[]']("class"))) {
                return "class"
              } else {
                return args['$[]'](0)['$[]']("scope")
              }; return nil; })(), "run": (function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = args['$[]'](0)['$[]']("class")))) {
                return $ret_or_3
              } else {
                return args['$[]'](0)['$[]']("run")
              }; return nil; })()))) {
                return $ret_or_2
              } else {
                return block
              }; return nil; })()})
            } else if ($truthy((function() {if ($truthy(($ret_or_4 = args['$[]'](0)['$==']("class")))) {
              return block
            } else {
              return $ret_or_4
            }; return nil; })())) {
              return $hash2(["run", "scope"], {"run": block, "scope": "class"})
            } else if ($truthy((function() {if ($truthy(($ret_or_5 = args['$[]'](0)['$is_a?']($$($nesting, 'Class'))))) {
              return $rb_lt(args['$[]'](0), $$($nesting, 'Operation'))
            } else {
              return $ret_or_5
            }; return nil; })())) {
              return $hash2(["run"], {"run": $send(self, 'proc', [], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;

                return args['$[]'](0).$run(self.$params())}, $$6.$$s = self, $$6.$$arity = 0, $$6))})
            } else {
              
              if ($truthy(args['$[]'](1)['$is_a?']($$($nesting, 'Hash')))) {
                scope = args['$[]'](1)['$[]']("scope")};
              return $hash2(["run", "scope"], {"run": args['$[]'](0), "scope": scope});
            }; return nil; })().$merge($hash2(["tie"], {"tie": self.$instance_method(tie)}))
          }, $build_tie$5.$$arity = 3);
          $send(["step", "failed", "async"], 'each', [], ($$7 = function(tie){var self = $$7.$$s == null ? this : $$7.$$s, $$8;

            
            
            if (tie == null) {
              tie = nil;
            };
            return $send(self, 'define_method', ["" + "add_" + (tie)], ($$8 = function($a){var self = $$8.$$s == null ? this : $$8.$$s, $iter = $$8.$$p, block = $iter || nil, $post_args, args;

              
              
              if ($iter) $$8.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              return self.$tracks()['$<<'](self.$build_tie(tie, args, block));}, $$8.$$s = self, $$8.$$arity = -1, $$8));}, $$7.$$s = self, $$7.$$arity = 1, $$7));
          
          Opal.def(self, '$abort!', $abort$excl$10 = function(arg) {
            var self = this;

            return self.$raise($$($nesting, 'Exit').$new("failed", arg))
          }, $abort$excl$10.$$arity = 1);
          return (Opal.def(self, '$succeed!', $succeed$excl$11 = function(arg) {
            var self = this;

            return self.$raise($$($nesting, 'Exit').$new("success", arg))
          }, $succeed$excl$11.$$arity = 1), nil) && 'succeed!';
        })(Opal.get_singleton_class(self), $nesting);
        
        Opal.def(self, '$step', $Railway_step$12 = function $$step(opts) {
          var $$13, self = this;

          return (self.promise_chain = $send(self.promise_chain, 'then', [], ($$13 = function(result){var self = $$13.$$s == null ? this : $$13.$$s;

            
            
            if (result == null) {
              result = nil;
            };
            return self.$apply(result, "success", opts);}, $$13.$$s = self, $$13.$$arity = 1, $$13)))
        }, $Railway_step$12.$$arity = 1);
        
        Opal.def(self, '$failed', $Railway_failed$14 = function $$failed(opts) {
          var $$15, self = this;

          return (self.promise_chain = $send(self.promise_chain, 'always', [], ($$15 = function(result){var self = $$15.$$s == null ? this : $$15.$$s, $ret_or_6 = nil;
            if (self.promise_chain == null) self.promise_chain = nil;
            if (self.state == null) self.state = nil;

            
            
            if (result == null) {
              result = nil;
            };
            if ($truthy((function() {if ($truthy(($ret_or_6 = self.promise_chain['$rejected?']()))) {
              return self.state['$!=']("abort")
            } else {
              return $ret_or_6
            }; return nil; })())) {
              self.state = "failed"};
            return self.$apply(result, "failed", opts);}, $$15.$$s = self, $$15.$$arity = 1, $$15)))
        }, $Railway_failed$14.$$arity = 1);
        
        Opal.def(self, '$async', $Railway_async$16 = function $$async(opts) {
          var self = this;

          
          self.promise_chain = (self.promise_chain_start = $$($nesting, 'Promise').$new());
          self.promise_chain.$resolve(self.last_async_result);
          return self.$step(opts);
        }, $Railway_async$16.$$arity = 1);
        
        Opal.def(self, '$apply', $Railway_apply$17 = function $$apply(result, state, opts) {
          var self = this, args = nil, instance = nil, block = nil, last_result = nil, $ret_or_7 = nil, e = nil;

          try {
            
            if (self.state['$=='](state)) {
            } else {
              return result
            };
            if (opts['$[]']("scope")['$==']("class")) {
              
              args = [self.operation].concat(Opal.to_a(result));
              instance = self.operation.$class();
            } else {
              
              args = result;
              instance = self.operation;
            };
            block = opts['$[]']("run");
            if ($truthy(block['$is_a?']($$($nesting, 'Symbol')))) {
              block = instance.$method(block)};
            last_result = (function() {if ($truthy(block.$arity()['$zero?']())) {
              return $send(instance, 'instance_exec', [], block.$to_proc())
            } else if ($truthy((function() {if ($truthy(($ret_or_7 = args['$is_a?']($$($nesting, 'Array'))))) {
              return block.$arity()['$=='](args.$count())
            } else {
              return $ret_or_7
            }; return nil; })())) {
              return $send(instance, 'instance_exec', Opal.to_a(args), block.$to_proc())
            } else {
              return $send(instance, 'instance_exec', [args], block.$to_proc())
            }; return nil; })();
            if ($truthy(last_result['$is_a?']($$($nesting, 'Promise')))) {
            } else {
              self.last_async_result = last_result
            };
            return last_result;
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'Exit')])) {(e = $err)
              try {
                if (e.$state()['$==']("failed")) {
                  
                  self.state = "abort";
                  return self.$raise((function() {if ($truthy(e.$result()['$is_a?']($$($nesting, 'Exception')))) {
                    return e.$result()
                  } else {
                    return e
                  }; return nil; })());
                } else {
                  
                  self.state = "succeed";
                  return e.$result();
                }
              } finally { Opal.pop_exception(); }
            } else 
            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
              try {
                
                self.state = "failed";
                return self.$raise(e);
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          }
        }, $Railway_apply$17.$$arity = 3);
        
        Opal.def(self, '$run', $Railway_run$18 = function $$run() {
          var $$19, self = this, $ret_or_8 = nil;

          
          self.state = (function() {if ($truthy(($ret_or_8 = self.state))) {
            return $ret_or_8
          } else {
            return "success"
          }; return nil; })();
          self.promise_chain_start = (self.promise_chain = $$($nesting, 'Promise').$new());
          self.promise_chain_start.$resolve(self.last_result);
          if (self.state['$==']("abort")) {
            return nil
          } else {
            return $send(self.$tracks(), 'each', [], ($$19 = function(opts){var self = $$19.$$s == null ? this : $$19.$$s;

              
              
              if (opts == null) {
                opts = nil;
              };
              return opts['$[]']("tie").$bind(self).$call(opts);}, $$19.$$s = self, $$19.$$arity = 1, $$19))
          };
        }, $Railway_run$18.$$arity = 0);
        return (Opal.def(self, '$result', $Railway_result$20 = function $$result() {
          var $$21, self = this, $ret_or_9 = nil;

          return (self.result = (function() {if ($truthy(($ret_or_9 = self.result))) {
            return $ret_or_9
          } else {
            return $send(self.promise_chain, 'always', [], ($$21 = function(e){var self = $$21.$$s == null ? this : $$21.$$s;
              if (self.state == null) self.state = nil;

              
              
              if (e == null) {
                e = nil;
              };
              if ($truthy(["abort", "failed"]['$include?'](self.state))) {
                if ($truthy(e['$is_a?']($$($nesting, 'Exception')))) {
                  return self.$raise(e)
                } else {
                  return self.$raise($$$($$($nesting, 'Promise'), 'Fail').$new(e))
                }
              } else {
                return e
              };}, $$21.$$s = self, $$21.$$arity = 1, $$21))
          }; return nil; })())
        }, $Railway_result$20.$$arity = 0), nil) && 'result';
      })($nesting[0], null, $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation/railway/validations"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$validations', '$class', '$add_error', '$+', '$to_s', '$[]', '$<<', '$add_validation', '$instance_eval', '$to_proc', '$==', '$state', '$raise', '$new', '$result', '$each_with_index', '$is_a?', '$method', '$instance_exec', '$add_validation_error', '$===', '$has_errors?', '$instance_variable_get']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Operation');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Railway');

        var $nesting = [self].concat($parent_nesting), $Railway_validations$1, $Railway_add_validation_error$2, $Railway_process_validations$7;

        self.$$prototype.operation = self.$$prototype.last_result = self.$$prototype.state = nil;
        
        
        Opal.def(self, '$validations', $Railway_validations$1 = function $$validations() {
          var self = this;

          return self.$class().$validations()
        }, $Railway_validations$1.$$arity = 0);
        
        Opal.def(self, '$add_validation_error', $Railway_add_validation_error$2 = function $$add_validation_error(i, e) {
          var self = this;

          return self.operation.$add_error("" + "param validation " + ($rb_plus(i, 1)), "validation_error", e.$to_s())
        }, $Railway_add_validation_error$2.$$arity = 2);
        (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $validations$3, $add_validation$4, $add_error$5;

          
          
          Opal.def(self, '$validations', $validations$3 = function $$validations() {
            var self = this, $ret_or_1 = nil;
            if (self.validations == null) self.validations = nil;

            return (self.validations = (function() {if ($truthy(($ret_or_1 = self.validations))) {
              return $ret_or_1
            } else {
              return []
            }; return nil; })())
          }, $validations$3.$$arity = 0);
          
          Opal.def(self, '$add_validation', $add_validation$4 = function $$add_validation($a) {
            var $iter = $add_validation$4.$$p, block = $iter || nil, $post_args, args, self = this;

            if ($iter) $add_validation$4.$$p = null;
            
            
            if ($iter) $add_validation$4.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            if ($truthy(args['$[]'](0))) {
              block = args['$[]'](0)};
            return self.$validations()['$<<'](block);
          }, $add_validation$4.$$arity = -1);
          return (Opal.def(self, '$add_error', $add_error$5 = function $$add_error(param, symbol, message, $a) {
            var $iter = $add_error$5.$$p, block = $iter || nil, $post_args, args, $$6, self = this;

            if ($iter) $add_error$5.$$p = null;
            
            
            if ($iter) $add_error$5.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 3, arguments.length);
            
            args = $post_args;;
            return $send(self, 'add_validation', [], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s, e = nil;

              try {
                
                if ($truthy($send(self, 'instance_eval', [], block.$to_proc()))) {
                  self.$add_error(param, symbol, message)};
                return true;
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'Exit')])) {(e = $err)
                  try {
                    
                    if (e.$state()['$==']("failed")) {
                    } else {
                      self.$raise(e)
                    };
                    self.$add_error(param, symbol, message);
                    return self.$raise($$($nesting, 'Exit').$new("abort_from_add_error", e.$result()));
                  } finally { Opal.pop_exception(); }
                } else { throw $err; }
              }}, $$6.$$s = self, $$6.$$arity = 0, $$6));
          }, $add_error$5.$$arity = -4), nil) && 'add_error';
        })(Opal.get_singleton_class(self), $nesting);
        return (Opal.def(self, '$process_validations', $Railway_process_validations$7 = function $$process_validations() {try {

          var $$8, self = this, $ret_or_2 = nil, $ret_or_3 = nil;

          return (function() { try {
          return $send(self.$validations(), 'each_with_index', [], ($$8 = function(validator, i){var self = $$8.$$s == null ? this : $$8.$$s, e = nil, $case = nil;
            if (self.operation == null) self.operation = nil;

            
            
            if (validator == null) {
              validator = nil;
            };
            
            if (i == null) {
              i = nil;
            };
            try {
              
              if ($truthy(validator['$is_a?']($$($nesting, 'Symbol')))) {
                validator = self.operation.$method(validator)};
              if ($truthy($send(self.operation, 'instance_exec', [], validator.$to_proc()))) {
                return nil;};
              return self.$add_validation_error(i, "" + "param validation " + ($rb_plus(i, 1)) + " failed");
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exit')])) {(e = $err)
                try {
                  
                  $case = e.$state();
                  if ("success"['$===']($case)) {self.$add_validation_error(i, "illegal use of succeed! in validation")}
                  else if ("failed"['$===']($case)) {self.$add_validation_error(i, "" + "param validation " + ($rb_plus(i, 1)) + " aborted")};
                  self.state = "abort";
                  Opal.ret(nil);
                } finally { Opal.pop_exception(); }
              } else 
              if (Opal.rescue($err, [$$($nesting, 'AccessViolation')])) {(e = $err)
                try {
                  
                  self.$add_validation_error(i, e);
                  self.state = "abort";
                  self.last_result = e;
                  Opal.ret(nil);
                } finally { Opal.pop_exception(); }
              } else 
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
                try {
                  return self.$add_validation_error(i, e)
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            };}, $$8.$$s = self, $$8.$$arity = 2, $$8))
          } finally {
            (function() {if ($truthy(self.operation['$has_errors?']())) {
              
              self.last_result = (function() {if ($truthy(($ret_or_2 = self.last_result))) {
                return $ret_or_2
              } else {
                return $$($nesting, 'ValidationException').$new(self.operation.$instance_variable_get("@errors"))
              }; return nil; })();
              return (self.state = (function() {if ($truthy(($ret_or_3 = self.state))) {
                return $ret_or_3
              } else {
                return "failed"
              }; return nil; })());
            } else {
              return nil
            }; return nil; })()
          }; })()
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $Railway_process_validations$7.$$arity = 0), nil) && 'process_validations';
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation/server_op"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $alias = Opal.alias;

  Opal.add_stubs(['$include', '$on_opal_client?', '$combine_arg_array', '$params_wrapper', '$_Railway', '$serialize_params', '$fail', '$then', '$post', '$to_json', '$name', '$merge', '$headers', '$[]', '$opts', '$deserialize_response', '$json', '$new', '$const_get', '$on_opal_server?', '$internal_iso_run', '$resolve', '$reject', '$isomorphic_method', '$send_to_server', '$when_on_server', '$run_from_client', '$controller', '$map', '$descendants', '$to_proc', '$production?', '$env', '$include?', '$descendants_map_cache', '$raise_operation_access_violation', '$<', '$class_eval', '$constantize', '$method_defined?', '$[]=', '$-', '$!', '$raise', '$run', '$deserialize_params', '$serialize_response', '$handle_exception', '$is_a?', '$respond_to?', '$to_h', '$<<', '$red', '$inspect', '$each', '$truncate', '$details', '$__hyperstack_on_error', '$join', '$to_s', '$class', '$status', '$URI', '$host', '$port', '$path', '$==', '$scheme', '$use_ssl=', '$body=', '$request', '$lock', '$deserialize_dispatch', '$receivers', '$call', '$inbound', '$params', '$send', '$pre_controller_op_method_missing']);
  
  nil;
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ServerOp');

      var $nesting = [self].concat($parent_nesting);

      return (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $run$1, $run$4, $$5, $descendants_map_cache$7, $run_from_client$8, $status$12, $handle_exception$13, $remote$15, $headers$16, $serialize_params$17, $deserialize_params$18, $serialize_response$19, $deserialize_response$20, $serialize_dispatch$21, $deserialize_dispatch$22, $dispatch_to$23, $dispatch_from_server$24;

        
        self.$include($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers'));
        if ($truthy(self['$on_opal_client?']())) {
          
          Opal.def(self, '$run', $run$1 = function $$run($a) {
            var $post_args, args, $$2, $$3, self = this, hash = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            hash = self.$_Railway().$params_wrapper().$combine_arg_array(args);
            hash = self.$serialize_params(hash);
            return $send($send($$$($$($nesting, 'Hyperstack'), 'HTTP').$post("" + (window.HyperstackEnginePath) + "/execute_remote", $hash2(["payload", "headers"], {"payload": $hash2(["hyperstack_secured_json"], {"hyperstack_secured_json": $hash2(["operation", "params"], {"operation": self.$name(), "params": hash}).$to_json()}), "headers": self.$headers().$merge($hash2(["X-CSRF-Token"], {"X-CSRF-Token": $$$($$($nesting, 'Hyperstack'), 'ClientDrivers').$opts()['$[]']("form_authenticity_token")}))})), 'then', [], ($$2 = function(response){var self = $$2.$$s == null ? this : $$2.$$s;

              
              
              if (response == null) {
                response = nil;
              };
              return self.$deserialize_response(response.$json()['$[]']("response"));}, $$2.$$s = self, $$2.$$arity = 1, $$2)), 'fail', [], ($$3 = function(response){var self = $$3.$$s == null ? this : $$3.$$s;

              
              
              if (response == null) {
                response = nil;
              };
              try {
                return self.$const_get(response.$json()['$[]']("error_class")).$new(response.$json()['$[]']("error"))
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    return $$($nesting, 'Exception').$new(response.$json()['$[]']("error"))
                  } finally { Opal.pop_exception(); }
                } else { throw $err; }
              };}, $$3.$$s = self, $$3.$$arity = 1, $$3));
          }, $run$1.$$arity = -1)
        } else if ($truthy(self['$on_opal_server?']())) {
          
          Opal.def(self, '$run', $run$4 = function $$run($a) {
            var $post_args, args, self = this, promise = nil, response = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            promise = $$($nesting, 'Promise').$new();
            response = self.$internal_iso_run(self.$name(), args);
            if ($truthy(response['$[]']("json")['$[]']("response"))) {
              promise.$resolve(response['$[]']("json")['$[]']("response"))
            } else {
              promise.$reject($$($nesting, 'Exception').$new(response['$[]']("json")['$[]']("error")))
            };
            return promise;
          }, $run$4.$$arity = -1)};
        $send(self, 'isomorphic_method', ["internal_iso_run"], ($$5 = function(f, klass_name, op_params){var self = $$5.$$s == null ? this : $$5.$$s, $$6;

          
          
          if (f == null) {
            f = nil;
          };
          
          if (klass_name == null) {
            klass_name = nil;
          };
          
          if (op_params == null) {
            op_params = nil;
          };
          f.$send_to_server(klass_name, op_params);
          return $send(f, 'when_on_server', [], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;

            return $send($$$($$($nesting, 'Hyperstack'), 'ServerOp'), 'run_from_client', ["acting_user", self.$controller(), klass_name].concat(Opal.to_a(op_params)))}, $$6.$$s = self, $$6.$$arity = 0, $$6));}, $$5.$$s = self, $$5.$$arity = 3, $$5));
        
        Opal.def(self, '$descendants_map_cache', $descendants_map_cache$7 = function $$descendants_map_cache() {
          var self = this, $ret_or_1 = nil;
          if (self.cached_descendants == null) self.cached_descendants = nil;

          return (self.cached_descendants = (function() {if ($truthy(($ret_or_1 = self.cached_descendants))) {
            return $ret_or_1
          } else {
            return $send($$$($$($nesting, 'Hyperstack'), 'ServerOp').$descendants(), 'map', [], "to_s".$to_proc())
          }; return nil; })())
        }, $descendants_map_cache$7.$$arity = 0);
        
        Opal.def(self, '$run_from_client', $run_from_client$8 = function $$run_from_client(security_param, controller, operation, params) {try {

          var $$9, self = this, const$ = nil, e = nil;

          try {
            
            if ($truthy($$($nesting, 'Rails').$env()['$production?']())) {
              if ($truthy($$$($$($nesting, 'Hyperstack'), 'ServerOp').$descendants_map_cache()['$include?'](operation))) {
              } else {
                $$$($$($nesting, 'Hyperstack'), 'InternalPolicy').$raise_operation_access_violation("illegal_remote_op_call", "" + "Operation: " + (operation) + " (in production)")
              }
            } else {
              
              
              try {
                const$ = $$($nesting, 'Object').$const_get(operation)
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'NameError')])) {
                  try {
                    $$$($$($nesting, 'Hyperstack'), 'InternalPolicy').$raise_operation_access_violation("illegal_remote_op_call", "" + "Operation: " + (operation) + " (const not found)")
                  } finally { Opal.pop_exception(); }
                } else { throw $err; }
              };;
              if ($truthy($rb_lt(const$, $$$($$($nesting, 'Hyperstack'), 'ServerOp')))) {
              } else {
                $$$($$($nesting, 'Hyperstack'), 'InternalPolicy').$raise_operation_access_violation("illegal_remote_op_call", "" + "Operation: " + (operation) + " (not a ServerOp subclass)")
              };
            };
            return $send(operation.$constantize(), 'class_eval', [], ($$9 = function(){var self = $$9.$$s == null ? this : $$9.$$s, $$10, $$11, $writer = nil;

              
              if ($truthy(self.$_Railway().$params_wrapper()['$method_defined?']("controller"))) {
                
                $writer = ["controller", controller];
                $send(params, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(self.$_Railway().$params_wrapper()['$method_defined?'](security_param)['$!']())) {
                self.$raise($$($nesting, 'AccessViolation').$new("remote_access_not_allowed"))};
              return $send($send(self.$run(self.$deserialize_params(params)), 'then', [], ($$10 = function(r){var self = $$10.$$s == null ? this : $$10.$$s;

                
                
                if (r == null) {
                  r = nil;
                };
                Opal.ret($hash2(["json"], {"json": $hash2(["response"], {"response": self.$serialize_response(r)})}));}, $$10.$$s = self, $$10.$$arity = 1, $$10)), 'fail', [], ($$11 = function(e){var self = $$11.$$s == null ? this : $$11.$$s;

                
                
                if (e == null) {
                  e = nil;
                };
                Opal.ret(self.$handle_exception(e, operation, params));}, $$11.$$s = self, $$11.$$arity = 1, $$11));}, $$9.$$s = self, $$9.$$arity = 0, $$9));
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
              try {
                return self.$handle_exception(e, operation, params)
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          }
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $run_from_client$8.$$arity = 4);
        
        Opal.def(self, '$status', $status$12 = function $$status(e) {
          var self = this;

          if ($truthy(e['$is_a?']($$($nesting, 'AccessViolation')))) {
            return 403
          } else if ($truthy(e['$is_a?']($$$($$($nesting, 'Operation'), 'ValidationException')))) {
            return 400
          } else {
            return 500
          }
        }, $status$12.$$arity = 1);
        
        Opal.def(self, '$handle_exception', $handle_exception$13 = function $$handle_exception(e, operation, params) {
          var $$14, self = this, message = nil;

          
          if ($truthy(e['$respond_to?']("__hyperstack_on_error"))) {
            
            params = params.$to_h();
            message = [];
            message['$<<']($$($nesting, 'Pastel').$new().$red("" + "HYPERSTACK ERROR during " + (operation) + " " + (e.$inspect())));
            $send(params, 'each', [], ($$14 = function(param, value){var self = $$14.$$s == null ? this : $$14.$$s;

              
              
              if (param == null) {
                param = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              return message['$<<']("" + "  " + (param) + " => " + (value.$inspect().$truncate(120, $hash2(["separator"], {"separator": "..."}))));}, $$14.$$s = self, $$14.$$arity = 2, $$14));
            if ($truthy(e['$respond_to?']("details"))) {
              message['$<<']("" + "\n" + (e.$details()))};
            e.$__hyperstack_on_error(operation, params, message.$join("\n"));};
          return $hash2(["json", "status"], {"json": $hash2(["error_class", "error"], {"error_class": e.$class().$to_s(), "error": e}), "status": self.$status(e)});
        }, $handle_exception$13.$$arity = 3);
        
        Opal.def(self, '$remote', $remote$15 = function $$remote(path, $a) {
          var $post_args, args, self = this, promise = nil, uri = nil, http = nil, request = nil, $writer = nil, e = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          try {
            
            promise = $$($nesting, 'Promise').$new();
            uri = self.$URI("" + (path) + "execute_remote_api");
            http = $$$($$($nesting, 'Net'), 'HTTP').$new(uri.$host(), uri.$port());
            request = $$$($$$($$($nesting, 'Net'), 'HTTP'), 'Post').$new(uri.$path(), $hash2(["Content-Type"], {"Content-Type": "application/json"}));
            if (uri.$scheme()['$==']("https")) {
              
              $writer = [true];
              $send(http, 'use_ssl=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            
            $writer = [$hash2(["operation", "params"], {"operation": self.$name(), "params": $$$($$$($$($nesting, 'Hyperstack'), 'Operation'), 'ParamsWrapper').$combine_arg_array(args)}).$to_json()];
            $send(request, 'body=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return promise.$resolve(http.$request(request));
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
              try {
                return promise.$reject(e)
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };
        }, $remote$15.$$arity = -2);
        
        Opal.def(self, '$headers', $headers$16 = function $$headers() {
          var self = this;

          return $hash2([], {})
        }, $headers$16.$$arity = 0);
        
        Opal.def(self, '$serialize_params', $serialize_params$17 = function $$serialize_params(hash) {
          var self = this;

          return hash
        }, $serialize_params$17.$$arity = 1);
        
        Opal.def(self, '$deserialize_params', $deserialize_params$18 = function $$deserialize_params(hash) {
          var self = this;

          return hash
        }, $deserialize_params$18.$$arity = 1);
        
        Opal.def(self, '$serialize_response', $serialize_response$19 = function $$serialize_response(hash) {
          var self = this;

          return hash
        }, $serialize_response$19.$$arity = 1);
        
        Opal.def(self, '$deserialize_response', $deserialize_response$20 = function $$deserialize_response(hash) {
          var self = this;

          return hash
        }, $deserialize_response$20.$$arity = 1);
        
        Opal.def(self, '$serialize_dispatch', $serialize_dispatch$21 = function $$serialize_dispatch(hash) {
          var self = this;

          return hash
        }, $serialize_dispatch$21.$$arity = 1);
        
        Opal.def(self, '$deserialize_dispatch', $deserialize_dispatch$22 = function $$deserialize_dispatch(hash) {
          var self = this;

          return hash
        }, $deserialize_dispatch$22.$$arity = 1);
        
        Opal.def(self, '$dispatch_to', $dispatch_to$23 = function $$dispatch_to($a) {
          var $iter = $dispatch_to$23.$$p, regulation = $iter || nil, $post_args, args, self = this;

          if ($iter) $dispatch_to$23.$$p = null;
          
          
          if ($iter) $dispatch_to$23.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return nil;
        }, $dispatch_to$23.$$arity = -1);
        nil;
        return (Opal.def(self, '$dispatch_from_server', $dispatch_from_server$24 = function $$dispatch_from_server(params_hash) {
          var $$25, self = this, params = nil;

          
          params = self.$_Railway().$params_wrapper().$new(self.$deserialize_dispatch(params_hash)).$lock();
          return $send(self.$_Railway().$receivers(), 'each', [], ($$25 = function(receiver){var self = $$25.$$s == null ? this : $$25.$$s;

            
            
            if (receiver == null) {
              receiver = nil;
            };
            return receiver.$call(params);}, $$25.$$s = self, $$25.$$arity = 1, $$25));
        }, $dispatch_from_server$24.$$arity = 1), nil) && 'dispatch_from_server';
      })(Opal.get_singleton_class(self), $nesting)
    })($nesting[0], $$($nesting, 'Operation'), $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ControllerOp');

      var $nesting = [self].concat($parent_nesting), $ControllerOp_method_missing$26;

      
      self.$inbound("controller");
      $alias(self, "pre_controller_op_method_missing", "method_missing");
      return (Opal.def(self, '$method_missing', $ControllerOp_method_missing$26 = function $$method_missing(name, $a) {
        var $iter = $ControllerOp_method_missing$26.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $ControllerOp_method_missing$26.$$p = null;
        
        
        if ($iter) $ControllerOp_method_missing$26.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        if ($truthy(self.$params().$controller()['$respond_to?'](name))) {
          return $send(self.$params().$controller(), 'send', [name].concat(Opal.to_a(args)), block.$to_proc())
        } else {
          return $send(self, 'pre_controller_op_method_missing', [name].concat(Opal.to_a(args)), block.$to_proc())
        };
      }, $ControllerOp_method_missing$26.$$arity = -2), nil) && 'method_missing';
    })($nesting[0], $$($nesting, 'ServerOp'), $nesting);
  })($nesting[0], $nesting);
};

Opal.modules["hyper-operation/boot"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$inherited', '$add_receiver', '$_Railway', '$to_proc', '$initialize_client_drivers_on_boot', '$_run', '$respond_to?', '$each', '$receivers', '$on_dispatch']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Application');

      var $nesting = [self].concat($parent_nesting), $a, $Application$3;

      
      if ($truthy((($a = $$($nesting, 'Boot', 'skip_raise')) ? 'constant' : nil))) {
        $$($nesting, 'Operation').$inherited($$($nesting, 'Boot'))};
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Boot');

        var $nesting = [self].concat($parent_nesting), $Boot_on_dispatch$1, $Boot_run$2;

        
        Opal.defs(self, '$on_dispatch', $Boot_on_dispatch$1 = function $$on_dispatch() {
          var $iter = $Boot_on_dispatch$1.$$p, block = $iter || nil, self = this;

          if ($iter) $Boot_on_dispatch$1.$$p = null;
          
          
          if ($iter) $Boot_on_dispatch$1.$$p = null;;
          return $send(self.$_Railway(), 'add_receiver', [], block.$to_proc());
        }, $Boot_on_dispatch$1.$$arity = 0);
        return (Opal.defs(self, '$run', $Boot_run$2 = function $$run($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          $$($nesting, 'ClientDrivers').$initialize_client_drivers_on_boot();
          return $send(self, '_run', Opal.to_a(args));
        }, $Boot_run$2.$$arity = -1), nil) && 'run';
      })($nesting[0], $$($nesting, 'Operation'), $nesting);
      if ($truthy($$($nesting, 'Boot')['$respond_to?']("receivers"))) {
        return $send($$($nesting, 'Boot').$receivers(), 'each', [], ($Application$3 = function(r){var self = $Application$3.$$s == null ? this : $Application$3.$$s;

          
          
          if (r == null) {
            r = nil;
          };
          return $send($$($nesting, 'Boot'), 'on_dispatch', [], r.$to_proc());}, $Application$3.$$s = self, $Application$3.$$arity = 1, $Application$3))
      } else {
        return nil
      };
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation/async_sleep"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$every', '$to_proc', '$after']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AsyncSleep');

      var $nesting = [self].concat($parent_nesting), $AsyncSleep_every$1, $AsyncSleep_after$2;

      
      Opal.defs(self, '$every', $AsyncSleep_every$1 = function $$every($a) {
        var $iter = $AsyncSleep_every$1.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $AsyncSleep_every$1.$$p = null;
        
        
        if ($iter) $AsyncSleep_every$1.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return $send(self, 'every', Opal.to_a(args), block.$to_proc());
      }, $AsyncSleep_every$1.$$arity = -1);
      return (Opal.defs(self, '$after', $AsyncSleep_after$2 = function $$after($a) {
        var $iter = $AsyncSleep_after$2.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $AsyncSleep_after$2.$$p = null;
        
        
        if ($iter) $AsyncSleep_after$2.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return $send(self, 'after', Opal.to_a(args), block.$to_proc());
      }, $AsyncSleep_after$2.$$arity = -1), nil) && 'after';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-operation"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$import', '$register_additional_filter']);
  
  self.$require("hyper-operation/version");
  self.$require("hyperstack-config");
  $$($nesting, 'Hyperstack').$import("hyper-operation");
  
  self.$require("active_support/core_ext/string");
  self.$require("mutations");
  $$$($$($nesting, 'Mutations'), 'HashFilter').$register_additional_filter($$$($$($nesting, 'Mutations'), 'DuckFilter'), "duck");
  self.$require("hyper-operation/filters/outbound_filter");
  self.$require("hyper-component");
  self.$require("hyper-operation/http");
  self.$require("hyper-operation/transport/client_drivers");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HashWithIndifferentAccess');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Hash'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_titleize$1;

    return (Opal.def(self, '$titleize', $String_titleize$1 = function $$titleize() {
      var self = this;

      return self
    }, $String_titleize$1.$$arity = 0), nil) && 'titleize'
  })($nesting[0], null, $nesting);
  self.$require("hyper-operation/exception");
  self.$require("hyper-operation/promise");
  self.$require("hyper-operation/railway");
  self.$require("hyper-operation/api");
  self.$require("hyper-operation/railway/dispatcher");
  self.$require("hyper-operation/railway/params_wrapper");
  self.$require("hyper-operation/railway/run");
  self.$require("hyper-operation/railway/validations");
  self.$require("hyper-operation/server_op");
  self.$require("hyper-operation/boot");
  return self.$require("hyper-operation/async_sleep");;
};

Opal.queue(function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$new']);
  
  self.$require("active_support");
  self.$require("time");
  self.$require("date");
  self.$require("opal-jquery");
  self.$require("browser");
  self.$require("browser/interval");
  self.$require("browser/delay");
  self.$require("hyperstack-config");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack_env$1;

    return (Opal.defs(self, '$env', $Hyperstack_env$1 = function $$env() {
      var self = this, $ret_or_1 = nil;
      if (self.environment == null) self.environment = nil;

      return (self.environment = (function() {if ($truthy(($ret_or_1 = self.environment))) {
        return $ret_or_1
      } else {
        return $$$($$($nesting, 'ActiveSupport'), 'StringInquirer').$new("express")
      }; return nil; })())
    }, $Hyperstack_env$1.$$arity = 0), nil) && 'env'
  })($nesting[0], $nesting);
  self.$require("hyperstack/autoloader");
  self.$require("hyperstack/autoloader_starter");
  self.$require("hyper-component");
  self.$require("hyperstack/component/auto-import");
  self.$require("hyper-state");
  return self.$require("hyper-operation");
});
