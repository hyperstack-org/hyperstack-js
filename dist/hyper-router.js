Opal.modules["hyperstack/boot"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$<<', '$receivers', '$set_var', '$new', '$each', '$call']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $a;

    if ($truthy((($a = $$($nesting, 'Operation', 'skip_raise')) ? 'constant' : nil))) {
      return nil
    } else {
      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Operation');

        var $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], null, $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Application');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Boot');

          var $nesting = [self].concat($parent_nesting);

          
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'ReactDummyParams');

            var $nesting = [self].concat($parent_nesting), $ReactDummyParams_initialize$1;

            
            self.$attr_reader("context");
            return (Opal.def(self, '$initialize', $ReactDummyParams_initialize$1 = function $$initialize(context) {
              var self = this;

              return (self.context = context)
            }, $ReactDummyParams_initialize$1.$$arity = 1), nil) && 'initialize';
          })($nesting[0], null, $nesting);
          return (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting), $on_dispatch$2, $receivers$3, $run$5;

            
            
            Opal.def(self, '$on_dispatch', $on_dispatch$2 = function $$on_dispatch() {
              var $iter = $on_dispatch$2.$$p, block = $iter || nil, self = this;

              if ($iter) $on_dispatch$2.$$p = null;
              
              
              if ($iter) $on_dispatch$2.$$p = null;;
              return self.$receivers()['$<<'](block);
            }, $on_dispatch$2.$$arity = 0);
            
            Opal.def(self, '$receivers', $receivers$3 = function $$receivers() {
              var $$4, self = this;

              return $send($$$($$($nesting, 'Hyperstack'), 'Context'), 'set_var', [self, "@receivers", $hash2(["force"], {"force": true})], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

                return []}, $$4.$$s = self, $$4.$$arity = 0, $$4))
            }, $receivers$3.$$arity = 0);
            return (Opal.def(self, '$run', $run$5 = function $$run($kwargs) {
              var context, $$6, self = this, params = nil;

              
              
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else if (!$kwargs.$$is_hash) {
                throw Opal.ArgumentError.$new('expected kwargs');
              };
              
              context = $kwargs.$$smap["context"];
              if (context == null) {
                context = nil
              };
              params = $$($nesting, 'ReactDummyParams').$new(context);
              return $send(self.$receivers(), 'each', [], ($$6 = function(receiver){var self = $$6.$$s == null ? this : $$6.$$s;

                
                
                if (receiver == null) {
                  receiver = nil;
                };
                return receiver.$call(params);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
            }, $run$5.$$arity = -1), nil) && 'run';
          })(Opal.get_singleton_class(self), $nesting);
        })($nesting[0], $$($nesting, 'Operation'), $nesting)
      })($nesting[0], null, $nesting);
    }
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/native_wrapper_compatibility"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$include?', '$instance_methods', '$include', '$extend']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Native');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Wrapper');

      var $nesting = [self].concat($parent_nesting), $Wrapper_included$1;

      return (Opal.defs(self, '$included', $Wrapper_included$1 = function $$included(klass) {
        var self = this;

        if ($truthy($$($nesting, 'Native').$instance_methods()['$include?']("to_n"))) {
          return klass.$include($$($nesting, 'Native'))
        } else {
          return klass.$extend($$$($$($nesting, 'Native'), 'Helpers'))
        }
      }, $Wrapper_included$1.$$arity = 1), nil) && 'included'
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/deprecation_warning"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$production?', '$env', '$include?', '$<<']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack_deprecation_warning$1;

    return (Opal.defs(self, '$deprecation_warning', $Hyperstack_deprecation_warning$1 = function $$deprecation_warning(name, message) {
      var self = this, $ret_or_1 = nil;
      if (self.deprecation_messages == null) self.deprecation_messages = nil;

      
      if ($truthy(self.$env()['$production?']())) {
        return nil};
      self.deprecation_messages = (function() {if ($truthy(($ret_or_1 = self.deprecation_messages))) {
        return $ret_or_1
      } else {
        return []
      }; return nil; })();
      message = "" + "Warning: Deprecated feature used in " + (name) + ". " + (message);
      if ($truthy(self.deprecation_messages['$include?'](message))) {
        return nil};
      self.deprecation_messages['$<<'](message);
      return console.warn.apply(console, [message]);;
    }, $Hyperstack_deprecation_warning$1.$$arity = 2), nil) && 'deprecation_warning'
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/string"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_json$1;

    return (Opal.def(self, '$to_json', $String_to_json$1 = function $$to_json() {
      var self = this;

      return JSON.stringify(self)
    }, $String_to_json$1.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/client_stubs"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $import$1, $imports$2, $import_tree$3;

      
      
      Opal.def(self, '$import', $import$1 = function($a) {
        var $post_args, args, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return nil;
      }, $import$1.$$arity = -1);
      
      Opal.def(self, '$imports', $imports$2 = function $$imports($a) {
        var $post_args, args, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return nil;
      }, $imports$2.$$arity = -1);
      return (Opal.def(self, '$import_tree', $import_tree$3 = function $$import_tree($a) {
        var $post_args, args, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return nil;
      }, $import_tree$3.$$arity = -1), nil) && 'import_tree';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/context"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$instance_variable_get', '$!', '$key?', '$[]', '$dup', '$[]=', '$-', '$instance_variable_set', '$each', '$run', '$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Context');

      var $nesting = [self].concat($parent_nesting), $Context_set_var$1, $Context_reset$excl$2;

      
      Opal.defs(self, '$set_var', $Context_set_var$1 = function $$set_var(ctx, var$, $kwargs) {
        var force, $iter = $Context_set_var$1.$$p, $yield = $iter || nil, self = this, inst_value_b4 = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $writer = nil, $ret_or_4 = nil, $ret_or_5 = nil;
        if (self.context == null) self.context = nil;

        if ($iter) $Context_set_var$1.$$p = null;
        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        force = $kwargs.$$smap["force"];
        if (force == null) {
          force = nil
        };
        inst_value_b4 = ctx.$instance_variable_get(var$);
        if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self.context))) {
          return self.context['$[]'](ctx)['$key?'](var$)['$!']()
        } else {
          return $ret_or_2
        }; return nil; })()))) {
          
          if ($truthy(($ret_or_3 = force))) {
            return $ret_or_3
          } else {
            return inst_value_b4['$!']()
          };
        } else {
          return $ret_or_1
        }; return nil; })())) {
          
          $writer = [var$, (function() {if ($truthy(($ret_or_4 = inst_value_b4))) {
            return inst_value_b4.$dup()
          } else {
            return $ret_or_4
          }; return nil; })()];
          $send(self.context['$[]'](ctx), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(($ret_or_5 = inst_value_b4))) {
          return $ret_or_5
        } else {
          return ctx.$instance_variable_set(var$, Opal.yieldX($yield, []))
        };
      }, $Context_set_var$1.$$arity = -3);
      return (Opal.defs(self, '$reset!', $Context_reset$excl$2 = function(reboot) {
        var $$3, $$5, self = this;
        if (self.context == null) self.context = nil;

        
        
        if (reboot == null) {
          reboot = true;
        };
        if ($truthy(self.context)) {
          
          $send(self.context, 'each', [], ($$3 = function(ctx, vars){var self = $$3.$$s == null ? this : $$3.$$s, $$4;

            
            
            if (ctx == null) {
              ctx = nil;
            };
            
            if (vars == null) {
              vars = nil;
            };
            return $send(vars, 'each', [], ($$4 = function(var$, init){var self = $$4.$$s == null ? this : $$4.$$s, $ret_or_6 = nil;

              
              
              if (var$ == null) {
                var$ = nil;
              };
              
              if (init == null) {
                init = nil;
              };
              return ctx.$instance_variable_set(var$, (function() {if ($truthy(($ret_or_6 = init))) {
                return init.$dup()
              } else {
                return $ret_or_6
              }; return nil; })());}, $$4.$$s = self, $$4.$$arity = 2, $$4));}, $$3.$$s = self, $$3.$$arity = 2, $$3));
          if ($truthy(reboot)) {
            return $$$($$$($$($nesting, 'Hyperstack'), 'Application'), 'Boot').$run()
          } else {
            return nil
          };
        } else {
          return (self.context = $send($$($nesting, 'Hash'), 'new', [], ($$5 = function(h, k){var self = $$5.$$s == null ? this : $$5.$$s, $writer = nil;

            
            
            if (h == null) {
              h = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            $writer = [k, $hash2([], {})];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$5.$$s = self, $$5.$$arity = 2, $$5)))
        };
      }, $Context_reset$excl$2.$$arity = -1), nil) && 'reset!';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/js_imports"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$!', '$each', '$raise']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $js_import$1;

      return (Opal.def(self, '$js_import', $js_import$1 = function $$js_import(value, $kwargs) {
        var defines, client_only, server_only, $$2, self = this, on_server = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'defines')) {
          throw Opal.ArgumentError.$new('missing keyword: defines');
        }
        defines = $kwargs.$$smap["defines"];;
        
        client_only = $kwargs.$$smap["client_only"];
        if (client_only == null) {
          client_only = nil
        };
        
        server_only = $kwargs.$$smap["server_only"];
        if (server_only == null) {
          server_only = nil
        };
        defines = [].concat(Opal.to_a(defines));
        
        on_server = typeof Opal.global.document === 'undefined';
        if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = server_only))) {
          return on_server['$!']()
        } else {
          return $ret_or_2
        }; return nil; })()))) {
          return $ret_or_1
        } else {
          
          if ($truthy(($ret_or_3 = client_only))) {
            return on_server
          } else {
            return $ret_or_3
          };
        }; return nil; })())) {
          return nil};
        return $send(defines, 'each', [], ($$2 = function(name){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (name == null) {
            name = nil;
          };
          if ($truthy(Opal.global[name] === undefined)) {
          } else {
            return nil;
          };
          return self.$raise("" + ("" + "The package " + (name) + " was not found. Add it to the webpack ") + ("" + ((function() {if ($truthy(client_only)) {
            return "client_only.js"
          } else {
            return "client_and_server.js"
          }; return nil; })()) + " manifest."));}, $$2.$$s = self, $$2.$$arity = 1, $$2));;
      }, $js_import$1.$$arity = 2), nil) && 'js_import'
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/on_client"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$!']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack_on_client$ques$1;

    return (Opal.defs(self, '$on_client?', $Hyperstack_on_client$ques$1 = function() {
      var self = this;

      return (typeof Opal.global.document === 'undefined')['$!']()
    }, $Hyperstack_on_client$ques$1.$$arity = 0), nil) && 'on_client?'
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/active_support_string_inquirer"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $range = Opal.range;

  Opal.add_stubs(['$private', '$==', '$[]']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ActiveSupport');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StringInquirer');

      var $nesting = [self].concat($parent_nesting), $StringInquirer_respond_to_missing$ques$1, $StringInquirer_method_missing$2;

      
      self.$private();
      
      Opal.def(self, '$respond_to_missing?', $StringInquirer_respond_to_missing$ques$1 = function(method_name, include_private) {
        var $iter = $StringInquirer_respond_to_missing$ques$1.$$p, $yield = $iter || nil, self = this, $ret_or_1 = nil;

        if ($iter) $StringInquirer_respond_to_missing$ques$1.$$p = null;
        
        
        if (include_private == null) {
          include_private = false;
        };
        if ($truthy(($ret_or_1 = method_name['$[]'](-1)['$==']("?")))) {
          return $ret_or_1
        } else {
          return $send2(self, $find_super(self, 'respond_to_missing?', $StringInquirer_respond_to_missing$ques$1, false, true), 'respond_to_missing?', [method_name, include_private], $iter)
        };
      }, $StringInquirer_respond_to_missing$ques$1.$$arity = -2);
      return (Opal.def(self, '$method_missing', $StringInquirer_method_missing$2 = function $$method_missing(method_name, $a) {
        var $post_args, arguments$, $iter = $StringInquirer_method_missing$2.$$p, $yield = $iter || nil, self = this;

        if ($iter) $StringInquirer_method_missing$2.$$p = null;
        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        arguments$ = $post_args;;
        if (method_name['$[]'](-1)['$==']("?")) {
          return self['$=='](method_name['$[]']($range(0, -2, false)))
        } else {
          return $send2(self, $find_super(self, 'method_missing', $StringInquirer_method_missing$2, false, true), 'method_missing', [method_name].concat(Opal.to_a(arguments)), $iter)
        };
      }, $StringInquirer_method_missing$2.$$arity = -2), nil) && 'method_missing';
    })($nesting[0], $$($nesting, 'String'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack_env"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack_env$1;

    return (Opal.defs(self, '$env', $Hyperstack_env$1 = function $$env() {
      var self = this, $ret_or_1 = nil;
      if (self.environment == null) self.environment = nil;

      return (self.environment = (function() {if ($truthy(($ret_or_1 = self.environment))) {
        return $ret_or_1
      } else {
        return $$$($$($nesting, 'ActiveSupport'), 'StringInquirer').$new("development")
      }; return nil; })())
    }, $Hyperstack_env$1.$$arity = 0), nil) && 'env'
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/hotloader/stub"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $a;

    if ($truthy((($a = $$($nesting, 'Hotloader', 'skip_raise')) ? 'constant' : nil))) {
      return nil
    } else {
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Hotloader');

        var $nesting = [self].concat($parent_nesting), $Hotloader_when_file_updates$1;

        return (Opal.defs(self, '$when_file_updates', $Hotloader_when_file_updates$1 = function $$when_file_updates() {
          var $iter = $Hotloader_when_file_updates$1.$$p, block = $iter || nil, self = this;

          if ($iter) $Hotloader_when_file_updates$1.$$p = null;
          
          
          if ($iter) $Hotloader_when_file_updates$1.$$p = null;;
          return nil;
        }, $Hotloader_when_file_updates$1.$$arity = 0), nil) && 'when_file_updates'
      })($nesting[0], null, $nesting)
    }
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack-config"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$require']);
  
  self.$require("hyperstack/boot");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting), $Hyperstack_naming_convention$1;

    return (Opal.defs(self, '$naming_convention', $Hyperstack_naming_convention$1 = function $$naming_convention() {
      var self = this;

      return "camelize_params"
    }, $Hyperstack_naming_convention$1.$$arity = 0), nil) && 'naming_convention'
  })($nesting[0], $nesting);
  
  self.$require("hyperstack/native_wrapper_compatibility");
  self.$require("hyperstack/deprecation_warning");
  self.$require("hyperstack/string");
  self.$require("hyperstack/client_stubs");
  self.$require("hyperstack/context");
  self.$require("hyperstack/js_imports");
  self.$require("hyperstack/on_client");
  self.$require("hyperstack/active_support_string_inquirer.rb");
  self.$require("hyperstack_env");
  return self.$require("hyperstack/hotloader/stub");;
};

Opal.modules["hyperstack/internal/component"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_accessor']);
  
  self.$require("hyperstack-config");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    
    nil;
    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting);

          return self.$attr_accessor("after_error_args")
        })(Opal.get_singleton_class(self), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/internal/callbacks"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$extend', '$each', '$flatten', '$callbacks_for', '$class', '$is_a?', '$method', '$send', '$define_singleton_method', '$set_var', '$lambda', '$instance_exec', '$to_proc', '$<<', '$push', '$when_file_updates', '$delete_if', '$equal?', '$call', '$+', '$respond_to?', '$superclass', '$any?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Callbacks');

        var $nesting = [self].concat($parent_nesting), $Callbacks_included$1, $Callbacks_run_callback$2;

        
        nil;
        Opal.defs(self, '$included', $Callbacks_included$1 = function $$included(base) {
          var self = this;

          return base.$extend($$($nesting, 'ClassMethods'))
        }, $Callbacks_included$1.$$arity = 1);
        
        Opal.def(self, '$run_callback', $Callbacks_run_callback$2 = function $$run_callback(name, $a) {
          var $post_args, args, $$3, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          $send(self.$class().$callbacks_for(name).$flatten(), 'each', [], ($$3 = function(callback){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (callback == null) {
              callback = nil;
            };
            if ($truthy(callback['$is_a?']($$($nesting, 'Proc')))) {
            } else {
              callback = self.$method(callback)
            };
            return (args = $send(self.$class(), 'send', ["" + "_" + (name) + "_before_call_hook", name, self, callback].concat(Opal.to_a(args))));}, $$3.$$s = self, $$3.$$arity = 1, $$3));
          return args;
        }, $Callbacks_run_callback$2.$$arity = -2);
        return (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_define_callback$4, $ClassMethods_callbacks_for$11, $ClassMethods_callbacks$ques$12;

          
          
          Opal.def(self, '$define_callback', $ClassMethods_define_callback$4 = function $$define_callback(callback_name, $kwargs) {
            var before_call_hook, after_define_hook, $$5, $$7, $$8, $iter = $ClassMethods_define_callback$4.$$p, $yield = $iter || nil, self = this, wrapper_name = nil, $ret_or_1 = nil;

            if ($iter) $ClassMethods_define_callback$4.$$p = null;
            
            
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else if (!$kwargs.$$is_hash) {
              throw Opal.ArgumentError.$new('expected kwargs');
            };
            
            before_call_hook = $kwargs.$$smap["before_call_hook"];
            if (before_call_hook == null) {
              before_call_hook = nil
            };
            
            after_define_hook = $kwargs.$$smap["after_define_hook"];
            if (after_define_hook == null) {
              after_define_hook = nil
            };
            wrapper_name = "" + "_" + (callback_name) + "_callbacks";
            $send(self, 'define_singleton_method', [wrapper_name], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s, $$6;

              return $send($$($nesting, 'Context'), 'set_var', [self, "" + "@" + (wrapper_name), $hash2(["force"], {"force": true})], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;

                return []}, $$6.$$s = self, $$6.$$arity = 0, $$6))}, $$5.$$s = self, $$5.$$arity = 0, $$5));
            before_call_hook = (function() {if ($truthy(($ret_or_1 = before_call_hook))) {
              return $ret_or_1
            } else {
              return $send(self, 'lambda', [], ($$7 = function(_name, sself, proc, $a){var self = $$7.$$s == null ? this : $$7.$$s, $post_args, args;

                
                
                if (_name == null) {
                  _name = nil;
                };
                
                if (sself == null) {
                  sself = nil;
                };
                
                if (proc == null) {
                  proc = nil;
                };
                
                $post_args = Opal.slice.call(arguments, 3, arguments.length);
                
                args = $post_args;;
                $send(sself, 'instance_exec', Opal.to_a(args), proc.$to_proc());
                return args;}, $$7.$$s = self, $$7.$$arity = -4, $$7))
            }; return nil; })();
            $send(self, 'define_singleton_method', ["" + "_" + (callback_name) + "_before_call_hook"], before_call_hook.$to_proc());
            return $send(self, 'define_singleton_method', [callback_name], ($$8 = function($a){var self = $$8.$$s == null ? this : $$8.$$s, $iter = $$8.$$p, block = $iter || nil, $post_args, args, $$9;

              
              
              if ($iter) $$8.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              if ((block !== nil)) {
                args['$<<'](block)};
              self.$send(wrapper_name).$push(args);
              $send($$($nesting, 'Hotloader'), 'when_file_updates', [], ($$9 = function(){var self = $$9.$$s == null ? this : $$9.$$s, $$10;

                return $send(self.$send(wrapper_name), 'delete_if', [], ($$10 = function(item){var self = $$10.$$s == null ? this : $$10.$$s;

                  
                  
                  if (item == null) {
                    item = nil;
                  };
                  return item['$equal?'](args);}, $$10.$$s = self, $$10.$$arity = 1, $$10))}, $$9.$$s = self, $$9.$$arity = 0, $$9));
              if ($truthy(after_define_hook)) {
                return after_define_hook.$call(self)
              } else {
                return nil
              };}, $$8.$$s = self, $$8.$$arity = -1, $$8));
          }, $ClassMethods_define_callback$4.$$arity = -2);
          
          Opal.def(self, '$callbacks_for', $ClassMethods_callbacks_for$11 = function $$callbacks_for(callback_name) {
            var self = this, wrapper_name = nil;

            
            wrapper_name = "" + "_" + (callback_name) + "_callbacks";
            return $rb_plus((function() {if ($truthy(self.$superclass()['$respond_to?']("callbacks_for"))) {
              return self.$superclass().$callbacks_for(callback_name)
            } else {
              return []
            }; return nil; })(), self.$send(wrapper_name));
          }, $ClassMethods_callbacks_for$11.$$arity = 1);
          return (Opal.def(self, '$callbacks?', $ClassMethods_callbacks$ques$12 = function(name) {
            var self = this;

            return self.$callbacks_for(name)['$any?']()
          }, $ClassMethods_callbacks$ques$12.$$arity = 1), nil) && 'callbacks?';
        })($nesting[0], $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/auto_unmount"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$include', '$class_eval', '$define_callback', '$run_callback', '$each', '$[]', '$objects_to_unmount', '$to_proc', '$delete', '$instance_variables', '$instance_variable_get', '$respond_to?', '$unmount', '$unmounted?', '$tap', '$define_singleton_method', '$abort', '$<<', '$new', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'AutoUnmount');

        var $nesting = [self].concat($parent_nesting), $AutoUnmount_included$1, $AutoUnmount_unmounted$ques$3, $AutoUnmount_unmount$4, $AutoUnmount_every$6, $AutoUnmount_after$9;

        
        Opal.defs(self, '$included', $AutoUnmount_included$1 = function $$included(base) {
          var $$2, self = this;

          
          base.$include($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Callbacks'));
          return $send(base, 'class_eval', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

            return self.$define_callback("before_unmount")}, $$2.$$s = self, $$2.$$arity = 0, $$2));
        }, $AutoUnmount_included$1.$$arity = 1);
        
        Opal.def(self, '$unmounted?', $AutoUnmount_unmounted$ques$3 = function() {
          var self = this;
          if (self.__hyperstack_internal_auto_unmount_unmounted == null) self.__hyperstack_internal_auto_unmount_unmounted = nil;

          return self.__hyperstack_internal_auto_unmount_unmounted
        }, $AutoUnmount_unmounted$ques$3.$$arity = 0);
        
        Opal.def(self, '$unmount', $AutoUnmount_unmount$4 = function $$unmount() {
          var $$5, self = this;

          
          self.$run_callback("before_unmount");
          $send($$($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self), 'each', [], "unmount".$to_proc());
          $$($nesting, 'AutoUnmount').$objects_to_unmount().$delete(self);
          $send(self.$instance_variables(), 'each', [], ($$5 = function(var$){var self = $$5.$$s == null ? this : $$5.$$s, val = nil;

            
            
            if (var$ == null) {
              var$ = nil;
            };
            val = self.$instance_variable_get(var$);
            
            try {
              if ($truthy(val['$respond_to?']("unmount"))) {
                return val.$unmount()
              } else {
                return nil
              }
            } catch ($err) {
              if (Opal.rescue($err, [$$$($$($nesting, 'JS'), 'Error')])) {
                try {
                  return nil
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            };;}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          return (self.__hyperstack_internal_auto_unmount_unmounted = true);
        }, $AutoUnmount_unmount$4.$$arity = 0);
        
        Opal.def(self, '$every', $AutoUnmount_every$6 = function $$every($a) {
          var $iter = $AutoUnmount_every$6.$$p, block = $iter || nil, $post_args, args, $$7, self = this;

          if ($iter) $AutoUnmount_every$6.$$p = null;
          
          
          if ($iter) $AutoUnmount_every$6.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ($truthy(self['$unmounted?']())) {
            return nil};
          return $send($send2(self, $find_super(self, 'every', $AutoUnmount_every$6, false, true), 'every', Opal.to_a(args), $iter), 'tap', [], ($$7 = function(id){var self = $$7.$$s == null ? this : $$7.$$s, $$8, sself = nil;

            
            
            if (id == null) {
              id = nil;
            };
            sself = self;
            $send(id, 'define_singleton_method', ["unmount"], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

              return self.$abort()}, $$8.$$s = self, $$8.$$arity = 0, $$8));
            return $$($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self)['$<<'](id);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
        }, $AutoUnmount_every$6.$$arity = -1);
        
        Opal.def(self, '$after', $AutoUnmount_after$9 = function $$after($a) {
          var $iter = $AutoUnmount_after$9.$$p, block = $iter || nil, $post_args, args, $$10, self = this;

          if ($iter) $AutoUnmount_after$9.$$p = null;
          
          
          if ($iter) $AutoUnmount_after$9.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          if ($truthy(self['$unmounted?']())) {
            return nil};
          return $send($send2(self, $find_super(self, 'after', $AutoUnmount_after$9, false, true), 'after', Opal.to_a(args), $iter), 'tap', [], ($$10 = function(id){var self = $$10.$$s == null ? this : $$10.$$s, $$11, sself = nil;

            
            
            if (id == null) {
              id = nil;
            };
            sself = self;
            $send(id, 'define_singleton_method', ["unmount"], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s;

              return self.$abort()}, $$11.$$s = self, $$11.$$arity = 0, $$11));
            return $$($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self)['$<<'](id);}, $$10.$$s = self, $$10.$$arity = 1, $$10));
        }, $AutoUnmount_after$9.$$arity = -1);
        return (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $objects_to_unmount$12;

          return (Opal.def(self, '$objects_to_unmount', $objects_to_unmount$12 = function $$objects_to_unmount() {
            var $$13, self = this, $ret_or_1 = nil;
            if (self.objects_to_unmount == null) self.objects_to_unmount = nil;

            return (self.objects_to_unmount = (function() {if ($truthy(($ret_or_1 = self.objects_to_unmount))) {
              return $ret_or_1
            } else {
              return $send($$($nesting, 'Hash'), 'new', [], ($$13 = function(h, k){var self = $$13.$$s == null ? this : $$13.$$s, $writer = nil;

                
                
                if (h == null) {
                  h = nil;
                };
                
                if (k == null) {
                  k = nil;
                };
                $writer = [k, $$($nesting, 'Set').$new()];
                $send(h, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, $$13.$$s = self, $$13.$$arity = 2, $$13))
            }; return nil; })())
          }, $objects_to_unmount$12.$$arity = 0), nil) && 'objects_to_unmount'
        })(Opal.get_singleton_class(self), $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["native"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $range = Opal.range, $alias = Opal.alias, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$warn', '$include', '$is_a?', '$map', '$to_a', '$_Array', '$method_missing', '$bind', '$instance_method', '$slice', '$-', '$length', '$[]=', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$method_defined?', '$_initialize', '$name', '$native_module']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Native');

    var $nesting = [self].concat($parent_nesting), $Native_is_a$ques$1, $Native_try_convert$2, $Native_convert$3, $Native_call$4, $Native_proc$5, $Native_included$22;

    
    Opal.defs(self, '$is_a?', $Native_is_a$ques$1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, $Native_is_a$ques$1.$$arity = 2);
    Opal.defs(self, '$try_convert', $Native_try_convert$2 = function $$try_convert(value, default$) {
      var self = this;

      
      
      if (default$ == null) {
        default$ = nil;
      };
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    ;
    }, $Native_try_convert$2.$$arity = -2);
    Opal.defs(self, '$convert', $Native_convert$3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($$($nesting, 'ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, $Native_convert$3.$$arity = 1);
    Opal.defs(self, '$call', $Native_call$4 = function $$call(obj, key, $a) {
      var $iter = $Native_call$4.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Native_call$4.$$p = null;
      
      
      if ($iter) $Native_call$4.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 2, arguments.length);
      
      args = $post_args;;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    }, $Native_call$4.$$arity = -3);
    Opal.defs(self, '$proc', $Native_proc$5 = function $$proc() {
      var $iter = $Native_proc$5.$$p, block = $iter || nil, $$6, self = this;

      if ($iter) $Native_proc$5.$$p = null;
      
      
      if ($iter) $Native_proc$5.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'LocalJumpError'), "no block given")
      };
      return $send($$$('::', 'Kernel'), 'proc', [], ($$6 = function($a){var self = $$6.$$s == null ? this : $$6.$$s, $post_args, args, $$7, instance = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        $send(args, 'map!', [], ($$7 = function(arg){var self = $$7.$$s == null ? this : $$7.$$s;

          
          
          if (arg == null) {
            arg = nil;
          };
          return self.$Native(arg);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, $$6.$$s = self, $$6.$$arity = -1, $$6));
    }, $Native_proc$5.$$arity = 0);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Helpers');

      var $nesting = [self].concat($parent_nesting), $Helpers_alias_native$8, $Helpers_native_reader$12, $Helpers_native_writer$15, $Helpers_native_accessor$18;

      
      
      Opal.def(self, '$alias_native', $Helpers_alias_native$8 = function $$alias_native(new$, $a, $b) {
        var $post_args, $kwargs, old, as, $$9, $$10, $$11, $iter = $Helpers_alias_native$8.$$p, $yield = $iter || nil, self = this;

        if ($iter) $Helpers_alias_native$8.$$p = null;
        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        $kwargs = Opal.extract_kwargs($post_args);
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if ($post_args.length > 0) {
          old = $post_args[0];
          $post_args.splice(0, 1);
        }
        if (old == null) {
          old = new$;
        };
        
        as = $kwargs.$$smap["as"];
        if (as == null) {
          as = nil
        };
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], ($$9 = function(value){var self = $$9.$$s == null ? this : $$9.$$s;
            if (self["native"] == null) self["native"] = nil;

            
            
            if (value == null) {
              value = nil;
            };
            self["native"][old['$[]']($range(0, -2, false))] = $$($nesting, 'Native').$convert(value);
            return value;}, $$9.$$s = self, $$9.$$arity = 1, $$9))
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], ($$10 = function($c){var self = $$10.$$s == null ? this : $$10.$$s, $iter = $$10.$$p, block = $iter || nil, $post_args, args, value = nil;
            if (self["native"] == null) self["native"] = nil;

            
            
            if ($iter) $$10.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            value = $send($$($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc());
            if ($truthy(value)) {
              return as.$new(value.$to_n())
            } else {
              return nil
            };}, $$10.$$s = self, $$10.$$arity = -1, $$10))
        } else {
          return $send(self, 'define_method', [new$], ($$11 = function($c){var self = $$11.$$s == null ? this : $$11.$$s, $iter = $$11.$$p, block = $iter || nil, $post_args, args;
            if (self["native"] == null) self["native"] = nil;

            
            
            if ($iter) $$11.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send($$($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc());}, $$11.$$s = self, $$11.$$arity = -1, $$11))
        };
      }, $Helpers_alias_native$8.$$arity = -2);
      
      Opal.def(self, '$native_reader', $Helpers_native_reader$12 = function $$native_reader($a) {
        var $post_args, names, $$13, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        return $send(names, 'each', [], ($$13 = function(name){var self = $$13.$$s == null ? this : $$13.$$s, $$14;

          
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', [name], ($$14 = function(){var self = $$14.$$s == null ? this : $$14.$$s;
            if (self["native"] == null) self["native"] = nil;

            return self.$Native(self["native"][name])}, $$14.$$s = self, $$14.$$arity = 0, $$14));}, $$13.$$s = self, $$13.$$arity = 1, $$13));
      }, $Helpers_native_reader$12.$$arity = -1);
      
      Opal.def(self, '$native_writer', $Helpers_native_writer$15 = function $$native_writer($a) {
        var $post_args, names, $$16, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        return $send(names, 'each', [], ($$16 = function(name){var self = $$16.$$s == null ? this : $$16.$$s, $$17;

          
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', ["" + (name) + "="], ($$17 = function(value){var self = $$17.$$s == null ? this : $$17.$$s;
            if (self["native"] == null) self["native"] = nil;

            
            
            if (value == null) {
              value = nil;
            };
            return self.$Native(self["native"][name] = value);}, $$17.$$s = self, $$17.$$arity = 1, $$17));}, $$16.$$s = self, $$16.$$arity = 1, $$16));
      }, $Helpers_native_writer$15.$$arity = -1);
      return (Opal.def(self, '$native_accessor', $Helpers_native_accessor$18 = function $$native_accessor($a) {
        var $post_args, names, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        $send(self, 'native_reader', Opal.to_a(names));
        return $send(self, 'native_writer', Opal.to_a(names));
      }, $Helpers_native_accessor$18.$$arity = -1), nil) && 'native_accessor';
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Wrapper');

      var $nesting = [self].concat($parent_nesting), $Wrapper_initialize$19, $Wrapper_to_n$20, $Wrapper_included$21;

      
      
      Opal.def(self, '$initialize', $Wrapper_initialize$19 = function $$initialize(native$) {
        var self = this;

        
        if ($truthy($$$('::', 'Kernel')['$native?'](native$))) {
        } else {
          $$$('::', 'Kernel').$raise($$($nesting, 'ArgumentError'), "" + (native$.$inspect()) + " isn't native")
        };
        return (self["native"] = native$);
      }, $Wrapper_initialize$19.$$arity = 1);
      
      Opal.def(self, '$to_n', $Wrapper_to_n$20 = function $$to_n() {
        var self = this;
        if (self["native"] == null) self["native"] = nil;

        return self["native"]
      }, $Wrapper_to_n$20.$$arity = 0);
      return (Opal.defs(self, '$included', $Wrapper_included$21 = function $$included(klass) {
        var self = this;

        return klass.$extend($$($nesting, 'Helpers'))
      }, $Wrapper_included$21.$$arity = 1), nil) && 'included';
    })($nesting[0], $nesting);
    return (Opal.defs(self, '$included', $Native_included$22 = function $$included(base) {
      var self = this;

      
      self.$warn("Including ::Native is deprecated. Please include Native::Wrapper instead.");
      return base.$include($$($nesting, 'Wrapper'));
    }, $Native_included$22.$$arity = 1), nil) && 'included';
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_native$ques$23, $Kernel_Native$24, $Kernel_Array$27;

    
    
    Opal.def(self, '$native?', $Kernel_native$ques$23 = function(value) {
      var self = this;

      return value == null || !value.$$class;
    }, $Kernel_native$ques$23.$$arity = 1);
    
    Opal.def(self, '$Native', $Kernel_Native$24 = function $$Native(obj) {
      var $$25, $$26, $iter = $Kernel_Native$24.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Kernel_Native$24.$$p = null;
      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return $$$($$($nesting, 'Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?']($$($nesting, 'Array')))) {
        return $send(obj, 'map', [], ($$25 = function(o){var self = $$25.$$s == null ? this : $$25.$$s;

          
          
          if (o == null) {
            o = nil;
          };
          return self.$Native(o);}, $$25.$$s = self, $$25.$$arity = 1, $$25))
      } else if ($truthy(obj['$is_a?']($$($nesting, 'Proc')))) {
        return $send(self, 'proc', [], ($$26 = function($a){var self = $$26.$$s == null ? this : $$26.$$s, $iter = $$26.$$p, block = $iter || nil, $post_args, args;

          
          
          if ($iter) $$26.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return self.$Native($send(obj, 'call', Opal.to_a(args), block.$to_proc()));}, $$26.$$s = self, $$26.$$arity = -1, $$26))
      } else {
        return obj
      }
    }, $Kernel_Native$24.$$arity = 1);
    $alias(self, "_Array", "Array");
    return (Opal.def(self, '$Array', $Kernel_Array$27 = function $$Array(object, $a) {
      var $iter = $Kernel_Array$27.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Kernel_Array$27.$$p = null;
      
      
      if ($iter) $Kernel_Array$27.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      if ($truthy(self['$native?'](object))) {
        return $send($$$($$($nesting, 'Native'), 'Array'), 'new', [object].concat(Opal.to_a(args)), block.$to_proc()).$to_a()};
      return self.$_Array(object);
    }, $Kernel_Array$27.$$arity = -2), nil) && 'Array';
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_$eq_eq$28, $Object_has_key$ques$29, $Object_each$30, $Object_$$$31, $Object_$$$eq$32, $Object_merge$excl$33, $Object_respond_to$ques$34, $Object_respond_to_missing$ques$35, $Object_method_missing$36, $Object_nil$ques$37, $Object_is_a$ques$38, $Object_instance_of$ques$39, $Object_class$40, $Object_to_a$41, $Object_inspect$42;

    self.$$prototype["native"] = nil;
    
    self.$include($$$($$$('::', 'Native'), 'Wrapper'));
    
    Opal.def(self, '$==', $Object_$eq_eq$28 = function(other) {
      var self = this;

      return self["native"] === $$$('::', 'Native').$try_convert(other)
    }, $Object_$eq_eq$28.$$arity = 1);
    
    Opal.def(self, '$has_key?', $Object_has_key$ques$29 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, $Object_has_key$ques$29.$$arity = 1);
    $alias(self, "key?", "has_key?");
    $alias(self, "include?", "has_key?");
    $alias(self, "member?", "has_key?");
    
    Opal.def(self, '$each', $Object_each$30 = function $$each($a) {
      var $post_args, args, $iter = $Object_each$30.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Object_each$30.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
      } else {
        return $send(self, 'method_missing', ["each"].concat(Opal.to_a(args)))
      };
    }, $Object_each$30.$$arity = -1);
    
    Opal.def(self, '$[]', $Object_$$$31 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return $$$('::', 'Native').$call(self["native"], key)
      }
    
    }, $Object_$$$31.$$arity = 1);
    
    Opal.def(self, '$[]=', $Object_$$$eq$32 = function(key, value) {
      var self = this, native$ = nil;

      
      native$ = $$$('::', 'Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
      } else {
        return self["native"][key] = native$
      };
    }, $Object_$$$eq$32.$$arity = 2);
    
    Opal.def(self, '$merge!', $Object_merge$excl$33 = function(other) {
      var self = this;

      
      
      other = $$$('::', 'Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, $Object_merge$excl$33.$$arity = 1);
    
    Opal.def(self, '$respond_to?', $Object_respond_to$ques$34 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return $$$('::', 'Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    }, $Object_respond_to$ques$34.$$arity = -2);
    
    Opal.def(self, '$respond_to_missing?', $Object_respond_to_missing$ques$35 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return Opal.hasOwnProperty.call(self["native"], name);
    }, $Object_respond_to_missing$ques$35.$$arity = -2);
    
    Opal.def(self, '$method_missing', $Object_method_missing$36 = function $$method_missing(mid, $a) {
      var $iter = $Object_method_missing$36.$$p, block = $iter || nil, $post_args, args, self = this, $writer = nil;

      if ($iter) $Object_method_missing$36.$$p = null;
      
      
      if ($iter) $Object_method_missing$36.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return (($writer = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)]), $send(self, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }
      else {
        return $send($$$('::', 'Native'), 'call', [self["native"], mid].concat(Opal.to_a(args)), block.$to_proc());
      }
    ;
    }, $Object_method_missing$36.$$arity = -2);
    
    Opal.def(self, '$nil?', $Object_nil$ques$37 = function() {
      var self = this;

      return false
    }, $Object_nil$ques$37.$$arity = 0);
    
    Opal.def(self, '$is_a?', $Object_is_a$ques$38 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    }, $Object_is_a$ques$38.$$arity = 1);
    $alias(self, "kind_of?", "is_a?");
    
    Opal.def(self, '$instance_of?', $Object_instance_of$ques$39 = function(klass) {
      var self = this;

      return self.$$class === klass;
    }, $Object_instance_of$ques$39.$$arity = 1);
    
    Opal.def(self, '$class', $Object_class$40 = function() {
      var self = this;

      return self.$$class;
    }, $Object_class$40.$$arity = 0);
    
    Opal.def(self, '$to_a', $Object_to_a$41 = function $$to_a(options) {
      var $iter = $Object_to_a$41.$$p, block = $iter || nil, self = this;

      if ($iter) $Object_to_a$41.$$p = null;
      
      
      if ($iter) $Object_to_a$41.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      return $send($$$($$$('::', 'Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a();
    }, $Object_to_a$41.$$arity = -1);
    return (Opal.def(self, '$inspect', $Object_inspect$42 = function $$inspect() {
      var self = this;

      return "" + "#<Native:" + (String(self["native"])) + ">"
    }, $Object_inspect$42.$$arity = 0), nil) && 'inspect';
  })($$($nesting, 'Native'), $$($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_initialize$43, $Array_each$44, $Array_$$$45, $Array_$$$eq$46, $Array_last$47, $Array_length$48, $Array_inspect$49;

    self.$$prototype.named = self.$$prototype["native"] = self.$$prototype.get = self.$$prototype.block = self.$$prototype.set = self.$$prototype.length = nil;
    
    self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
    self.$include($$($nesting, 'Enumerable'));
    
    Opal.def(self, '$initialize', $Array_initialize$43 = function $$initialize(native$, options) {
      var $iter = $Array_initialize$43.$$p, block = $iter || nil, self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

      if ($iter) $Array_initialize$43.$$p = null;
      
      
      if ($iter) $Array_initialize$43.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      $send2(self, $find_super(self, 'initialize', $Array_initialize$43, false, true), 'initialize', [native$], null);
      self.get = (function() {if ($truthy(($ret_or_1 = options['$[]']("get")))) {
        return $ret_or_1
      } else {
        return options['$[]']("access")
      }; return nil; })();
      self.named = options['$[]']("named");
      self.set = (function() {if ($truthy(($ret_or_2 = options['$[]']("set")))) {
        return $ret_or_2
      } else {
        return options['$[]']("access")
      }; return nil; })();
      self.length = (function() {if ($truthy(($ret_or_3 = options['$[]']("length")))) {
        return $ret_or_3
      } else {
        return "length"
      }; return nil; })();
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise($$($nesting, 'ArgumentError'), "no length found on the array-like object")
      } else {
        return nil
      };
    }, $Array_initialize$43.$$arity = -2);
    
    Opal.def(self, '$each', $Array_each$44 = function $$each() {
      var $iter = $Array_each$44.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_each$44.$$p = null;
      
      
      if ($iter) $Array_each$44.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, $Array_each$44.$$arity = 0);
    
    Opal.def(self, '$[]', $Array_$$$45 = function(index) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = index;
      if ($$($nesting, 'String')['$===']($case) || $$($nesting, 'Symbol')['$===']($case)) {if ($truthy(self.named)) {
        return self["native"][self.named](index)
      } else {
        return self["native"][index]
      }}
      else if ($$($nesting, 'Integer')['$===']($case)) {if ($truthy(self.get)) {
        return self["native"][self.get](index)
      } else {
        return self["native"][index]
      }}
      else { return nil }})();
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
        } else {
          return self.$Native(result)
        }
      } else {
        return nil
      };
    }, $Array_$$$45.$$arity = 1);
    
    Opal.def(self, '$[]=', $Array_$$$eq$46 = function(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, $$($nesting, 'Native').$convert(value))
      } else {
        return self["native"][index] = $$($nesting, 'Native').$convert(value)
      }
    }, $Array_$$$eq$46.$$arity = 2);
    
    Opal.def(self, '$last', $Array_last$47 = function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      
      
      if (count == null) {
        count = nil;
      };
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
      } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    }, $Array_last$47.$$arity = -1);
    
    Opal.def(self, '$length', $Array_length$48 = function $$length() {
      var self = this;

      return self["native"][self.length]
    }, $Array_length$48.$$arity = 0);
    $alias(self, "to_ary", "to_a");
    return (Opal.def(self, '$inspect', $Array_inspect$49 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, $Array_inspect$49.$$arity = 0), nil) && 'inspect';
  })($$($nesting, 'Native'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_to_n$50;

    return (Opal.def(self, '$to_n', $Numeric_to_n$50 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $Numeric_to_n$50.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Proc');

    var $nesting = [self].concat($parent_nesting), $Proc_to_n$51;

    return (Opal.def(self, '$to_n', $Proc_to_n$51 = function $$to_n() {
      var self = this;

      return self
    }, $Proc_to_n$51.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_n$52;

    return (Opal.def(self, '$to_n', $String_to_n$52 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $String_to_n$52.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Regexp');

    var $nesting = [self].concat($parent_nesting), $Regexp_to_n$53;

    return (Opal.def(self, '$to_n', $Regexp_to_n$53 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $Regexp_to_n$53.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MatchData');

    var $nesting = [self].concat($parent_nesting), $MatchData_to_n$54;

    self.$$prototype.matches = nil;
    return (Opal.def(self, '$to_n', $MatchData_to_n$54 = function $$to_n() {
      var self = this;

      return self.matches
    }, $MatchData_to_n$54.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Struct');

    var $nesting = [self].concat($parent_nesting), $Struct_to_n$55;

    return (Opal.def(self, '$to_n', $Struct_to_n$55 = function $$to_n() {
      var $$56, self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], ($$56 = function(name, value){var self = $$56.$$s == null ? this : $$56.$$s;

        
        
        if (name == null) {
          name = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return result[name] = $$($nesting, 'Native').$try_convert(value, value);}, $$56.$$s = self, $$56.$$arity = 2, $$56));
      return result;
    }, $Struct_to_n$55.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_to_n$57;

    return (Opal.def(self, '$to_n', $Array_to_n$57 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($$($nesting, 'Native').$try_convert(obj, obj));
      }

      return result;
    
    }, $Array_to_n$57.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean_to_n$58;

    return (Opal.def(self, '$to_n', $Boolean_to_n$58 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $Boolean_to_n$58.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_to_n$59;

    return (Opal.def(self, '$to_n', $Time_to_n$59 = function $$to_n() {
      var self = this;

      return self
    }, $Time_to_n$59.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_to_n$60;

    return (Opal.def(self, '$to_n', $NilClass_to_n$60 = function $$to_n() {
      var self = this;

      return null;
    }, $NilClass_to_n$60.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  if ($truthy($$($nesting, 'Hash')['$method_defined?']("_initialize"))) {
  } else {
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Hash');

      var $nesting = [self].concat($parent_nesting), $Hash_initialize$61, $Hash_to_n$62;

      
      $alias(self, "_initialize", "initialize");
      
      Opal.def(self, '$initialize', $Hash_initialize$61 = function $$initialize(defaults) {
        var $iter = $Hash_initialize$61.$$p, block = $iter || nil, self = this;

        if ($iter) $Hash_initialize$61.$$p = null;
        
        
        if ($iter) $Hash_initialize$61.$$p = null;;
        ;
        
        if (defaults != null &&
             (defaults.constructor === undefined ||
               defaults.constructor === Object)) {
          var smap = self.$$smap,
              keys = self.$$keys,
              key, value;

          for (key in defaults) {
            value = defaults[key];

            if (value &&
                 (value.constructor === undefined ||
                   value.constructor === Object)) {
              smap[key] = $$($nesting, 'Hash').$new(value);
            } else if (value && value.$$is_array) {
              value = value.map(function(item) {
                if (item &&
                     (item.constructor === undefined ||
                       item.constructor === Object)) {
                  return $$($nesting, 'Hash').$new(item);
                }

                return self.$Native(item);
              });
              smap[key] = value
            } else {
              smap[key] = self.$Native(value);
            }

            keys.push(key);
          }

          return self;
        }

        return $send(self, '_initialize', [defaults], block.$to_proc());
      ;
      }, $Hash_initialize$61.$$arity = -1);
      return (Opal.def(self, '$to_n', $Hash_to_n$62 = function $$to_n() {
        var self = this;

        
        var result = {},
            keys = self.$$keys,
            smap = self.$$smap,
            key, value;

        for (var i = 0, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = smap[key];
          } else {
            key = key.key;
            value = key.value;
          }

          result[key] = $$($nesting, 'Native').$try_convert(value, value);
        }

        return result;
      
      }, $Hash_to_n$62.$$arity = 0), nil) && 'to_n';
    })($nesting[0], null, $nesting)
  };
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_native_module$63;

    return (Opal.def(self, '$native_module', $Module_native_module$63 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, $Module_native_module$63.$$arity = 0), nil) && 'native_module'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Class');

    var $nesting = [self].concat($parent_nesting), $Class_native_alias$64, $Class_native_class$65;

    
    
    Opal.def(self, '$native_alias', $Class_native_alias$64 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.prototype['$' + existing_mid];
      if (!aliased) {
        self.$raise($$($nesting, 'NameError').$new("" + "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", existing_mid));
      }
      self.prototype[new_jsid] = aliased;
    
    }, $Class_native_alias$64.$$arity = 2);
    return (Opal.def(self, '$native_class', $Class_native_class$65 = function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, $Class_native_class$65.$$arity = 0), nil) && 'native_class';
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};

Opal.modules["json"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$new', '$push', '$[]=', '$-', '$[]', '$create_id', '$json_create', '$const_get', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'JSON');

    var $nesting = [self].concat($parent_nesting), $JSON_$$$1, $JSON_parse$2, $JSON_parse$excl$3, $JSON_load$4, $JSON_from_object$5, $JSON_generate$6, $JSON_dump$7, $writer = nil;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'JSONError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParserError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'JSONError'), $nesting);
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise($$$($$($nesting, 'JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'undefined':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (($writer = [k, to_opal(value[k], options)]), $send((hash), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($$($nesting, 'JSON').$create_id())) != nil) {
              return $$$('::', 'Object').$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = ["json_class"];
    $send(self, 'create_id=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.defs(self, '$[]', $JSON_$$$1 = function(value, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      if ($truthy($$($nesting, 'String')['$==='](value))) {
        return self.$parse(value, options)
      } else {
        return self.$generate(value, options)
      };
    }, $JSON_$$$1.$$arity = -2);
    Opal.defs(self, '$parse', $JSON_parse$2 = function $$parse(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    }, $JSON_parse$2.$$arity = -2);
    Opal.defs(self, '$parse!', $JSON_parse$excl$3 = function(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$parse(source, options);
    }, $JSON_parse$excl$3.$$arity = -2);
    Opal.defs(self, '$load', $JSON_load$4 = function $$load(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$from_object($parse(source), options);
    }, $JSON_load$4.$$arity = -2);
    Opal.defs(self, '$from_object', $JSON_from_object$5 = function $$from_object(js_object, options) {
      var self = this, $ret_or_1 = nil, $writer = nil, $ret_or_2 = nil;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      if ($truthy(($ret_or_1 = options['$[]']("object_class")))) {
        $ret_or_1
      } else {
        
        $writer = ["object_class", $$($nesting, 'Hash')];
        $send(options, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      if ($truthy(($ret_or_2 = options['$[]']("array_class")))) {
        $ret_or_2
      } else {
        
        $writer = ["array_class", $$($nesting, 'Array')];
        $send(options, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return to_opal(js_object, options.$$smap);;
    }, $JSON_from_object$5.$$arity = -2);
    Opal.defs(self, '$generate', $JSON_generate$6 = function $$generate(obj, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return obj.$to_json(options);
    }, $JSON_generate$6.$$arity = -2);
    return (Opal.defs(self, '$dump', $JSON_dump$7 = function $$dump(obj, io, limit) {
      var self = this, string = nil;

      
      
      if (io == null) {
        io = nil;
      };
      
      if (limit == null) {
        limit = nil;
      };
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
      } else {
        return string
      };
    }, $JSON_dump$7.$$arity = -2), nil) && 'dump';
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_to_json$8;

    return (Opal.def(self, '$to_json', $Object_to_json$8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, $Object_to_json$8.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_to_json$9;

    return (Opal.def(self, '$to_json', $Enumerable_to_json$9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, $Enumerable_to_json$9.$$arity = 0), nil) && 'to_json'
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_to_json$10;

    return (Opal.def(self, '$to_json', $Array_to_json$10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(',') + ']';
    
    }, $Array_to_json$10.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean_to_json$11;

    return (Opal.def(self, '$to_json', $Boolean_to_json$11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, $Boolean_to_json$11.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_to_json$12;

    return (Opal.def(self, '$to_json', $Hash_to_json$12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(',') + '}';
    
    }, $Hash_to_json$12.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_to_json$13;

    return (Opal.def(self, '$to_json', $NilClass_to_json$13 = function $$to_json() {
      var self = this;

      return "null"
    }, $NilClass_to_json$13.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_to_json$14;

    return (Opal.def(self, '$to_json', $Numeric_to_json$14 = function $$to_json() {
      var self = this;

      return self.toString();
    }, $Numeric_to_json$14.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_json$15;

    return (Opal.def(self, '$to_json', $String_to_json$15 = function $$to_json() {
      var self = this;

      return JSON.stringify(self);
    }, $String_to_json$15.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_to_json$16;

    return (Opal.def(self, '$to_json', $Time_to_json$16 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, $Time_to_json$16.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $Date_to_json$17, $Date_as_json$18;

    
    
    Opal.def(self, '$to_json', $Date_to_json$17 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, $Date_to_json$17.$$arity = 0);
    return (Opal.def(self, '$as_json', $Date_as_json$18 = function $$as_json() {
      var self = this;

      return self.$to_s()
    }, $Date_as_json$18.$$arity = 0), nil) && 'as_json';
  })($nesting[0], null, $nesting);
};

Opal.modules["hyperstack/state/observer"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$observing', '$to_proc', '$update_objects_to_observe', '$remove']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'State');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Observer');

        var $nesting = [self].concat($parent_nesting), $Observer_observing$1, $Observer_update_objects_to_observe$2, $Observer_remove$3;

        
        
        Opal.def(self, '$observing', $Observer_observing$1 = function $$observing($kwargs) {
          var $iter = $Observer_observing$1.$$p, block = $iter || nil, immediate_update, rendering, update_objects, self = this;

          if ($iter) $Observer_observing$1.$$p = null;
          
          
          if ($iter) $Observer_observing$1.$$p = null;;
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          immediate_update = $kwargs.$$smap["immediate_update"];
          if (immediate_update == null) {
            immediate_update = false
          };
          
          rendering = $kwargs.$$smap["rendering"];
          if (rendering == null) {
            rendering = false
          };
          
          update_objects = $kwargs.$$smap["update_objects"];
          if (update_objects == null) {
            update_objects = false
          };
          return $send($$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper'), 'observing', [self, immediate_update, rendering, update_objects], block.$to_proc());
        }, $Observer_observing$1.$$arity = -1);
        
        Opal.def(self, '$update_objects_to_observe', $Observer_update_objects_to_observe$2 = function $$update_objects_to_observe() {
          var self = this;

          return $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper').$update_objects_to_observe(self)
        }, $Observer_update_objects_to_observe$2.$$arity = 0);
        return (Opal.def(self, '$remove', $Observer_remove$3 = function $$remove() {
          var self = this;

          return $$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper').$remove(self)
        }, $Observer_remove$3.$$arity = 0), nil) && 'remove';
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/validator"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$private', '$tap', '$new', '$each', '$instance_variable_set', '$dup', '$instance_variable_get', '$build', '$to_proc', '$instance_eval', '$[]=', '$-', '$define_rule', '$coerce_native_hash_values', '$rules', '$define_all_others', '$props_wrapper', '$reject', '$[]', '$errors=', '$allow_undefined_props?', '$validate_undefined', '$defined_props', '$validate_required', '$validate_types', '$validate_allowed', '$errors', '$inject', '$select', '$include?', '$keys', '$!', '$define_param', '$is_a?', '$type_check', '$>', '$length', '$validate_value_array', '$nil?', '$respond_to?', '$_react_param_conversion', '$<<', '$each_with_index', '$Native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Validator');

          var $nesting = [self].concat($parent_nesting), $Validator_copy$1, $Validator_initialize$4, $Validator_build$5, $Validator_build$6, $Validator_requires$7, $Validator_optional$8, $Validator_event$9, $Validator_all_other_params$10, $Validator_validate$13, $Validator_default_props$15, $Validator_defined_props$18, $Validator_allow_undefined_props$ques$20, $Validator_rules$21, $Validator_define_rule$22, $Validator_errors$23, $Validator_validate_types$24, $Validator_type_check$25, $Validator_validate_allowed$26, $Validator_validate_required$27, $Validator_validate_undefined$29, $Validator_validate_value_array$31, $Validator_coerce_native_hash_values$33;

          self.$$prototype.allow_undefined_props = self.$$prototype.rules = self.$$prototype.errors = nil;
          
          self.$attr_accessor("errors");
          self.$attr_reader("props_wrapper");
          self.$private("errors", "props_wrapper");
          
          Opal.def(self, '$copy', $Validator_copy$1 = function $$copy(new_props_wrapper) {
            var $$2, self = this;

            return $send($$($nesting, 'Validator').$new(new_props_wrapper), 'tap', [], ($$2 = function(c){var self = $$2.$$s == null ? this : $$2.$$s, $$3;

              
              
              if (c == null) {
                c = nil;
              };
              return $send(["@allow_undefined_props", "@rules", "@errors"], 'each', [], ($$3 = function(var$){var self = $$3.$$s == null ? this : $$3.$$s;

                
                
                if (var$ == null) {
                  var$ = nil;
                };
                return c.$instance_variable_set(var$, self.$instance_variable_get(var$).$dup());}, $$3.$$s = self, $$3.$$arity = 1, $$3));}, $$2.$$s = self, $$2.$$arity = 1, $$2))
          }, $Validator_copy$1.$$arity = 1);
          
          Opal.def(self, '$initialize', $Validator_initialize$4 = function $$initialize(props_wrapper) {
            var self = this;

            
            
            if (props_wrapper == null) {
              props_wrapper = $$($nesting, 'Class').$new($$($nesting, 'PropsWrapper'));
            };
            return (self.props_wrapper = props_wrapper);
          }, $Validator_initialize$4.$$arity = -1);
          Opal.defs(self, '$build', $Validator_build$5 = function $$build() {
            var $iter = $Validator_build$5.$$p, block = $iter || nil, self = this;

            if ($iter) $Validator_build$5.$$p = null;
            
            
            if ($iter) $Validator_build$5.$$p = null;;
            return $send(self.$new(), 'build', [], block.$to_proc());
          }, $Validator_build$5.$$arity = 0);
          
          Opal.def(self, '$build', $Validator_build$6 = function $$build() {
            var $iter = $Validator_build$6.$$p, block = $iter || nil, self = this;

            if ($iter) $Validator_build$6.$$p = null;
            
            
            if ($iter) $Validator_build$6.$$p = null;;
            $send(self, 'instance_eval', [], block.$to_proc());
            return self;
          }, $Validator_build$6.$$arity = 0);
          
          Opal.def(self, '$requires', $Validator_requires$7 = function $$requires(name, options) {
            var self = this, $writer = nil;

            
            
            if (options == null) {
              options = $hash2([], {});
            };
            
            $writer = ["required", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$define_rule(name, options);
          }, $Validator_requires$7.$$arity = -2);
          
          Opal.def(self, '$optional', $Validator_optional$8 = function $$optional(name, options) {
            var self = this, $writer = nil;

            
            
            if (options == null) {
              options = $hash2([], {});
            };
            
            $writer = ["required", false];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$define_rule(name, options);
          }, $Validator_optional$8.$$arity = -2);
          
          Opal.def(self, '$event', $Validator_event$9 = function $$event(name) {
            var self = this, $writer = nil;

            
            $writer = [name, self.$coerce_native_hash_values($hash2(["default", "type", "allow_nil"], {"default": nil, "type": $$($nesting, 'Proc'), "allow_nil": true}))];
            $send(self.$rules(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, $Validator_event$9.$$arity = 1);
          
          Opal.def(self, '$all_other_params', $Validator_all_other_params$10 = function $$all_other_params(name) {
            var $$11, self = this;

            
            self.allow_undefined_props = true;
            return $send(self.$props_wrapper(), 'define_all_others', [name], ($$11 = function(props){var self = $$11.$$s == null ? this : $$11.$$s, $$12;

              
              
              if (props == null) {
                props = nil;
              };
              return $send(props, 'reject', [], ($$12 = function(name, value){var self = $$12.$$s == null ? this : $$12.$$s;

                
                
                if (name == null) {
                  name = nil;
                };
                
                if (value == null) {
                  value = nil;
                };
                return self.$rules()['$[]'](name);}, $$12.$$s = self, $$12.$$arity = 2, $$12));}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          }, $Validator_all_other_params$10.$$arity = 1);
          
          Opal.def(self, '$validate', $Validator_validate$13 = function $$validate(props) {
            var $$14, self = this, $writer = nil;

            
            
            $writer = [[]];
            $send(self, 'errors=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(self['$allow_undefined_props?']())) {
            } else {
              self.$validate_undefined(props)
            };
            props = self.$coerce_native_hash_values(self.$defined_props(props));
            self.$validate_required(props);
            $send(props, 'each', [], ($$14 = function(name, value){var self = $$14.$$s == null ? this : $$14.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              self.$validate_types(name, value);
              return self.$validate_allowed(name, value);}, $$14.$$s = self, $$14.$$arity = 2, $$14));
            return self.$errors();
          }, $Validator_validate$13.$$arity = 1);
          
          Opal.def(self, '$default_props', $Validator_default_props$15 = function $$default_props() {
            var $$16, $$17, self = this;

            return $send($send(self.$rules(), 'select', [], ($$16 = function(key, value){var self = $$16.$$s == null ? this : $$16.$$s;

              
              
              if (key == null) {
                key = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              return value.$keys()['$include?']("default");}, $$16.$$s = self, $$16.$$arity = 2, $$16)), 'inject', [$hash2([], {})], ($$17 = function(memo, $mlhs_tmp1){var self = $$17.$$s == null ? this : $$17.$$s, $a, $b, k = nil, v = nil, $writer = nil;

              
              
              if (memo == null) {
                memo = nil;
              };
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $b = $mlhs_tmp1, $a = Opal.to_ary($b), (k = ($a[0] == null ? nil : $a[0])), (v = ($a[1] == null ? nil : $a[1])), $b;
              
              $writer = [k, v['$[]']("default")];
              $send(memo, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return memo;}, $$17.$$s = self, $$17.$$arity = 2, $$17.$$has_top_level_mlhs_arg = true, $$17))
          }, $Validator_default_props$15.$$arity = 0);
          self.$private();
          
          Opal.def(self, '$defined_props', $Validator_defined_props$18 = function $$defined_props(props) {
            var $$19, self = this;

            return $send(props, 'select', [], ($$19 = function(name){var self = $$19.$$s == null ? this : $$19.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              return self.$rules().$keys()['$include?'](name);}, $$19.$$s = self, $$19.$$arity = 1, $$19))
          }, $Validator_defined_props$18.$$arity = 1);
          
          Opal.def(self, '$allow_undefined_props?', $Validator_allow_undefined_props$ques$20 = function() {
            var self = this;

            return self.allow_undefined_props['$!']()['$!']()
          }, $Validator_allow_undefined_props$ques$20.$$arity = 0);
          
          Opal.def(self, '$rules', $Validator_rules$21 = function $$rules() {
            var self = this, $ret_or_1 = nil;

            return (self.rules = (function() {if ($truthy(($ret_or_1 = self.rules))) {
              return $ret_or_1
            } else {
              return $hash2(["children"], {"children": $hash2(["required"], {"required": false})})
            }; return nil; })())
          }, $Validator_rules$21.$$arity = 0);
          
          Opal.def(self, '$define_rule', $Validator_define_rule$22 = function $$define_rule(name, options) {
            var self = this, $writer = nil;

            
            
            if (options == null) {
              options = $hash2([], {});
            };
            
            $writer = [name, self.$coerce_native_hash_values(options)];
            $send(self.$rules(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$props_wrapper().$define_param(name, options['$[]']("type"), options['$[]']("alias"));
          }, $Validator_define_rule$22.$$arity = -2);
          
          Opal.def(self, '$errors', $Validator_errors$23 = function $$errors() {
            var self = this, $ret_or_2 = nil;

            return (self.errors = (function() {if ($truthy(($ret_or_2 = self.errors))) {
              return $ret_or_2
            } else {
              return []
            }; return nil; })())
          }, $Validator_errors$23.$$arity = 0);
          
          Opal.def(self, '$validate_types', $Validator_validate_types$24 = function $$validate_types(prop_name, value) {
            var self = this, klass = nil, allow_nil = nil;

            
            if ($truthy((klass = self.$rules()['$[]'](prop_name)['$[]']("type")))) {
            } else {
              return nil
            };
            if ($truthy(klass['$is_a?']($$($nesting, 'Array'))['$!']())) {
              
              allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
              return self.$type_check("" + "`" + (prop_name) + "`", value, klass, allow_nil);
            } else if ($truthy($rb_gt(klass.$length(), 0))) {
              return self.$validate_value_array(prop_name, value)
            } else {
              
              allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
              return self.$type_check("" + "`" + (prop_name) + "`", value, $$($nesting, 'Array'), allow_nil);
            };
          }, $Validator_validate_types$24.$$arity = 2);
          
          Opal.def(self, '$type_check', $Validator_type_check$25 = function $$type_check(prop_name, value, klass, allow_nil) {
            var self = this, $ret_or_3 = nil, $ret_or_4 = nil;

            
            if ($truthy((function() {if ($truthy(($ret_or_3 = allow_nil))) {
              return value['$nil?']()
            } else {
              return $ret_or_3
            }; return nil; })())) {
              return nil};
            if ($truthy(value['$is_a?'](klass))) {
              return nil};
            if ($truthy((function() {if ($truthy(($ret_or_4 = klass['$respond_to?']("_react_param_conversion")))) {
              return klass.$_react_param_conversion(value, "validate_only")
            } else {
              return $ret_or_4
            }; return nil; })())) {
              return nil};
            return self.$errors()['$<<']("" + "Provided prop " + (prop_name) + " could not be converted to " + (klass));
          }, $Validator_type_check$25.$$arity = 4);
          
          Opal.def(self, '$validate_allowed', $Validator_validate_allowed$26 = function $$validate_allowed(prop_name, value) {
            var self = this, values = nil;

            
            if ($truthy((values = self.$rules()['$[]'](prop_name)['$[]']("values")))) {
            } else {
              return nil
            };
            if ($truthy(values['$include?'](value))) {
              return nil};
            return self.$errors()['$<<']("" + "Value `" + (value) + "` for prop `" + (prop_name) + "` is not an allowed value");
          }, $Validator_validate_allowed$26.$$arity = 2);
          
          Opal.def(self, '$validate_required', $Validator_validate_required$27 = function $$validate_required(props) {
            var $$28, self = this;

            return $send($rb_minus(self.$rules().$keys(), props.$keys()), 'each', [], ($$28 = function(name){var self = $$28.$$s == null ? this : $$28.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              if ($truthy(self.$rules()['$[]'](name)['$[]']("required"))) {
              } else {
                return nil;
              };
              return self.$errors()['$<<']("" + "Required prop `" + (name) + "` was not specified");}, $$28.$$s = self, $$28.$$arity = 1, $$28))
          }, $Validator_validate_required$27.$$arity = 1);
          
          Opal.def(self, '$validate_undefined', $Validator_validate_undefined$29 = function $$validate_undefined(props) {
            var $$30, self = this;

            return $send($rb_minus(props.$keys(), self.$rules().$keys()), 'each', [], ($$30 = function(prop_name){var self = $$30.$$s == null ? this : $$30.$$s;

              
              
              if (prop_name == null) {
                prop_name = nil;
              };
              return self.$errors()['$<<']("" + "Provided prop `" + (prop_name) + "` not specified in spec");}, $$30.$$s = self, $$30.$$arity = 1, $$30))
          }, $Validator_validate_undefined$29.$$arity = 1);
          
          Opal.def(self, '$validate_value_array', $Validator_validate_value_array$31 = function $$validate_value_array(name, value) {
            var $$32, self = this, klass = nil, allow_nil = nil;

            try {
              
              klass = self.$rules()['$[]'](name)['$[]']("type");
              allow_nil = self.$rules()['$[]'](name)['$[]']("allow_nil")['$!']()['$!']();
              return $send(value, 'each_with_index', [], ($$32 = function(item, index){var self = $$32.$$s == null ? this : $$32.$$s;

                
                
                if (item == null) {
                  item = nil;
                };
                
                if (index == null) {
                  index = nil;
                };
                return self.$type_check("" + "`" + (name) + "`[" + (index) + "]", self.$Native(item), klass['$[]'](0), allow_nil);}, $$32.$$s = self, $$32.$$arity = 2, $$32));
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'NoMethodError')])) {
                try {
                  return self.$errors()['$<<']("" + "Provided prop `" + (name) + "` was not an Array")
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            }
          }, $Validator_validate_value_array$31.$$arity = 2);
          return (Opal.def(self, '$coerce_native_hash_values', $Validator_coerce_native_hash_values$33 = function $$coerce_native_hash_values(hash) {
            var $$34, self = this;

            return $send(hash, 'each', [], ($$34 = function(key, value){var self = $$34.$$s == null ? this : $$34.$$s, $writer = nil;

              
              
              if (key == null) {
                key = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              $writer = [key, self.$Native(value)];
              $send(hash, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$34.$$s = self, $$34.$$arity = 2, $$34))
          }, $Validator_coerce_native_hash_values$33.$$arity = 1), nil) && 'coerce_native_hash_values';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/ext/component/string"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_event_camelize$1;

    return (Opal.def(self, '$event_camelize', $String_event_camelize$1 = function $$event_camelize() {
      var self = this;

      return self.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = true;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    })
    }, $String_event_camelize$1.$$arity = 0), nil) && 'event_camelize'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/component/element"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $alias = Opal.alias, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$attr_reader', '$attr_accessor', '$new', '$is_a?', '$!', '$empty?', '$raise', '$==', '$convert_string', '$set_native_attributes', '$_update_ref', '$[]', '$properties', '$element_type', '$ref', '$dom_node', '$each', '$!=', '$strip', '$merge_event_prop!', '$to_proc', '$shallow_to_n', '$render', '$convert_props', '$block', '$delete', '$private', '$=~', '$merge_component_event_prop!', '$gsub', '$include?', '$event_camelize', '$merge_built_in_event_prop!', '$key_code', '$instance_variable_get', '$merge!', '$Array', '$ignore_bulk_updates']);
  
  self.$require("hyperstack/ext/component/string");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Element');

        var $nesting = [self].concat($parent_nesting), $Element_set_native_attributes$1, $Element_props$2, $Element_convert_string$3, $Element_initialize$4, $Element_children$5, $Element__update_ref$6, $Element_ref$7, $Element_dom_node$8, $Element_on$9, $Element_render$11, $Element_$$12, $Element_merge_event_prop$excl$13, $Element_merge_built_in_event_prop$excl$15, $Element_merge_component_event_prop$excl$16;

        self.$$prototype.props = self.$$prototype._props_as_hash = self.$$prototype._child_element = self.$$prototype._ref = self.$$prototype.properties = nil;
        
        self.$attr_reader("type");
        self.$attr_reader("element_type");
        self.$attr_reader("properties");
        self.$attr_reader("block");
        self.$attr_reader("to_n");
        self.$attr_accessor("waiting_on_resources");
        
        Opal.def(self, '$set_native_attributes', $Element_set_native_attributes$1 = function $$set_native_attributes(native_element) {
          var self = this;

          
          self.key = native_element.key;
          self.props = native_element.props;
          self.ref = native_element.ref;
          self.type = native_element.type;
          self._owner = native_element._owner;
          return (self._props_as_hash = $$($nesting, 'Hash').$new(self.props));
        }, $Element_set_native_attributes$1.$$arity = 1);
        
        Opal.def(self, '$props', $Element_props$2 = function $$props() {
          var self = this;

          return self._props_as_hash
        }, $Element_props$2.$$arity = 0);
        
        Opal.def(self, '$convert_string', $Element_convert_string$3 = function $$convert_string(native_element, element_type, props, block) {
          var self = this, $ret_or_1 = nil;

          
          if ($truthy(native_element['$is_a?'])) {
          } else {
            return native_element
          };
          if ($truthy(native_element['$is_a?']($$($nesting, 'String')))) {
          } else {
            return native_element
          };
          if ($truthy((function() {if ($truthy(($ret_or_1 = props['$empty?']()['$!']()))) {
            return $ret_or_1
          } else {
            return block
          }; return nil; })())) {
            self.$raise("Internal Error Element.new called with string, but non-nil props or block")};
          if (element_type['$==']("wrap_child")) {
            return React.createElement(React.Fragment, null, [native_element]);
          } else {
            return React.createElement(native_element, null);
          };
        }, $Element_convert_string$3.$$arity = 4);
        
        Opal.def(self, '$initialize', $Element_initialize$4 = function $$initialize(native_element, element_type, properties, block) {
          var self = this, $ret_or_2 = nil;

          
          
          if (element_type == null) {
            element_type = nil;
          };
          
          if (properties == null) {
            properties = $hash2([], {});
          };
          
          if (block == null) {
            block = nil;
          };
          try {
            
            native_element = self.$convert_string(native_element, element_type, properties, block);
            if (element_type['$==']("wrap_child")) {
            } else {
              self.element_type = element_type
            };
            self.properties = (function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(typeof properties === 'undefined')) {
              return nil
            } else {
              return properties
            }; return nil; })()))) {
              return $ret_or_2
            } else {
              return $hash2([], {})
            }; return nil; })();
            self.block = block;
            self.$$typeof = native_element.$$typeof;
            self.to_n = self;
            return self.$set_native_attributes(native_element);
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };
        }, $Element_initialize$4.$$arity = -2);
        
        Opal.def(self, '$children', $Element_children$5 = function $$children() {
          var self = this;

          return self.props.children
        }, $Element_children$5.$$arity = 0);
        
        Opal.def(self, '$_update_ref', $Element__update_ref$6 = function $$_update_ref(x) {
          var self = this;

          
          self._ref = x;
          if ($truthy(self._child_element)) {
            return self._child_element.$_update_ref(x)
          } else {
            return nil
          };
        }, $Element__update_ref$6.$$arity = 1);
        
        Opal.def(self, '$ref', $Element_ref$7 = function $$ref() {
          var self = this;

          
          if ($truthy(self._ref)) {
            return self._ref};
          if ($truthy(self.$properties()['$[]']("ref"))) {
            self.$raise("" + "The instance of " + (self.$element_type()) + " has not been mounted yet")};
          return self.$raise("" + "Attempt to get a ref on " + (self.$element_type()) + " which is a static component.");
        }, $Element_ref$7.$$arity = 0);
        
        Opal.def(self, '$dom_node', $Element_dom_node$8 = function $$dom_node() {
          var self = this;

          if ($truthy(typeof self.$ref().$dom_node == 'function')) {
            return self.$ref().$dom_node()
          } else {
            return self.$ref()
          }
        }, $Element_dom_node$8.$$arity = 0);
        
        Opal.def(self, '$on', $Element_on$9 = function $$on($a) {
          var $iter = $Element_on$9.$$p, block = $iter || nil, $post_args, event_names, $$10, self = this, any_found = nil;

          if ($iter) $Element_on$9.$$p = null;
          
          
          if ($iter) $Element_on$9.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          event_names = $post_args;;
          any_found = false;
          $send(event_names, 'each', [], ($$10 = function(event_name){var self = $$10.$$s == null ? this : $$10.$$s, $ret_or_3 = nil;

            
            
            if (event_name == null) {
              event_name = nil;
            };
            if ($truthy((function() {if ($truthy(($ret_or_3 = event_name))) {
              return event_name.$strip()['$!=']("")
            } else {
              return $ret_or_3
            }; return nil; })())) {
            } else {
              return nil;
            };
            $send(self, 'merge_event_prop!', [event_name], block.$to_proc());
            return (any_found = true);}, $$10.$$s = self, $$10.$$arity = 1, $$10));
          if ($truthy(any_found)) {
            self.$set_native_attributes(React.cloneElement(self, self.properties.$shallow_to_n()))};
          return self;
        }, $Element_on$9.$$arity = -1);
        
        Opal.def(self, '$render', $Element_render$11 = function $$render($a) {
          var $post_args, props, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          props = $post_args;;
          if ($truthy(props['$empty?']())) {
            return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render(self)
          } else {
            
            props = $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper'), 'convert_props', [self.$element_type(), self.properties].concat(Opal.to_a(props)));
            return (self._child_element = $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render($$($nesting, 'Element').$new(React.cloneElement(self, props.$shallow_to_n()), self.$element_type(), props, self.$block())));
          };
        }, $Element_render$11.$$arity = -1);
        
        Opal.def(self, '$~', $Element_$$12 = function() {
          var self = this;

          return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$delete(self)
        }, $Element_$$12.$$arity = 0);
        $alias(self, "as_node", "~");
        $alias(self, "delete", "~");
        self.$private();
        
        Opal.def(self, '$merge_event_prop!', $Element_merge_event_prop$excl$13 = function(event_name) {
          var $iter = $Element_merge_event_prop$excl$13.$$p, block = $iter || nil, $$14, self = this, name = nil;

          if ($iter) $Element_merge_event_prop$excl$13.$$p = null;
          
          
          if ($iter) $Element_merge_event_prop$excl$13.$$p = null;;
          if ($truthy(event_name['$=~'](/^<(.+)>$/))) {
            return $send(self, 'merge_component_event_prop!', [event_name.$gsub(/^<(.+)>$/, "\\1")], block.$to_proc())
          } else if ($truthy($$$($$($nesting, 'Event'), 'BUILT_IN_EVENTS')['$include?']((name = "" + "on" + (event_name.$event_camelize()))))) {
            return $send(self, 'merge_built_in_event_prop!', [name], block.$to_proc())
          } else if (event_name['$==']("enter")) {
            return $send(self, 'merge_built_in_event_prop!', ["onKeyDown"], ($$14 = function(evt){var self = $$14.$$s == null ? this : $$14.$$s;

              
              
              if (evt == null) {
                evt = nil;
              };
              if (evt.$key_code()['$=='](13)) {
                return Opal.yield1(block, evt);
              } else {
                return nil
              };}, $$14.$$s = self, $$14.$$arity = 1, $$14))
          } else if ($truthy(self.$element_type().$instance_variable_get("@native_import"))) {
            return $send(self, 'merge_component_event_prop!', [name], block.$to_proc())
          } else {
            return $send(self, 'merge_component_event_prop!', ["" + "on_" + (event_name)], block.$to_proc())
          };
        }, $Element_merge_event_prop$excl$13.$$arity = 1);
        
        Opal.def(self, '$merge_built_in_event_prop!', $Element_merge_built_in_event_prop$excl$15 = function(prop_name) {
          var $iter = $Element_merge_built_in_event_prop$excl$15.$$p, block = $iter || nil, self = this;

          if ($iter) $Element_merge_built_in_event_prop$excl$15.$$p = null;
          
          
          if ($iter) $Element_merge_built_in_event_prop$excl$15.$$p = null;;
          return self.properties['$merge!']($hash(prop_name, 
            function(){
              var react_event = arguments[0];
              if (arguments.length == 0 || !react_event.nativeEvent) {
                return Opal.yieldX(block, Opal.to_a(self.$Array(arguments)))
              }
              var all_args;
              var other_args;
              if (arguments.length > 1) {
                all_args = Array.prototype.slice.call(arguments);
                other_args = all_args.slice(1, arguments.length);
                return $send($$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper'), 'ignore_bulk_updates', [$$($nesting, 'Event').$new(react_event)].concat(Opal.to_a((other_args))), block.$to_proc());
              } else {
                return $send($$$($$$($$($nesting, 'Internal'), 'State'), 'Mapper'), 'ignore_bulk_updates', [$$($nesting, 'Event').$new(react_event)], block.$to_proc());
              }
            }
          ));
        }, $Element_merge_built_in_event_prop$excl$15.$$arity = 1);
        return (Opal.def(self, '$merge_component_event_prop!', $Element_merge_component_event_prop$excl$16 = function(prop_name) {
          var $iter = $Element_merge_component_event_prop$excl$16.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Element_merge_component_event_prop$excl$16.$$p = null;
          return self.properties['$merge!']($hash(prop_name, 
            function(){
              return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
            }
          ))
        }, $Element_merge_component_event_prop$excl$16.$$arity = 1), nil) && 'merge_component_event_prop!';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/component/native_library"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$each', '$lookup_native_name', '$create_component_wrapper', '$create_library_wrapper', '$raise', '$name', '$scope_native_name', '$+', '$downcase', '$[]', '$import_const_from_native', '$const_defined?', '$const_get', '$render', '$to_proc', '$private', '$native_react_component?', '$const_set', '$imports', '$new', '$class_eval', '$include']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NativeLibrary');

        var $nesting = [self].concat($parent_nesting);

        
        (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $imports$1, $rename$2, $import_const_from_native$4, $const_missing$5, $method_missing$6, $lookup_native_name$7, $scope_native_name$8, $create_component_wrapper$9, $create_library_wrapper$11;

          
          
          Opal.def(self, '$imports', $imports$1 = function $$imports(native_name) {
            var self = this;

            
            self.__hyperstack_component_native_prefix = "" + (native_name) + ".";
            return self;
          }, $imports$1.$$arity = 1);
          
          Opal.def(self, '$rename', $rename$2 = function $$rename(rename_list) {
            var $$3, self = this;

            return $send(rename_list, 'each', [], ($$3 = function(js_name, ruby_name){var self = $$3.$$s == null ? this : $$3.$$s, native_name = nil, $ret_or_1 = nil;

              
              
              if (js_name == null) {
                js_name = nil;
              };
              
              if (ruby_name == null) {
                ruby_name = nil;
              };
              native_name = self.$lookup_native_name(js_name);
              if ($truthy(self.$lookup_native_name(js_name))) {
                if ($truthy(($ret_or_1 = self.$create_component_wrapper(self, native_name, ruby_name)))) {
                  return $ret_or_1
                } else {
                  return self.$create_library_wrapper(self, native_name, ruby_name)
                }
              } else {
                return self.$raise("" + ("" + "class " + (self.$name()) + " < Hyperstack::Component::NativeLibrary could not import " + (js_name) + ". ") + ("" + "Native value " + (self.$scope_native_name(js_name)) + " is undefined."))
              };}, $$3.$$s = self, $$3.$$arity = 2, $$3))
          }, $rename$2.$$arity = 1);
          
          Opal.def(self, '$import_const_from_native', $import_const_from_native$4 = function $$import_const_from_native(klass, const_name, create_library) {
            var self = this, native_name = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil;

            
            native_name = (function() {if ($truthy(($ret_or_2 = self.$lookup_native_name(const_name)))) {
              return $ret_or_2
            } else {
              return self.$lookup_native_name($rb_plus(const_name['$[]'](0).$downcase(), const_name['$[]']($range(1, -1, false))))
            }; return nil; })();
            if ($truthy(($ret_or_3 = native_name))) {
              
              if ($truthy(($ret_or_4 = self.$create_component_wrapper(klass, native_name, const_name)))) {
                return $ret_or_4
              } else {
                
                if ($truthy(($ret_or_5 = create_library))) {
                  return self.$create_library_wrapper(klass, native_name, const_name)
                } else {
                  return $ret_or_5
                };
              };
            } else {
              return $ret_or_3
            };
          }, $import_const_from_native$4.$$arity = 3);
          
          Opal.def(self, '$const_missing', $const_missing$5 = function $$const_missing(const_name) {
            var $iter = $const_missing$5.$$p, $yield = $iter || nil, self = this, $ret_or_6 = nil;

            if ($iter) $const_missing$5.$$p = null;
            if ($truthy(($ret_or_6 = self.$import_const_from_native(self, const_name, true)))) {
              return $ret_or_6
            } else {
              return $send2(self, $find_super(self, 'const_missing', $const_missing$5, false, true), 'const_missing', [const_name], $iter)
            }
          }, $const_missing$5.$$arity = 1);
          
          Opal.def(self, '$method_missing', $method_missing$6 = function $$method_missing(method, $a) {
            var $iter = $method_missing$6.$$p, block = $iter || nil, $post_args, args, self = this, component_class = nil, $ret_or_7 = nil;

            if ($iter) $method_missing$6.$$p = null;
            
            
            if ($iter) $method_missing$6.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            if ($truthy(self['$const_defined?'](method, false))) {
              component_class = self.$const_get(method)};
            component_class = (function() {if ($truthy(($ret_or_7 = component_class))) {
              return $ret_or_7
            } else {
              return self.$import_const_from_native(self, method, false)
            }; return nil; })();
            if ($truthy(component_class)) {
            } else {
              self.$raise("" + "could not import a react component named: " + ("" + (self.$scope_native_name(method))))
            };
            return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [component_class].concat(Opal.to_a(args)), block.$to_proc());
          }, $method_missing$6.$$arity = -2);
          self.$private();
          
          Opal.def(self, '$lookup_native_name', $lookup_native_name$7 = function $$lookup_native_name(js_name) {
            var self = this, native_name = nil;

            try {
              
              native_name = self.$scope_native_name(js_name);
              return eval(native_name) !== undefined && native_name;
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
                try {
                  return nil
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            }
          }, $lookup_native_name$7.$$arity = 1);
          
          Opal.def(self, '$scope_native_name', $scope_native_name$8 = function $$scope_native_name(js_name) {
            var self = this;
            if (self.__hyperstack_component_native_prefix == null) self.__hyperstack_component_native_prefix = nil;

            return "" + (self.__hyperstack_component_native_prefix) + (js_name)
          }, $scope_native_name$8.$$arity = 1);
          
          Opal.def(self, '$create_component_wrapper', $create_component_wrapper$9 = function $$create_component_wrapper(klass, native_name, ruby_name) {
            var $$10, self = this, new_klass = nil;

            if ($truthy($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper')['$native_react_component?'](native_name))) {
              
              new_klass = klass.$const_set(ruby_name, $$($nesting, 'Class').$new($$($nesting, 'NativeLibrary')).$imports(native_name));
              $send(new_klass, 'class_eval', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

                
                self.$include($$($nesting, 'Component'));
                return self.$imports(native_name);}, $$10.$$s = self, $$10.$$arity = 0, $$10));
              return new_klass;
            } else {
              return nil
            }
          }, $create_component_wrapper$9.$$arity = 3);
          return (Opal.def(self, '$create_library_wrapper', $create_library_wrapper$11 = function $$create_library_wrapper(klass, native_name, ruby_name) {
            var self = this;

            return klass.$const_set(ruby_name, $$($nesting, 'Class').$new($$($nesting, 'NativeLibrary')).$imports(native_name))
          }, $create_library_wrapper$11.$$arity = 3), nil) && 'create_library_wrapper';
        })(Opal.get_singleton_class(self), $nesting);
        return self.$imports("NativeLibrary");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/react_wrapper"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $hash2 = Opal.hash2, $send = Opal.send, $class_variable_get = Opal.class_variable_get, $truthy = Opal.truthy, $lambda = Opal.lambda, $range = Opal.range;

  Opal.add_stubs(['$require', '$instance_variable_set', '$[]=', '$-', '$raise', '$stateless?', '$eval_native_react_component', '$add_after_error_hook_to_native', '$[]', '$!', '$method_defined?', '$respond_to?', '$native_mixins', '$to_n', '$static_call_backs', '$new', '$name', '$default_props', '$prop_types', '$callbacks?', '$<<', '$is_a?', '$create_native_react_class', '$include?', '$_update_ref', '$convert_props', '$shallow_to_n', '$flatten', '$call', '$each', '$split', '$==', '$merge', '$lower_camelize', '$join', '$to_key', '$ignore_mutations', '$const_defined?', '$gsub', '$html_attr?', '$private', '$first', '$concat', '$map', '$+', '$upcase']);
  
  self.$require("hyperstack/component/native_library");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ReactWrapper');

          var $nesting = [self].concat($parent_nesting), $ReactWrapper_stateless$ques$1, $ReactWrapper_import_native_component$2, $ReactWrapper_eval_native_react_component$3, $ReactWrapper_native_react_component$ques$4, $ReactWrapper_add_after_error_hook$5, $ReactWrapper_add_after_error_hook_to_native$6, $ReactWrapper_create_native_react_class$7, $ReactWrapper_create_element$8, $ReactWrapper_clear_component_class_cache$10, $ReactWrapper_convert_props$11, $ReactWrapper_lower_camelize$22;

          
          $class_variable_set($nesting[0], '@@component_classes', $hash2([], {}));
          Opal.defs(self, '$stateless?', $ReactWrapper_stateless$ques$1 = function(ncc) {
            var self = this;

            return typeof ncc === 'symbol' || (typeof ncc === 'function' && !(ncc.prototype && ncc.prototype.isReactComponent))
          }, $ReactWrapper_stateless$ques$1.$$arity = 1);
          Opal.defs(self, '$import_native_component', $ReactWrapper_import_native_component$2 = function $$import_native_component(opal_class, native_class) {
            var self = this, $writer = nil;

            
            opal_class.$instance_variable_set("@native_import", true);
            
            $writer = [opal_class, native_class];
            $send($class_variable_get($nesting[0], '@@component_classes', false), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, $ReactWrapper_import_native_component$2.$$arity = 2);
          Opal.defs(self, '$eval_native_react_component', $ReactWrapper_eval_native_react_component$3 = function $$eval_native_react_component(name) {
            var self = this, component = nil, is_component_class = nil, $ret_or_1 = nil, $ret_or_2 = nil, has_render_method = nil, $ret_or_3 = nil, $ret_or_4 = nil;

            
            component = eval(name);
            if ($truthy(component === undefined)) {
              self.$raise("" + (name) + " is not defined")};
            if ($truthy(component.__esModule)) {
              component = component.default};
            is_component_class = (function() {if ($truthy(($ret_or_1 = component.prototype !== undefined))) {
              
              if ($truthy(($ret_or_2 = !!component.prototype.isReactComponent))) {
                return $ret_or_2
              } else {
                return !!component.prototype.render
              };
            } else {
              return $ret_or_1
            }; return nil; })();
            has_render_method = typeof component.render === "function";
            if ($truthy((function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = is_component_class))) {
              return $ret_or_4
            } else {
              return self['$stateless?'](component)
            }; return nil; })()))) {
              return $ret_or_3
            } else {
              return has_render_method
            }; return nil; })())) {
            } else {
              self.$raise("does not appear to be a native react component")
            };
            return component;
          }, $ReactWrapper_eval_native_react_component$3.$$arity = 1);
          Opal.defs(self, '$native_react_component?', $ReactWrapper_native_react_component$ques$4 = function(name) {
            var self = this;

            
            
            if (name == null) {
              name = nil;
            };
            try {
              
              if ($truthy(name)) {
              } else {
                return false
              };
              self.$eval_native_react_component(name);
              return true;
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
                try {
                  return false
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            };
          }, $ReactWrapper_native_react_component$ques$4.$$arity = -1);
          Opal.defs(self, '$add_after_error_hook', $ReactWrapper_add_after_error_hook$5 = function $$add_after_error_hook(klass) {
            var self = this;

            return self.$add_after_error_hook_to_native($class_variable_get($nesting[0], '@@component_classes', false)['$[]'](klass))
          }, $ReactWrapper_add_after_error_hook$5.$$arity = 1);
          Opal.defs(self, '$add_after_error_hook_to_native', $ReactWrapper_add_after_error_hook_to_native$6 = function $$add_after_error_hook_to_native(native_comp) {
            var self = this;

            
            if ($truthy(native_comp)) {
            } else {
              return nil
            };
            
            native_comp.prototype.componentDidCatch = function(error, info) {
              this.__opalInstanceSyncSetState = false;
              this.__opalInstance.$component_did_catch(error, Opal.Hash.$new(info));
            }
          ;
          }, $ReactWrapper_add_after_error_hook_to_native$6.$$arity = 1);
          Opal.defs(self, '$create_native_react_class', $ReactWrapper_create_native_react_class$7 = function $$create_native_react_class(type) {
            var self = this, old_school = nil, render_fn = nil, $ret_or_5 = nil, $writer = nil, comp = nil, $ret_or_6 = nil;

            
            if ($truthy(typeof(createReactClass)=='undefined')) {
              self.$raise("createReactClass is undefined. Add the 'react-create-class' npm module, and import it as 'createReactClass'")};
            if ($truthy(type['$method_defined?']("render")['$!']())) {
              self.$raise("Provided class should define `render` method")};
            old_school = type['$method_defined?']("_render_wrapper")['$!']();
            render_fn = (function() {if ($truthy(old_school)) {
              return "render"
            } else {
              return "_render_wrapper"
            }; return nil; })();
            if ($truthy(($ret_or_5 = $class_variable_get($nesting[0], '@@component_classes', false)['$[]'](type)))) {
              return $ret_or_5
            } else {
              
              $writer = [type, ((comp = 
              createReactClass({
                getInitialState: function() {
                  this.mixins = (function() {if ($truthy(type['$respond_to?']("native_mixins"))) {
                return type.$native_mixins()
              } else {
                return [];
              }; return nil; })();
                  this.statics = (function() {if ($truthy(type['$respond_to?']("static_call_backs"))) {
                return type.$static_call_backs().$to_n()
              } else {
                return {};
              }; return nil; })();
                  this.__opalInstanceInitializedState = false;
                  this.__opalInstanceSyncSetState = true;
                  this.__opalInstance = type.$new(this);
                  this.__opalInstanceInitializedState = true;
                  this.__opalInstanceSyncSetState = false;
                  this.__name = type.$name();
                  return {}
                },
                displayName: type.$name(),
                getDefaultProps: function() {
                  return (function() {if ($truthy(type['$respond_to?']("default_props"))) {
                return type.$default_props().$to_n()
              } else {
                return {};
              }; return nil; })();
                },
                propTypes: (function() {if ($truthy(type['$respond_to?']("prop_types"))) {
                return type.$prop_types().$to_n()
              } else {
                return {};
              }; return nil; })(),
                componentWillMount: old_school && function() {
                  if (type['$method_defined?']("component_will_mount")) {
                    this.__opalInstanceSyncSetState = true;
                    this.__opalInstance.$component_will_mount();
                    this.__opalInstanceSyncSetState = false;
                  }
                },
                componentDidMount: function() {
                  this.__opalInstance.__hyperstack_component_is_mounted = true
                  if (type['$method_defined?']("component_did_mount")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_did_mount();
                  }
                },
                UNSAFE_componentWillReceiveProps: function(next_props) {
                  if (type['$method_defined?']("component_will_receive_props")) {
                    this.__opalInstanceSyncSetState = true;
                    this.__opalInstance.$component_will_receive_props(Opal.Hash.$new(next_props));
                    this.__opalInstanceSyncSetState = false;
                  }
                },
                shouldComponentUpdate: function(next_props, next_state) {
                  if (type['$method_defined?']("should_component_update?")) {
                    this.__opalInstanceSyncSetState = false;
                    return this.__opalInstance["$should_component_update?"](Opal.Hash.$new(next_props), Opal.Hash.$new(next_state));
                  } else { return true; }
                },
                UNSAFE_componentWillUpdate: function(next_props, next_state) {
                  if (type['$method_defined?']("component_will_update")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_will_update(Opal.Hash.$new(next_props), Opal.Hash.$new(next_state));
                  }
                },
                componentDidUpdate: function(prev_props, prev_state) {
                  if (type['$method_defined?']("component_did_update")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_did_update(Opal.Hash.$new(prev_props), Opal.Hash.$new(prev_state));
                  }
                },
                componentWillUnmount: function() {
                  if (type['$method_defined?']("component_will_unmount")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_will_unmount();
                  }
                  this.__opalInstance.__hyperstack_component_is_mounted = false;
                },
                render: function() {
                  this.__opalInstanceSyncSetState = false;
                  return this.__opalInstance.$send(render_fn).$to_n();
                }
              })
            ), (function() {if ($truthy((function() {if ($truthy(($ret_or_6 = type['$respond_to?']("callbacks?")))) {
                return type['$callbacks?']("after_error")
              } else {
                return $ret_or_6
              }; return nil; })())) {
                return self.$add_after_error_hook_to_native(comp)
              } else {
                return nil
              }; return nil; })(), comp)];
              $send($class_variable_get($nesting[0], '@@component_classes', false), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            };
          }, $ReactWrapper_create_native_react_class$7.$$arity = 1);
          Opal.defs(self, '$create_element', $ReactWrapper_create_element$8 = function $$create_element(type, $a) {
            var $iter = $ReactWrapper_create_element$8.$$p, block = $iter || nil, $post_args, args, $$9, self = this, params = nil, ncc = nil, $ret_or_7 = nil, ele = nil, ref = nil, properties = nil, a = nil;

            if ($iter) $ReactWrapper_create_element$8.$$p = null;
            
            
            if ($iter) $ReactWrapper_create_element$8.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            params = [];
            ncc = $class_variable_get($nesting[0], '@@component_classes', false)['$[]'](type);
            if ($truthy(ncc)) {
              params['$<<'](ncc)
            } else if ($truthy(type['$is_a?']($$($nesting, 'Class')))) {
              params['$<<'](self.$create_native_react_class(type))
            } else if ($truthy((function() {if ($truthy(($ret_or_7 = (block !== nil)))) {
              return $ret_or_7
            } else {
              return $$$($$($nesting, 'Tags'), 'HTML_TAGS')['$include?'](type)
            }; return nil; })())) {
              params['$<<'](type)
            } else if ($truthy(type['$is_a?']($$($nesting, 'String')))) {
              return $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element').$new(type)
            } else {
              self.$raise("" + (type) + " not implemented")
            };
            ele = nil;
            if ($truthy(self['$stateless?'](ncc))) {
            } else {
              ref = $lambda(($$9 = function(ref){var self = $$9.$$s == null ? this : $$9.$$s;

                
                
                if (ref == null) {
                  ref = nil;
                };
                return ele.$_update_ref(ref);}, $$9.$$s = self, $$9.$$arity = 1, $$9))
            };
            properties = $send(self, 'convert_props', [type, $hash2(["ref"], {"ref": ref})].concat(Opal.to_a(args)));
            params['$<<'](properties.$shallow_to_n());
            if ($truthy(block)) {
              
              a = [block.$call()].$flatten();
              
              for(var i=0, l=a.length; i<l; i++) {
                params.push(a[i].$to_n());
              }
            ;};
            return (ele = $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element').$new(React.createElement.apply(null, params), type, properties, block));
          }, $ReactWrapper_create_element$8.$$arity = -2);
          Opal.defs(self, '$clear_component_class_cache', $ReactWrapper_clear_component_class_cache$10 = function $$clear_component_class_cache() {
            var self = this;

            return $class_variable_set($nesting[0], '@@component_classes', $hash2([], {}))
          }, $ReactWrapper_clear_component_class_cache$10.$$arity = 0);
          Opal.defs(self, '$convert_props', $ReactWrapper_convert_props$11 = function $$convert_props(type, $a) {
            var $post_args, args, $$12, $$14, self = this, properties = nil, props = nil;

            
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            properties = $hash2([], {});
            $send(args, 'each', [], ($$12 = function(arg){var self = $$12.$$s == null ? this : $$12.$$s, $$13, $writer = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              if ($truthy(arg['$is_a?']($$($nesting, 'String')))) {
                
                $writer = [arg, true];
                $send(properties, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(arg['$is_a?']($$($nesting, 'Hash')))) {
                return $send(arg, 'each', [], ($$13 = function(key, value){var self = $$13.$$s == null ? this : $$13.$$s, $ret_or_8 = nil, $ret_or_9 = nil, $ret_or_10 = nil;

                  
                  
                  if (key == null) {
                    key = nil;
                  };
                  
                  if (value == null) {
                    value = nil;
                  };
                  if ($truthy(["class", "className", "class_name"]['$include?'](key))) {
                    
                    if ($truthy(value)) {
                    } else {
                      return nil;
                    };
                    if ($truthy(value['$is_a?']($$($nesting, 'String')))) {
                      value = value.$split(" ")
                    } else if ($truthy(value['$is_a?']($$($nesting, 'Array'))['$!']())) {
                      self.$raise("The class param must be a string or array of strings")};
                    
                    $writer = ["className", [].concat(Opal.to_a(properties['$[]']("className"))).concat(Opal.to_a(value))];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;
                  } else if (key['$==']("style")) {
                    
                    if ($truthy(value)) {
                    } else {
                      return nil;
                    };
                    if ($truthy(value['$is_a?']($$($nesting, 'Hash'))['$!']())) {
                      self.$raise("The style param must be a Hash")};
                    
                    $writer = ["style", (function() {if ($truthy(($ret_or_8 = properties['$[]']("style")))) {
                      return $ret_or_8
                    } else {
                      return $hash2([], {})
                    }; return nil; })().$merge(value)];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;
                  } else if ($truthy((function() {if ($truthy(($ret_or_9 = $$$($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'ReactAPI'), 'HASH_ATTRIBUTES')['$include?'](key)))) {
                    return value['$is_a?']($$($nesting, 'Hash'))
                  } else {
                    return $ret_or_9
                  }; return nil; })())) {
                    
                    $writer = [key, (function() {if ($truthy(($ret_or_10 = properties['$[]'](key)))) {
                      return $ret_or_10
                    } else {
                      return $hash2([], {})
                    }; return nil; })().$merge(value)];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    
                    $writer = [key, value];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                  };}, $$13.$$s = self, $$13.$$arity = 2, $$13))
              } else {
                return nil
              };}, $$12.$$s = self, $$12.$$arity = 1, $$12));
            props = $hash2([], {});
            $send(properties, 'each', [], ($$14 = function(key, value){var self = $$14.$$s == null ? this : $$14.$$s, $$15, $$16, $$17, $$18, $$19, $$20, $$21, $writer = nil, fn = nil, $ret_or_11 = nil;

              
              
              if (key == null) {
                key = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              if ($truthy(["style", "dangerously_set_inner_HTML"]['$include?'](key))) {
                
                $writer = [self.$lower_camelize(key), value.$to_n()];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("className")) {
                
                $writer = [key, value.$join(" ")];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("key")) {
                
                $writer = ["key", value.$to_key()];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("init")) {
                
                if ($truthy(["select", "textarea"]['$include?'](type))) {
                  key = "defaultValue"
                } else if (type['$==']("input")) {
                  key = (function() {if ($truthy(["radio", "checkbox"]['$include?'](properties['$[]']("type")))) {
                    return "defaultChecked"
                  } else {
                    return "defaultValue"
                  }; return nil; })()};
                
                $writer = [key, value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if (key['$==']("ref")) {
                
                if ($truthy(value)) {
                } else {
                  return nil;
                };
                if ($truthy(value['$respond_to?']("call"))) {
                } else {
                  self.$raise("" + "The ref and dom params must be given a Proc.\n" + "If you want to capture the ref in an instance variable use the `set` method.\n" + "For example `ref: set(:TheRef)` will capture assign the ref to `@TheRef`\n")
                };
                if ($truthy(value.__hyperstack_component_ref_is_already_wrapped)) {
                } else {
                  
                  fn = value;
                  value = 
                          function(dom_node){
                            if (dom_node !== null && dom_node.__opalInstance !== undefined && dom_node.__opalInstance !== null) {
                              $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s;

                    return fn.$call(dom_node.__opalInstance)}, $$15.$$s = self, $$15.$$arity = 0, $$15));
                            } else if(dom_node !== null && ReactDOM.findDOMNode !== undefined && dom_node.nodeType === undefined) {
                              $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s;

                    return fn.$call(ReactDOM.findDOMNode(dom_node))}, $$16.$$s = self, $$16.$$arity = 0, $$16));
                            } else if(dom_node !== null){
                              $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$17 = function(){var self = $$17.$$s == null ? this : $$17.$$s;

                    return fn.$call(dom_node)}, $$17.$$s = self, $$17.$$arity = 0, $$17));
                            }
                          }
                        ;
                  value.__hyperstack_component_ref_is_already_wrapped = true;
                };
                
                $writer = [key, value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if (key['$==']("jq_ref")) {
                
                if ($truthy(value['$respond_to?']("call"))) {
                } else {
                  self.$raise("" + "The ref and dom params must be given a Proc.\n" + "If you want to capture the dom node in an instance variable use the `set` method.\n" + "For example `dom: set(:DomNode)` will assign the dom node to `@DomNode`\n")
                };
                if ($truthy($$($nesting, 'Module')['$const_defined?']("Element"))) {
                } else {
                  self.$raise("" + "You must include 'hyperstack/component/jquery' " + "in your manifest to use the `dom` reference key.\n" + "For example if using rails include " + "`config.import 'hyperstack/component/jquery', client_only: true`" + "in your config/initializer/hyperstack.rb file")
                };
                
                $writer = ["ref", 
                              function(dom_node){
                                if (dom_node !== null && dom_node.__opalInstance !== undefined && dom_node.__opalInstance !== null) {
                                  $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$18 = function(){var self = $$18.$$s == null ? this : $$18.$$s;

                  return value.$call($$$('::', 'Element')['$[]'](dom_node.__opalInstance))}, $$18.$$s = self, $$18.$$arity = 0, $$18));
                                } else if(dom_node !== null && ReactDOM.findDOMNode !== undefined && dom_node.nodeType === undefined) {
                                  $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$19 = function(){var self = $$19.$$s == null ? this : $$19.$$s;

                  return value.$call($$$('::', 'Element')['$[]'](ReactDOM.findDOMNode(dom_node)))}, $$19.$$s = self, $$19.$$arity = 0, $$19));
                                } else if(dom_node !== null) {
                                  $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s;

                  return value.$call($$$('::', 'Element')['$[]'](dom_node))}, $$20.$$s = self, $$20.$$arity = 0, $$20));
                                }
                              }
                            ];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if ($truthy((function() {if ($truthy(($ret_or_11 = $$$($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'ReactAPI'), 'HASH_ATTRIBUTES')['$include?'](key)))) {
                return value['$is_a?']($$($nesting, 'Hash'))
              } else {
                return $ret_or_11
              }; return nil; })())) {
                return $send(value, 'each', [], ($$21 = function(k, v){var self = $$21.$$s == null ? this : $$21.$$s;

                  
                  
                  if (k == null) {
                    k = nil;
                  };
                  
                  if (v == null) {
                    v = nil;
                  };
                  $writer = ["" + (key) + "-" + (k.$gsub(/__|_/, $hash2(["__", "_"], {"__": "_", "_": "-"}))), v.$to_n()];
                  $send(props, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, $$21.$$s = self, $$21.$$arity = 2, $$21))
              } else {
                
                $writer = [(function() {if ($truthy($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'ReactAPI')['$html_attr?'](self.$lower_camelize(key)))) {
                  return self.$lower_camelize(key)
                } else {
                  return key
                }; return nil; })(), value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              };}, $$14.$$s = self, $$14.$$arity = 2, $$14));
            return props;
          }, $ReactWrapper_convert_props$11.$$arity = -2);
          self.$private();
          return (Opal.defs(self, '$lower_camelize', $ReactWrapper_lower_camelize$22 = function $$lower_camelize(snake_cased_word) {
            var $$23, self = this, words = nil, result = nil;

            
            words = snake_cased_word.$split("_");
            result = [words.$first()];
            return result.$concat($send(words['$[]']($range(1, -1, false)), 'map', [], ($$23 = function(word){var self = $$23.$$s == null ? this : $$23.$$s;

              
              
              if (word == null) {
                word = nil;
              };
              return $rb_plus(word['$[]'](0).$upcase(), word['$[]']($range(1, -1, false)));}, $$23.$$s = self, $$23.$$arity = 1, $$23))).$join("");
          }, $ReactWrapper_lower_camelize$22.$$arity = 1), nil) && 'lower_camelize';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/ext/component/hash"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_shallow_to_n$1;

    return (Opal.def(self, '$shallow_to_n', $Hash_shallow_to_n$1 = function $$shallow_to_n() {
      var $$2, self = this, hash = nil;

      
      hash = {};
      $send(self, 'each', [], ($$2 = function(key, value){var self = $$2.$$s == null ? this : $$2.$$s;

        
        
        if (key == null) {
          key = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return hash[key] = value;}, $$2.$$s = self, $$2.$$arity = 2, $$2));
      return hash;
    }, $Hash_shallow_to_n$1.$$arity = 0), nil) && 'shallow_to_n'
  })($nesting[0], null, $nesting)
};

Opal.modules["active_support/core_ext/kernel/singleton_class"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$class_eval', '$singleton_class', '$to_proc']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_class_eval$1;

    return (Opal.def(self, '$class_eval', $Kernel_class_eval$1 = function $$class_eval($a) {
      var $iter = $Kernel_class_eval$1.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Kernel_class_eval$1.$$p = null;
      
      
      if ($iter) $Kernel_class_eval$1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self.$singleton_class(), 'class_eval', Opal.to_a(args), block.$to_proc());
    }, $Kernel_class_eval$1.$$arity = -1), nil) && 'class_eval'
  })($nesting[0], $nesting)
};

Opal.modules["active_support/core_ext/module/remove_method"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$method_defined?', '$private_method_defined?', '$undef_method', '$remove_possible_method', '$define_method', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_remove_possible_method$1, $Module_redefine_method$2;

    
    
    Opal.def(self, '$remove_possible_method', $Module_remove_possible_method$1 = function $$remove_possible_method(method) {
      var self = this, $ret_or_1 = nil;

      if ($truthy((function() {if ($truthy(($ret_or_1 = self['$method_defined?'](method)))) {
        return $ret_or_1
      } else {
        return self['$private_method_defined?'](method)
      }; return nil; })())) {
        return self.$undef_method(method)
      } else {
        return nil
      }
    }, $Module_remove_possible_method$1.$$arity = 1);
    return (Opal.def(self, '$redefine_method', $Module_redefine_method$2 = function $$redefine_method(method) {
      var $iter = $Module_redefine_method$2.$$p, block = $iter || nil, self = this;

      if ($iter) $Module_redefine_method$2.$$p = null;
      
      
      if ($iter) $Module_redefine_method$2.$$p = null;;
      self.$remove_possible_method(method);
      return $send(self, 'define_method', [method], block.$to_proc());
    }, $Module_redefine_method$2.$$arity = 1), nil) && 'redefine_method';
  })($nesting[0], null, $nesting)
};

Opal.modules["active_support/core_ext/array/extract_options"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_of?', '$is_a?', '$last', '$extractable_options?', '$pop']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_extractable_options$ques$1;

    return (Opal.def(self, '$extractable_options?', $Hash_extractable_options$ques$1 = function() {
      var self = this;

      return self['$instance_of?']($$($nesting, 'Hash'))
    }, $Hash_extractable_options$ques$1.$$arity = 0), nil) && 'extractable_options?'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_extract_options$excl$2;

    return (Opal.def(self, '$extract_options!', $Array_extract_options$excl$2 = function() {
      var self = this, $ret_or_1 = nil;

      if ($truthy((function() {if ($truthy(($ret_or_1 = self.$last()['$is_a?']($$($nesting, 'Hash'))))) {
        return self.$last()['$extractable_options?']()
      } else {
        return $ret_or_1
      }; return nil; })())) {
        return self.$pop()
      } else {
        return $hash2([], {})
      }
    }, $Array_extract_options$excl$2.$$arity = 0), nil) && 'extract_options!'
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/core_ext/class/attribute"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$extract_options!', '$fetch', '$each', '$define_singleton_method', '$!', '$public_send', '$class_eval', '$singleton_class', '$remove_possible_method', '$define_method', '$singleton_class?', '$instance_variable_defined?', '$instance_variable_get', '$send', '$class', '$attr_writer', '$private', '$respond_to?', '$!=', '$first', '$ancestors']);
  
  self.$require("active_support/core_ext/kernel/singleton_class");
  self.$require("active_support/core_ext/module/remove_method");
  self.$require("active_support/core_ext/array/extract_options");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Class');

    var $nesting = [self].concat($parent_nesting), $Class_class_attribute$1, $Class_singleton_class$ques$12;

    
    
    Opal.def(self, '$class_attribute', $Class_class_attribute$1 = function $$class_attribute($a) {
      var $post_args, attrs, $$2, self = this, options = nil, instance_reader = nil, $ret_or_1 = nil, instance_writer = nil, $ret_or_2 = nil, instance_predicate = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      attrs = $post_args;;
      options = attrs['$extract_options!']();
      instance_reader = (function() {if ($truthy(($ret_or_1 = options.$fetch("instance_accessor", true)))) {
        return options.$fetch("instance_reader", true)
      } else {
        return $ret_or_1
      }; return nil; })();
      instance_writer = (function() {if ($truthy(($ret_or_2 = options.$fetch("instance_accessor", true)))) {
        return options.$fetch("instance_writer", true)
      } else {
        return $ret_or_2
      }; return nil; })();
      instance_predicate = options.$fetch("instance_predicate", true);
      return $send(attrs, 'each', [], ($$2 = function(name){var self = $$2.$$s == null ? this : $$2.$$s, $$3, $$4, $$5, $$10, $$11, ivar = nil;

        
        
        if (name == null) {
          name = nil;
        };
        $send(self, 'define_singleton_method', [name], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;

          return nil}, $$3.$$s = self, $$3.$$arity = 0, $$3));
        if ($truthy(instance_predicate)) {
          $send(self, 'define_singleton_method', ["" + (name) + "?"], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

            return self.$public_send(name)['$!']()['$!']()}, $$4.$$s = self, $$4.$$arity = 0, $$4))};
        ivar = "" + "@" + (name);
        $send(self, 'define_singleton_method', ["" + (name) + "="], ($$5 = function(val){var self = $$5.$$s == null ? this : $$5.$$s, $$6, $$8;

          
          
          if (val == null) {
            val = nil;
          };
          $send(self.$singleton_class(), 'class_eval', [], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s, $$7;

            
            self.$remove_possible_method(name);
            return $send(self, 'define_method', [name], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s;

              return val}, $$7.$$s = self, $$7.$$arity = 0, $$7));}, $$6.$$s = self, $$6.$$arity = 0, $$6));
          if ($truthy(self['$singleton_class?']())) {
            $send(self, 'class_eval', [], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s, $$9;

              
              self.$remove_possible_method(name);
              return $send(self, 'define_method', [name], ($$9 = function(){var self = $$9.$$s == null ? this : $$9.$$s;

                if ($truthy(self['$instance_variable_defined?'](ivar))) {
                  return self.$instance_variable_get(ivar)
                } else {
                  return self.$singleton_class().$send(name)
                }}, $$9.$$s = self, $$9.$$arity = 0, $$9));}, $$8.$$s = self, $$8.$$arity = 0, $$8))};
          return val;}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        if ($truthy(instance_reader)) {
          
          self.$remove_possible_method(name);
          $send(self, 'define_method', [name], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

            if ($truthy(self['$instance_variable_defined?'](ivar))) {
              return self.$instance_variable_get(ivar)
            } else {
              return self.$class().$public_send(name)
            }}, $$10.$$s = self, $$10.$$arity = 0, $$10));
          if ($truthy(instance_predicate)) {
            $send(self, 'define_method', ["" + (name) + "?"], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s;

              return self.$public_send(name)['$!']()['$!']()}, $$11.$$s = self, $$11.$$arity = 0, $$11))};};
        if ($truthy(instance_writer)) {
          return self.$attr_writer(name)
        } else {
          return nil
        };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
    }, $Class_class_attribute$1.$$arity = -1);
    self.$private();
    if ($truthy(self['$respond_to?']("singleton_class?"))) {
      return nil
    } else {
      return (Opal.def(self, '$singleton_class?', $Class_singleton_class$ques$12 = function() {
        var self = this, $ret_or_3 = nil;

        if ($truthy(($ret_or_3 = true))) {
          return $ret_or_3
        } else {
          return self.$ancestors().$first()['$!='](self)
        }
      }, $Class_singleton_class$ques$12.$$arity = 0), nil) && 'singleton_class?'
    };
  })($nesting[0], null, $nesting);
};

Opal.modules["hyperstack/internal/component/rendering_context"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var $$27, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias;

  Opal.add_stubs(['$attr_accessor', '$waiting_on_resources', '$raise_if_not_quiet?', '$raise', '$new', '$<<', '$!', '$remove_nodes_from_args', '$build', '$waiting_on_resources=', '$-', '$run_child_block', '$to_proc', '$dup', '$tap', '$create_element', '$detect', '$respond_to?', '$is_a?', '$last', '$collect', '$render', '$to_s', '$>', '$length', '$first', '$delete', '$include?', '$index', '$[]=', '$[]', '$each', '$check_for_component_return', '$dummy_value?', '$==', '$empty?', '$pushable_string?', '$try', '$log', '$loading?', '$define_method', '$unshift', '$hyper_component?', '$send']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'RenderingContext');

          var $nesting = [self].concat($parent_nesting);

          
          (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'NotQuiet');

            var $nesting = [self].concat($parent_nesting);

            return nil
          })($nesting[0], $$($nesting, 'Exception'), $nesting);
          return (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting), $raise_if_not_quiet$ques$1, $raise_if_not_quiet$eq$2, $quiet_test$3, $render_string$4, $render$5, $build$13, $delete$14, $rendered$ques$15, $replace$16, $remove_nodes_from_args$17, $run_child_block$19, $check_for_component_return$21, $dummy_value$ques$22, $pushable_string$ques$23, $improper_render$24;

            
            self.$attr_accessor("waiting_on_resources");
            
            Opal.def(self, '$raise_if_not_quiet?', $raise_if_not_quiet$ques$1 = function() {
              var self = this;
              if (self.raise_if_not_quiet == null) self.raise_if_not_quiet = nil;

              return self.raise_if_not_quiet
            }, $raise_if_not_quiet$ques$1.$$arity = 0);
            
            Opal.def(self, '$raise_if_not_quiet=', $raise_if_not_quiet$eq$2 = function(x) {
              var self = this;

              return (self.raise_if_not_quiet = x)
            }, $raise_if_not_quiet$eq$2.$$arity = 1);
            
            Opal.def(self, '$quiet_test', $quiet_test$3 = function $$quiet_test(component) {
              var self = this, $ret_or_1 = nil;

              
              if ($truthy((function() {if ($truthy(($ret_or_1 = component.$waiting_on_resources()))) {
                return self['$raise_if_not_quiet?']()
              } else {
                return $ret_or_1
              }; return nil; })())) {
              } else {
                return nil
              };
              return self.$raise($$($nesting, 'NotQuiet').$new("" + (component) + " is waiting on resources"));
            }, $quiet_test$3.$$arity = 1);
            
            Opal.def(self, '$render_string', $render_string$4 = function $$render_string(string) {
              var self = this, $ret_or_2 = nil;
              if (self.buffer == null) self.buffer = nil;

              
              self.buffer = (function() {if ($truthy(($ret_or_2 = self.buffer))) {
                return $ret_or_2
              } else {
                return []
              }; return nil; })();
              return self.buffer['$<<'](string);
            }, $render_string$4.$$arity = 1);
            
            Opal.def(self, '$render', $render$5 = function $$render(name, $a) {
              var $iter = $render$5.$$p, block = $iter || nil, $post_args, args, $$6, self = this, was_outer_most = nil, $ret_or_3 = nil, element = nil, $writer = nil;
              if (self.not_outer_most == null) self.not_outer_most = nil;
              if (self.buffer == null) self.buffer = nil;

              if ($iter) $render$5.$$p = null;
              
              
              if ($iter) $render$5.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 1, arguments.length);
              
              args = $post_args;;
              return (function() { try {
              
              was_outer_most = self.not_outer_most['$!']();
              self.not_outer_most = true;
              self.$remove_nodes_from_args(args);
              self.buffer = (function() {if ($truthy(($ret_or_3 = self.buffer))) {
                return $ret_or_3
              } else {
                return []
              }; return nil; })();
              if ($truthy(block)) {
                element = $send(self, 'build', [], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s, $$7, $$8, $$10, saved_waiting_on_resources = nil, $writer = nil, buffer = nil;
                  if (self.buffer == null) self.buffer = nil;

                  
                  saved_waiting_on_resources = nil;
                  
                  $writer = [nil];
                  $send(self, 'waiting_on_resources=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  $send(self, 'run_child_block', [], block.$to_proc());
                  if ($truthy(name)) {
                    
                    buffer = self.buffer.$dup();
                    return $send($send($$($nesting, 'ReactWrapper'), 'create_element', [name].concat(Opal.to_a(args)), ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s;

                      return buffer}, $$7.$$s = self, $$7.$$arity = 0, $$7)), 'tap', [], ($$8 = function(element){var self = $$8.$$s == null ? this : $$8.$$s, $$9, $ret_or_4 = nil, $ret_or_5 = nil;

                      
                      
                      if (element == null) {
                        element = nil;
                      };
                      
                      $writer = [(function() {if ($truthy(($ret_or_4 = saved_waiting_on_resources))) {
                        return $ret_or_4
                      } else {
                        return $send(buffer, 'detect', [], ($$9 = function(e){var self = $$9.$$s == null ? this : $$9.$$s;

                          
                          
                          if (e == null) {
                            e = nil;
                          };
                          if ($truthy(e['$respond_to?']("waiting_on_resources"))) {
                            return e.$waiting_on_resources()
                          } else {
                            return nil
                          };}, $$9.$$s = self, $$9.$$arity = 1, $$9))['$!']()['$!']()
                      }; return nil; })()];
                      $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      if ($truthy(buffer.$last()['$is_a?']($$($nesting, 'String')))) {
                        if ($truthy(($ret_or_5 = element.$waiting_on_resources()))) {
                          return $ret_or_5
                        } else {
                          
                          $writer = [self.$waiting_on_resources()];
                          $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                          return $writer[$rb_minus($writer["length"], 1)];
                        }
                      } else {
                        return nil
                      };}, $$8.$$s = self, $$8.$$arity = 1, $$8));
                  } else {
                    
                    buffer = $send(self.buffer, 'collect', [], ($$10 = function(item){var self = $$10.$$s == null ? this : $$10.$$s, $$11, $$12, $ret_or_6 = nil;

                      
                      
                      if (item == null) {
                        item = nil;
                      };
                      if ($truthy(item['$is_a?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                        
                        if ($truthy(($ret_or_6 = item.$waiting_on_resources()))) {
                          $ret_or_6
                        } else {
                          
                          $writer = [saved_waiting_on_resources];
                          $send(item, 'waiting_on_resources=', Opal.to_a($writer));
                          $writer[$rb_minus($writer["length"], 1)];
                        };
                        return item;
                      } else {
                        return $send($send($$($nesting, 'RenderingContext'), 'render', ["span"], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s;

                          return item.$to_s()}, $$11.$$s = self, $$11.$$arity = 0, $$11)), 'tap', [], ($$12 = function(element){var self = $$12.$$s == null ? this : $$12.$$s;

                          
                          
                          if (element == null) {
                            element = nil;
                          };
                          $writer = [saved_waiting_on_resources];
                          $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                          return $writer[$rb_minus($writer["length"], 1)];}, $$12.$$s = self, $$12.$$arity = 1, $$12))
                      };}, $$10.$$s = self, $$10.$$arity = 1, $$10));
                    if ($truthy($rb_gt(buffer.$length(), 1))) {
                      return buffer
                    } else {
                      return buffer.$first()
                    };
                  };}, $$6.$$s = self, $$6.$$arity = 0, $$6))
              } else if ($truthy(name['$is_a?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                element = name
              } else {
                
                element = $send($$($nesting, 'ReactWrapper'), 'create_element', [name].concat(Opal.to_a(args)));
                
                $writer = [self.$waiting_on_resources()];
                $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
              };
              self.buffer['$<<'](element);
              
              $writer = [nil];
              $send(self, 'waiting_on_resources=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return element;
              } finally {
                (function() {if ($truthy(was_outer_most)) {
                  return (self.not_outer_most = (self.buffer = nil))
                } else {
                  return nil
                }; return nil; })()
              }; })();
            }, $render$5.$$arity = -2);
            
            Opal.def(self, '$build', $build$13 = function $$build() {
              var $iter = $build$13.$$p, $yield = $iter || nil, self = this, current = nil, return_val = nil;
              if (self.buffer == null) self.buffer = nil;

              if ($iter) $build$13.$$p = null;
              
              current = self.buffer;
              self.buffer = [];
              return_val = Opal.yield1($yield, self.buffer);
              self.buffer = current;
              return return_val;
            }, $build$13.$$arity = 0);
            
            Opal.def(self, '$delete', $delete$14 = function(element) {
              var self = this;
              if (self.buffer == null) self.buffer = nil;

              
              self.buffer.$delete(element);
              self.last_deleted = element;
              return element;
            }, $delete$14.$$arity = 1);
            $alias(self, "as_node", "delete");
            
            Opal.def(self, '$rendered?', $rendered$ques$15 = function(element) {
              var self = this;
              if (self.buffer == null) self.buffer = nil;

              return self.buffer['$include?'](element)
            }, $rendered$ques$15.$$arity = 1);
            
            Opal.def(self, '$replace', $replace$16 = function $$replace(e1, e2) {
              var self = this, $writer = nil;
              if (self.buffer == null) self.buffer = nil;

              
              $writer = [self.buffer.$index(e1), e2];
              $send(self.buffer, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, $replace$16.$$arity = 2);
            
            Opal.def(self, '$remove_nodes_from_args', $remove_nodes_from_args$17 = function $$remove_nodes_from_args(args) {
              var $$18, self = this, $ret_or_7 = nil;

              if ($truthy((function() {if ($truthy(($ret_or_7 = args['$[]'](0)))) {
                return args['$[]'](0)['$is_a?']($$($nesting, 'Hash'))
              } else {
                return $ret_or_7
              }; return nil; })())) {
                return $send(args['$[]'](0), 'each', [], ($$18 = function(key, value){var self = $$18.$$s == null ? this : $$18.$$s;

                  
                  
                  if (key == null) {
                    key = nil;
                  };
                  
                  if (value == null) {
                    value = nil;
                  };
                  try {
                    if ($truthy(value['$is_a?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                      return value.$delete()
                    } else {
                      return nil
                    }
                  } catch ($err) {
                    if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
                      try {
                        return nil
                      } finally { Opal.pop_exception(); }
                    } else { throw $err; }
                  };}, $$18.$$s = self, $$18.$$arity = 2, $$18))
              } else {
                return nil
              }
            }, $remove_nodes_from_args$17.$$arity = 1);
            
            Opal.def(self, '$run_child_block', $run_child_block$19 = function $$run_child_block() {
              var $$20, $iter = $run_child_block$19.$$p, $yield = $iter || nil, self = this, result = nil;
              if (self.last_deleted == null) self.last_deleted = nil;
              if (self.buffer == null) self.buffer = nil;

              if ($iter) $run_child_block$19.$$p = null;
              
              result = Opal.yieldX($yield, []);
              self.$check_for_component_return(result);
              if ($truthy(self['$dummy_value?'](result))) {
                $send($$($nesting, 'RenderingContext'), 'render', ["span"], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s;

                  return result.$to_s()}, $$20.$$s = self, $$20.$$arity = 0, $$20))
              } else if ($truthy(result['$is_a?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                if (self.last_deleted['$=='](result)) {
                } else if ($truthy(self.buffer['$empty?']())) {
                  self.buffer['$<<'](result)}
              } else if ($truthy(self['$pushable_string?'](result))) {
                self.buffer['$<<'](result.$to_s())};
              return (self.last_deleted = nil);
            }, $run_child_block$19.$$arity = 0);
            
            Opal.def(self, '$check_for_component_return', $check_for_component_return$21 = function $$check_for_component_return(result) {
              var self = this;

              
              if ($truthy(result.$try("hyper_component?"))) {
              } else {
                return nil
              };
              return $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers').$log("" + "a component's render method returned the component class " + (result) + ", did you mean to say " + (result) + "()", "warning");
            }, $check_for_component_return$21.$$arity = 1);
            
            Opal.def(self, '$dummy_value?', $dummy_value$ques$22 = function(result) {
              var self = this, $ret_or_8 = nil;

              if ($truthy(($ret_or_8 = result['$respond_to?']("loading?")))) {
                return result['$loading?']()
              } else {
                return $ret_or_8
              }
            }, $dummy_value$ques$22.$$arity = 1);
            
            Opal.def(self, '$pushable_string?', $pushable_string$ques$23 = function(result) {
              var self = this, $ret_or_9 = nil, $ret_or_10 = nil;
              if (self.buffer == null) self.buffer = nil;

              
              if ($truthy(self.buffer['$empty?']())) {
              } else {
                return result['$is_a?']($$($nesting, 'String'))
              };
              if ($truthy(($ret_or_9 = (function() {if ($truthy(($ret_or_10 = result))) {
                return result['$respond_to?']("to_n")
              } else {
                return $ret_or_10
              }; return nil; })()))) {
                return result['$is_a?']($$($nesting, 'Array'))['$!']()
              } else {
                return $ret_or_9
              };
            }, $pushable_string$ques$23.$$arity = 1);
            return (Opal.def(self, '$improper_render', $improper_render$24 = function $$improper_render(message, solution) {
              var self = this;

              return nil
            }, $improper_render$24.$$arity = 2), nil) && 'improper_render';
          })(Opal.get_singleton_class(self), $nesting);
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object$25, $Object_para$29, $Object_br$31;

    
    $send(["span", "td", "th"], 'each', [], ($Object$25 = function(tag){var self = $Object$25.$$s == null ? this : $Object$25.$$s, $$26;

      
      
      if (tag == null) {
        tag = nil;
      };
      return $send(self, 'define_method', [tag], ($$26 = function($a){var self = $$26.$$s == null ? this : $$26.$$s, $iter = $$26.$$p, block = $iter || nil, $post_args, args, $$28, $ret_or_11 = nil;

        
        
        if ($iter) $$26.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        args.$unshift(tag);
        if ($truthy((function() {if ($truthy(($ret_or_11 = self['$respond_to?']("hyper_component?")))) {
          return self['$hyper_component?']()
        } else {
          return $ret_or_11
        }; return nil; })())) {
          return $send(self, 'send', Opal.to_a(args), block.$to_proc())};
        return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', Opal.to_a(args), ($$28 = function(){var self = $$28.$$s == null ? this : $$28.$$s;

          return self.$to_s()}, $$28.$$s = self, $$28.$$arity = 0, $$28));}, $$26.$$s = self, $$26.$$arity = -1, $$26));}, $Object$25.$$s = self, $Object$25.$$arity = 1, $Object$25));
    
    Opal.def(self, '$para', $Object_para$29 = function $$para($a) {
      var $iter = $Object_para$29.$$p, block = $iter || nil, $post_args, args, $$30, self = this, $ret_or_12 = nil;

      if ($iter) $Object_para$29.$$p = null;
      
      
      if ($iter) $Object_para$29.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      args.$unshift("p");
      if ($truthy((function() {if ($truthy(($ret_or_12 = self['$respond_to?']("hyper_component?")))) {
        return self['$hyper_component?']()
      } else {
        return $ret_or_12
      }; return nil; })())) {
        return $send(self, 'send', Opal.to_a(args), block.$to_proc())};
      return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', Opal.to_a(args), ($$30 = function(){var self = $$30.$$s == null ? this : $$30.$$s;

        return self.$to_s()}, $$30.$$s = self, $$30.$$arity = 0, $$30));
    }, $Object_para$29.$$arity = -1);
    return (Opal.def(self, '$br', $Object_br$31 = function $$br() {
      var $$32, self = this, $ret_or_13 = nil;

      
      if ($truthy((function() {if ($truthy(($ret_or_13 = self['$respond_to?']("hyper_component?")))) {
        return self['$hyper_component?']()
      } else {
        return $ret_or_13
      }; return nil; })())) {
        return self.$send("br")};
      return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [$$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'FRAGMENT')], ($$32 = function(){var self = $$32.$$s == null ? this : $$32.$$s, $$33;

        
        $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [$$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'FRAGMENT')], ($$33 = function(){var self = $$33.$$s == null ? this : $$33.$$s;

          return self.$to_s()}, $$33.$$s = self, $$33.$$arity = 0, $$33));
        return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render($$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'BR'));}, $$32.$$s = self, $$32.$$arity = 0, $$32));
    }, $Object_br$31.$$arity = 0), nil) && 'br';
  })($nesting[0], null, $nesting);
};

Opal.modules["hyperstack/component/children"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $lambda = Opal.lambda, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$each', '$to_proc', '$render', '$to_enum', '$length', '$>', '$new', '$call', '$<<', '$alias_method']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Children');

        var $nesting = [self].concat($parent_nesting), $Children_initialize$1, $Children_render$2, $Children_to_proc$3, $Children_each$5, $Children_length$7;

        self.$$prototype.children = self.$$prototype.length = nil;
        
        self.$include($$($nesting, 'Enumerable'));
        
        Opal.def(self, '$initialize', $Children_initialize$1 = function $$initialize(children) {
          var self = this;

          return (self.children = children)
        }, $Children_initialize$1.$$arity = 1);
        
        Opal.def(self, '$render', $Children_render$2 = function $$render() {
          var self = this;

          return $send(self, 'each', [], "render".$to_proc())
        }, $Children_render$2.$$arity = 0);
        
        Opal.def(self, '$to_proc', $Children_to_proc$3 = function $$to_proc() {
          var $$4, self = this;

          return $lambda(($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

            return self.$render()}, $$4.$$s = self, $$4.$$arity = 0, $$4))
        }, $Children_to_proc$3.$$arity = 0);
        
        Opal.def(self, '$each', $Children_each$5 = function $$each() {
          var $iter = $Children_each$5.$$p, block = $iter || nil, $$6, self = this, collection = nil, element = nil;

          if ($iter) $Children_each$5.$$p = null;
          
          
          if ($iter) $Children_each$5.$$p = null;;
          if ((block !== nil)) {
          } else {
            return $send(self, 'to_enum', ["each"], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;

              return self.$length()}, $$6.$$s = self, $$6.$$arity = 0, $$6))
          };
          if ($truthy($rb_gt(self.$length(), 0))) {
          } else {
            return []
          };
          collection = [];
          
          React.Children.forEach(self.children, function(context){
            ((element = $$($nesting, 'Element').$new(context, "wrap_child")), block.$call(element), collection['$<<'](element))
          })
        ;
          return collection;
        }, $Children_each$5.$$arity = 0);
        
        Opal.def(self, '$length', $Children_length$7 = function $$length() {
          var self = this, $ret_or_1 = nil;

          return (self.length = (function() {if ($truthy(($ret_or_1 = self.length))) {
            return $ret_or_1
          } else {
            return React.Children.count(self.children)
          }; return nil; })())
        }, $Children_length$7.$$arity = 0);
        return self.$alias_method("size", "length");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/instance_methods"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $lambda = Opal.lambda, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$include?', '$param_accessor_style', '$raise', '$[]', '$dom_node', '$==', '$=~', '$pluralize', '$set_or_replace_state_or_prop', '$to_proc', '$private', '$instance_eval', '$callbacks?', '$class', '$RescueWrapper', '$call', '$after_error_args=', '$-', '$__hyperstack_component_run_post_render_hooks', '$__hyperstack_component_rescue_wrapper', '$__hyperstack_router_wrapper', '$shallow_to_n']);
  
  self.$require("hyperstack/component/children");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'InstanceMethods');

          var $nesting = [self].concat($parent_nesting), $InstanceMethods_children$1, $InstanceMethods_params$2, $InstanceMethods_props$3, $InstanceMethods_dom_node$4, $InstanceMethods_jq_node$5, $InstanceMethods_mounted$ques$6, $InstanceMethods_pluralize$7, $InstanceMethods_force_update$excl$8, $InstanceMethods_set_state$9, $InstanceMethods_set_state$excl$10, $InstanceMethods___hyperstack_router_wrapper$11, $InstanceMethods___hyperstack_component_rescue_wrapper$13, $InstanceMethods___hyperstack_component_select_wrappers$14, $InstanceMethods_set_or_replace_state_or_prop$15;

          
          
          Opal.def(self, '$children', $InstanceMethods_children$1 = function $$children() {
            var self = this;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            return $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Children').$new(self.__hyperstack_component_native.props.children)
          }, $InstanceMethods_children$1.$$arity = 0);
          
          Opal.def(self, '$params', $InstanceMethods_params$2 = function $$params() {
            var self = this;
            if (self.__hyperstack_component_params_wrapper == null) self.__hyperstack_component_params_wrapper = nil;

            
            if ($truthy(["hyperstack", "accessors"]['$include?'](self.__hyperstack_component_params_wrapper.$param_accessor_style()))) {
              self.$raise("" + "params are now directly accessible via instance variables.\n" + "  to access the legacy behavior add `param_accessor_style = :legacy` " + "to your component class\n" + "  to access both behaviors add `param_accessor_style = :both` " + "to your component class")};
            return self.__hyperstack_component_params_wrapper;
          }, $InstanceMethods_params$2.$$arity = 0);
          
          Opal.def(self, '$props', $InstanceMethods_props$3 = function $$props() {
            var self = this;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            return $$($nesting, 'Hash').$new(self.__hyperstack_component_native.props)
          }, $InstanceMethods_props$3.$$arity = 0);
          
          Opal.def(self, '$dom_node', $InstanceMethods_dom_node$4 = function $$dom_node() {
            var self = this;

            return ReactDOM.findDOMNode(self.__hyperstack_component_native)
          }, $InstanceMethods_dom_node$4.$$arity = 0);
          
          Opal.def(self, '$jq_node', $InstanceMethods_jq_node$5 = function $$jq_node() {
            var self = this;

            return $$$('::', 'Element')['$[]'](self.$dom_node())
          }, $InstanceMethods_jq_node$5.$$arity = 0);
          
          Opal.def(self, '$mounted?', $InstanceMethods_mounted$ques$6 = function() {
            var self = this;

            return (self.__hyperstack_component_is_mounted === undefined) ? false : self.__hyperstack_component_is_mounted
          }, $InstanceMethods_mounted$ques$6.$$arity = 0);
          
          Opal.def(self, '$pluralize', $InstanceMethods_pluralize$7 = function $$pluralize(count, singular, plural) {
            var self = this, word = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

            
            
            if (plural == null) {
              plural = nil;
            };
            word = (function() {if ($truthy((function() {if ($truthy(($ret_or_1 = count['$=='](1)))) {
              return $ret_or_1
            } else {
              return count['$=~'](/^1(\.0+)?$/)
            }; return nil; })())) {
              return singular
            } else if ($truthy(($ret_or_2 = plural))) {
              return $ret_or_2
            } else {
              return singular.$pluralize()
            }; return nil; })();
            return "" + ((function() {if ($truthy(($ret_or_3 = count))) {
              return $ret_or_3
            } else {
              return 0
            }; return nil; })()) + " " + (word);
          }, $InstanceMethods_pluralize$7.$$arity = -3);
          
          Opal.def(self, '$force_update!', $InstanceMethods_force_update$excl$8 = function() {
            var self = this;

            
            self.__hyperstack_component_native.forceUpdate();
            return self;
          }, $InstanceMethods_force_update$excl$8.$$arity = 0);
          
          Opal.def(self, '$set_state', $InstanceMethods_set_state$9 = function $$set_state(state) {
            var $iter = $InstanceMethods_set_state$9.$$p, block = $iter || nil, self = this;

            if ($iter) $InstanceMethods_set_state$9.$$p = null;
            
            
            if ($iter) $InstanceMethods_set_state$9.$$p = null;;
            return $send(self, 'set_or_replace_state_or_prop', [state, "setState"], block.$to_proc());
          }, $InstanceMethods_set_state$9.$$arity = 1);
          
          Opal.def(self, '$set_state!', $InstanceMethods_set_state$excl$10 = function(state) {
            var $iter = $InstanceMethods_set_state$excl$10.$$p, block = $iter || nil, self = this;

            if ($iter) $InstanceMethods_set_state$excl$10.$$p = null;
            
            
            if ($iter) $InstanceMethods_set_state$excl$10.$$p = null;;
            $send(self, 'set_or_replace_state_or_prop', [state, "setState"], block.$to_proc());
            return self.__hyperstack_component_native.forceUpdate();
          }, $InstanceMethods_set_state$excl$10.$$arity = 1);
          self.$private();
          
          Opal.def(self, '$__hyperstack_router_wrapper', $InstanceMethods___hyperstack_router_wrapper$11 = function $$__hyperstack_router_wrapper() {
            var $iter = $InstanceMethods___hyperstack_router_wrapper$11.$$p, block = $iter || nil, $$12, self = this;

            if ($iter) $InstanceMethods___hyperstack_router_wrapper$11.$$p = null;
            
            
            if ($iter) $InstanceMethods___hyperstack_router_wrapper$11.$$p = null;;
            return $lambda(($$12 = function(){var self = $$12.$$s == null ? this : $$12.$$s;

              return $send(self, 'instance_eval', [], block.$to_proc())}, $$12.$$s = self, $$12.$$arity = 0, $$12));
          }, $InstanceMethods___hyperstack_router_wrapper$11.$$arity = 0);
          
          Opal.def(self, '$__hyperstack_component_rescue_wrapper', $InstanceMethods___hyperstack_component_rescue_wrapper$13 = function $$__hyperstack_component_rescue_wrapper(child) {
            var self = this;

            if ($truthy(self.$class()['$callbacks?']("__hyperstack_component_rescue_hook"))) {
              return $$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component').$RescueWrapper($hash2(["child", "children_elements"], {"child": self, "children_elements": child}))
            } else {
              return child.$call()
            }
          }, $InstanceMethods___hyperstack_component_rescue_wrapper$13.$$arity = 1);
          
          Opal.def(self, '$__hyperstack_component_select_wrappers', $InstanceMethods___hyperstack_component_select_wrappers$14 = function $$__hyperstack_component_select_wrappers() {
            var $iter = $InstanceMethods___hyperstack_component_select_wrappers$14.$$p, block = $iter || nil, self = this, $writer = nil;

            if ($iter) $InstanceMethods___hyperstack_component_select_wrappers$14.$$p = null;
            
            
            if ($iter) $InstanceMethods___hyperstack_component_select_wrappers$14.$$p = null;;
            
            $writer = [nil];
            $send($$($nesting, 'RescueWrapper'), 'after_error_args=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$__hyperstack_component_run_post_render_hooks(self.$__hyperstack_component_rescue_wrapper($send(self, '__hyperstack_router_wrapper', [], block.$to_proc())));
          }, $InstanceMethods___hyperstack_component_select_wrappers$14.$$arity = 0);
          return (Opal.def(self, '$set_or_replace_state_or_prop', $InstanceMethods_set_or_replace_state_or_prop$15 = function $$set_or_replace_state_or_prop(state_or_prop, method) {
            var $iter = $InstanceMethods_set_or_replace_state_or_prop$15.$$p, block = $iter || nil, self = this;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            if ($iter) $InstanceMethods_set_or_replace_state_or_prop$15.$$p = null;
            
            
            if ($iter) $InstanceMethods_set_or_replace_state_or_prop$15.$$p = null;;
            if ($truthy(self.__hyperstack_component_native)) {
            } else {
              self.$raise("No native ReactComponent associated")
            };
            var state_prop_n = state_or_prop.$shallow_to_n();
            if ($truthy(block)) {
              
              if (self.__hyperstack_component_native.__opalInstanceInitializedState === true) {
                self.__hyperstack_component_native[method](state_prop_n, function(){
                  block.$call();
                });
              } else {
                for (var sp in state_prop_n) {
                  if (state_prop_n.hasOwnProperty(sp)) {
                    self.__hyperstack_component_native.state[sp] = state_prop_n[sp];
                  }
                }
              }
            
            } else {
              
              if (self.__hyperstack_component_native.__opalInstanceInitializedState === true) {
                self.__hyperstack_component_native[method](state_prop_n);
              } else {
                for (var sp in state_prop_n) {
                  if (state_prop_n.hasOwnProperty(sp)) {
                    self.__hyperstack_component_native.state[sp] = state_prop_n[sp];
                  }
                }
              }
            
            };
          }, $InstanceMethods_set_or_replace_state_or_prop$15.$$arity = 2), nil) && 'set_or_replace_state_or_prop';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/internal/component/class_methods"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $alias = Opal.alias, $hash = Opal.hash;

  Opal.add_stubs(['$create_element', '$to_proc', '$render', '$deprecation_warning', '$select', '$mounted_components', '$<=', '$class', '$param_accessor_style', '$props_wrapper', '$==', '$[]', '$<<', '$each', '$before_new_params', '$included', '$is_a?', '$element_type', '$define_method', '$__hyperstack_component_select_wrappers', '$instance_eval', '$__hyperstack_component_after_render_hook', '$on', '$instance_exec', '$empty?', '$__hyperstack_component_rescue_hook', '$!', '$detect', '$before_mount', '$before_update', '$after_mount', '$after_update', '$any?', '$respond_to?', '$haml_class_name', '$superclass', '$copy', '$validator', '$new', '$validate', '$>', '$count', '$+', '$name', '$join', '$default_props', '$build', '$first', '$delete', '$merge!', '$[]=', '$-', '$key?', '$optional', '$requires', '$all_other_params', '$props', '$=~', '$gsub', '$include?', '$event_camelize', '$event', '$call', '$arity', '$last', '$pop', '$state', '$singleton_class', '$__send__', '$mutate', '$native_mixins', '$static_call_backs', '$split', '$to_n', '$add_item_to_tree', '$Native', '$create_native_react_class', '$reverse', '$import_native_component', '$eval_native_react_component', '$raise', '$message', '$!=', '$length', '$inject']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_create_element$1, $ClassMethods_insert_element$2, $ClassMethods_deprecation_warning$3, $ClassMethods_hyper_component$ques$4, $ClassMethods_allow_deprecated_render_definition$ques$5, $ClassMethods_mounted_components$6, $ClassMethods_param_accessor_style$8, $ClassMethods_backtrace$9, $ClassMethods_append_backtrace$10, $ClassMethods_before_receive_props$12, $ClassMethods_render$13, $ClassMethods_on$19, $ClassMethods_rescues$22, $ClassMethods_before_render$25, $ClassMethods_after_render$26, $ClassMethods_method_missing$27, $ClassMethods_validator$28, $ClassMethods_prop_types$29, $ClassMethods_default_props$30, $ClassMethods_params$31, $ClassMethods_props_wrapper$32, $ClassMethods_param$33, $ClassMethods_collect_other_params_as$34, $ClassMethods_fires$36, $ClassMethods_define_state$38, $ClassMethods_export_state$41, $ClassMethods_native_mixin$45, $ClassMethods_native_mixins$46, $ClassMethods_static_call_back$47, $ClassMethods_static_call_backs$48, $ClassMethods_export_component$49, $ClassMethods_imports$50, $ClassMethods_add_item_to_tree$52, $ClassMethods_to_n$54;

          
          
          Opal.def(self, '$create_element', $ClassMethods_create_element$1 = function $$create_element($a) {
            var $iter = $ClassMethods_create_element$1.$$p, children = $iter || nil, $post_args, params, self = this;

            if ($iter) $ClassMethods_create_element$1.$$p = null;
            
            
            if ($iter) $ClassMethods_create_element$1.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            params = $post_args;;
            return $send($$($nesting, 'ReactWrapper'), 'create_element', [self].concat(Opal.to_a(params)), children.$to_proc());
          }, $ClassMethods_create_element$1.$$arity = -1);
          
          Opal.def(self, '$insert_element', $ClassMethods_insert_element$2 = function $$insert_element($a) {
            var $iter = $ClassMethods_insert_element$2.$$p, children = $iter || nil, $post_args, params, self = this;

            if ($iter) $ClassMethods_insert_element$2.$$p = null;
            
            
            if ($iter) $ClassMethods_insert_element$2.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            params = $post_args;;
            return $send($$($nesting, 'RenderingContext'), 'render', [self].concat(Opal.to_a(params)), children.$to_proc());
          }, $ClassMethods_insert_element$2.$$arity = -1);
          
          Opal.def(self, '$deprecation_warning', $ClassMethods_deprecation_warning$3 = function $$deprecation_warning(message) {
            var self = this;

            return $$($nesting, 'Hyperstack').$deprecation_warning(self, message)
          }, $ClassMethods_deprecation_warning$3.$$arity = 1);
          
          Opal.def(self, '$hyper_component?', $ClassMethods_hyper_component$ques$4 = function() {
            var self = this;

            return true
          }, $ClassMethods_hyper_component$ques$4.$$arity = 0);
          
          Opal.def(self, '$allow_deprecated_render_definition?', $ClassMethods_allow_deprecated_render_definition$ques$5 = function() {
            var self = this;

            return false
          }, $ClassMethods_allow_deprecated_render_definition$ques$5.$$arity = 0);
          
          Opal.def(self, '$mounted_components', $ClassMethods_mounted_components$6 = function $$mounted_components() {
            var $$7, self = this;

            return $send($$$($$($nesting, 'Hyperstack'), 'Component').$mounted_components(), 'select', [], ($$7 = function(c){var self = $$7.$$s == null ? this : $$7.$$s;

              
              
              if (c == null) {
                c = nil;
              };
              return $rb_le(c.$class(), self);}, $$7.$$s = self, $$7.$$arity = 1, $$7))
          }, $ClassMethods_mounted_components$6.$$arity = 0);
          
          Opal.def(self, '$param_accessor_style', $ClassMethods_param_accessor_style$8 = function $$param_accessor_style($a) {
            var $post_args, args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self.$props_wrapper(), 'param_accessor_style', Opal.to_a(args));
          }, $ClassMethods_param_accessor_style$8.$$arity = -1);
          
          Opal.def(self, '$backtrace', $ClassMethods_backtrace$9 = function $$backtrace($a) {
            var $post_args, args, self = this, $ret_or_1 = nil;
            if (self.__hyperstack_component_dont_catch_exceptions == null) self.__hyperstack_component_dont_catch_exceptions = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            self.__hyperstack_component_dont_catch_exceptions = args['$[]'](0)['$==']("none");
            return (self.__hyperstack_component_backtrace_off = (function() {if ($truthy(($ret_or_1 = self.__hyperstack_component_dont_catch_exceptions))) {
              return $ret_or_1
            } else {
              
              return args['$[]'](0)['$==']("off");
            }; return nil; })());
          }, $ClassMethods_backtrace$9.$$arity = -1);
          
          Opal.def(self, '$append_backtrace', $ClassMethods_append_backtrace$10 = function $$append_backtrace(message_array, backtrace) {
            var $$11, self = this;

            
            message_array['$<<']("" + "    " + (backtrace['$[]'](0)));
            return $send(backtrace['$[]']($range(1, -1, false)), 'each', [], ($$11 = function(line){var self = $$11.$$s == null ? this : $$11.$$s;

              
              
              if (line == null) {
                line = nil;
              };
              return message_array['$<<'](line);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          }, $ClassMethods_append_backtrace$10.$$arity = 2);
          
          Opal.def(self, '$before_receive_props', $ClassMethods_before_receive_props$12 = function $$before_receive_props($a) {
            var $iter = $ClassMethods_before_receive_props$12.$$p, block = $iter || nil, $post_args, args, self = this;

            if ($iter) $ClassMethods_before_receive_props$12.$$p = null;
            
            
            if ($iter) $ClassMethods_before_receive_props$12.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            self.$deprecation_warning("'before_receive_props' is deprecated. Use the 'before_new_params' macro instead.");
            return $send(self, 'before_new_params', Opal.to_a(args), block.$to_proc());
          }, $ClassMethods_before_receive_props$12.$$arity = -1);
          
          Opal.def(self, '$render', $ClassMethods_render$13 = function $$render(container, params) {
            var $iter = $ClassMethods_render$13.$$p, block = $iter || nil, $$14, $$17, self = this;

            if ($iter) $ClassMethods_render$13.$$p = null;
            
            
            if ($iter) $ClassMethods_render$13.$$p = null;;
            
            if (container == null) {
              container = nil;
            };
            
            if (params == null) {
              params = $hash2([], {});
            };
            $$($nesting, 'Tags').$included(self);
            if ($truthy(container)) {
              
              if ($truthy(container['$is_a?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                container = container.$element_type()};
              return $send(self, 'define_method', ["__hyperstack_component_render"], ($$14 = function(){var self = $$14.$$s == null ? this : $$14.$$s, $$15;

                return $send(self, '__hyperstack_component_select_wrappers', [], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s, $$16;

                  return $send($$($nesting, 'RenderingContext'), 'render', [container, params], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s;

                    if ($truthy(block)) {
                      return $send(self, 'instance_eval', [], block.$to_proc())
                    } else {
                      return nil
                    }}, $$16.$$s = self, $$16.$$arity = 0, $$16))}, $$15.$$s = self, $$15.$$arity = 0, $$15))}, $$14.$$s = self, $$14.$$arity = 0, $$14));
            } else {
              return $send(self, 'define_method', ["__hyperstack_component_render"], ($$17 = function(){var self = $$17.$$s == null ? this : $$17.$$s, $$18;

                return $send(self, '__hyperstack_component_select_wrappers', [], ($$18 = function(){var self = $$18.$$s == null ? this : $$18.$$s;

                  return $send(self, 'instance_eval', [], block.$to_proc())}, $$18.$$s = self, $$18.$$arity = 0, $$18))}, $$17.$$s = self, $$17.$$arity = 0, $$17))
            };
          }, $ClassMethods_render$13.$$arity = -1);
          
          Opal.def(self, '$on', $ClassMethods_on$19 = function $$on($a) {
            var $iter = $ClassMethods_on$19.$$p, block = $iter || nil, $post_args, args, $$20, self = this;

            if ($iter) $ClassMethods_on$19.$$p = null;
            
            
            if ($iter) $ClassMethods_on$19.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send(self, '__hyperstack_component_after_render_hook', [], ($$20 = function(element){var self = $$20.$$s == null ? this : $$20.$$s, $$21;

              
              
              if (element == null) {
                element = nil;
              };
              return $send(element, 'on', Opal.to_a(args), ($$21 = function($b){var self = $$21.$$s == null ? this : $$21.$$s, $post_args, aargs;

                
                
                $post_args = Opal.slice.call(arguments, 0, arguments.length);
                
                aargs = $post_args;;
                return $send(self, 'instance_exec', Opal.to_a(aargs), block.$to_proc());}, $$21.$$s = self, $$21.$$arity = -1, $$21));}, $$20.$$s = self, $$20.$$arity = 1, $$20));
          }, $ClassMethods_on$19.$$arity = -1);
          
          Opal.def(self, '$rescues', $ClassMethods_rescues$22 = function $$rescues($a) {
            var $iter = $ClassMethods_rescues$22.$$p, block = $iter || nil, $post_args, klasses, $$23, self = this;

            if ($iter) $ClassMethods_rescues$22.$$p = null;
            
            
            if ($iter) $ClassMethods_rescues$22.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            klasses = $post_args;;
            if ($truthy(klasses['$empty?']())) {
              klasses = [$$($nesting, 'StandardError')]};
            return $send(self, '__hyperstack_component_rescue_hook', [], ($$23 = function(found, $b){var self = $$23.$$s == null ? this : $$23.$$s, $post_args, args, $$24, $ret_or_2 = nil;

              
              
              if (found == null) {
                found = nil;
              };
              
              $post_args = Opal.slice.call(arguments, 1, arguments.length);
              
              args = $post_args;;
              if ($truthy((function() {if ($truthy(($ret_or_2 = found))) {
                return $ret_or_2
              } else {
                return $send(klasses, 'detect', [], ($$24 = function(klass){var self = $$24.$$s == null ? this : $$24.$$s;

                  
                  
                  if (klass == null) {
                    klass = nil;
                  };
                  return args['$[]'](0)['$is_a?'](klass);}, $$24.$$s = self, $$24.$$arity = 1, $$24))['$!']()
              }; return nil; })())) {
                return [found].concat(Opal.to_a(args));};
              $send(self, 'instance_exec', Opal.to_a(args), block.$to_proc());
              return [true].concat(Opal.to_a(args));}, $$23.$$s = self, $$23.$$arity = -2, $$23));
          }, $ClassMethods_rescues$22.$$arity = -1);
          
          Opal.def(self, '$before_render', $ClassMethods_before_render$25 = function $$before_render($a) {
            var $iter = $ClassMethods_before_render$25.$$p, block = $iter || nil, $post_args, args, self = this;

            if ($iter) $ClassMethods_before_render$25.$$p = null;
            
            
            if ($iter) $ClassMethods_before_render$25.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $send(self, 'before_mount', Opal.to_a(args), block.$to_proc());
            return $send(self, 'before_update', Opal.to_a(args), block.$to_proc());
          }, $ClassMethods_before_render$25.$$arity = -1);
          
          Opal.def(self, '$after_render', $ClassMethods_after_render$26 = function $$after_render($a) {
            var $iter = $ClassMethods_after_render$26.$$p, block = $iter || nil, $post_args, args, self = this;

            if ($iter) $ClassMethods_after_render$26.$$p = null;
            
            
            if ($iter) $ClassMethods_after_render$26.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            $send(self, 'after_mount', Opal.to_a(args), block.$to_proc());
            return $send(self, 'after_update', Opal.to_a(args), block.$to_proc());
          }, $ClassMethods_after_render$26.$$arity = -1);
          
          Opal.def(self, '$method_missing', $ClassMethods_method_missing$27 = function $$method_missing(name, $a) {
            var $iter = $ClassMethods_method_missing$27.$$p, children = $iter || nil, $post_args, args, self = this, $ret_or_3 = nil;

            if ($iter) $ClassMethods_method_missing$27.$$p = null;
            
            
            if ($iter) $ClassMethods_method_missing$27.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            if ($truthy((function() {if ($truthy(($ret_or_3 = args['$any?']()))) {
              return $ret_or_3
            } else {
              return $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element')['$respond_to?']("haml_class_name")['$!']()
            }; return nil; })())) {
              return $send2(self, $find_super(self, 'method_missing', $ClassMethods_method_missing$27, false, true), 'method_missing', [name].concat(Opal.to_a(args)), $iter)
            } else {
              return $send($$($nesting, 'RenderingContext'), 'render', [self, $hash2(["class"], {"class": $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element').$haml_class_name(name)})], children.$to_proc())
            };
          }, $ClassMethods_method_missing$27.$$arity = -2);
          
          Opal.def(self, '$validator', $ClassMethods_validator$28 = function $$validator() {
            var self = this;
            if (self.__hyperstack_component_validator == null) self.__hyperstack_component_validator = nil;

            
            if ($truthy(self.__hyperstack_component_validator)) {
              return self.__hyperstack_component_validator};
            if ($truthy(self.$superclass()['$respond_to?']("validator"))) {
              return (self.__hyperstack_component_validator = self.$superclass().$validator().$copy(self.$props_wrapper()))
            } else {
              return (self.__hyperstack_component_validator = $$($nesting, 'Validator').$new(self.$props_wrapper()))
            };
          }, $ClassMethods_validator$28.$$arity = 0);
          
          Opal.def(self, '$prop_types', $ClassMethods_prop_types$29 = function $$prop_types() {
            var self = this;

            if ($truthy(self.$validator())) {
              return $hash2(["_componentValidator"], {"_componentValidator": 
                function(props, propName, componentName) {
                  var errors = self.$validator().$validate($$($nesting, 'Hash').$new(props));
                  return (function() {if ($truthy($rb_gt((errors).$count(), 0))) {
                return new Error($rb_plus("" + "In component `" + (self.$name()) + "`\n", (errors).$join("\n")))
              } else {
                return undefined;
              }; return nil; })();
                }
              })
            } else {
              return $hash2([], {})
            }
          }, $ClassMethods_prop_types$29.$$arity = 0);
          
          Opal.def(self, '$default_props', $ClassMethods_default_props$30 = function $$default_props() {
            var self = this;

            return self.$validator().$default_props()
          }, $ClassMethods_default_props$30.$$arity = 0);
          
          Opal.def(self, '$params', $ClassMethods_params$31 = function $$params() {
            var $iter = $ClassMethods_params$31.$$p, block = $iter || nil, self = this;

            if ($iter) $ClassMethods_params$31.$$p = null;
            
            
            if ($iter) $ClassMethods_params$31.$$p = null;;
            return $send(self.$validator(), 'build', [], block.$to_proc());
          }, $ClassMethods_params$31.$$arity = 0);
          
          Opal.def(self, '$props_wrapper', $ClassMethods_props_wrapper$32 = function $$props_wrapper() {
            var self = this, $ret_or_4 = nil;
            if (self.__hyperstack_component_props_wrapper == null) self.__hyperstack_component_props_wrapper = nil;

            
            if ($truthy(self.__hyperstack_component_props_wrapper)) {
              return self.__hyperstack_component_props_wrapper};
            if ($truthy(self.$superclass()['$respond_to?']("props_wrapper"))) {
              return (self.__hyperstack_component_props_wrapper = $$($nesting, 'Class').$new(self.$superclass().$props_wrapper()))
            } else {
              return (self.__hyperstack_component_props_wrapper = (function() {if ($truthy(($ret_or_4 = self.__hyperstack_component_props_wrapper))) {
                return $ret_or_4
              } else {
                return $$($nesting, 'Class').$new($$($nesting, 'PropsWrapper'))
              }; return nil; })())
            };
          }, $ClassMethods_props_wrapper$32.$$arity = 0);
          
          Opal.def(self, '$param', $ClassMethods_param$33 = function $$param($a) {
            var $post_args, args, self = this, options = nil, name = nil, default$ = nil, $ret_or_5 = nil, $ret_or_6 = nil, $writer = nil, $ret_or_7 = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            if ($truthy(args['$[]'](0)['$is_a?']($$($nesting, 'Hash')))) {
              
              options = args['$[]'](0);
              name = options.$first()['$[]'](0);
              default$ = options.$first()['$[]'](1);
              options.$delete(name);
              options['$merge!']($hash2(["default"], {"default": default$}));
            } else {
              
              name = args['$[]'](0);
              options = (function() {if ($truthy(($ret_or_5 = args['$[]'](1)))) {
                return $ret_or_5
              } else {
                return $hash2([], {})
              }; return nil; })();
            };
            if (options['$[]']("type")['$==']($$($nesting, 'Proc'))) {
              
              if ($truthy(($ret_or_6 = options['$[]']("default")))) {
                $ret_or_6
              } else {
                
                $writer = ["default", nil];
                $send(options, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              if ($truthy(options['$key?']("allow_nil"))) {
              } else {
                
                $writer = ["allow_nil", true];
                $send(options, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };};
            if (name['$==']("class")) {
              
              name = "className";
              if ($truthy(($ret_or_7 = options['$[]']("alias")))) {
                $ret_or_7
              } else {
                
                $writer = ["alias", "Class"];
                $send(options, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };};
            if ($truthy(options['$[]']("default"))) {
              return self.$validator().$optional(name, options)
            } else {
              return self.$validator().$requires(name, options)
            };
          }, $ClassMethods_param$33.$$arity = -1);
          
          Opal.def(self, '$collect_other_params_as', $ClassMethods_collect_other_params_as$34 = function $$collect_other_params_as(name) {
            var $$35, self = this;

            return $send(self.$validator(), 'all_other_params', [name], ($$35 = function(){var self = $$35.$$s == null ? this : $$35.$$s;

              return self.$props()}, $$35.$$s = self, $$35.$$arity = 0, $$35))
          }, $ClassMethods_collect_other_params_as$34.$$arity = 1);
          $alias(self, "other_params", "collect_other_params_as");
          $alias(self, "others", "collect_other_params_as");
          $alias(self, "other", "collect_other_params_as");
          $alias(self, "opts", "collect_other_params_as");
          
          Opal.def(self, '$fires', $ClassMethods_fires$36 = function $$fires(name, opts) {
            var $$37, self = this, aka = nil, $ret_or_8 = nil;

            
            
            if (opts == null) {
              opts = $hash2([], {});
            };
            aka = (function() {if ($truthy(($ret_or_8 = opts['$[]']("alias")))) {
              return $ret_or_8
            } else {
              return "" + (name) + "!"
            }; return nil; })();
            name = (function() {if ($truthy(name['$=~'](/^<(.+)>$/))) {
              return name.$gsub(/^<(.+)>$/, "\\1")
            } else if ($truthy($$$($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Event'), 'BUILT_IN_EVENTS')['$include?']("" + "on" + (name.$event_camelize())))) {
              return "" + "on" + (name.$event_camelize())
            } else {
              return "" + "on_" + (name)
            }; return nil; })();
            self.$validator().$event(name);
            return $send(self, 'define_method', [aka], ($$37 = function($a){var self = $$37.$$s == null ? this : $$37.$$s, $post_args, args, $b;

              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              return ($b = self.$props()['$[]'](name), ($b === nil || $b == null) ? nil : $send($b, 'call', Opal.to_a(args)));}, $$37.$$s = self, $$37.$$arity = -1, $$37));
          }, $ClassMethods_fires$36.$$arity = -2);
          $alias(self, "triggers", "fires");
          
          Opal.def(self, '$define_state', $ClassMethods_define_state$38 = function $$define_state($a) {
            var $iter = $ClassMethods_define_state$38.$$p, block = $iter || nil, $post_args, states, $$39, $$40, self = this, default_initial_value = nil, $ret_or_9 = nil, states_hash = nil;

            if ($iter) $ClassMethods_define_state$38.$$p = null;
            
            
            if ($iter) $ClassMethods_define_state$38.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            states = $post_args;;
            self.$deprecation_warning("'define_state' is deprecated. Use the 'state' macro to declare states.");
            default_initial_value = (function() {if ($truthy((function() {if ($truthy(($ret_or_9 = block))) {
              return block.$arity()['$=='](0)
            } else {
              return $ret_or_9
            }; return nil; })())) {
              return Opal.yieldX(block, []);
            } else {
              return nil
            }; return nil; })();
            states_hash = (function() {if ($truthy(states.$last()['$is_a?']($$($nesting, 'Hash')))) {
              return states.$pop()
            } else {
              return $hash2([], {})
            }; return nil; })();
            $send(states, 'each', [], ($$39 = function(name){var self = $$39.$$s == null ? this : $$39.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              return self.$state($hash(name, default_initial_value));}, $$39.$$s = self, $$39.$$arity = 1, $$39));
            return $send(states_hash, 'each', [], ($$40 = function(name, value){var self = $$40.$$s == null ? this : $$40.$$s;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              return self.$state($hash(name, value));}, $$40.$$s = self, $$40.$$arity = 2, $$40));
          }, $ClassMethods_define_state$38.$$arity = -1);
          
          Opal.def(self, '$export_state', $ClassMethods_export_state$41 = function $$export_state($a) {
            var $iter = $ClassMethods_export_state$41.$$p, block = $iter || nil, $post_args, states, $$42, $$43, self = this, default_initial_value = nil, $ret_or_10 = nil, states_hash = nil;

            if ($iter) $ClassMethods_export_state$41.$$p = null;
            
            
            if ($iter) $ClassMethods_export_state$41.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            states = $post_args;;
            self.$deprecation_warning("'export_state' is deprecated. Use the 'state' macro to declare states.");
            default_initial_value = (function() {if ($truthy((function() {if ($truthy(($ret_or_10 = block))) {
              return block.$arity()['$=='](0)
            } else {
              return $ret_or_10
            }; return nil; })())) {
              return Opal.yieldX(block, []);
            } else {
              return nil
            }; return nil; })();
            states_hash = (function() {if ($truthy(states.$last()['$is_a?']($$($nesting, 'Hash')))) {
              return states.$pop()
            } else {
              return $hash2([], {})
            }; return nil; })();
            $send(states, 'each', [], ($$42 = function(name){var self = $$42.$$s == null ? this : $$42.$$s, $writer = nil;

              
              
              if (name == null) {
                name = nil;
              };
              $writer = [name, default_initial_value];
              $send(states_hash, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$42.$$s = self, $$42.$$arity = 1, $$42));
            return $send(states_hash, 'each', [], ($$43 = function(name, value){var self = $$43.$$s == null ? this : $$43.$$s, $$44;

              
              
              if (name == null) {
                name = nil;
              };
              
              if (value == null) {
                value = nil;
              };
              self.$state($hash(name, value, "scope", "class", "reader", true));
              return $send(self.$singleton_class(), 'define_method', ["" + (name) + "!"], ($$44 = function($b){var self = $$44.$$s == null ? this : $$44.$$s, $post_args, args;

                
                
                $post_args = Opal.slice.call(arguments, 0, arguments.length);
                
                args = $post_args;;
                return $send(self.$mutate(), '__send__', [name].concat(Opal.to_a(args)));}, $$44.$$s = self, $$44.$$arity = -1, $$44));}, $$43.$$s = self, $$43.$$arity = 2, $$43));
          }, $ClassMethods_export_state$41.$$arity = -1);
          
          Opal.def(self, '$native_mixin', $ClassMethods_native_mixin$45 = function $$native_mixin(item) {
            var self = this;

            return self.$native_mixins()['$<<'](item)
          }, $ClassMethods_native_mixin$45.$$arity = 1);
          
          Opal.def(self, '$native_mixins', $ClassMethods_native_mixins$46 = function $$native_mixins() {
            var self = this, $ret_or_11 = nil;
            if (self.__hyperstack_component_native_mixins == null) self.__hyperstack_component_native_mixins = nil;

            return (self.__hyperstack_component_native_mixins = (function() {if ($truthy(($ret_or_11 = self.__hyperstack_component_native_mixins))) {
              return $ret_or_11
            } else {
              return []
            }; return nil; })())
          }, $ClassMethods_native_mixins$46.$$arity = 0);
          
          Opal.def(self, '$static_call_back', $ClassMethods_static_call_back$47 = function $$static_call_back(name) {
            var $iter = $ClassMethods_static_call_back$47.$$p, block = $iter || nil, self = this, $writer = nil;

            if ($iter) $ClassMethods_static_call_back$47.$$p = null;
            
            
            if ($iter) $ClassMethods_static_call_back$47.$$p = null;;
            $writer = [name, block];
            $send(self.$static_call_backs(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, $ClassMethods_static_call_back$47.$$arity = 1);
          
          Opal.def(self, '$static_call_backs', $ClassMethods_static_call_backs$48 = function $$static_call_backs() {
            var self = this, $ret_or_12 = nil;
            if (self.__hyperstack_component_static_call_backs == null) self.__hyperstack_component_static_call_backs = nil;

            return (self.__hyperstack_component_static_call_backs = (function() {if ($truthy(($ret_or_12 = self.__hyperstack_component_static_call_backs))) {
              return $ret_or_12
            } else {
              return $hash2([], {})
            }; return nil; })())
          }, $ClassMethods_static_call_backs$48.$$arity = 0);
          
          Opal.def(self, '$export_component', $ClassMethods_export_component$49 = function $$export_component(opts) {
            var self = this, export_name = nil, $ret_or_13 = nil, first_name = nil, $writer = nil;

            
            
            if (opts == null) {
              opts = $hash2([], {});
            };
            export_name = (function() {if ($truthy(($ret_or_13 = opts['$[]']("as")))) {
              return $ret_or_13
            } else {
              return self.$name()
            }; return nil; })().$split("::");
            first_name = export_name.$first();
            
            $writer = [first_name, self.$add_item_to_tree(self.$Native(Opal.global)['$[]'](first_name), $rb_plus([$$($nesting, 'ReactWrapper').$create_native_react_class(self)], export_name['$[]']($range(1, -1, false)).$reverse())).$to_n()];
            $send(self.$Native(Opal.global), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, $ClassMethods_export_component$49.$$arity = -1);
          
          Opal.def(self, '$imports', $ClassMethods_imports$50 = function $$imports(component_name) {
            var $$51, self = this, e = nil;

            return (function() { try {
            try {
              
              $$($nesting, 'ReactWrapper').$import_native_component(self, $$($nesting, 'ReactWrapper').$eval_native_react_component(component_name));
              return $send(self, 'render', [], ($$51 = function(){var self = $$51.$$s == null ? this : $$51.$$s;

                return nil}, $$51.$$s = self, $$51.$$arity = 0, $$51));
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
                try {
                  return self.$raise("" + (self) + " cannot import '" + (component_name) + "': " + (e.$message()) + ".")
                } finally { Opal.pop_exception(); }
              } else { throw $err; }
            }
            } finally {
              self
            }; })()
          }, $ClassMethods_imports$50.$$arity = 1);
          
          Opal.def(self, '$add_item_to_tree', $ClassMethods_add_item_to_tree$52 = function $$add_item_to_tree(current_tree, new_item) {
            var $$53, self = this, $ret_or_14 = nil, $writer = nil;

            if ($truthy((function() {if ($truthy(($ret_or_14 = self.$Native(current_tree).$class()['$!=']($$$($$($nesting, 'Native'), 'Object'))))) {
              return $ret_or_14
            } else {
              return new_item.$length()['$=='](1)
            }; return nil; })())) {
              return $send(new_item, 'inject', [], ($$53 = function(a, e){var self = $$53.$$s == null ? this : $$53.$$s;

                
                
                if (a == null) {
                  a = nil;
                };
                
                if (e == null) {
                  e = nil;
                };
                return $hash(e, a);}, $$53.$$s = self, $$53.$$arity = 2, $$53))
            } else {
              
              
              $writer = [new_item.$last(), self.$add_item_to_tree(self.$Native(current_tree)['$[]'](new_item.$last()), new_item['$[]']($range(0, -2, false)))];
              $send(self.$Native(current_tree), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return current_tree;
            }
          }, $ClassMethods_add_item_to_tree$52.$$arity = 2);
          return (Opal.def(self, '$to_n', $ClassMethods_to_n$54 = function $$to_n() {
            var self = this;

            return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper').$create_native_react_class(self)
          }, $ClassMethods_to_n$54.$$arity = 0), nil) && 'to_n';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["active_support/core_ext/string/filters"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$>', '$length', '$dup', '$[]', '$-', '$rindex']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_truncate$1;

    return (Opal.def(self, '$truncate', $String_truncate$1 = function $$truncate(truncate_at, options) {
      var self = this, omission = nil, $ret_or_1 = nil, length_with_room_for_omission = nil, stop = nil, $ret_or_2 = nil;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      if ($truthy($rb_gt(self.$length(), truncate_at))) {
      } else {
        return self.$dup()
      };
      omission = (function() {if ($truthy(($ret_or_1 = options['$[]']("omission")))) {
        return $ret_or_1
      } else {
        return "..."
      }; return nil; })();
      length_with_room_for_omission = $rb_minus(truncate_at, omission.$length());
      stop = (function() {if ($truthy(options['$[]']("separator"))) {
        if ($truthy(($ret_or_2 = self.$rindex(options['$[]']("separator"), length_with_room_for_omission)))) {
          return $ret_or_2
        } else {
          return length_with_room_for_omission
        }
      } else {
        return length_with_room_for_omission
      }; return nil; })();
      return "" + (self['$[]'](0, stop)) + (omission);
    }, $String_truncate$1.$$arity = -2), nil) && 'truncate'
  })($nesting[0], null, $nesting)
};

Opal.modules["set"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$reject', '$delete_if', '$to_proc', '$keep_if', '$each_key', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$any?', '$!', '$intersect?', '$keys']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Set');

    var $nesting = [self].concat($parent_nesting), $Set_$$$1, $Set_initialize$2, $Set_dup$4, $Set_$minus$5, $Set_inspect$6, $Set_$eq_eq$7, $Set_add$9, $Set_classify$10, $Set_collect$excl$13, $Set_delete$15, $Set_delete$ques$16, $Set_delete_if$17, $Set_keep_if$20, $Set_reject$excl$23, $Set_select$excl$24, $Set_add$ques$25, $Set_each$26, $Set_empty$ques$27, $Set_eql$ques$28, $Set_clear$30, $Set_include$ques$31, $Set_merge$32, $Set_replace$34, $Set_size$35, $Set_subtract$36, $Set_$$38, $Set_superset$ques$39, $Set_proper_superset$ques$41, $Set_subset$ques$43, $Set_proper_subset$ques$45, $Set_intersect$ques$47, $Set_disjoint$ques$50, $Set_to_a$51;

    self.$$prototype.hash = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defs(self, '$[]', $Set_$$$1 = function($a) {
      var $post_args, ary, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      ary = $post_args;;
      return self.$new(ary);
    }, $Set_$$$1.$$arity = -1);
    
    Opal.def(self, '$initialize', $Set_initialize$2 = function $$initialize(enum$) {
      var $iter = $Set_initialize$2.$$p, block = $iter || nil, $$3, self = this;

      if ($iter) $Set_initialize$2.$$p = null;
      
      
      if ($iter) $Set_initialize$2.$$p = null;;
      
      if (enum$ == null) {
        enum$ = nil;
      };
      self.hash = $hash2([], {});
      if ($truthy(enum$['$nil?']())) {
        return nil};
      if ($truthy($$($nesting, 'Enumerable')['$==='](enum$))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], ($$3 = function(item){var self = $$3.$$s == null ? this : $$3.$$s;

          
          
          if (item == null) {
            item = nil;
          };
          return self.$add(Opal.yield1(block, item));}, $$3.$$s = self, $$3.$$arity = 1, $$3))
      } else {
        return self.$merge(enum$)
      };
    }, $Set_initialize$2.$$arity = -1);
    
    Opal.def(self, '$dup', $Set_dup$4 = function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, $Set_dup$4.$$arity = 0);
    
    Opal.def(self, '$-', $Set_$minus$5 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, $Set_$minus$5.$$arity = 1);
    $alias(self, "difference", "-");
    
    Opal.def(self, '$inspect', $Set_inspect$6 = function $$inspect() {
      var self = this;

      return "" + "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, $Set_inspect$6.$$arity = 0);
    
    Opal.def(self, '$==', $Set_$eq_eq$7 = function(other) {
      var $$8, self = this, $ret_or_1 = nil;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ($truthy((function() {if ($truthy(($ret_or_1 = other['$is_a?']($$($nesting, 'Set'))))) {
        return self.$size()['$=='](other.$size())
      } else {
        return $ret_or_1
      }; return nil; })())) {
        return $send(other, 'all?', [], ($$8 = function(o){var self = $$8.$$s == null ? this : $$8.$$s;
          if (self.hash == null) self.hash = nil;

          
          
          if (o == null) {
            o = nil;
          };
          return self.hash['$include?'](o);}, $$8.$$s = self, $$8.$$arity = 1, $$8))
      } else {
        return false
      }
    }, $Set_$eq_eq$7.$$arity = 1);
    
    Opal.def(self, '$add', $Set_add$9 = function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, $Set_add$9.$$arity = 1);
    $alias(self, "<<", "add");
    
    Opal.def(self, '$classify', $Set_classify$10 = function $$classify() {
      var $iter = $Set_classify$10.$$p, block = $iter || nil, $$11, $$12, self = this, result = nil;

      if ($iter) $Set_classify$10.$$p = null;
      
      
      if ($iter) $Set_classify$10.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("classify")
      };
      result = $send($$($nesting, 'Hash'), 'new', [], ($$11 = function(h, k){var self = $$11.$$s == null ? this : $$11.$$s, $writer = nil;

        
        
        if (h == null) {
          h = nil;
        };
        
        if (k == null) {
          k = nil;
        };
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, $$11.$$s = self, $$11.$$arity = 2, $$11));
      $send(self, 'each', [], ($$12 = function(item){var self = $$12.$$s == null ? this : $$12.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return result['$[]'](Opal.yield1(block, item)).$add(item);}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      return result;
    }, $Set_classify$10.$$arity = 0);
    
    Opal.def(self, '$collect!', $Set_collect$excl$13 = function() {
      var $iter = $Set_collect$excl$13.$$p, block = $iter || nil, $$14, self = this, result = nil;

      if ($iter) $Set_collect$excl$13.$$p = null;
      
      
      if ($iter) $Set_collect$excl$13.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], ($$14 = function(item){var self = $$14.$$s == null ? this : $$14.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return result['$<<'](Opal.yield1(block, item));}, $$14.$$s = self, $$14.$$arity = 1, $$14));
      return self.$replace(result);
    }, $Set_collect$excl$13.$$arity = 0);
    $alias(self, "map!", "collect!");
    
    Opal.def(self, '$delete', $Set_delete$15 = function(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, $Set_delete$15.$$arity = 1);
    
    Opal.def(self, '$delete?', $Set_delete$ques$16 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
      } else {
        return nil
      }
    }, $Set_delete$ques$16.$$arity = 1);
    
    Opal.def(self, '$delete_if', $Set_delete_if$17 = function $$delete_if() {
      var $$18, $$19, $iter = $Set_delete_if$17.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Set_delete_if$17.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("delete_if")
      };
      $send($send(self, 'select', [], ($$18 = function(o){var self = $$18.$$s == null ? this : $$18.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return Opal.yield1($yield, o);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)), 'each', [], ($$19 = function(o){var self = $$19.$$s == null ? this : $$19.$$s;
        if (self.hash == null) self.hash = nil;

        
        
        if (o == null) {
          o = nil;
        };
        return self.hash.$delete(o);}, $$19.$$s = self, $$19.$$arity = 1, $$19));
      return self;
    }, $Set_delete_if$17.$$arity = 0);
    
    Opal.def(self, '$keep_if', $Set_keep_if$20 = function $$keep_if() {
      var $$21, $$22, $iter = $Set_keep_if$20.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Set_keep_if$20.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("keep_if")
      };
      $send($send(self, 'reject', [], ($$21 = function(o){var self = $$21.$$s == null ? this : $$21.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return Opal.yield1($yield, o);;}, $$21.$$s = self, $$21.$$arity = 1, $$21)), 'each', [], ($$22 = function(o){var self = $$22.$$s == null ? this : $$22.$$s;
        if (self.hash == null) self.hash = nil;

        
        
        if (o == null) {
          o = nil;
        };
        return self.hash.$delete(o);}, $$22.$$s = self, $$22.$$arity = 1, $$22));
      return self;
    }, $Set_keep_if$20.$$arity = 0);
    
    Opal.def(self, '$reject!', $Set_reject$excl$23 = function() {
      var $iter = $Set_reject$excl$23.$$p, block = $iter || nil, self = this, before = nil;

      if ($iter) $Set_reject$excl$23.$$p = null;
      
      
      if ($iter) $Set_reject$excl$23.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("reject!")
      };
      before = self.$size();
      $send(self, 'delete_if', [], block.$to_proc());
      if (self.$size()['$=='](before)) {
        return nil
      } else {
        return self
      };
    }, $Set_reject$excl$23.$$arity = 0);
    
    Opal.def(self, '$select!', $Set_select$excl$24 = function() {
      var $iter = $Set_select$excl$24.$$p, block = $iter || nil, self = this, before = nil;

      if ($iter) $Set_select$excl$24.$$p = null;
      
      
      if ($iter) $Set_select$excl$24.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("select!")
      };
      before = self.$size();
      $send(self, 'keep_if', [], block.$to_proc());
      if (self.$size()['$=='](before)) {
        return nil
      } else {
        return self
      };
    }, $Set_select$excl$24.$$arity = 0);
    $alias(self, "filter!", "select!");
    
    Opal.def(self, '$add?', $Set_add$ques$25 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
      } else {
        return self.$add(o)
      }
    }, $Set_add$ques$25.$$arity = 1);
    
    Opal.def(self, '$each', $Set_each$26 = function $$each() {
      var $iter = $Set_each$26.$$p, block = $iter || nil, self = this;

      if ($iter) $Set_each$26.$$p = null;
      
      
      if ($iter) $Set_each$26.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, $Set_each$26.$$arity = 0);
    
    Opal.def(self, '$empty?', $Set_empty$ques$27 = function() {
      var self = this;

      return self.hash['$empty?']()
    }, $Set_empty$ques$27.$$arity = 0);
    
    Opal.def(self, '$eql?', $Set_eql$ques$28 = function(other) {
      var $$29, self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], ($$29 = function(){var self = $$29.$$s == null ? this : $$29.$$s;
        if (self.hash == null) self.hash = nil;

        return self.hash}, $$29.$$s = self, $$29.$$arity = 0, $$29)))
    }, $Set_eql$ques$28.$$arity = 1);
    
    Opal.def(self, '$clear', $Set_clear$30 = function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, $Set_clear$30.$$arity = 0);
    
    Opal.def(self, '$include?', $Set_include$ques$31 = function(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, $Set_include$ques$31.$$arity = 1);
    $alias(self, "member?", "include?");
    
    Opal.def(self, '$merge', $Set_merge$32 = function $$merge(enum$) {
      var $$33, self = this;

      
      $send(enum$, 'each', [], ($$33 = function(item){var self = $$33.$$s == null ? this : $$33.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return self.$add(item);}, $$33.$$s = self, $$33.$$arity = 1, $$33));
      return self;
    }, $Set_merge$32.$$arity = 1);
    
    Opal.def(self, '$replace', $Set_replace$34 = function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, $Set_replace$34.$$arity = 1);
    
    Opal.def(self, '$size', $Set_size$35 = function $$size() {
      var self = this;

      return self.hash.$size()
    }, $Set_size$35.$$arity = 0);
    $alias(self, "length", "size");
    
    Opal.def(self, '$subtract', $Set_subtract$36 = function $$subtract(enum$) {
      var $$37, self = this;

      
      $send(enum$, 'each', [], ($$37 = function(item){var self = $$37.$$s == null ? this : $$37.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return self.$delete(item);}, $$37.$$s = self, $$37.$$arity = 1, $$37));
      return self;
    }, $Set_subtract$36.$$arity = 1);
    
    Opal.def(self, '$|', $Set_$$38 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, $Set_$$38.$$arity = 1);
    
    Opal.def(self, '$superset?', $Set_superset$ques$39 = function(set) {
      var $$40, self = this, $ret_or_2 = nil;

      
      if ($truthy(($ret_or_2 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_2
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], ($$40 = function(o){var self = $$40.$$s == null ? this : $$40.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, $$40.$$s = self, $$40.$$arity = 1, $$40));
    }, $Set_superset$ques$39.$$arity = 1);
    $alias(self, ">=", "superset?");
    
    Opal.def(self, '$proper_superset?', $Set_proper_superset$ques$41 = function(set) {
      var $$42, self = this, $ret_or_3 = nil;

      
      if ($truthy(($ret_or_3 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_3
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], ($$42 = function(o){var self = $$42.$$s == null ? this : $$42.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, $$42.$$s = self, $$42.$$arity = 1, $$42));
    }, $Set_proper_superset$ques$41.$$arity = 1);
    $alias(self, ">", "proper_superset?");
    
    Opal.def(self, '$subset?', $Set_subset$ques$43 = function(set) {
      var $$44, self = this, $ret_or_4 = nil;

      
      if ($truthy(($ret_or_4 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_4
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], ($$44 = function(o){var self = $$44.$$s == null ? this : $$44.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, $$44.$$s = self, $$44.$$arity = 1, $$44));
    }, $Set_subset$ques$43.$$arity = 1);
    $alias(self, "<=", "subset?");
    
    Opal.def(self, '$proper_subset?', $Set_proper_subset$ques$45 = function(set) {
      var $$46, self = this, $ret_or_5 = nil;

      
      if ($truthy(($ret_or_5 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_5
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], ($$46 = function(o){var self = $$46.$$s == null ? this : $$46.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, $$46.$$s = self, $$46.$$arity = 1, $$46));
    }, $Set_proper_subset$ques$45.$$arity = 1);
    $alias(self, "<", "proper_subset?");
    
    Opal.def(self, '$intersect?', $Set_intersect$ques$47 = function(set) {
      var $$48, $$49, self = this;

      
      if ($truthy(set['$is_a?']($$($nesting, 'Set')))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return $send(self, 'any?', [], ($$48 = function(o){var self = $$48.$$s == null ? this : $$48.$$s;

          
          
          if (o == null) {
            o = nil;
          };
          return set['$include?'](o);}, $$48.$$s = self, $$48.$$arity = 1, $$48))
      } else {
        return $send(set, 'any?', [], ($$49 = function(o){var self = $$49.$$s == null ? this : $$49.$$s;

          
          
          if (o == null) {
            o = nil;
          };
          return self['$include?'](o);}, $$49.$$s = self, $$49.$$arity = 1, $$49))
      };
    }, $Set_intersect$ques$47.$$arity = 1);
    
    Opal.def(self, '$disjoint?', $Set_disjoint$ques$50 = function(set) {
      var self = this;

      return self['$intersect?'](set)['$!']()
    }, $Set_disjoint$ques$50.$$arity = 1);
    $alias(self, "+", "|");
    $alias(self, "union", "|");
    return (Opal.def(self, '$to_a', $Set_to_a$51 = function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, $Set_to_a$51.$$arity = 0), nil) && 'to_a';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_to_set$52;

    return (Opal.def(self, '$to_set', $Enumerable_to_set$52 = function $$to_set($a, $b) {
      var $iter = $Enumerable_to_set$52.$$p, block = $iter || nil, $post_args, klass, args, self = this;

      if ($iter) $Enumerable_to_set$52.$$p = null;
      
      
      if ($iter) $Enumerable_to_set$52.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        klass = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (klass == null) {
        klass = $$($nesting, 'Set');
      };
      
      args = $post_args;;
      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc());
    }, $Enumerable_to_set$52.$$arity = -1), nil) && 'to_set'
  })($nesting[0], $nesting);
};

Opal.modules["active_support/inflector/inflections"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$extend', '$add', '$map', '$flatten', '$to_proc', '$concat', '$include?', '$downcase', '$new', '$[]', '$[]=', '$-', '$attr_reader', '$each', '$instance_variable_set', '$dup', '$send', '$is_a?', '$delete', '$unshift', '$==', '$upcase', '$plural', '$+', '$singular', '$===', '$instance']);
  
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ActiveSupport');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Inflector');

      var $nesting = [self].concat($parent_nesting), $Inflector_inflections$15;

      
      self.$extend(self);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Inflections');

        var $nesting = [self].concat($parent_nesting), $Inflections_instance$5, $Inflections_initialize$6, $Inflections_initialize_dup$7, $Inflections_plural$9, $Inflections_singular$10, $Inflections_uncountable$11, $Inflections_human$12, $Inflections_irregular$13, $Inflections_clear$14;

        self.$$prototype.uncountables = self.$$prototype.plurals = self.$$prototype.singulars = self.$$prototype.humans = nil;
        
        self.__instance__ = $hash2([], {});
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Uncountables');

          var $nesting = [self].concat($parent_nesting), $Uncountables_$lt$lt$1, $Uncountables_add$2, $Uncountables_uncountable$ques$3, $Uncountables_dup$4;

          
          
          Opal.def(self, '$<<', $Uncountables_$lt$lt$1 = function($a) {
            var $post_args, word, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            word = $post_args;;
            return self.$add(word);
          }, $Uncountables_$lt$lt$1.$$arity = -1);
          
          Opal.def(self, '$add', $Uncountables_add$2 = function $$add(words) {
            var self = this;

            
            words = $send(words.$flatten(), 'map', [], "downcase".$to_proc());
            self.$concat(words);
            return self;
          }, $Uncountables_add$2.$$arity = 1);
          
          Opal.def(self, '$uncountable?', $Uncountables_uncountable$ques$3 = function(str) {
            var self = this;

            return self['$include?'](str.$downcase())
          }, $Uncountables_uncountable$ques$3.$$arity = 1);
          return (Opal.def(self, '$dup', $Uncountables_dup$4 = function $$dup() {
            var self = this, copy = nil;

            
            copy = $$($nesting, 'Uncountables').$new();
            copy.$add(self);
            return copy;
          }, $Uncountables_dup$4.$$arity = 0), nil) && 'dup';
        })($nesting[0], $$($nesting, 'Array'), $nesting);
        Opal.defs(self, '$instance', $Inflections_instance$5 = function $$instance(locale) {
          var self = this, $ret_or_1 = nil, $writer = nil;
          if (self.__instance__ == null) self.__instance__ = nil;

          if ($truthy(($ret_or_1 = self.__instance__['$[]'](locale)))) {
            return $ret_or_1
          } else {
            
            $writer = [locale, self.$new()];
            $send(self.__instance__, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }
        }, $Inflections_instance$5.$$arity = 1);
        self.$attr_reader("plurals", "singulars", "uncountables", "humans");
        
        Opal.def(self, '$initialize', $Inflections_initialize$6 = function $$initialize() {
          var $a, self = this;

          return $a = [[], [], $$($nesting, 'Uncountables').$new(), []], (self.plurals = $a[0]), (self.singulars = $a[1]), (self.uncountables = $a[2]), (self.humans = $a[3]), $a
        }, $Inflections_initialize$6.$$arity = 0);
        
        Opal.def(self, '$initialize_dup', $Inflections_initialize_dup$7 = function $$initialize_dup(orig) {
          var $$8, self = this;

          return $send(["plurals", "singulars", "uncountables", "humans"], 'each', [], ($$8 = function(scope){var self = $$8.$$s == null ? this : $$8.$$s;

            
            
            if (scope == null) {
              scope = nil;
            };
            return self.$instance_variable_set("" + "@" + (scope), orig.$send(scope).$dup());}, $$8.$$s = self, $$8.$$arity = 1, $$8))
        }, $Inflections_initialize_dup$7.$$arity = 1);
        
        Opal.def(self, '$plural', $Inflections_plural$9 = function $$plural(rule, replacement) {
          var self = this;

          
          if ($truthy(rule['$is_a?']($$($nesting, 'String')))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.plurals.$unshift([rule, replacement]);
        }, $Inflections_plural$9.$$arity = 2);
        
        Opal.def(self, '$singular', $Inflections_singular$10 = function $$singular(rule, replacement) {
          var self = this;

          
          if ($truthy(rule['$is_a?']($$($nesting, 'String')))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.singulars.$unshift([rule, replacement]);
        }, $Inflections_singular$10.$$arity = 2);
        
        Opal.def(self, '$uncountable', $Inflections_uncountable$11 = function $$uncountable($a) {
          var $post_args, words, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          words = $post_args;;
          return self.uncountables.$add(words);
        }, $Inflections_uncountable$11.$$arity = -1);
        
        Opal.def(self, '$human', $Inflections_human$12 = function $$human(rule, replacement) {
          var self = this;

          return self.humans.$unshift([rule, replacement])
        }, $Inflections_human$12.$$arity = 2);
        
        Opal.def(self, '$irregular', $Inflections_irregular$13 = function $$irregular(singular, plural) {
          var self = this, s0 = nil, srest = nil, p0 = nil, prest = nil;

          
          self.uncountables.$delete(singular);
          self.uncountables.$delete(plural);
          s0 = singular['$[]'](0);
          srest = singular['$[]']($range(1, -1, false));
          p0 = plural['$[]'](0);
          prest = plural['$[]']($range(1, -1, false));
          if (s0.$upcase()['$=='](p0.$upcase())) {
            
            self.$plural(Opal.regexp(["(", s0, ")", srest, "$"], 'i'), $rb_plus("\\1", prest));
            self.$plural(Opal.regexp(["(", p0, ")", prest, "$"], 'i'), $rb_plus("\\1", prest));
            self.$singular(Opal.regexp(["(", s0, ")", srest, "$"], 'i'), $rb_plus("\\1", srest));
            return self.$singular(Opal.regexp(["(", p0, ")", prest, "$"], 'i'), $rb_plus("\\1", srest));
          } else {
            
            self.$plural(Opal.regexp([s0.$upcase(), srest, "$"], 'i'), $rb_plus(p0.$upcase(), prest));
            self.$plural(Opal.regexp([s0.$downcase(), srest, "$"], 'i'), $rb_plus(p0.$downcase(), prest));
            self.$plural(Opal.regexp([p0.$upcase(), prest, "$"], 'i'), $rb_plus(p0.$upcase(), prest));
            self.$plural(Opal.regexp([p0.$downcase(), prest, "$"], 'i'), $rb_plus(p0.$downcase(), prest));
            self.$singular(Opal.regexp([s0.$upcase(), srest, "$"], 'i'), $rb_plus(s0.$upcase(), srest));
            self.$singular(Opal.regexp([s0.$downcase(), srest, "$"], 'i'), $rb_plus(s0.$downcase(), srest));
            self.$singular(Opal.regexp([p0.$upcase(), prest, "$"], 'i'), $rb_plus(s0.$upcase(), srest));
            return self.$singular(Opal.regexp([p0.$downcase(), prest, "$"], 'i'), $rb_plus(s0.$downcase(), srest));
          };
        }, $Inflections_irregular$13.$$arity = 2);
        return (Opal.def(self, '$clear', $Inflections_clear$14 = function $$clear(scope) {
          var $a, self = this, $case = nil;

          
          
          if (scope == null) {
            scope = "all";
          };
          return (function() {$case = scope;
          if ("all"['$===']($case)) {return $a = [[], [], $$($nesting, 'Uncountables').$new(), []], (self.plurals = $a[0]), (self.singulars = $a[1]), (self.uncountables = $a[2]), (self.humans = $a[3]), $a}
          else {return self.$instance_variable_set("" + "@" + (scope), [])}})();
        }, $Inflections_clear$14.$$arity = -1), nil) && 'clear';
      })($nesting[0], null, $nesting);
      return (Opal.def(self, '$inflections', $Inflector_inflections$15 = function $$inflections(locale) {
        var $iter = $Inflector_inflections$15.$$p, $yield = $iter || nil, self = this;

        if ($iter) $Inflector_inflections$15.$$p = null;
        
        
        if (locale == null) {
          locale = "en";
        };
        if (($yield !== nil)) {
          return Opal.yield1($yield, $$($nesting, 'Inflections').$instance(locale));
        } else {
          return $$($nesting, 'Inflections').$instance(locale)
        };
      }, $Inflector_inflections$15.$$arity = -1), nil) && 'inflections';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["active_support/inflections"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$require', '$inflections', '$plural', '$singular', '$irregular', '$uncountable']);
  
  self.$require("active_support/inflector/inflections");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ActiveSupport');

    var $nesting = [self].concat($parent_nesting), $ActiveSupport$1;

    return $send($$($nesting, 'Inflector'), 'inflections', ["en"], ($ActiveSupport$1 = function(inflect){var self = $ActiveSupport$1.$$s == null ? this : $ActiveSupport$1.$$s;

      
      
      if (inflect == null) {
        inflect = nil;
      };
      inflect.$plural(/$/, "s");
      inflect.$plural(/s$/i, "s");
      inflect.$plural(/^(ax|test)is$/i, "\\1es");
      inflect.$plural(/(octop|vir)us$/i, "\\1i");
      inflect.$plural(/(octop|vir)i$/i, "\\1i");
      inflect.$plural(/(alias|status)$/i, "\\1es");
      inflect.$plural(/(bu)s$/i, "\\1ses");
      inflect.$plural(/(buffal|tomat)o$/i, "\\1oes");
      inflect.$plural(/([ti])um$/i, "\\1a");
      inflect.$plural(/([ti])a$/i, "\\1a");
      inflect.$plural(/sis$/i, "ses");
      inflect.$plural(/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves");
      inflect.$plural(/(hive)$/i, "\\1s");
      inflect.$plural(/([^aeiouy]|qu)y$/i, "\\1ies");
      inflect.$plural(/(x|ch|ss|sh)$/i, "\\1es");
      inflect.$plural(/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices");
      inflect.$plural(/^(m|l)ouse$/i, "\\1ice");
      inflect.$plural(/^(m|l)ice$/i, "\\1ice");
      inflect.$plural(/^(ox)$/i, "\\1en");
      inflect.$plural(/^(oxen)$/i, "\\1");
      inflect.$plural(/(quiz)$/i, "\\1zes");
      inflect.$singular(/s$/i, "");
      inflect.$singular(/(ss)$/i, "\\1");
      inflect.$singular(/(n)ews$/i, "\\1ews");
      inflect.$singular(/([ti])a$/i, "\\1um");
      inflect.$singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/(^analy)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/([^f])ves$/i, "\\1fe");
      inflect.$singular(/(hive)s$/i, "\\1");
      inflect.$singular(/(tive)s$/i, "\\1");
      inflect.$singular(/([lr])ves$/i, "\\1f");
      inflect.$singular(/([^aeiouy]|qu)ies$/i, "\\1y");
      inflect.$singular(/(s)eries$/i, "\\1eries");
      inflect.$singular(/(m)ovies$/i, "\\1ovie");
      inflect.$singular(/(x|ch|ss|sh)es$/i, "\\1");
      inflect.$singular(/^(m|l)ice$/i, "\\1ouse");
      inflect.$singular(/(bus)(es)?$/i, "\\1");
      inflect.$singular(/(o)es$/i, "\\1");
      inflect.$singular(/(shoe)s$/i, "\\1");
      inflect.$singular(/(cris|test)(is|es)$/i, "\\1is");
      inflect.$singular(/^(a)x[ie]s$/i, "\\1xis");
      inflect.$singular(/(octop|vir)(us|i)$/i, "\\1us");
      inflect.$singular(/(alias|status)(es)?$/i, "\\1");
      inflect.$singular(/^(ox)en/i, "\\1");
      inflect.$singular(/(vert|ind)ices$/i, "\\1ex");
      inflect.$singular(/(matr)ices$/i, "\\1ix");
      inflect.$singular(/(quiz)zes$/i, "\\1");
      inflect.$singular(/(database)s$/i, "\\1");
      inflect.$irregular("person", "people");
      inflect.$irregular("man", "men");
      inflect.$irregular("child", "children");
      inflect.$irregular("sex", "sexes");
      inflect.$irregular("move", "moves");
      inflect.$irregular("zombie", "zombies");
      return inflect.$uncountable(["equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police"]);}, $ActiveSupport$1.$$s = self, $ActiveSupport$1.$$arity = 1, $ActiveSupport$1))
  })($nesting[0], $nesting);
};

Opal.modules["active_support/inflector/methods"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$extend', '$apply_inflections', '$plurals', '$inflections', '$singulars', '$to_s', '$sub', '$capitalize', '$downcase', '$gsub', '$freeze', '$match?', '$tr', '$dup', '$each', '$humans', '$is_a?', '$=~', '$==', '$upcase', '$>', '$length', '$+', '$[]', '$humanize', '$underscore', '$pluralize', '$camelize', '$singularize', '$rindex', '$demodulize', '$split', '$empty?', '$raise', '$size', '$first', '$shift', '$inject', '$const_get', '$const_defined?', '$ancestors', '$constantize', '$name', '$!', '$include?', '$const_regexp', '$message', '$abs', '$to_i', '$%', '$===', '$ordinal', '$private', '$blank?', '$escape', '$pop', '$reverse', '$uncountable?', '$uncountables']);
  
  self.$require("active_support/inflections");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ActiveSupport');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Inflector');

      var $nesting = [self].concat($parent_nesting), $Inflector_pluralize$1, $Inflector_singularize$2, $Inflector_camelize$3, $Inflector_underscore$6, $Inflector_humanize$7, $Inflector_upcase_first$11, $Inflector_titleize$12, $Inflector_tableize$14, $Inflector_classify$15, $Inflector_dasherize$16, $Inflector_demodulize$17, $Inflector_deconstantize$18, $Inflector_foreign_key$19, $Inflector_constantize$20, $Inflector_safe_constantize$23, $Inflector_ordinal$24, $Inflector_ordinalize$25, $Inflector_const_regexp$26, $Inflector_apply_inflections$28;

      
      self.$extend(self);
      
      Opal.def(self, '$pluralize', $Inflector_pluralize$1 = function $$pluralize(word, locale) {
        var self = this;

        
        
        if (locale == null) {
          locale = "en";
        };
        return self.$apply_inflections(word, self.$inflections(locale).$plurals(), locale);
      }, $Inflector_pluralize$1.$$arity = -2);
      
      Opal.def(self, '$singularize', $Inflector_singularize$2 = function $$singularize(word, locale) {
        var self = this;

        
        
        if (locale == null) {
          locale = "en";
        };
        return self.$apply_inflections(word, self.$inflections(locale).$singulars(), locale);
      }, $Inflector_singularize$2.$$arity = -2);
      
      Opal.def(self, '$camelize', $Inflector_camelize$3 = function $$camelize(term, uppercase_first_letter) {
        var $$4, $$5, self = this, string = nil;

        
        
        if (uppercase_first_letter == null) {
          uppercase_first_letter = true;
        };
        string = term.$to_s();
        if ($truthy(uppercase_first_letter)) {
          string = $send(string, 'sub', [/^[a-z\d]*/], ($$4 = function(match){var self = $$4.$$s == null ? this : $$4.$$s;

            
            
            if (match == null) {
              match = nil;
            };
            return match.$capitalize();}, $$4.$$s = self, $$4.$$arity = 1, $$4))
        } else {
          string = string.$downcase()
        };
        string = $send(string, 'gsub', [/(?:_|(\/))([a-z\d]*)/i], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s, $a;

          return "" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$capitalize())}, $$5.$$s = self, $$5.$$arity = 0, $$5));
        string = string.$gsub("/".$freeze(), "::".$freeze());
        return string;
      }, $Inflector_camelize$3.$$arity = -2);
      
      Opal.def(self, '$underscore', $Inflector_underscore$6 = function $$underscore(camel_cased_word) {
        var self = this, word = nil;

        
        if ($truthy(/[A-Z-]|::/['$match?'](camel_cased_word))) {
        } else {
          return camel_cased_word
        };
        word = camel_cased_word.$to_s().$gsub("::".$freeze(), "/".$freeze());
        word = word.$gsub(/([A-Z\d]+)([A-Z][a-z])/, "\\1_\\2".$freeze());
        word = word.$gsub(/([a-z\d])([A-Z])/, "\\1_\\2".$freeze());
        word = word.$tr("-".$freeze(), "_".$freeze());
        word = word.$downcase();
        return word;
      }, $Inflector_underscore$6.$$arity = 1);
      
      Opal.def(self, '$humanize', $Inflector_humanize$7 = function $$humanize(lower_case_and_underscored_word, $kwargs) {
        var capitalize, keep_id_suffix, $$8, $$9, $$10, self = this, result = nil;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        capitalize = $kwargs.$$smap["capitalize"];
        if (capitalize == null) {
          capitalize = true
        };
        
        keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
        if (keep_id_suffix == null) {
          keep_id_suffix = false
        };
        result = lower_case_and_underscored_word.$to_s().$dup();
        (function(){var $brk = Opal.new_brk(); try {return $send(self.$inflections().$humans(), 'each', [], ($$8 = function($mlhs_tmp1){var self = $$8.$$s == null ? this : $$8.$$s, $a, $b, rule = nil, replacement = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          
          
          if ($mlhs_tmp1 == null) {
            $mlhs_tmp1 = nil;
          };
          $b = $mlhs_tmp1, $a = Opal.to_ary($b), (rule = ($a[0] == null ? nil : $a[0])), (replacement = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = rule['$is_a?']($$($nesting, 'Regexp'))))) {
            return result['$=~'](rule)
          } else {
            return $ret_or_2
          }; return nil; })()))) {
            return $ret_or_1
          } else {
            
            if ($truthy(($ret_or_3 = rule['$is_a?']($$($nesting, 'String'))))) {
              return result['$=='](rule)
            } else {
              return $ret_or_3
            };
          }; return nil; })())) {
            
            result = result.$sub(rule, replacement);
            
            Opal.brk(nil, $brk);
          } else {
            return nil
          };}, $$8.$$s = self, $$8.$$brk = $brk, $$8.$$arity = 1, $$8.$$has_top_level_mlhs_arg = true, $$8))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        result = result.$sub(/^_+/, "".$freeze());
        if ($truthy(keep_id_suffix)) {
        } else {
          result = result.$sub(/_id$/, "".$freeze())
        };
        result = result.$tr("_".$freeze(), " ".$freeze());
        result = $send(result, 'gsub', [/([a-z\d]*)/i], ($$9 = function(match){var self = $$9.$$s == null ? this : $$9.$$s;

          
          
          if (match == null) {
            match = nil;
          };
          return "" + (match.$downcase());}, $$9.$$s = self, $$9.$$arity = 1, $$9));
        if ($truthy(capitalize)) {
          result = $send(result, 'sub', [/^\w/], ($$10 = function(match){var self = $$10.$$s == null ? this : $$10.$$s;

            
            
            if (match == null) {
              match = nil;
            };
            return match.$upcase();}, $$10.$$s = self, $$10.$$arity = 1, $$10))};
        return result;
      }, $Inflector_humanize$7.$$arity = -2);
      
      Opal.def(self, '$upcase_first', $Inflector_upcase_first$11 = function $$upcase_first(string) {
        var self = this;

        if ($truthy($rb_gt(string.$length(), 0))) {
          return $rb_plus(string['$[]'](0).$upcase(), string['$[]']($range(1, -1, false)))
        } else {
          return ""
        }
      }, $Inflector_upcase_first$11.$$arity = 1);
      
      Opal.def(self, '$titleize', $Inflector_titleize$12 = function $$titleize(word, $kwargs) {
        var keep_id_suffix, $$13, self = this;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
        if (keep_id_suffix == null) {
          keep_id_suffix = false
        };
        return $send(self.$humanize(self.$underscore(word), $hash2(["keep_id_suffix"], {"keep_id_suffix": keep_id_suffix})), 'gsub', [/([a-zA-Z'’`])[a-z]*/], ($$13 = function(match){var self = $$13.$$s == null ? this : $$13.$$s;

          
          
          if (match == null) {
            match = nil;
          };
          return match.$capitalize();}, $$13.$$s = self, $$13.$$arity = 1, $$13));
      }, $Inflector_titleize$12.$$arity = -2);
      
      Opal.def(self, '$tableize', $Inflector_tableize$14 = function $$tableize(class_name) {
        var self = this;

        return self.$pluralize(self.$underscore(class_name))
      }, $Inflector_tableize$14.$$arity = 1);
      
      Opal.def(self, '$classify', $Inflector_classify$15 = function $$classify(table_name) {
        var self = this;

        return self.$camelize(self.$singularize(table_name.$to_s().$sub(/.*\./, "".$freeze())))
      }, $Inflector_classify$15.$$arity = 1);
      
      Opal.def(self, '$dasherize', $Inflector_dasherize$16 = function $$dasherize(underscored_word) {
        var self = this;

        return underscored_word.$tr("_".$freeze(), "-".$freeze())
      }, $Inflector_dasherize$16.$$arity = 1);
      
      Opal.def(self, '$demodulize', $Inflector_demodulize$17 = function $$demodulize(path) {
        var self = this, i = nil;

        
        path = path.$to_s();
        if ($truthy((i = path.$rindex("::")))) {
          return path['$[]'](Opal.Range.$new($rb_plus(i, 2), -1, false))
        } else {
          return path
        };
      }, $Inflector_demodulize$17.$$arity = 1);
      
      Opal.def(self, '$deconstantize', $Inflector_deconstantize$18 = function $$deconstantize(path) {
        var self = this, $ret_or_4 = nil;

        return path.$to_s()['$[]'](0, (function() {if ($truthy(($ret_or_4 = path.$rindex("::")))) {
          return $ret_or_4
        } else {
          return 0
        }; return nil; })())
      }, $Inflector_deconstantize$18.$$arity = 1);
      
      Opal.def(self, '$foreign_key', $Inflector_foreign_key$19 = function $$foreign_key(class_name, separate_class_name_and_id_with_underscore) {
        var self = this;

        
        
        if (separate_class_name_and_id_with_underscore == null) {
          separate_class_name_and_id_with_underscore = true;
        };
        return $rb_plus(self.$underscore(self.$demodulize(class_name)), (function() {if ($truthy(separate_class_name_and_id_with_underscore)) {
          return "_id"
        } else {
          return "id"
        }; return nil; })());
      }, $Inflector_foreign_key$19.$$arity = -2);
      
      Opal.def(self, '$constantize', $Inflector_constantize$20 = function $$constantize(camel_cased_word) {
        var $$21, self = this, names = nil, $ret_or_5 = nil;

        
        names = camel_cased_word.$split("::");
        if ($truthy(names['$empty?']())) {
          self.$raise($$($nesting, 'NameError'), "wrong constant name ")};
        if ($truthy((function() {if ($truthy(($ret_or_5 = $rb_gt(names.$size(), 1)))) {
          return names.$first()['$empty?']()
        } else {
          return $ret_or_5
        }; return nil; })())) {
          names.$shift()};
        return (function(){var $brk = Opal.new_brk(); try {return $send(names, 'inject', [$$($nesting, 'Object')], ($$21 = function(constant, name){var self = $$21.$$s == null ? this : $$21.$$s, $$22, candidate = nil;

          
          
          if (constant == null) {
            constant = nil;
          };
          
          if (name == null) {
            name = nil;
          };
          if (constant['$==']($$($nesting, 'Object'))) {
            return constant.$const_get(name)
          } else {
            
            candidate = constant.$const_get(name);
            if ($truthy(constant['$const_defined?'](name, false))) {
              return candidate;};
            if ($truthy($$($nesting, 'Object')['$const_defined?'](name))) {
            } else {
              return candidate;
            };
            constant = (function(){var $brk = Opal.new_brk(); try {return $send(constant.$ancestors(), 'inject', [constant], ($$22 = function(const$, ancestor){var self = $$22.$$s == null ? this : $$22.$$s;

              
              
              if (const$ == null) {
                const$ = nil;
              };
              
              if (ancestor == null) {
                ancestor = nil;
              };
              if (ancestor['$==']($$($nesting, 'Object'))) {
                
                Opal.brk(const$, $brk)};
              if ($truthy(ancestor['$const_defined?'](name, false))) {
                
                Opal.brk(ancestor, $brk)};
              return const$;}, $$22.$$s = self, $$22.$$brk = $brk, $$22.$$arity = 2, $$22))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
            return constant.$const_get(name, false);
          };}, $$21.$$s = self, $$21.$$brk = $brk, $$21.$$arity = 2, $$21))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      }, $Inflector_constantize$20.$$arity = 1);
      
      Opal.def(self, '$safe_constantize', $Inflector_safe_constantize$23 = function $$safe_constantize(camel_cased_word) {
        var self = this, e = nil, $ret_or_6 = nil, $ret_or_7 = nil;

        try {
          return self.$constantize(camel_cased_word)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'NameError')])) {(e = $err)
            try {
              if ($truthy((function() {if ($truthy(($ret_or_6 = e.$name()))) {
                return (function() {if ($truthy(($ret_or_7 = camel_cased_word.$to_s().$split("::")['$include?'](e.$name().$to_s())))) {
                  return $ret_or_7
                } else {
                  return e.$name().$to_s()['$=='](camel_cased_word.$to_s())
                }; return nil; })()['$!']()
              } else {
                return $ret_or_6
              }; return nil; })())) {
                return self.$raise()
              } else {
                return nil
              }
            } finally { Opal.pop_exception(); }
          } else 
          if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {(e = $err)
            try {
              if ($truthy(Opal.regexp(["not missing constant ", self.$const_regexp(camel_cased_word), "!$"])['$match?'](e.$message()))) {
                return nil
              } else {
                return self.$raise()
              }
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
      }, $Inflector_safe_constantize$23.$$arity = 1);
      
      Opal.def(self, '$ordinal', $Inflector_ordinal$24 = function $$ordinal(number) {
        var self = this, abs_number = nil, $case = nil;

        
        abs_number = number.$to_i().$abs();
        if ($truthy($range(11, 13, false)['$include?'](abs_number['$%'](100)))) {
          return "th"
        } else {
          return (function() {$case = abs_number['$%'](10);
          if ((1)['$===']($case)) {return "st"}
          else if ((2)['$===']($case)) {return "nd"}
          else if ((3)['$===']($case)) {return "rd"}
          else {return "th"}})()
        };
      }, $Inflector_ordinal$24.$$arity = 1);
      
      Opal.def(self, '$ordinalize', $Inflector_ordinalize$25 = function $$ordinalize(number) {
        var self = this;

        return "" + (number) + (self.$ordinal(number))
      }, $Inflector_ordinalize$25.$$arity = 1);
      self.$private();
      
      Opal.def(self, '$const_regexp', $Inflector_const_regexp$26 = function $$const_regexp(camel_cased_word) {
        var $$27, self = this, parts = nil, last = nil;

        
        parts = camel_cased_word.$split("::".$freeze());
        if ($truthy(parts['$blank?']())) {
          return $$($nesting, 'Regexp').$escape(camel_cased_word)};
        last = parts.$pop();
        return $send(parts.$reverse(), 'inject', [last], ($$27 = function(acc, part){var self = $$27.$$s == null ? this : $$27.$$s;

          
          
          if (acc == null) {
            acc = nil;
          };
          
          if (part == null) {
            part = nil;
          };
          if ($truthy(part['$empty?']())) {
            return acc
          } else {
            return "" + (part) + "(::" + (acc) + ")?"
          };}, $$27.$$s = self, $$27.$$arity = 2, $$27));
      }, $Inflector_const_regexp$26.$$arity = 1);
      return (Opal.def(self, '$apply_inflections', $Inflector_apply_inflections$28 = function $$apply_inflections(word, rules, locale) {
        var $$29, self = this, result = nil, $ret_or_8 = nil;

        
        
        if (locale == null) {
          locale = "en";
        };
        result = word.$to_s().$dup();
        if ($truthy((function() {if ($truthy(($ret_or_8 = word['$empty?']()))) {
          return $ret_or_8
        } else {
          return self.$inflections(locale).$uncountables()['$uncountable?'](result)
        }; return nil; })())) {
          return result
        } else {
          
          (function(){var $brk = Opal.new_brk(); try {return $send(rules, 'each', [], ($$29 = function($mlhs_tmp1){var self = $$29.$$s == null ? this : $$29.$$s, $a, $b, rule = nil, replacement = nil, $ret_or_9 = nil, $ret_or_10 = nil, $ret_or_11 = nil;

            
            
            if ($mlhs_tmp1 == null) {
              $mlhs_tmp1 = nil;
            };
            $b = $mlhs_tmp1, $a = Opal.to_ary($b), (rule = ($a[0] == null ? nil : $a[0])), (replacement = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy((function() {if ($truthy(($ret_or_9 = (function() {if ($truthy(($ret_or_10 = rule['$is_a?']($$($nesting, 'Regexp'))))) {
              return result['$=~'](rule)
            } else {
              return $ret_or_10
            }; return nil; })()))) {
              return $ret_or_9
            } else {
              
              if ($truthy(($ret_or_11 = rule['$is_a?']($$($nesting, 'String'))))) {
                return result['$=='](rule)
              } else {
                return $ret_or_11
              };
            }; return nil; })())) {
              
              result = result.$sub(rule, replacement);
              
              Opal.brk(nil, $brk);
            } else {
              return nil
            };}, $$29.$$s = self, $$29.$$brk = $brk, $$29.$$arity = 1, $$29.$$has_top_level_mlhs_arg = true, $$29))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        };
      }, $Inflector_apply_inflections$28.$$arity = -3), nil) && 'apply_inflections';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["active_support/inflector"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/inflector/inflections");
  self.$require("active_support/inflector/methods");
  self.$require("active_support/inflections");
  return self.$require("active_support/core_ext/string/inflections");
};

Opal.modules["active_support/core_ext/string/inflections"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$is_a?', '$==', '$dup', '$pluralize', '$singularize', '$constantize', '$safe_constantize', '$===', '$camelize', '$raise', '$alias_method', '$titleize', '$underscore', '$dasherize', '$demodulize', '$deconstantize', '$tableize', '$classify', '$humanize', '$upcase_first', '$foreign_key']);
  
  self.$require("active_support/inflector");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_pluralize$1, $String_singularize$2, $String_constantize$3, $String_safe_constantize$4, $String_camelize$5, $String_titleize$6, $String_underscore$7, $String_dasherize$8, $String_demodulize$9, $String_deconstantize$10, $String_tableize$11, $String_classify$12, $String_humanize$13, $String_upcase_first$14, $String_foreign_key$15;

    
    
    Opal.def(self, '$pluralize', $String_pluralize$1 = function $$pluralize(count, locale) {
      var self = this;

      
      
      if (count == null) {
        count = nil;
      };
      
      if (locale == null) {
        locale = "en";
      };
      if ($truthy(count['$is_a?']($$($nesting, 'Symbol')))) {
        locale = count};
      if (count['$=='](1)) {
        return self.$dup()
      } else {
        return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$pluralize(self, locale)
      };
    }, $String_pluralize$1.$$arity = -1);
    
    Opal.def(self, '$singularize', $String_singularize$2 = function $$singularize(locale) {
      var self = this;

      
      
      if (locale == null) {
        locale = "en";
      };
      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$singularize(self, locale);
    }, $String_singularize$2.$$arity = -1);
    
    Opal.def(self, '$constantize', $String_constantize$3 = function $$constantize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$constantize(self)
    }, $String_constantize$3.$$arity = 0);
    
    Opal.def(self, '$safe_constantize', $String_safe_constantize$4 = function $$safe_constantize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$safe_constantize(self)
    }, $String_safe_constantize$4.$$arity = 0);
    
    Opal.def(self, '$camelize', $String_camelize$5 = function $$camelize(first_letter) {
      var self = this, $case = nil;

      
      
      if (first_letter == null) {
        first_letter = "upper";
      };
      return (function() {$case = first_letter;
      if ("upper"['$===']($case)) {return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$camelize(self, true)}
      else if ("lower"['$===']($case)) {return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$camelize(self, false)}
      else {return self.$raise($$($nesting, 'ArgumentError'), "Invalid option, use either :upper or :lower.")}})();
    }, $String_camelize$5.$$arity = -1);
    self.$alias_method("camelcase", "camelize");
    
    Opal.def(self, '$titleize', $String_titleize$6 = function $$titleize($kwargs) {
      var keep_id_suffix, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
      if (keep_id_suffix == null) {
        keep_id_suffix = false
      };
      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$titleize(self, $hash2(["keep_id_suffix"], {"keep_id_suffix": keep_id_suffix}));
    }, $String_titleize$6.$$arity = -1);
    self.$alias_method("titlecase", "titleize");
    
    Opal.def(self, '$underscore', $String_underscore$7 = function $$underscore() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$underscore(self)
    }, $String_underscore$7.$$arity = 0);
    
    Opal.def(self, '$dasherize', $String_dasherize$8 = function $$dasherize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$dasherize(self)
    }, $String_dasherize$8.$$arity = 0);
    
    Opal.def(self, '$demodulize', $String_demodulize$9 = function $$demodulize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$demodulize(self)
    }, $String_demodulize$9.$$arity = 0);
    
    Opal.def(self, '$deconstantize', $String_deconstantize$10 = function $$deconstantize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$deconstantize(self)
    }, $String_deconstantize$10.$$arity = 0);
    
    Opal.def(self, '$tableize', $String_tableize$11 = function $$tableize() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$tableize(self)
    }, $String_tableize$11.$$arity = 0);
    
    Opal.def(self, '$classify', $String_classify$12 = function $$classify() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$classify(self)
    }, $String_classify$12.$$arity = 0);
    
    Opal.def(self, '$humanize', $String_humanize$13 = function $$humanize($kwargs) {
      var capitalize, keep_id_suffix, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      capitalize = $kwargs.$$smap["capitalize"];
      if (capitalize == null) {
        capitalize = true
      };
      
      keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
      if (keep_id_suffix == null) {
        keep_id_suffix = false
      };
      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$humanize(self, $hash2(["capitalize", "keep_id_suffix"], {"capitalize": capitalize, "keep_id_suffix": keep_id_suffix}));
    }, $String_humanize$13.$$arity = -1);
    
    Opal.def(self, '$upcase_first', $String_upcase_first$14 = function $$upcase_first() {
      var self = this;

      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$upcase_first(self)
    }, $String_upcase_first$14.$$arity = 0);
    return (Opal.def(self, '$foreign_key', $String_foreign_key$15 = function $$foreign_key(separate_class_name_and_id_with_underscore) {
      var self = this;

      
      
      if (separate_class_name_and_id_with_underscore == null) {
        separate_class_name_and_id_with_underscore = true;
      };
      return $$$($$($nesting, 'ActiveSupport'), 'Inflector').$foreign_key(self, separate_class_name_and_id_with_underscore);
    }, $String_foreign_key$15.$$arity = -1), nil) && 'foreign_key';
  })($nesting[0], null, $nesting);
};

Opal.modules["active_support/core_ext/string"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub', '$strip', '$downcase']);
  
  self.$require("active_support/core_ext/string/filters");
  self.$require("active_support/core_ext/string/inflections");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_parameterize$1;

    return (Opal.def(self, '$parameterize', $String_parameterize$1 = function $$parameterize() {
      var self = this;

      return self.$downcase().$strip().$gsub(/\W+/, "-")
    }, $String_parameterize$1.$$arity = 0), nil) && 'parameterize'
  })($nesting[0], null, $nesting);
};

Opal.modules["hyperstack/internal/component/props_wrapper"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_reader', '$naming_convention', '$===', '$fix_suffix', '$camelize', '$=~', '$+', '$[]', '$respond_to?', '$superclass', '$param_accessor_style', '$dup', '$param_definitions', '$new', '$!=', '$instance_var_name_for', '$lambda', '$instance_variable_set', '$fetch_from_cache', '$==', '$[]=', '$-', '$include?', '$define_method', '$to_sym', '$props', '$call', '$to_proc', '$class', '$each_value', '$instance_exec', '$initialize', '$private', '$cache', '$equal?', '$tap', '$convert_param', '$_react_param_conversion', '$is_a?', '$collect', '$component', '$instance_variable_get']);
  
  self.$require("active_support/core_ext/string");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'PropsWrapper');

          var $nesting = [self].concat($parent_nesting), $PropsWrapper_param_accessor_style$12, $PropsWrapper_initialize$13, $PropsWrapper_reload$15, $PropsWrapper_$$$16, $PropsWrapper_fetch_from_cache$17, $PropsWrapper_convert_param$19, $PropsWrapper_cache$21, $PropsWrapper_props$23, $PropsWrapper_value_for$24;

          self.$$prototype.component = self.$$prototype.cache = nil;
          
          self.$attr_reader("component");
          (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting), $instance_var_name_for$1, $fix_suffix$2, $param_accessor_style$3, $param_definitions$4, $define_param$5, $define_all_others$9;

            
            
            Opal.def(self, '$instance_var_name_for', $instance_var_name_for$1 = function $$instance_var_name_for(name) {
              var self = this, $case = nil;

              return (function() {$case = $$($nesting, 'Hyperstack').$naming_convention();
              if ("camelize_params"['$===']($case)) {return self.$fix_suffix(name.$camelize())}
              else if ("prefix_params"['$===']($case)) {return "" + "_" + (name)}
              else {return name}})()
            }, $instance_var_name_for$1.$$arity = 1);
            
            Opal.def(self, '$fix_suffix', $fix_suffix$2 = function $$fix_suffix(name) {
              var self = this;

              
              if ($truthy(name)) {
              } else {
                return nil
              };
              if ($truthy(name['$=~'](/\?$/))) {
                return $rb_plus(name['$[]']($range(0, -2, false)), "_q")
              } else if ($truthy(name['$=~'](/\!$/))) {
                return $rb_plus(name['$[]']($range(0, -2, false)), "_b")
              } else {
                return name
              };
            }, $fix_suffix$2.$$arity = 1);
            
            Opal.def(self, '$param_accessor_style', $param_accessor_style$3 = function $$param_accessor_style(style) {
              var self = this, $ret_or_1 = nil;
              if (self.param_accessor_style == null) self.param_accessor_style = nil;

              
              
              if (style == null) {
                style = nil;
              };
              if ($truthy(style)) {
                self.param_accessor_style = style};
              return (self.param_accessor_style = (function() {if ($truthy(($ret_or_1 = self.param_accessor_style))) {
                return $ret_or_1
              } else if ($truthy(self.$superclass()['$respond_to?']("param_accessor_style"))) {
                return self.$superclass().$param_accessor_style()
              } else {
                return "hyperstack"
              }; return nil; })());
            }, $param_accessor_style$3.$$arity = -1);
            
            Opal.def(self, '$param_definitions', $param_definitions$4 = function $$param_definitions() {
              var self = this, $ret_or_2 = nil;
              if (self.param_definitions == null) self.param_definitions = nil;

              return (self.param_definitions = (function() {if ($truthy(($ret_or_2 = self.param_definitions))) {
                return $ret_or_2
              } else if ($truthy(self.$superclass()['$respond_to?']("param_definitions"))) {
                return self.$superclass().$param_definitions().$dup()
              } else {
                return $$($nesting, 'Hash').$new()
              }; return nil; })())
            }, $param_definitions$4.$$arity = 0);
            
            Opal.def(self, '$define_param', $define_param$5 = function $$define_param(name, param_type, aka) {
              var $$6, $$7, $$8, $iter = $define_param$5.$$p, $yield = $iter || nil, self = this, $ret_or_3 = nil, meth_name = nil, $ret_or_4 = nil, var_name = nil, $ret_or_5 = nil, $writer = nil;

              if ($iter) $define_param$5.$$p = null;
              
              
              if (aka == null) {
                aka = nil;
              };
              if ($truthy((function() {if ($truthy(($ret_or_3 = self.$param_accessor_style()['$!=']("legacy")))) {
                return $ret_or_3
              } else {
                return aka
              }; return nil; })())) {
                
                meth_name = (function() {if ($truthy(($ret_or_4 = aka))) {
                  return $ret_or_4
                } else {
                  return name
                }; return nil; })();
                var_name = (function() {if ($truthy(($ret_or_5 = self.$fix_suffix(aka)))) {
                  return $ret_or_5
                } else {
                  return self.$instance_var_name_for(name)
                }; return nil; })();
                
                $writer = [name, $send(self, 'lambda', [], ($$6 = function(props){var self = $$6.$$s == null ? this : $$6.$$s, val = nil;
                  if (self.component == null) self.component = nil;

                  
                  
                  if (props == null) {
                    props = nil;
                  };
                  self.component.$instance_variable_set("" + "@" + (var_name), (val = self.$fetch_from_cache(name, param_type, props)));
                  if (self.$param_accessor_style()['$==']("accessors")) {
                  } else {
                    return nil;
                  };
                  return self.component["" + "$" + (meth_name)] = function() { return val };}, $$6.$$s = self, $$6.$$arity = 1, $$6))];
                $send(self.$param_definitions(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy(["hyperstack", "accessors"]['$include?'](self.$param_accessor_style()))) {
                  return nil};};
              if (param_type['$==']($$($nesting, 'Proc'))) {
                return $send(self, 'define_method', [name.$to_sym()], ($$7 = function($a){var self = $$7.$$s == null ? this : $$7.$$s, $iter = $$7.$$p, block = $iter || nil, $post_args, args;

                  
                  
                  if ($iter) $$7.$$p = null;;
                  
                  $post_args = Opal.slice.call(arguments, 0, arguments.length);
                  
                  args = $post_args;;
                  if ($truthy(self.$props()['$[]'](name))) {
                    return $send(self.$props()['$[]'](name), 'call', Opal.to_a(args), block.$to_proc())
                  } else {
                    return nil
                  };}, $$7.$$s = self, $$7.$$arity = -1, $$7))
              } else {
                return $send(self, 'define_method', [name.$to_sym()], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

                  return self.$fetch_from_cache(name, param_type, self.$props())}, $$8.$$s = self, $$8.$$arity = 0, $$8))
              };
            }, $define_param$5.$$arity = -3);
            return (Opal.def(self, '$define_all_others', $define_all_others$9 = function $$define_all_others(name) {
              var $$10, $$11, $iter = $define_all_others$9.$$p, $yield = $iter || nil, self = this, var_name = nil, $writer = nil;

              if ($iter) $define_all_others$9.$$p = null;
              
              var_name = self.$instance_var_name_for(name);
              
              $writer = [name, $send(self, 'lambda', [], ($$10 = function(props){var self = $$10.$$s == null ? this : $$10.$$s, val = nil;
                if (self.component == null) self.component = nil;

                
                
                if (props == null) {
                  props = nil;
                };
                self.component.$instance_variable_set("" + "@" + (var_name), (val = Opal.yield1($yield, props)));
                if (self.$param_accessor_style()['$==']("accessors")) {
                } else {
                  return nil;
                };
                return self.component["" + "$" + (name)] = function() { return val };}, $$10.$$s = self, $$10.$$arity = 1, $$10))];
              $send(self.$param_definitions(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return $send(self, 'define_method', [name.$to_sym()], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s, $ret_or_6 = nil;
                if (self._all_others_cache == null) self._all_others_cache = nil;

                return (self._all_others_cache = (function() {if ($truthy(($ret_or_6 = self._all_others_cache))) {
                  return $ret_or_6
                } else {
                  return Opal.yield1($yield, self.$props());
                }; return nil; })())}, $$11.$$s = self, $$11.$$arity = 0, $$11));
            }, $define_all_others$9.$$arity = 1), nil) && 'define_all_others';
          })(Opal.get_singleton_class(self), $nesting);
          
          Opal.def(self, '$param_accessor_style', $PropsWrapper_param_accessor_style$12 = function $$param_accessor_style() {
            var self = this;

            return self.$class().$param_accessor_style()
          }, $PropsWrapper_param_accessor_style$12.$$arity = 0);
          
          Opal.def(self, '$initialize', $PropsWrapper_initialize$13 = function $$initialize(component, incoming) {
            var $$14, self = this;

            
            
            if (incoming == null) {
              incoming = nil;
            };
            self.component = component;
            return $send(self.$class().$param_definitions(), 'each_value', [], ($$14 = function(initializer){var self = $$14.$$s == null ? this : $$14.$$s, $ret_or_7 = nil;

              
              
              if (initializer == null) {
                initializer = nil;
              };
              return $send(self, 'instance_exec', [(function() {if ($truthy(($ret_or_7 = incoming))) {
                return $ret_or_7
              } else {
                return self.$props()
              }; return nil; })()], initializer.$to_proc());}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          }, $PropsWrapper_initialize$13.$$arity = -2);
          
          Opal.def(self, '$reload', $PropsWrapper_reload$15 = function $$reload(next_props) {
            var self = this;

            
            self._all_others_cache = nil;
            return self.$initialize(self.component, next_props);
          }, $PropsWrapper_reload$15.$$arity = 1);
          
          Opal.def(self, '$[]', $PropsWrapper_$$$16 = function(prop) {
            var self = this;

            return self.$props()['$[]'](prop)
          }, $PropsWrapper_$$$16.$$arity = 1);
          self.$private();
          
          Opal.def(self, '$fetch_from_cache', $PropsWrapper_fetch_from_cache$17 = function $$fetch_from_cache(name, param_type, props) {
            var $a, $b, $$18, self = this, last = nil, cached_value = nil;

            
            $b = self.$cache()['$[]'](name), $a = Opal.to_ary($b), (last = ($a[0] == null ? nil : $a[0])), (cached_value = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(last['$equal?'](props['$[]'](name)))) {
              return cached_value};
            return $send(self.$convert_param(name, param_type, props), 'tap', [], ($$18 = function(value){var self = $$18.$$s == null ? this : $$18.$$s, $writer = nil;

              
              
              if (value == null) {
                value = nil;
              };
              $writer = [name, [props['$[]'](name), value]];
              $send(self.$cache(), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$18.$$s = self, $$18.$$arity = 1, $$18));
          }, $PropsWrapper_fetch_from_cache$17.$$arity = 3);
          
          Opal.def(self, '$convert_param', $PropsWrapper_convert_param$19 = function $$convert_param(name, param_type, props) {
            var $$20, self = this, $ret_or_8 = nil;

            if ($truthy(param_type['$respond_to?']("_react_param_conversion"))) {
              return param_type.$_react_param_conversion(props['$[]'](name), nil)
            } else if ($truthy((function() {if ($truthy(($ret_or_8 = param_type['$is_a?']($$($nesting, 'Array'))))) {
              return param_type['$[]'](0)['$respond_to?']("_react_param_conversion")
            } else {
              return $ret_or_8
            }; return nil; })())) {
              return $send(props['$[]'](name), 'collect', [], ($$20 = function(param){var self = $$20.$$s == null ? this : $$20.$$s;

                
                
                if (param == null) {
                  param = nil;
                };
                return param_type['$[]'](0).$_react_param_conversion(param, nil);}, $$20.$$s = self, $$20.$$arity = 1, $$20))
            } else {
              return props['$[]'](name)
            }
          }, $PropsWrapper_convert_param$19.$$arity = 3);
          
          Opal.def(self, '$cache', $PropsWrapper_cache$21 = function $$cache() {
            var $$22, self = this, $ret_or_9 = nil;

            return (self.cache = (function() {if ($truthy(($ret_or_9 = self.cache))) {
              return $ret_or_9
            } else {
              return $send($$($nesting, 'Hash'), 'new', [], ($$22 = function(h, k){var self = $$22.$$s == null ? this : $$22.$$s, $writer = nil;

                
                
                if (h == null) {
                  h = nil;
                };
                
                if (k == null) {
                  k = nil;
                };
                $writer = [k, []];
                $send(h, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, $$22.$$s = self, $$22.$$arity = 2, $$22))
            }; return nil; })())
          }, $PropsWrapper_cache$21.$$arity = 0);
          
          Opal.def(self, '$props', $PropsWrapper_props$23 = function $$props() {
            var self = this;

            return self.$component().$props()
          }, $PropsWrapper_props$23.$$arity = 0);
          return (Opal.def(self, '$value_for', $PropsWrapper_value_for$24 = function $$value_for(name) {
            var self = this;

            if ($truthy(self['$[]'](name))) {
              return self['$[]'](name).$instance_variable_get("@value")
            } else {
              return nil
            }
          }, $PropsWrapper_value_for$24.$$arity = 1), nil) && 'value_for';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/component"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $lambda = Opal.lambda, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$class_eval', '$class_attribute', '$lambda', '$zero?', '$arity', '$deprecation_warning', '$instance_exec', '$to_proc', '$define_callback', '$add_after_error_hook', '$extend', '$respond_to?', '$!', '$<', '$allow_deprecated_render_definition?', '$new', '$to_a', '$mounted_components', '$each', '$include?', '$force_update!', '$name', '$class', '$event_camelize', '$to_s', '$call', '$[]', '$params', '$props_wrapper', '$on_opal_client?', '$load_context', '$observing', '$<<', '$run_callback', '$props', '$quiet_test', '$reload', '$unmount', '$remove', '$delete', '$set_state', '$==', '$method_defined?', '$raise', '$first', '$component_will_mount', '$_run_before_render_callbacks', '$render', '$waiting_on_resources']);
  
  self.$require("hyperstack/ext/component/string");
  self.$require("hyperstack/ext/component/hash");
  self.$require("active_support/core_ext/class/attribute");
  self.$require("hyperstack/internal/component/rendering_context");
  self.$require("hyperstack/internal/component");
  self.$require("hyperstack/internal/component/instance_methods");
  self.$require("hyperstack/internal/component/class_methods");
  self.$require("hyperstack/internal/component/props_wrapper");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting), $Component_included$1, $Component_mounted_components$8, $Component_force_update$excl$9, $Component_deprecation_warning$11, $Component_deprecation_warning$12, $Component_initialize$13, $Component_emit$14, $Component_component_will_mount$15, $Component_component_did_mount$17, $Component_component_will_receive_props$19, $Component_component_will_update$21, $Component_component_did_update$23, $Component_component_will_unmount$25, $Component_component_did_catch$27, $Component_mutations$29, $Component_update_react_js_state$30, $Component_render$31, $Component_waiting_on_resources$32, $Component___hyperstack_component_run_post_render_hooks$33, $Component__run_before_render_callbacks$34, $Component__render_wrapper$35;

      
      Opal.defs(self, '$included', $Component_included$1 = function $$included(base) {
        var $$2, self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        
        base.$include($$$($$$($$($nesting, 'Hyperstack'), 'State'), 'Observer'));
        base.$include($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'InstanceMethods'));
        base.$include($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'AutoUnmount'));
        base.$include($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'));
        base.$include($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ShouldComponentUpdate'));
        $send(base, 'class_eval', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $$3, $$4, $$5, $$6, $$7, method_args_deprecation_check = nil;

          
          self.$class_attribute("initial_state");
          method_args_deprecation_check = $send(self, 'lambda', [], ($$3 = function(name, sself, proc, $a){var self = $$3.$$s == null ? this : $$3.$$s, $post_args, args;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (sself == null) {
              sself = nil;
            };
            
            if (proc == null) {
              proc = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 3, arguments.length);
            
            args = $post_args;;
            if ($truthy(proc.$arity()['$zero?']())) {
              args = []
            } else {
              self.$deprecation_warning("" + "In the future " + (name) + " callbacks will not receive any parameters.")
            };
            $send(sself, 'instance_exec', Opal.to_a(args), proc.$to_proc());
            return args;}, $$3.$$s = self, $$3.$$arity = -4, $$3));
          self.$define_callback("before_mount", $hash2(["before_call_hook"], {"before_call_hook": method_args_deprecation_check}));
          self.$define_callback("after_mount");
          self.$define_callback("before_new_params", $hash2(["after_define_hook"], {"after_define_hook": $send(self, 'lambda', [], ($$4 = function(klass){var self = $$4.$$s == null ? this : $$4.$$s;

            
            
            if (klass == null) {
              klass = nil;
            };
            return klass.$deprecation_warning("" + "`before_new_params` has been deprecated.  The base " + "method componentWillReceiveProps is deprecated in React without replacement");}, $$4.$$s = self, $$4.$$arity = 1, $$4))}));
          self.$define_callback("before_update", $hash2(["before_call_hook"], {"before_call_hook": method_args_deprecation_check}));
          self.$define_callback("after_update");
          self.$define_callback("__hyperstack_component_after_render_hook", $hash2(["before_call_hook"], {"before_call_hook": $lambda(($$5 = function(_, sself, proc, $a){var self = $$5.$$s == null ? this : $$5.$$s, $post_args, args;

            
            
            if (_ == null) {
              _ = nil;
            };
            
            if (sself == null) {
              sself = nil;
            };
            
            if (proc == null) {
              proc = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 3, arguments.length);
            
            args = $post_args;;
            return [].concat(Opal.to_a($send(sself, 'instance_exec', Opal.to_a(args), proc.$to_proc())));}, $$5.$$s = self, $$5.$$arity = -4, $$5))}));
          self.$define_callback("__hyperstack_component_rescue_hook", $hash2(["before_call_hook"], {"before_call_hook": $lambda(($$6 = function(_, sself, proc, $a){var self = $$6.$$s == null ? this : $$6.$$s, $post_args, args;

            
            
            if (_ == null) {
              _ = nil;
            };
            
            if (sself == null) {
              sself = nil;
            };
            
            if (proc == null) {
              proc = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 3, arguments.length);
            
            args = $post_args;;
            return $send(sself, 'instance_exec', Opal.to_a(args), proc.$to_proc());}, $$6.$$s = self, $$6.$$arity = -4, $$6))}));
          return self.$define_callback("after_error", $hash2(["after_define_hook"], {"after_define_hook": $lambda(($$7 = function(klass){var self = $$7.$$s == null ? this : $$7.$$s;

            
            
            if (klass == null) {
              klass = nil;
            };
            return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper').$add_after_error_hook(klass);}, $$7.$$s = self, $$7.$$arity = 1, $$7))}));}, $$2.$$s = self, $$2.$$arity = 0, $$2));
        base.$extend($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ClassMethods'));
        if ($truthy(Opal.__hyperstack_component_original_defn)) {
          return nil
        } else {
          
          
         Opal.__hyperstack_component_original_defn = Opal.defn
         Opal.defn = function(klass, name, fn) {
           (function() {if ($truthy((function() {if ($truthy(($ret_or_1 = (klass)['$respond_to?']("hyper_component?")))) {
            return $rb_lt(klass, $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'NativeLibrary'))['$!']()
          } else {
            return $ret_or_1
          }; return nil; })())) {
            if ($truthy((function() {if ($truthy(($ret_or_2 = name == '$render'))) {
              return (klass)['$allow_deprecated_render_definition?']()['$!']()
            } else {
              return $ret_or_2
            }; return nil; })())) {
              return $$($nesting, 'Hyperstack').$deprecation_warning(klass, "Do not directly define the render method. Use the render macro instead.")
            } else if ($truthy(name == '$__hyperstack_component_render')) {
              return name = '$render';
            } else {
              return nil
            }
          } else {
            return nil
          }; return nil; })()
           Opal.__hyperstack_component_original_defn(klass, name, fn)
           }
         ;
          return nil;
        };
      }, $Component_included$1.$$arity = 1);
      Opal.defs(self, '$mounted_components', $Component_mounted_components$8 = function $$mounted_components() {
        var self = this, $ret_or_3 = nil;
        if (self.__hyperstack_component_mounted_components == null) self.__hyperstack_component_mounted_components = nil;

        return (self.__hyperstack_component_mounted_components = (function() {if ($truthy(($ret_or_3 = self.__hyperstack_component_mounted_components))) {
          return $ret_or_3
        } else {
          return $$($nesting, 'Set').$new()
        }; return nil; })())
      }, $Component_mounted_components$8.$$arity = 0);
      Opal.defs(self, '$force_update!', $Component_force_update$excl$9 = function() {
        var $$10, self = this, components = nil;

        
        components = self.$mounted_components().$to_a();
        return $send(components, 'each', [], ($$10 = function(comp){var self = $$10.$$s == null ? this : $$10.$$s;

          
          
          if (comp == null) {
            comp = nil;
          };
          if ($truthy(self.$mounted_components()['$include?'](comp))) {
          } else {
            return nil;
          };
          return comp['$force_update!']();}, $$10.$$s = self, $$10.$$arity = 1, $$10));
      }, $Component_force_update$excl$9.$$arity = 0);
      Opal.defs(self, '$deprecation_warning', $Component_deprecation_warning$11 = function $$deprecation_warning(message) {
        var self = this;

        return $$($nesting, 'Hyperstack').$deprecation_warning(self.$name(), message)
      }, $Component_deprecation_warning$11.$$arity = 1);
      
      Opal.def(self, '$deprecation_warning', $Component_deprecation_warning$12 = function $$deprecation_warning(message) {
        var self = this;

        return $$($nesting, 'Hyperstack').$deprecation_warning(self.$class().$name(), message)
      }, $Component_deprecation_warning$12.$$arity = 1);
      
      Opal.def(self, '$initialize', $Component_initialize$13 = function $$initialize(native_element) {
        var self = this;

        return (self.__hyperstack_component_native = native_element)
      }, $Component_initialize$13.$$arity = 1);
      
      Opal.def(self, '$emit', $Component_emit$14 = function $$emit(event_name, $a) {
        var $post_args, args, self = this, built_in_event_name = nil;

        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        if ($truthy($$$($$($nesting, 'Event'), 'BUILT_IN_EVENTS')['$include?']((built_in_event_name = "" + "on" + (event_name.$to_s().$event_camelize()))))) {
          return $send(self.$params()['$[]'](built_in_event_name), 'call', Opal.to_a(args))
        } else {
          return $send(self.$params()['$[]']("" + "on_" + (event_name)), 'call', Opal.to_a(args))
        };
      }, $Component_emit$14.$$arity = -2);
      
      Opal.def(self, '$component_will_mount', $Component_component_will_mount$15 = function $$component_will_mount() {
        var $$16, self = this;

        
        self.__hyperstack_component_params_wrapper = self.$class().$props_wrapper().$new(self);
        if ($truthy($$($nesting, 'IsomorphicHelpers')['$on_opal_client?']())) {
          $$($nesting, 'IsomorphicHelpers').$load_context(true)};
        return $send(self, 'observing', [$hash2(["immediate_update"], {"immediate_update": true})], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s;

          
          $$$($$($nesting, 'Hyperstack'), 'Component').$mounted_components()['$<<'](self);
          return self.$run_callback("before_mount", self.$props());}, $$16.$$s = self, $$16.$$arity = 0, $$16));
      }, $Component_component_will_mount$15.$$arity = 0);
      
      Opal.def(self, '$component_did_mount', $Component_component_did_mount$17 = function $$component_did_mount() {
        var $$18, self = this;

        return $send(self, 'observing', [$hash2(["update_objects"], {"update_objects": true})], ($$18 = function(){var self = $$18.$$s == null ? this : $$18.$$s;

          
          self.$run_callback("after_mount");
          return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$quiet_test(self);}, $$18.$$s = self, $$18.$$arity = 0, $$18))
      }, $Component_component_did_mount$17.$$arity = 0);
      
      Opal.def(self, '$component_will_receive_props', $Component_component_will_receive_props$19 = function $$component_will_receive_props(next_props) {
        var $$20, self = this;

        
        $send(self, 'observing', [$hash2(["immediate_update"], {"immediate_update": true})], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s;

          return self.$run_callback("before_new_params", next_props)}, $$20.$$s = self, $$20.$$arity = 0, $$20));
        return (self.__hyperstack_component_receiving_props = true);
      }, $Component_component_will_receive_props$19.$$arity = 1);
      
      Opal.def(self, '$component_will_update', $Component_component_will_update$21 = function $$component_will_update(next_props, next_state) {
        var $$22, self = this;
        if (self.__hyperstack_component_receiving_props == null) self.__hyperstack_component_receiving_props = nil;
        if (self.__hyperstack_component_params_wrapper == null) self.__hyperstack_component_params_wrapper = nil;

        
        $send(self, 'observing', [], ($$22 = function(){var self = $$22.$$s == null ? this : $$22.$$s;

          return self.$run_callback("before_update", next_props, next_state)}, $$22.$$s = self, $$22.$$arity = 0, $$22));
        if ($truthy(self.__hyperstack_component_receiving_props)) {
          self.__hyperstack_component_params_wrapper.$reload(next_props)};
        return (self.__hyperstack_component_receiving_props = false);
      }, $Component_component_will_update$21.$$arity = 2);
      
      Opal.def(self, '$component_did_update', $Component_component_did_update$23 = function $$component_did_update(prev_props, prev_state) {
        var $$24, self = this;

        return $send(self, 'observing', [$hash2(["update_objects"], {"update_objects": true})], ($$24 = function(){var self = $$24.$$s == null ? this : $$24.$$s;

          
          self.$run_callback("after_update", prev_props, prev_state);
          return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$quiet_test(self);}, $$24.$$s = self, $$24.$$arity = 0, $$24))
      }, $Component_component_did_update$23.$$arity = 2);
      
      Opal.def(self, '$component_will_unmount', $Component_component_will_unmount$25 = function $$component_will_unmount() {
        var $$26, self = this;

        return $send(self, 'observing', [], ($$26 = function(){var self = $$26.$$s == null ? this : $$26.$$s;

          
          self.$unmount();
          self.$remove();
          return $$$($$($nesting, 'Hyperstack'), 'Component').$mounted_components().$delete(self);}, $$26.$$s = self, $$26.$$arity = 0, $$26))
      }, $Component_component_will_unmount$25.$$arity = 0);
      
      Opal.def(self, '$component_did_catch', $Component_component_did_catch$27 = function $$component_did_catch(error, info) {
        var $$28, self = this;

        return $send(self, 'observing', [], ($$28 = function(){var self = $$28.$$s == null ? this : $$28.$$s;

          return self.$run_callback("after_error", error, info)}, $$28.$$s = self, $$28.$$arity = 0, $$28))
      }, $Component_component_did_catch$27.$$arity = 2);
      
      Opal.def(self, '$mutations', $Component_mutations$29 = function $$mutations(_objects) {
        var self = this;

        return self.$set_state($hash2(["***_state_updated_at-***"], {"***_state_updated_at-***": Date.now() + Math.random()}))
      }, $Component_mutations$29.$$arity = 1);
      
      Opal.def(self, '$update_react_js_state', $Component_update_react_js_state$30 = function $$update_react_js_state(object, name, value) {
        var self = this;

        if ($truthy(object)) {
          
          if (object['$=='](self)) {
          } else {
            name = "" + (object.$class()) + "." + (name)
          };
          return self.$set_state($hash("***_state_updated_at-***", Date.now() + Math.random(), name, value));
        } else {
          return self.$set_state($hash(name, value))
        }
      }, $Component_update_react_js_state$30.$$arity = 3);
      if ($truthy(self['$method_defined?']("render"))) {
      } else {
        
        Opal.def(self, '$render', $Component_render$31 = function $$render() {
          var self = this;

          return self.$raise("no render defined")
        }, $Component_render$31.$$arity = 0)
      };
      
      Opal.def(self, '$waiting_on_resources', $Component_waiting_on_resources$32 = function $$waiting_on_resources() {
        var self = this;
        if (self.__hyperstack_component_waiting_on_resources == null) self.__hyperstack_component_waiting_on_resources = nil;

        return self.__hyperstack_component_waiting_on_resources
      }, $Component_waiting_on_resources$32.$$arity = 0);
      
      Opal.def(self, '$__hyperstack_component_run_post_render_hooks', $Component___hyperstack_component_run_post_render_hooks$33 = function $$__hyperstack_component_run_post_render_hooks(element) {
        var self = this;

        return self.$run_callback("__hyperstack_component_after_render_hook", element).$first()
      }, $Component___hyperstack_component_run_post_render_hooks$33.$$arity = 1);
      
      Opal.def(self, '$_run_before_render_callbacks', $Component__run_before_render_callbacks$34 = function $$_run_before_render_callbacks() {
        var self = this;
        if (self.__component_mounted == null) self.__component_mounted = nil;

        
        if ($truthy(self.__component_mounted)) {
        } else {
          self.$component_will_mount()
        };
        return (self.__component_mounted = true);
      }, $Component__run_before_render_callbacks$34.$$arity = 0);
      return (Opal.def(self, '$_render_wrapper', $Component__render_wrapper$35 = function $$_render_wrapper() {
        var $$36, self = this;

        
        self.$_run_before_render_callbacks();
        return $send(self, 'observing', [$hash2(["rendering"], {"rendering": true})], ($$36 = function(){var self = $$36.$$s == null ? this : $$36.$$s, $$37, element = nil;

          
          element = $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [nil], ($$37 = function(){var self = $$37.$$s == null ? this : $$37.$$s, $ret_or_4 = nil;

            if ($truthy(($ret_or_4 = self.$render()))) {
              return $ret_or_4
            } else {
              return ""
            }}, $$37.$$s = self, $$37.$$arity = 0, $$37));
          if ($truthy(element['$respond_to?']("waiting_on_resources"))) {
            self.__hyperstack_component_waiting_on_resources = element.$waiting_on_resources()};
          return element;}, $$36.$$s = self, $$36.$$arity = 0, $$36));
      }, $Component__render_wrapper$35.$$arity = 0), nil) && '_render_wrapper';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/internal/component/should_component_update"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$observing', '$respond_to?', '$!', '$call_needs_update', '$props_changed?', '$native_state_changed?', '$define_singleton_method', '$needs_update?', '$new', '$!=']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'ShouldComponentUpdate');

          var $nesting = [self].concat($parent_nesting), $ShouldComponentUpdate_should_component_update$ques$1, $ShouldComponentUpdate_call_needs_update$3, $ShouldComponentUpdate_native_state_changed$ques$6, $ShouldComponentUpdate_props_changed$ques$7;

          
          
          Opal.def(self, '$should_component_update?', $ShouldComponentUpdate_should_component_update$ques$1 = function(next_props, next_state) {
            var $$2, self = this;

            return $send(self, 'observing', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $ret_or_1 = nil;

              if ($truthy(self['$respond_to?']("needs_update?"))) {
                return self.$call_needs_update(next_props, next_state)['$!']()['$!']()
              } else if ($truthy(($ret_or_1 = self['$props_changed?'](next_props)))) {
                return $ret_or_1
              } else {
                return self['$native_state_changed?'](next_state)
              }}, $$2.$$s = self, $$2.$$arity = 0, $$2))
          }, $ShouldComponentUpdate_should_component_update$ques$1.$$arity = 2);
          
          Opal.def(self, '$call_needs_update', $ShouldComponentUpdate_call_needs_update$3 = function $$call_needs_update(next_params, next_state) {
            var $$4, $$5, self = this, component = nil;

            
            component = self;
            $send(next_params, 'define_singleton_method', ["changed?"], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

              return component['$props_changed?'](self)}, $$4.$$s = self, $$4.$$arity = 0, $$4));
            $send(next_state, 'define_singleton_method', ["changed?"], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

              return component['$native_state_changed?'](next_state)}, $$5.$$s = self, $$5.$$arity = 0, $$5));
            return self['$needs_update?'](next_params, next_state);
          }, $ShouldComponentUpdate_call_needs_update$3.$$arity = 2);
          
          Opal.def(self, '$native_state_changed?', $ShouldComponentUpdate_native_state_changed$ques$6 = function(next_state_hash) {
            var self = this, state_hash = nil;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            
            state_hash = $$($nesting, 'Hash').$new(self.__hyperstack_component_native.state);
            return next_state_hash['$!='](state_hash);
          }, $ShouldComponentUpdate_native_state_changed$ques$6.$$arity = 1);
          return (Opal.def(self, '$props_changed?', $ShouldComponentUpdate_props_changed$ques$7 = function(next_props) {
            var self = this, props = nil;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            
            props = $$($nesting, 'Hash').$new(self.__hyperstack_component_native.props);
            return next_props['$!='](props);
          }, $ShouldComponentUpdate_props_changed$ques$7.$$arity = 1), nil) && 'props_changed?';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/tags"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $klass = Opal.klass;

  Opal.add_stubs(['$+', '$each', '$define_method', '$upcase', '$render', '$to_proc', '$const_set', '$new', '$include', '$import_native_component', '$downcase', '$=~', '$include?', '$create_element', '$find_component', '$find_name_and_parent', '$extend', '$private', '$name', '$split', '$>', '$length', '$last', '$[]', '$inject', '$const_get', '$lookup_const', '$!', '$method_defined?', '$raise', '$_reactrb_import_component_class', '$==', '$reverse', '$to_s', '$class', '$detect', '$const_defined?', '$respond_to?']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting), $Component$3;

        return (function($base, $parent_nesting) {
          var self = $module($base, 'Tags');

          var $nesting = [self].concat($parent_nesting), $Tags$1, $Tags$4, $Tags_html_tag_class_for$6, $Tags_method_missing$7, $Tags_find_component$13, $Tags_lookup_const$14;

          
          Opal.const_set($nesting[0], 'HTML_TAGS', $rb_plus(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"], ["circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]));
          $send($$($nesting, 'HTML_TAGS'), 'each', [], ($Tags$1 = function(tag){var self = $Tags$1.$$s == null ? this : $Tags$1.$$s, $$2;

            
            
            if (tag == null) {
              tag = nil;
            };
            $send(self, 'define_method', [tag.$upcase()], ($$2 = function($a){var self = $$2.$$s == null ? this : $$2.$$s, $iter = $$2.$$p, children = $iter || nil, $post_args, params;

              
              
              if ($iter) $$2.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              params = $post_args;;
              return $send($$($nesting, 'RenderingContext'), 'render', [tag].concat(Opal.to_a(params)), children.$to_proc());}, $$2.$$s = self, $$2.$$arity = -1, $$2));
            return self.$const_set(tag.$upcase(), tag);}, $Tags$1.$$s = self, $Tags$1.$$arity = 1, $Tags$1));
          self.$const_set("FRAGMENT", $send($$($nesting, 'Class'), 'new', [], ($Tags$4 = function(){var self = $Tags$4.$$s == null ? this : $Tags$4.$$s, $$5;

            
            self.$include($$$($$($nesting, 'Hyperstack'), 'Component'));
            $send(self, 'render', [], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

              return nil}, $$5.$$s = self, $$5.$$arity = 0, $$5));
            return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper').$import_native_component(self, React.Fragment);}, $Tags$4.$$s = self, $Tags$4.$$arity = 0, $Tags$4)));
          Opal.defs(self, '$html_tag_class_for', $Tags_html_tag_class_for$6 = function $$html_tag_class_for(tag) {
            var self = this, downcased_tag = nil, $ret_or_1 = nil;

            
            downcased_tag = tag.$downcase();
            if ($truthy((function() {if ($truthy(($ret_or_1 = tag['$=~'](/^[A-Z]+$/)))) {
              return $$($nesting, 'HTML_TAGS')['$include?'](downcased_tag)
            } else {
              return $ret_or_1
            }; return nil; })())) {
              return $$($nesting, 'Object').$const_set(tag, $$($nesting, 'ReactWrapper').$create_element(downcased_tag))
            } else {
              return nil
            };
          }, $Tags_html_tag_class_for$6.$$arity = 1);
          
          Opal.def(self, '$method_missing', $Tags_method_missing$7 = function $$method_missing(name, $a) {
            var $iter = $Tags_method_missing$7.$$p, children = $iter || nil, $post_args, params, self = this, component = nil;

            if ($iter) $Tags_method_missing$7.$$p = null;
            
            
            if ($iter) $Tags_method_missing$7.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            params = $post_args;;
            component = self.$find_component(name);
            if ($truthy(component)) {
              return $send($$($nesting, 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc())};
            return $send2(self, $find_super(self, 'method_missing', $Tags_method_missing$7, false, true), 'method_missing', [name].concat(Opal.to_a(params)), $iter);
          }, $Tags_method_missing$7.$$arity = -2);
          (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting), $included$8, $find_name_and_parent$11;

            
            
            Opal.def(self, '$included', $included$8 = function $$included(component) {
              var $a, $b, $$9, $iter = $included$8.$$p, $yield = $iter || nil, self = this, name = nil, parent = nil, tag_names_module = nil;

              if ($iter) $included$8.$$p = null;
              
              $b = self.$find_name_and_parent(component), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (parent = ($a[1] == null ? nil : $a[1])), $b;
              tag_names_module = $send($$($nesting, 'Module'), 'new', [], ($$9 = function(){var self = $$9.$$s == null ? this : $$9.$$s, $$10;

                return $send(self, 'define_method', [name], ($$10 = function($c){var self = $$10.$$s == null ? this : $$10.$$s, $iter = $$10.$$p, children = $iter || nil, $post_args, params;

                  
                  
                  if ($iter) $$10.$$p = null;;
                  
                  $post_args = Opal.slice.call(arguments, 0, arguments.length);
                  
                  params = $post_args;;
                  return $send($$($nesting, 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc());}, $$10.$$s = self, $$10.$$arity = -1, $$10))}, $$9.$$s = self, $$9.$$arity = 0, $$9));
              return parent.$extend(tag_names_module);
            }, $included$8.$$arity = 1);
            self.$private();
            return (Opal.def(self, '$find_name_and_parent', $find_name_and_parent$11 = function $$find_name_and_parent(component) {
              var $$12, self = this, split_name = nil, $ret_or_2 = nil, $ret_or_3 = nil;

              
              split_name = (function() {if ($truthy(($ret_or_2 = component.$name()))) {
                return component.$name().$split("::")
              } else {
                return $ret_or_2
              }; return nil; })();
              if ($truthy((function() {if ($truthy(($ret_or_3 = split_name))) {
                return $rb_gt(split_name.$length(), 1)
              } else {
                return $ret_or_3
              }; return nil; })())) {
                return [split_name.$last(), $send(split_name, 'inject', [[$$($nesting, 'Module')]], ($$12 = function(a, e){var self = $$12.$$s == null ? this : $$12.$$s;

                  
                  
                  if (a == null) {
                    a = nil;
                  };
                  
                  if (e == null) {
                    e = nil;
                  };
                  return $rb_plus(a, [a.$last().$const_get(e)]);}, $$12.$$s = self, $$12.$$arity = 2, $$12))['$[]'](-2)]
              } else {
                return nil
              };
            }, $find_name_and_parent$11.$$arity = 1), nil) && 'find_name_and_parent';
          })(Opal.get_singleton_class(self), $nesting);
          self.$private();
          
          Opal.def(self, '$find_component', $Tags_find_component$13 = function $$find_component(name) {
            var self = this, component = nil, $ret_or_4 = nil, $ret_or_5 = nil;

            
            component = self.$lookup_const(name);
            if ($truthy((function() {if ($truthy(($ret_or_4 = component))) {
              return component['$method_defined?']("render")['$!']()
            } else {
              return $ret_or_4
            }; return nil; })())) {
              self.$raise("" + (name) + " does not appear to be a react component.")};
            if ($truthy(($ret_or_5 = component))) {
              return $ret_or_5
            } else {
              return $$($nesting, 'Object').$_reactrb_import_component_class(name)
            };
          }, $Tags_find_component$13.$$arity = 1);
          return (Opal.def(self, '$lookup_const', $Tags_lookup_const$14 = function $$lookup_const(name) {
            var $$15, $$16, self = this, scopes = nil, scope = nil;

            
            if ($truthy(name['$=~'](/^[A-Z]/))) {
            } else {
              return nil
            };
            if (name['$==']("FRAGMENT")) {
              return $$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'FRAGMENT')};
            scopes = $send(self.$class().$name().$to_s().$split("::"), 'inject', [[$$($nesting, 'Object')]], ($$15 = function(nesting, next_const){var self = $$15.$$s == null ? this : $$15.$$s;

              
              
              if (nesting == null) {
                nesting = nil;
              };
              
              if (next_const == null) {
                next_const = nil;
              };
              return $rb_plus(nesting, [nesting.$last().$const_get(next_const)]);}, $$15.$$s = self, $$15.$$arity = 2, $$15)).$reverse();
            scope = $send(scopes, 'detect', [], ($$16 = function(s){var self = $$16.$$s == null ? this : $$16.$$s;

              
              
              if (s == null) {
                s = nil;
              };
              return s['$const_defined?'](name, false);}, $$16.$$s = self, $$16.$$arity = 1, $$16));
            if ($truthy(scope)) {
              return scope.$const_get(name, false)
            } else {
              return nil
            };
          }, $Tags_lookup_const$14.$$arity = 1), nil) && 'lookup_const';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  if ($truthy($$($nesting, 'Object')['$respond_to?']("_reactrb_import_component_class"))) {
    return nil
  } else {
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Object');

      var $nesting = [self].concat($parent_nesting), $Object__reactrb_import_component_class$17;

      return (Opal.defs(self, '$_reactrb_import_component_class', $Object__reactrb_import_component_class$17 = function $$_reactrb_import_component_class(_name) {
        var self = this;

        return nil
      }, $Object__reactrb_import_component_class$17.$$arity = 1), nil) && '_reactrb_import_component_class'
    })($nesting[0], null, $nesting)
  };
};

Opal.modules["hyperstack/component/event"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Event');

        var $nesting = [self].concat($parent_nesting), $Event_initialize$1;

        
        self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
        self.$alias_native("bubbles", "bubbles");
        self.$alias_native("cancelable", "cancelable");
        self.$alias_native("current_target", "currentTarget");
        self.$alias_native("default_prevented", "defaultPrevented");
        self.$alias_native("event_phase", "eventPhase");
        self.$alias_native("is_trusted?", "isTrusted");
        self.$alias_native("native_event", "nativeEvent");
        self.$alias_native("target", "target");
        self.$alias_native("timestamp", "timeStamp");
        self.$alias_native("event_type", "type");
        self.$alias_native("prevent_default", "preventDefault");
        self.$alias_native("stop_propagation", "stopPropagation");
        self.$alias_native("clipboard_data", "clipboardData");
        self.$alias_native("alt_key", "altKey");
        self.$alias_native("char_code", "charCode");
        self.$alias_native("ctrl_key", "ctrlKey");
        self.$alias_native("get_modifier_state", "getModifierState");
        self.$alias_native("key", "key");
        self.$alias_native("key_code", "keyCode");
        self.$alias_native("locale", "locale");
        self.$alias_native("location", "location");
        self.$alias_native("meta_key", "metaKey");
        self.$alias_native("repeat", "repeat");
        self.$alias_native("shift_key", "shiftKey");
        self.$alias_native("which", "which");
        self.$alias_native("related_target", "relatedTarget");
        self.$alias_native("button", "button");
        self.$alias_native("buttons", "buttons");
        self.$alias_native("client_x", "clientX");
        self.$alias_native("client_y", "clientY");
        self.$alias_native("get_modifier_state", "getModifierState");
        self.$alias_native("page_x", "pageX");
        self.$alias_native("page_y", "pageY");
        self.$alias_native("screen_x", "screen_x");
        self.$alias_native("screen_y", "screen_y");
        self.$alias_native("changed_touches", "changedTouches");
        self.$alias_native("target_touches", "targetTouches");
        self.$alias_native("touches", "touches");
        self.$alias_native("detail", "detail");
        self.$alias_native("view", "view");
        self.$alias_native("delta_mode", "deltaMode");
        self.$alias_native("delta_x", "deltaX");
        self.$alias_native("delta_y", "deltaY");
        self.$alias_native("delta_z", "deltaZ");
        Opal.const_set($nesting[0], 'BUILT_IN_EVENTS', ["onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onClick", "onContextMenu", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onSelect", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll", "onWheel"]);
        return (Opal.def(self, '$initialize', $Event_initialize$1 = function $$initialize(native_event) {
          var self = this;

          return (self["native"] = native_event)
        }, $Event_initialize$1.$$arity = 1), nil) && 'initialize';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/ext/component/object"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $alias = Opal.alias, $truthy = Opal.truthy;

  Opal.add_stubs(['$_reactrb_tag_original_const_missing', '$html_tag_class_for', '$raise', '$object_id']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_to_key$2;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Object');

      var $nesting = [self].concat($parent_nesting);

      return (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $const_missing$1;

        
        $alias(self, "_reactrb_tag_original_const_missing", "const_missing");
        return (Opal.def(self, '$const_missing', $const_missing$1 = function $$const_missing(const_name) {
          var self = this, e = nil, $ret_or_1 = nil;

          try {
            return self.$_reactrb_tag_original_const_missing(const_name)
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {(e = $err)
              try {
                if ($truthy(($ret_or_1 = $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags').$html_tag_class_for(const_name)))) {
                  return $ret_or_1
                } else {
                  return self.$raise(e)
                }
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          }
        }, $const_missing$1.$$arity = 1), nil) && 'const_missing';
      })(Opal.get_singleton_class(self), $nesting)
    })($nesting[0], null, $nesting);
    return (Opal.def(self, '$to_key', $Object_to_key$2 = function $$to_key() {
      var self = this;

      return self.$object_id()
    }, $Object_to_key$2.$$arity = 0), nil) && 'to_key';
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/ext/component/kernel"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $alias = Opal.alias;

  Opal.add_stubs(['$tap', '$new', '$after', '$resolve', '$call']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_pause$1;

    
    
    Opal.def(self, '$pause', $Kernel_pause$1 = function $$pause(s) {
      var $iter = $Kernel_pause$1.$$p, block = $iter || nil, $$2, self = this;

      if ($iter) $Kernel_pause$1.$$p = null;
      
      
      if ($iter) $Kernel_pause$1.$$p = null;;
      return $send($$($nesting, 'Promise').$new(), 'tap', [], ($$2 = function(p){var self = $$2.$$s == null ? this : $$2.$$s, $$3;

        
        
        if (p == null) {
          p = nil;
        };
        return $send(self, 'after', [s], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $ret_or_1 = nil;

          return $send(p, 'resolve', Opal.to_a((function() {if ($truthy(($ret_or_1 = block))) {
            return [block.$call()]
          } else {
            return $ret_or_1
          }; return nil; })()))}, $$3.$$s = self, $$3.$$arity = 0, $$3));}, $$2.$$s = self, $$2.$$arity = 1, $$2));
    }, $Kernel_pause$1.$$arity = 1);
    $alias(self, "busy_sleep", "sleep");
    return $alias(self, "sleep", "pause");
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/ext/component/number"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Number');

    var $nesting = [self].concat($parent_nesting), $Number_to_key$1;

    return (Opal.def(self, '$to_key', $Number_to_key$1 = function $$to_key() {
      var self = this;

      return self
    }, $Number_to_key$1.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/ext/component/boolean"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean_to_key$1;

    return (Opal.def(self, '$to_key', $Boolean_to_key$1 = function $$to_key() {
      var self = this;

      return self
    }, $Boolean_to_key$1.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/ext/component/array"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_enum', '$size', '$reject!', '$<<']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_extract$excl$1;

    return (Opal.def(self, '$extract!', $Array_extract$excl$1 = function() {
      var $$2, $$3, $iter = $Array_extract$excl$1.$$p, $yield = $iter || nil, self = this, extracted_elements = nil;

      if ($iter) $Array_extract$excl$1.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'to_enum', ["extract!"], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

          return self.$size()}, $$2.$$s = self, $$2.$$arity = 0, $$2))
      };
      extracted_elements = [];
      $send(self, 'reject!', [], ($$3 = function(element){var self = $$3.$$s == null ? this : $$3.$$s;

        
        
        if (element == null) {
          element = nil;
        };
        if ($truthy(Opal.yield1($yield, element))) {
          return extracted_elements['$<<'](element)
        } else {
          return nil
        };}, $$3.$$s = self, $$3.$$arity = 1, $$3));
      return extracted_elements;
    }, $Array_extract$excl$1.$$arity = 0), nil) && 'extract!'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/ext/component/enumerable"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$private_constant', '$each', '$[]=', '$-', '$!=', '$to_enum', '$respond_to?', '$size']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_index_with$1;

    
    Opal.const_set($nesting[0], 'INDEX_WITH_DEFAULT', $$($nesting, 'Object').$new());
    self.$private_constant("INDEX_WITH_DEFAULT");
    return (Opal.def(self, '$index_with', $Enumerable_index_with$1 = function $$index_with(default$) {
      var $$2, $$3, $$4, $iter = $Enumerable_index_with$1.$$p, $yield = $iter || nil, self = this, result = nil;

      if ($iter) $Enumerable_index_with$1.$$p = null;
      
      
      if (default$ == null) {
        default$ = $$($nesting, 'INDEX_WITH_DEFAULT');
      };
      if (($yield !== nil)) {
        
        result = $hash2([], {});
        $send(self, 'each', [], ($$2 = function(elem){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;

          
          
          if (elem == null) {
            elem = nil;
          };
          $writer = [elem, Opal.yield1($yield, elem)];
          $send(result, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        return result;
      } else if ($truthy(default$['$!=']($$($nesting, 'INDEX_WITH_DEFAULT')))) {
        
        result = $hash2([], {});
        $send(self, 'each', [], ($$3 = function(elem){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil;

          
          
          if (elem == null) {
            elem = nil;
          };
          $writer = [elem, default$];
          $send(result, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        return result;
      } else {
        return $send(self, 'to_enum', ["index_with"], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

          if ($truthy(self['$respond_to?']("size"))) {
            return self.$size()
          } else {
            return nil
          }}, $$4.$$s = self, $$4.$$arity = 0, $$4))
      };
    }, $Enumerable_index_with$1.$$arity = -1), nil) && 'index_with';
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/ext/component/time"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  Opal.add_stubs(['$to_json', '$strftime']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_to_json$1;

    return (Opal.def(self, '$to_json', $Time_to_json$1 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T.%3N%z").$to_json()
    }, $Time_to_json$1.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting)
};

Opal.modules["hyperstack/component/isomorphic_helpers"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $class_variable_get = Opal.class_variable_get, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$!', '$!=', '$unique_id', '$on_opal_server?', '$log', '$new', '$is_a?', '$==', '$production?', '$env', '$+', '$[]', '$class', '$on_opal_client?', '$join', '$collect', '$prerender_footer_blocks', '$call', '$attr_reader', '$[]=', '$-', '$run', '$each', '$before_first_mount_blocks', '$send_to_opal', '$eval', '$load!', '$tr', '$<<', '$first', '$send_to_server', '$to_json', '$parse', '$controller', '$context', '$register_before_first_mount_block', '$to_proc', '$register_prerender_footer_block', '$send', '$result']);
  
  self.$require("hyperstack/internal/component");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'IsomorphicHelpers');

        var $nesting = [self].concat($parent_nesting), $IsomorphicHelpers_included$1, $IsomorphicHelpers_load_context$2, $IsomorphicHelpers_context$3, $IsomorphicHelpers_log$4, $IsomorphicHelpers_on_opal_server$ques$5, $IsomorphicHelpers_on_opal_client$ques$6, $IsomorphicHelpers_log$7, $IsomorphicHelpers_on_opal_server$ques$8, $IsomorphicHelpers_on_opal_client$ques$9, $IsomorphicHelpers_prerender_footers$10;

        
        Opal.defs(self, '$included', $IsomorphicHelpers_included$1 = function $$included(base) {
          var self = this;

          return base.$extend($$($nesting, 'ClassMethods'))
        }, $IsomorphicHelpers_included$1.$$arity = 1);
        Opal.defs(self, '$load_context', $IsomorphicHelpers_load_context$2 = function $$load_context(unique_id, name) {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, message = nil;
          if (self.context == null) self.context = nil;

          
          
          if (unique_id == null) {
            unique_id = nil;
          };
          
          if (name == null) {
            name = nil;
          };
          if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = unique_id['$!']()))) {
            return $ret_or_2
          } else {
            return self.context['$!']()
          }; return nil; })()))) {
            return $ret_or_1
          } else {
            return self.context.$unique_id()['$!='](unique_id)
          }; return nil; })())) {
            
            message = (function() {if ($truthy(self['$on_opal_server?']())) {
              
              try {
                console.history = []
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    nil
                  } finally { Opal.pop_exception(); }
                } else { throw $err; }
              };
              return "" + "************************ React Prerendering Context Initialized " + (name) + " ***********************";
            } else {
              return "************************ React Browser Context Initialized ****************************"
            }; return nil; })();
            self.$log(message);
            self.context = $$($nesting, 'Context').$new(unique_id);};
          return true;
        }, $IsomorphicHelpers_load_context$2.$$arity = -1);
        Opal.defs(self, '$context', $IsomorphicHelpers_context$3 = function $$context() {
          var self = this;
          if (self.context == null) self.context = nil;

          return self.context
        }, $IsomorphicHelpers_context$3.$$arity = 0);
        Opal.defs(self, '$log', $IsomorphicHelpers_log$4 = function $$log(message, message_type) {
          var self = this, $ret_or_3 = nil, $ret_or_4 = nil, style = nil;

          
          
          if (message_type == null) {
            message_type = "info";
          };
          if ($truthy(message['$is_a?']($$($nesting, 'Array')))) {
          } else {
            message = [message]
          };
          if ($truthy((function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = message_type['$==']("info")))) {
            return $ret_or_4
          } else {
            return message_type['$==']("warning")
          }; return nil; })()))) {
            return $$($nesting, 'Hyperstack').$env()['$production?']()
          } else {
            return $ret_or_3
          }; return nil; })())) {
            return nil};
          if (message_type['$==']("info")) {
            
            if ($truthy(self['$on_opal_server?']())) {
              style = "background: #00FFFF; color: red"
            } else {
              style = "background: #222; color: #bada55"
            };
            message = $rb_plus([$rb_plus("%c", message['$[]'](0)), style], message['$[]']($range(1, -1, false)));
            return console.log.apply(console, message);;
          } else if (message_type['$==']("warning")) {
            return console.warn.apply(console, message);
          } else {
            return console.error.apply(console, message);
          };
        }, $IsomorphicHelpers_log$4.$$arity = -2);
        
        Opal.defs(self, '$on_opal_server?', $IsomorphicHelpers_on_opal_server$ques$5 = function() {
          var self = this;

          return typeof Opal.global.document === 'undefined';
        }, $IsomorphicHelpers_on_opal_server$ques$5.$$arity = 0);
        Opal.defs(self, '$on_opal_client?', $IsomorphicHelpers_on_opal_client$ques$6 = function() {
          var self = this;

          return self['$on_opal_server?']()['$!']()
        }, $IsomorphicHelpers_on_opal_client$ques$6.$$arity = 0);;
        
        Opal.def(self, '$log', $IsomorphicHelpers_log$7 = function $$log($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send($$($nesting, 'IsomorphicHelpers'), 'log', Opal.to_a(args));
        }, $IsomorphicHelpers_log$7.$$arity = -1);
        
        Opal.def(self, '$on_opal_server?', $IsomorphicHelpers_on_opal_server$ques$8 = function() {
          var self = this;

          return self.$class()['$on_opal_server?']()
        }, $IsomorphicHelpers_on_opal_server$ques$8.$$arity = 0);
        
        Opal.def(self, '$on_opal_client?', $IsomorphicHelpers_on_opal_client$ques$9 = function() {
          var self = this;

          return self.$class()['$on_opal_client?']()
        }, $IsomorphicHelpers_on_opal_client$ques$9.$$arity = 0);
        Opal.defs(self, '$prerender_footers', $IsomorphicHelpers_prerender_footers$10 = function $$prerender_footers(controller) {
          var $$11, self = this, footer = nil;

          
          
          if (controller == null) {
            controller = nil;
          };
          footer = $send($$($nesting, 'Context').$prerender_footer_blocks(), 'collect', [], ($$11 = function(block){var self = $$11.$$s == null ? this : $$11.$$s;

            
            
            if (block == null) {
              block = nil;
            };
            return block.$call(controller);}, $$11.$$s = self, $$11.$$arity = 1, $$11)).$join("\n");
          nil;
          return footer;
        }, $IsomorphicHelpers_prerender_footers$10.$$arity = -1);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Context');

          var $nesting = [self].concat($parent_nesting), $Context_define_isomorphic_method$12, $Context_before_first_mount_blocks$13, $Context_prerender_footer_blocks$14, $Context_initialize$15, $Context_load_opal_context$17, $Context_eval$18, $Context_send_to_opal$19, $Context_register_before_first_mount_block$21, $Context_register_prerender_footer_block$22;

          self.$$prototype.unique_id = self.$$prototype.cname = self.$$prototype.ctx = nil;
          
          self.$attr_reader("controller");
          self.$attr_reader("unique_id");
          Opal.defs(self, '$define_isomorphic_method', $Context_define_isomorphic_method$12 = function $$define_isomorphic_method(method_name) {
            var $iter = $Context_define_isomorphic_method$12.$$p, block = $iter || nil, $a, self = this, $ret_or_5 = nil, $writer = nil;

            if ($iter) $Context_define_isomorphic_method$12.$$p = null;
            
            
            if ($iter) $Context_define_isomorphic_method$12.$$p = null;;
            $class_variable_set($nesting[0], '@@ctx_methods', (function() {if ($truthy((($a = $nesting[0].$$cvars['@@ctx_methods'], $a != null) ? 'class variable' : nil))) {
              
              if ($truthy(($ret_or_5 = $class_variable_get($nesting[0], '@@ctx_methods', false)))) {
                return $ret_or_5
              } else {
                return $hash2([], {})
              };
            } else {
              return $hash2([], {})
            }; return nil; })());
            
            $writer = [method_name, block];
            $send($class_variable_get($nesting[0], '@@ctx_methods', false), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, $Context_define_isomorphic_method$12.$$arity = 1);
          Opal.defs(self, '$before_first_mount_blocks', $Context_before_first_mount_blocks$13 = function $$before_first_mount_blocks() {
            var self = this, $ret_or_6 = nil;
            if (self.before_first_mount_blocks == null) self.before_first_mount_blocks = nil;

            return (self.before_first_mount_blocks = (function() {if ($truthy(($ret_or_6 = self.before_first_mount_blocks))) {
              return $ret_or_6
            } else {
              return []
            }; return nil; })())
          }, $Context_before_first_mount_blocks$13.$$arity = 0);
          Opal.defs(self, '$prerender_footer_blocks', $Context_prerender_footer_blocks$14 = function $$prerender_footer_blocks() {
            var self = this, $ret_or_7 = nil;
            if (self.prerender_footer_blocks == null) self.prerender_footer_blocks = nil;

            return (self.prerender_footer_blocks = (function() {if ($truthy(($ret_or_7 = self.prerender_footer_blocks))) {
              return $ret_or_7
            } else {
              return []
            }; return nil; })())
          }, $Context_prerender_footer_blocks$14.$$arity = 0);
          
          Opal.def(self, '$initialize', $Context_initialize$15 = function $$initialize(unique_id, ctx, controller, cname) {
            var $$16, self = this;

            
            
            if (ctx == null) {
              ctx = nil;
            };
            
            if (controller == null) {
              controller = nil;
            };
            
            if (cname == null) {
              cname = nil;
            };
            self.unique_id = unique_id;
            self.cname = cname;
            nil;
            $$$($$$($$($nesting, 'Hyperstack'), 'Application'), 'Boot').$run($hash2(["context"], {"context": self}));
            return $send(self.$class().$before_first_mount_blocks(), 'each', [], ($$16 = function(block){var self = $$16.$$s == null ? this : $$16.$$s;

              
              
              if (block == null) {
                block = nil;
              };
              return block.$call(self);}, $$16.$$s = self, $$16.$$arity = 1, $$16));
          }, $Context_initialize$15.$$arity = -2);
          
          Opal.def(self, '$load_opal_context', $Context_load_opal_context$17 = function $$load_opal_context() {
            var self = this;

            return self.$send_to_opal("load_context", self.unique_id, self.cname)
          }, $Context_load_opal_context$17.$$arity = 0);
          
          Opal.def(self, '$eval', $Context_eval$18 = function(js) {
            var self = this;

            if ($truthy(self.ctx)) {
              return self.ctx.$eval(js)
            } else {
              return nil
            }
          }, $Context_eval$18.$$arity = 1);
          
          Opal.def(self, '$send_to_opal', $Context_send_to_opal$19 = function $$send_to_opal(method_name, $a) {
            var $post_args, args, $$20, self = this, method_args = nil;

            
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            if ($truthy(self.ctx)) {
            } else {
              return nil
            };
            $$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Rails'), 'ComponentLoader').$new(self.ctx)['$load!']();
            method_args = $send(args, 'collect', [], ($$20 = function(arg){var self = $$20.$$s == null ? this : $$20.$$s, quarg = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              quarg = ("" + (arg)).$tr("\"", "'");
              return "" + "\"" + (quarg) + "\"";}, $$20.$$s = self, $$20.$$arity = 1, $$20)).$join(", ");
            return self.ctx.$eval("" + "Opal.Hyperstack.$const_get('Component').$const_get('IsomorphicHelpers').$" + (method_name) + "(" + (method_args) + ")");
          }, $Context_send_to_opal$19.$$arity = -2);
          Opal.defs(self, '$register_before_first_mount_block', $Context_register_before_first_mount_block$21 = function $$register_before_first_mount_block() {
            var $iter = $Context_register_before_first_mount_block$21.$$p, block = $iter || nil, self = this;

            if ($iter) $Context_register_before_first_mount_block$21.$$p = null;
            
            
            if ($iter) $Context_register_before_first_mount_block$21.$$p = null;;
            return self.$before_first_mount_blocks()['$<<'](block);
          }, $Context_register_before_first_mount_block$21.$$arity = 0);
          return (Opal.defs(self, '$register_prerender_footer_block', $Context_register_prerender_footer_block$22 = function $$register_prerender_footer_block() {
            var $iter = $Context_register_prerender_footer_block$22.$$p, block = $iter || nil, self = this;

            if ($iter) $Context_register_prerender_footer_block$22.$$p = null;
            
            
            if ($iter) $Context_register_prerender_footer_block$22.$$p = null;;
            return self.$prerender_footer_blocks()['$<<'](block);
          }, $Context_register_prerender_footer_block$22.$$arity = 0), nil) && 'register_prerender_footer_block';
        })($nesting[0], null, $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'IsomorphicProcCall');

          var $nesting = [self].concat($parent_nesting), $IsomorphicProcCall_result$23, $IsomorphicProcCall_initialize$24, $IsomorphicProcCall_when_on_client$25, $IsomorphicProcCall_send_to_server$26, $IsomorphicProcCall_when_on_server$27;

          self.$$prototype.result = self.$$prototype.name = nil;
          
          self.$attr_reader("context");
          
          Opal.def(self, '$result', $IsomorphicProcCall_result$23 = function $$result() {
            var self = this;

            if ($truthy(self.result)) {
              return self.result.$first()
            } else {
              return nil
            }
          }, $IsomorphicProcCall_result$23.$$arity = 0);
          
          Opal.def(self, '$initialize', $IsomorphicProcCall_initialize$24 = function $$initialize(name, block, context, $a) {
            var $post_args, args, self = this, $ret_or_8 = nil;

            
            
            $post_args = Opal.slice.call(arguments, 3, arguments.length);
            
            args = $post_args;;
            self.name = name;
            self.context = context;
            $send(block, 'call', [self].concat(Opal.to_a(args)));
            return (self.result = (function() {if ($truthy(($ret_or_8 = self.result))) {
              return $ret_or_8
            } else {
              return $send(self, 'send_to_server', Opal.to_a(args))
            }; return nil; })());
          }, $IsomorphicProcCall_initialize$24.$$arity = -4);
          
          Opal.def(self, '$when_on_client', $IsomorphicProcCall_when_on_client$25 = function $$when_on_client() {
            var $iter = $IsomorphicProcCall_when_on_client$25.$$p, block = $iter || nil, self = this;

            if ($iter) $IsomorphicProcCall_when_on_client$25.$$p = null;
            
            
            if ($iter) $IsomorphicProcCall_when_on_client$25.$$p = null;;
            if ($truthy($$($nesting, 'IsomorphicHelpers')['$on_opal_client?']())) {
              return (self.result = [block.$call()])
            } else {
              return nil
            };
          }, $IsomorphicProcCall_when_on_client$25.$$arity = 0);
          
          Opal.def(self, '$send_to_server', $IsomorphicProcCall_send_to_server$26 = function $$send_to_server($a) {
            var $post_args, args, self = this, method_string = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            if ($truthy($$($nesting, 'IsomorphicHelpers')['$on_opal_server?']())) {
              
              method_string = $rb_plus($rb_plus($rb_plus($rb_plus("ServerSideIsomorphicMethod.", self.name), "("), args.$to_json()), ")");
              return (self.result = [$$($nesting, 'JSON').$parse(eval(method_string))]);
            } else {
              return nil
            };
          }, $IsomorphicProcCall_send_to_server$26.$$arity = -1);
          return (Opal.def(self, '$when_on_server', $IsomorphicProcCall_when_on_server$27 = function $$when_on_server() {
            var $iter = $IsomorphicProcCall_when_on_server$27.$$p, block = $iter || nil, self = this, $ret_or_9 = nil;

            if ($iter) $IsomorphicProcCall_when_on_server$27.$$p = null;
            
            
            if ($iter) $IsomorphicProcCall_when_on_server$27.$$p = null;;
            if ($truthy((function() {if ($truthy(($ret_or_9 = $$($nesting, 'IsomorphicHelpers')['$on_opal_client?']()))) {
              return $ret_or_9
            } else {
              return $$($nesting, 'IsomorphicHelpers')['$on_opal_server?']()
            }; return nil; })())) {
              return nil
            } else {
              return (self.result = [block.$call().$to_json()])
            };
          }, $IsomorphicProcCall_when_on_server$27.$$arity = 0), nil) && 'when_on_server';
        })($nesting[0], null, $nesting);
        return (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_on_opal_server$ques$28, $ClassMethods_on_opal_client$ques$29, $ClassMethods_log$30, $ClassMethods_controller$31, $ClassMethods_before_first_mount$32, $ClassMethods_prerender_footer$33, $ClassMethods_isomorphic_method$34;

          
          
          Opal.def(self, '$on_opal_server?', $ClassMethods_on_opal_server$ques$28 = function() {
            var self = this;

            return $$($nesting, 'IsomorphicHelpers')['$on_opal_server?']()
          }, $ClassMethods_on_opal_server$ques$28.$$arity = 0);
          
          Opal.def(self, '$on_opal_client?', $ClassMethods_on_opal_client$ques$29 = function() {
            var self = this;

            return $$($nesting, 'IsomorphicHelpers')['$on_opal_client?']()
          }, $ClassMethods_on_opal_client$ques$29.$$arity = 0);
          
          Opal.def(self, '$log', $ClassMethods_log$30 = function $$log($a) {
            var $post_args, args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send($$($nesting, 'IsomorphicHelpers'), 'log', Opal.to_a(args));
          }, $ClassMethods_log$30.$$arity = -1);
          
          Opal.def(self, '$controller', $ClassMethods_controller$31 = function $$controller() {
            var self = this;

            return $$($nesting, 'IsomorphicHelpers').$context().$controller()
          }, $ClassMethods_controller$31.$$arity = 0);
          
          Opal.def(self, '$before_first_mount', $ClassMethods_before_first_mount$32 = function $$before_first_mount() {
            var $iter = $ClassMethods_before_first_mount$32.$$p, block = $iter || nil, self = this;

            if ($iter) $ClassMethods_before_first_mount$32.$$p = null;
            
            
            if ($iter) $ClassMethods_before_first_mount$32.$$p = null;;
            return $send($$$($$($nesting, 'IsomorphicHelpers'), 'Context'), 'register_before_first_mount_block', [], block.$to_proc());
          }, $ClassMethods_before_first_mount$32.$$arity = 0);
          
          Opal.def(self, '$prerender_footer', $ClassMethods_prerender_footer$33 = function $$prerender_footer() {
            var $iter = $ClassMethods_prerender_footer$33.$$p, block = $iter || nil, self = this;

            if ($iter) $ClassMethods_prerender_footer$33.$$p = null;
            
            
            if ($iter) $ClassMethods_prerender_footer$33.$$p = null;;
            return $send($$$($$($nesting, 'IsomorphicHelpers'), 'Context'), 'register_prerender_footer_block', [], block.$to_proc());
          }, $ClassMethods_prerender_footer$33.$$arity = 0);
          return (Opal.def(self, '$isomorphic_method', $ClassMethods_isomorphic_method$34 = function $$isomorphic_method(name) {
            var $iter = $ClassMethods_isomorphic_method$34.$$p, block = $iter || nil, $$35, self = this;

            if ($iter) $ClassMethods_isomorphic_method$34.$$p = null;
            
            
            if ($iter) $ClassMethods_isomorphic_method$34.$$p = null;;
            return $send(self.$class(), 'send', ["define_method", name], ($$35 = function($a){var self = $$35.$$s == null ? this : $$35.$$s, $post_args, args;

              
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              return $send($$$($$($nesting, 'IsomorphicHelpers'), 'IsomorphicProcCall'), 'new', [name, block, self].concat(Opal.to_a(args))).$result();}, $$35.$$s = self, $$35.$$arity = -1, $$35));
          }, $ClassMethods_isomorphic_method$34.$$arity = 1), nil) && 'isomorphic_method';
        })($nesting[0], $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["active_support/core_ext/object/try"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$zero?', '$arity', '$instance_eval', '$public_send']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_try$1, $Object_try$excl$2;

    
    
    Opal.def(self, '$try', $Object_try$1 = function($a) {
      var $iter = $Object_try$1.$$p, b = $iter || nil, $post_args, a, self = this, $ret_or_1 = nil;

      if ($iter) $Object_try$1.$$p = null;
      
      
      if ($iter) $Object_try$1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      a = $post_args;;
      if ($truthy((function() {if ($truthy(($ret_or_1 = a['$empty?']()))) {
        return $ret_or_1
      } else {
        return self['$respond_to?'](a.$first())
      }; return nil; })())) {
        return $send(self, 'try!', Opal.to_a(a), b.$to_proc())
      } else {
        return nil
      };
    }, $Object_try$1.$$arity = -1);
    return (Opal.def(self, '$try!', $Object_try$excl$2 = function($a) {
      var $iter = $Object_try$excl$2.$$p, b = $iter || nil, $post_args, a, self = this, $ret_or_2 = nil;

      if ($iter) $Object_try$excl$2.$$p = null;
      
      
      if ($iter) $Object_try$excl$2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      a = $post_args;;
      if ($truthy((function() {if ($truthy(($ret_or_2 = a['$empty?']()))) {
        return (b !== nil)
      } else {
        return $ret_or_2
      }; return nil; })())) {
        if ($truthy(b.$arity()['$zero?']())) {
          return $send(self, 'instance_eval', [], b.$to_proc())
        } else {
          return Opal.yield1(b, self);
        }
      } else {
        return $send(self, 'public_send', Opal.to_a(a), b.$to_proc())
      };
    }, $Object_try$excl$2.$$arity = -1), nil) && 'try!';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_try$3, $NilClass_try$excl$4;

    
    
    Opal.def(self, '$try', $NilClass_try$3 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return nil;
    }, $NilClass_try$3.$$arity = -1);
    return (Opal.def(self, '$try!', $NilClass_try$excl$4 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return nil;
    }, $NilClass_try$excl$4.$$arity = -1), nil) && 'try!';
  })($nesting[0], null, $nesting);
};

Opal.modules["hyperstack/component/react_api"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$+', '$create_element', '$to_proc', '$raise', '$to_n', '$kind_of?', '$!', '$build']);
  
  self.$require("native");
  self.$require("active_support/core_ext/object/try");
  self.$require("hyperstack/internal/component/tags");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'ReactAPI');

        var $nesting = [self].concat($parent_nesting), $ReactAPI_html_tag$ques$1, $ReactAPI_html_attr$ques$2, $ReactAPI_create_element$3, $ReactAPI_render$4, $ReactAPI_is_valid_element$5, $ReactAPI_is_valid_element$ques$6, $ReactAPI_render_to_string$7, $ReactAPI_render_to_static_markup$9, $ReactAPI_unmount_component_at_node$11;

        
        Opal.const_set($nesting[0], 'ATTRIBUTES', $rb_plus(["accept", "acceptCharset", "accessKey", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoPlay", "cellPadding", "cellSpacing", "charSet", "checked", "classID", "className", "cols", "colSpan", "content", "contentEditable", "contextMenu", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "dir", "disabled", "download", "draggable", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "height", "hidden", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "label", "lang", "list", "loop", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "multiple", "muted", "name", "noValidate", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "readOnly", "rel", "required", "role", "rows", "rowSpan", "sandbox", "scope", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "spellCheck", "src", "srcDoc", "srcSet", "start", "step", "style", "tabIndex", "target", "title", "type", "useMap", "value", "width", "wmode", "dangerouslySetInnerHTML"], ["clipPath", "cx", "cy", "d", "dx", "dy", "fill", "fillOpacity", "fontFamily", "fontSize", "fx", "fy", "gradientTransform", "gradientUnits", "markerEnd", "markerMid", "markerStart", "offset", "opacity", "patternContentUnits", "patternUnits", "points", "preserveAspectRatio", "r", "rx", "ry", "spreadMethod", "stopColor", "stopOpacity", "stroke", "strokeDasharray", "strokeLinecap", "strokeOpacity", "strokeWidth", "textAnchor", "transform", "version", "viewBox", "x1", "x2", "x", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlSpace", "y1", "y2", "y"]));
        Opal.const_set($nesting[0], 'HASH_ATTRIBUTES', ["data", "aria"]);
        Opal.const_set($nesting[0], 'HTML_TAGS', $$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'HTML_TAGS'));
        Opal.defs(self, '$html_tag?', $ReactAPI_html_tag$ques$1 = function(name) {
          var self = this, tags = nil;

          
          tags = $$($nesting, 'HTML_TAGS');
          
          for(var i = 0; i < tags.length; i++) {
            if(tags[i] === name)
              return true;
          }
          return false;
        ;
        }, $ReactAPI_html_tag$ques$1.$$arity = 1);
        Opal.defs(self, '$html_attr?', $ReactAPI_html_attr$ques$2 = function(name) {
          var self = this, attrs = nil;

          
          attrs = $$($nesting, 'ATTRIBUTES');
          
          for(var i = 0; i < attrs.length; i++) {
            if(attrs[i] === name)
              return true;
          }
          return false;
        ;
        }, $ReactAPI_html_attr$ques$2.$$arity = 1);
        Opal.defs(self, '$create_element', $ReactAPI_create_element$3 = function $$create_element(type, $a) {
          var $iter = $ReactAPI_create_element$3.$$p, block = $iter || nil, $post_args, properties, self = this;

          if ($iter) $ReactAPI_create_element$3.$$p = null;
          
          
          if ($iter) $ReactAPI_create_element$3.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          properties = $post_args;;
          return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper'), 'create_element', [type].concat(Opal.to_a(properties)), block.$to_proc());
        }, $ReactAPI_create_element$3.$$arity = -2);
        Opal.defs(self, '$render', $ReactAPI_render$4 = function $$render(element, container) {
          var $iter = $ReactAPI_render$4.$$p, $yield = $iter || nil, self = this, cb = nil, native$ = nil;

          if ($iter) $ReactAPI_render$4.$$p = null;
          
          if ($truthy(typeof ReactDOM === 'undefined')) {
            self.$raise("ReactDOM.render is not defined.  In React >= v15 you must import it with ReactDOM")};
          container = container.$$class ? container[0] : container;
          if (($yield !== nil)) {
            
            cb = 
            function(){
              setTimeout(function(){
                Opal.yieldX($yield, [])
              }, 0)
            }
          ;
            native$ = ReactDOM.render(element.$to_n(), container, cb);
          } else {
            native$ = ReactDOM.render(element.$to_n(), container)
          };
          if ($truthy(native$ !== null)) {
          } else {
            return nil
          };
          if ($truthy(native$.__opalInstance !== undefined && native$.__opalInstance !== null)) {
            return native$.__opalInstance
          } else if ($truthy(ReactDOM.findDOMNode !== undefined && native$.nodeType === undefined)) {
            return ReactDOM.findDOMNode(native$)
          } else {
            return native$
          };
        }, $ReactAPI_render$4.$$arity = 2);
        Opal.defs(self, '$is_valid_element', $ReactAPI_is_valid_element$5 = function $$is_valid_element(element) {
          var self = this, $ret_or_1 = nil;

          
           console.error("Warning: `is_valid_element` is deprecated in favor of `is_valid_element?`.");;
          if ($truthy(($ret_or_1 = element['$kind_of?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element'))))) {
            return React.isValidElement(element.$to_n())
          } else {
            return $ret_or_1
          };
        }, $ReactAPI_is_valid_element$5.$$arity = 1);
        Opal.defs(self, '$is_valid_element?', $ReactAPI_is_valid_element$ques$6 = function(element) {
          var self = this, $ret_or_2 = nil;

          if ($truthy(($ret_or_2 = element['$kind_of?']($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'Element'))))) {
            return React.isValidElement(element.$to_n())
          } else {
            return $ret_or_2
          }
        }, $ReactAPI_is_valid_element$ques$6.$$arity = 1);
        Opal.defs(self, '$render_to_string', $ReactAPI_render_to_string$7 = function $$render_to_string(element) {
          var $$8, self = this;

          
           console.error("Warning: `Hyperstack::Component::ReactAPI.render_to_string` is deprecated in favor of `React::Server.render_to_string`.");;
          if ($truthy((typeof ReactDOMServer === 'undefined')['$!']())) {
            return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'build', [], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

              return ReactDOMServer.renderToString(element.$to_n())}, $$8.$$s = self, $$8.$$arity = 0, $$8))
          } else {
            return self.$raise("renderToString is not defined.  In React >= v15 you must import it with ReactDOMServer")
          };
        }, $ReactAPI_render_to_string$7.$$arity = 1);
        Opal.defs(self, '$render_to_static_markup', $ReactAPI_render_to_static_markup$9 = function $$render_to_static_markup(element) {
          var $$10, self = this;

          
           console.error("Warning: `Hyperstack::Component::ReactAPI.render_to_static_markup` is deprecated in favor of `React::Server.render_to_static_markup`.");;
          if ($truthy((typeof ReactDOMServer === 'undefined')['$!']())) {
            return $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'build', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

              return ReactDOMServer.renderToStaticMarkup(element.$to_n())}, $$10.$$s = self, $$10.$$arity = 0, $$10))
          } else {
            return self.$raise("renderToStaticMarkup is not defined.  In React >= v15 you must import it with ReactDOMServer")
          };
        }, $ReactAPI_render_to_static_markup$9.$$arity = 1);
        return (Opal.defs(self, '$unmount_component_at_node', $ReactAPI_unmount_component_at_node$11 = function $$unmount_component_at_node(node) {
          var self = this;

          if ($truthy((typeof ReactDOM === 'undefined')['$!']())) {
            return ReactDOM.unmountComponentAtNode(node.$$class ? node[0] : node);
          } else {
            return self.$raise("unmountComponentAtNode is not defined.  In React >= v15 you must import it with ReactDOM")
          }
        }, $ReactAPI_unmount_component_at_node$11.$$arity = 1), nil) && 'unmount_component_at_node';
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/internal/component/top_level_rails_component"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$export_component', '$param', '$backtrace', '$top_level_render', '$start_with?', '$<<', '$const_get', '$each', '$search_path', '$class', '$name', '$!=', '$method_defined?', '$render', '$raise', '$join', '$search_path=', '$-', '$!', '$include?', '$add_to_react_search_path']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'TopLevelRailsComponent');

          var $nesting = [self].concat($parent_nesting), $TopLevelRailsComponent_search_path$1, $TopLevelRailsComponent_allow_deprecated_render_definition$ques$2, $TopLevelRailsComponent_render$3, $TopLevelRailsComponent_top_level_render$4;

          self.$$prototype.ComponentName = self.$$prototype.RenderParams = self.$$prototype.Controller = nil;
          
          self.$include($$$($$($nesting, 'Hyperstack'), 'Component'));
          Opal.defs(self, '$search_path', $TopLevelRailsComponent_search_path$1 = function $$search_path() {
            var self = this, $ret_or_1 = nil;
            if (self.search_path == null) self.search_path = nil;

            return (self.search_path = (function() {if ($truthy(($ret_or_1 = self.search_path))) {
              return $ret_or_1
            } else {
              return [$$($nesting, 'Object')]
            }; return nil; })())
          }, $TopLevelRailsComponent_search_path$1.$$arity = 0);
          self.$export_component();
          self.$param("component_name");
          self.$param("controller");
          self.$param("render_params");
          self.$backtrace("off");
          Opal.defs(self, '$allow_deprecated_render_definition?', $TopLevelRailsComponent_allow_deprecated_render_definition$ques$2 = function() {
            var self = this;

            return true
          }, $TopLevelRailsComponent_allow_deprecated_render_definition$ques$2.$$arity = 0);
          
          Opal.def(self, '$render', $TopLevelRailsComponent_render$3 = function $$render() {
            var self = this;

            return self.$top_level_render()
          }, $TopLevelRailsComponent_render$3.$$arity = 0);
          return (Opal.def(self, '$top_level_render', $TopLevelRailsComponent_top_level_render$4 = function $$top_level_render() {
            var $$5, $$6, self = this, paths_searched = nil, component = nil, $ret_or_2 = nil;

            
            paths_searched = [];
            component = nil;
            if ($truthy(self.ComponentName['$start_with?']("::"))) {
              
              paths_searched['$<<'](self.ComponentName);
              component = (function() { try {
                return $$($nesting, 'Object').$const_get(self.ComponentName)
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'NameError')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception(); }
                } else { throw $err; }
              }})();
            } else {
              
              (function(){var $brk = Opal.new_brk(); try {return $send(self.$class().$search_path(), 'each', [], ($$5 = function(scope){var self = $$5.$$s == null ? this : $$5.$$s;
                if (self.Controller == null) self.Controller = nil;
                if (self.ComponentName == null) self.ComponentName = nil;

                
                
                if (scope == null) {
                  scope = nil;
                };
                paths_searched['$<<']("" + (scope.$name()) + "::" + (self.Controller) + "::" + (self.ComponentName));
                component = (function() { try {
                  return scope.$const_get(self.Controller, false).$const_get(self.ComponentName, false)
                } catch ($err) {
                  if (Opal.rescue($err, [$$($nesting, 'NameError')])) {
                    try {
                      return nil
                    } finally { Opal.pop_exception(); }
                  } else { throw $err; }
                }})();
                if ($truthy(component['$!='](nil))) {
                  
                  Opal.brk(nil, $brk)
                } else {
                  return nil
                };}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 1, $$5))
              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
              if ($truthy(component)) {
              } else {
                (function(){var $brk = Opal.new_brk(); try {return $send(self.$class().$search_path(), 'each', [], ($$6 = function(scope){var self = $$6.$$s == null ? this : $$6.$$s;
                  if (self.ComponentName == null) self.ComponentName = nil;

                  
                  
                  if (scope == null) {
                    scope = nil;
                  };
                  paths_searched['$<<']("" + (scope.$name()) + "::" + (self.ComponentName));
                  component = (function() { try {
                    return scope.$const_get(self.ComponentName, false)
                  } catch ($err) {
                    if (Opal.rescue($err, [$$($nesting, 'NameError')])) {
                      try {
                        return nil
                      } finally { Opal.pop_exception(); }
                    } else { throw $err; }
                  }})();
                  if ($truthy(component['$!='](nil))) {
                    
                    Opal.brk(nil, $brk)
                  } else {
                    return nil
                  };}, $$6.$$s = self, $$6.$$brk = $brk, $$6.$$arity = 1, $$6))
                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
              };
            };
            if ($truthy((function() {if ($truthy(($ret_or_2 = component))) {
              return component['$method_defined?']("render")
            } else {
              return $ret_or_2
            }; return nil; })())) {
              return $$($nesting, 'RenderingContext').$render(component, self.RenderParams)};
            return self.$raise("" + "Could not find component class '" + (self.ComponentName) + "' for @Controller '" + (self.Controller) + "' in any component directory. Tried [" + (paths_searched.$join(", ")) + "]");
          }, $TopLevelRailsComponent_top_level_render$4.$$arity = 0), nil) && 'top_level_render';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_add_to_react_search_path$7;

    return (Opal.def(self, '$add_to_react_search_path', $Module_add_to_react_search_path$7 = function $$add_to_react_search_path(replace_search_path) {
      var self = this, $writer = nil;

      
      
      if (replace_search_path == null) {
        replace_search_path = nil;
      };
      if ($truthy(replace_search_path)) {
        
        $writer = [[self]];
        $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent'), 'search_path=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      } else if ($truthy($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent').$search_path()['$include?'](self)['$!']())) {
        return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent').$search_path()['$<<'](self)
      } else {
        return nil
      };
    }, $Module_add_to_react_search_path$7.$$arity = -1), nil) && 'add_to_react_search_path'
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Components');

    var $nesting = [self].concat($parent_nesting);

    return self.$add_to_react_search_path()
  })($nesting[0], $nesting);
};

Opal.modules["hyperstack/component/while_loading"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$WhileLoadingWrapper', '$!', '$on_opal_client?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'WhileLoading');

        var $nesting = [self].concat($parent_nesting), $WhileLoading___hyperstack_component_rescue_wrapper$1, $WhileLoading_resources_loading$ques$2, $WhileLoading_resources_loaded$ques$3;

        
        
        Opal.def(self, '$__hyperstack_component_rescue_wrapper', $WhileLoading___hyperstack_component_rescue_wrapper$1 = function $$__hyperstack_component_rescue_wrapper(child) {
          var self = this;

          return $$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component').$WhileLoadingWrapper($hash2(["child", "children_elements"], {"child": self, "children_elements": child}))
        }, $WhileLoading___hyperstack_component_rescue_wrapper$1.$$arity = 1);
        
        Opal.def(self, '$resources_loading?', $WhileLoading_resources_loading$ques$2 = function() {
          var self = this;
          if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

          return self.__hyperstack_while_loading_waiting_on_resources
        }, $WhileLoading_resources_loading$ques$2.$$arity = 0);
        
        Opal.def(self, '$resources_loaded?', $WhileLoading_resources_loaded$ques$3 = function() {
          var self = this;
          if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

          return self.__hyperstack_while_loading_waiting_on_resources['$!']()
        }, $WhileLoading_resources_loaded$ques$3.$$arity = 0);
        if ($truthy($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers')['$on_opal_client?']())) {
          
          function onError(event) {
            if (event.message.match(/^Uncaught NotQuiet: /)) event.preventDefault();
          }

          window.addEventListener('error', onError);
         
        } else {
          return nil
        };
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/component/free_render"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $alias = Opal.alias, $truthy = Opal.truthy;

  Opal.add_stubs(['$instance_eval', '$const_defined?', '$const_get', '$is_a?', '$method_defined?', '$include?', '$render', '$to_proc', '$hyperstack_component_original_meth_missing']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'FreeRender');

        var $nesting = [self].concat($parent_nesting), $FreeRender_included$1;

        return (Opal.defs(self, '$included', $FreeRender_included$1 = function $$included(base) {
          var $$2, self = this;

          return $send(base, 'instance_eval', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $method_missing$3;

            
            $alias(self, "hyperstack_component_original_meth_missing", "method_missing");
            return (Opal.def(self, '$method_missing', $method_missing$3 = function $$method_missing(name, $a) {
              var $iter = $method_missing$3.$$p, block = $iter || nil, $post_args, args, self = this, $ret_or_1 = nil, $ret_or_2 = nil, klass = nil, $ret_or_3 = nil, $ret_or_4 = nil;

              if ($iter) $method_missing$3.$$p = null;
              
              
              if ($iter) $method_missing$3.$$p = null;;
              
              $post_args = Opal.slice.call(arguments, 1, arguments.length);
              
              args = $post_args;;
              if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self['$const_defined?'](name)))) {
                
                return (klass = self.$const_get(name));
              } else {
                return $ret_or_2
              }; return nil; })()))) {
                
                if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = klass['$is_a?']($$($nesting, 'Class'))))) {
                  return klass['$method_defined?']("render")
                } else {
                  return $ret_or_4
                }; return nil; })()))) {
                  return $ret_or_3
                } else {
                  return $$$($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'HTML_TAGS')['$include?'](klass)
                };
              } else {
                return $ret_or_1
              }; return nil; })())) {
                return $send(self, 'render', [klass].concat(Opal.to_a(args)), block.$to_proc())
              } else {
                return $send(self, 'hyperstack_component_original_meth_missing', [name].concat(Opal.to_a(args)), block.$to_proc())
              };
            }, $method_missing$3.$$arity = -2), nil) && 'method_missing';}, $$2.$$s = self, $$2.$$arity = 0, $$2))
        }, $FreeRender_included$1.$$arity = 1), nil) && 'included'
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/rescue_wrapper"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$param', '$render', '$call', '$attr_accessor', '$RescueMetaWrapper', '$after_error', '$after_error_args', '$run_callback', '$after_error_args=', '$-', '$raise', '$force_update!']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'RescueMetaWrapper');

          var $nesting = [self].concat($parent_nesting), $RescueMetaWrapper$1;

          
          self.$include($$$($$($nesting, 'Hyperstack'), 'Component'));
          self.$param("children_elements");
          return $send(self, 'render', [], ($RescueMetaWrapper$1 = function(){var self = $RescueMetaWrapper$1.$$s == null ? this : $RescueMetaWrapper$1.$$s;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

            return self.ChildrenElements.$call()}, $RescueMetaWrapper$1.$$s = self, $RescueMetaWrapper$1.$$arity = 0, $RescueMetaWrapper$1));
        })($nesting[0], null, $nesting);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'RescueWrapper');

          var $nesting = [self].concat($parent_nesting), $RescueWrapper$2, $RescueWrapper$3;

          
          (function(self, $parent_nesting) {
            var $nesting = [self].concat($parent_nesting);

            return self.$attr_accessor("after_error_args")
          })(Opal.get_singleton_class(self), $nesting);
          self.$include($$$($$($nesting, 'Hyperstack'), 'Component'));
          self.$param("child");
          self.$param("children_elements");
          $send(self, 'render', [], ($RescueWrapper$2 = function(){var self = $RescueWrapper$2.$$s == null ? this : $RescueWrapper$2.$$s;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

            return self.$RescueMetaWrapper($hash2(["children_elements"], {"children_elements": self.ChildrenElements}))}, $RescueWrapper$2.$$s = self, $RescueWrapper$2.$$arity = 0, $RescueWrapper$2));
          return $send(self, 'after_error', [], ($RescueWrapper$3 = function(error, info){var self = $RescueWrapper$3.$$s == null ? this : $RescueWrapper$3.$$s, $a, $b, args = nil, $ret_or_1 = nil, found = nil, $writer = nil;
            if (self.Child == null) self.Child = nil;

            
            
            if (error == null) {
              error = nil;
            };
            
            if (info == null) {
              info = nil;
            };
            args = (function() {if ($truthy(($ret_or_1 = $$($nesting, 'RescueWrapper').$after_error_args()))) {
              return $ret_or_1
            } else {
              return [error, info]
            }; return nil; })();
            $b = $send(self.Child, 'run_callback', ["__hyperstack_component_rescue_hook", found].concat(Opal.to_a(args))), $a = Opal.to_ary($b), (found = ($a[0] == null ? nil : $a[0])), $b;
            if ($truthy(found)) {
            } else {
              
              
              $writer = [args];
              $send($$($nesting, 'RescueWrapper'), 'after_error_args=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.$raise(error);
            };
            return self.Child['$force_update!']();}, $RescueWrapper$3.$$s = self, $RescueWrapper$3.$$arity = 2, $RescueWrapper$3));
        })($nesting[0], null, $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/component/while_loading_wrapper"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$render', '$!', '$quiet?', '$raise_if_not_quiet=', '$-', '$instance_eval', '$mutate', '$RescueMetaWrapper', '$before_mount', '$rescues', '$class', '$instance_variable_set']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Component');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'WhileLoadingWrapper');

          var $nesting = [self].concat($parent_nesting), $WhileLoadingWrapper$1, $WhileLoadingWrapper$3;

          
          $send(self, 'render', [], ($WhileLoadingWrapper$1 = function(){var self = $WhileLoadingWrapper$1.$$s == null ? this : $WhileLoadingWrapper$1.$$s, $$2, $ret_or_1 = nil, $writer = nil;
            if (self.waiting_on_resources == null) self.waiting_on_resources = nil;
            if (self.Child == null) self.Child = nil;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

            
            if ($truthy((function() {if ($truthy(($ret_or_1 = self.waiting_on_resources))) {
              return self['$quiet?']()['$!']()
            } else {
              return $ret_or_1
            }; return nil; })())) {
              
              $writer = [false];
              $send($$($nesting, 'RenderingContext'), 'raise_if_not_quiet=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            } else {
              
              self.waiting_on_resources = false;
              $send(self.Child, 'instance_eval', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;
                if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

                
                if ($truthy(self.__hyperstack_while_loading_waiting_on_resources)) {
                  self.$mutate()};
                return (self.__hyperstack_while_loading_waiting_on_resources = false);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
              
              $writer = [true];
              $send($$($nesting, 'RenderingContext'), 'raise_if_not_quiet=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            return self.$RescueMetaWrapper($hash2(["children_elements"], {"children_elements": self.ChildrenElements}));}, $WhileLoadingWrapper$1.$$s = self, $WhileLoadingWrapper$1.$$arity = 0, $WhileLoadingWrapper$1));
          return $send(self, 'before_mount', [], ($WhileLoadingWrapper$3 = function(){var self = $WhileLoadingWrapper$3.$$s == null ? this : $WhileLoadingWrapper$3.$$s, $$4, wrapper = nil;
            if (self.Child == null) self.Child = nil;

            
            wrapper = self;
            return $send(self.Child.$class(), 'rescues', [$$$($$($nesting, 'RenderingContext'), 'NotQuiet')], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

              
              wrapper.$instance_variable_set("@waiting_on_resources", true);
              return (self.__hyperstack_while_loading_waiting_on_resources = true);}, $$4.$$s = self, $$4.$$arity = 0, $$4));}, $WhileLoadingWrapper$3.$$s = self, $WhileLoadingWrapper$3.$$arity = 0, $WhileLoadingWrapper$3));
        })($nesting[0], $$($nesting, 'RescueWrapper'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/component/version"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Component');

      var $nesting = [self].concat($parent_nesting);

      return Opal.const_set($nesting[0], 'VERSION', "1.0.alpha1.8")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyper-component"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$js_import', '$import']);
  
  self.$require("hyperstack/internal/component");
  $$($nesting, 'Hyperstack').$js_import("react/react-source-browser", $hash2(["client_only", "defines"], {"client_only": true, "defines": ["ReactDOM", "React"]}));
  $$($nesting, 'Hyperstack').$js_import("react/react-source-server", $hash2(["server_only", "defines"], {"server_only": true, "defines": "React"}));
  $$($nesting, 'Hyperstack').$import("browser/delay", $hash2(["client_only"], {"client_only": true}));
  $$($nesting, 'Hyperstack').$import("browser/interval", $hash2(["client_only"], {"client_only": true}));
  $$($nesting, 'Hyperstack').$js_import("react_ujs", $hash2(["defines"], {"defines": "ReactRailsUJS"}));
  $$($nesting, 'Hyperstack').$import("hyper-component");
  $$($nesting, 'Hyperstack').$import("hyperstack/component/auto-import");
  
  self.$require("hyperstack/internal/callbacks");
  self.$require("hyperstack/internal/auto_unmount");
  self.$require("native");
  self.$require("json");
  self.$require("hyperstack/state/observer");
  self.$require("hyperstack/internal/component/validator");
  self.$require("hyperstack/component/element");
  self.$require("hyperstack/internal/component/react_wrapper");
  self.$require("hyperstack/component");
  self.$require("hyperstack/internal/component/should_component_update");
  self.$require("hyperstack/internal/component/tags");
  self.$require("hyperstack/component/event");
  self.$require("hyperstack/internal/component/rendering_context");
  self.$require("hyperstack/ext/component/object");
  self.$require("hyperstack/ext/component/kernel");
  self.$require("hyperstack/ext/component/number");
  self.$require("hyperstack/ext/component/boolean");
  self.$require("hyperstack/ext/component/array");
  self.$require("hyperstack/ext/component/enumerable");
  self.$require("hyperstack/ext/component/time");
  self.$require("hyperstack/component/isomorphic_helpers");
  self.$require("hyperstack/component/react_api");
  self.$require("hyperstack/internal/component/top_level_rails_component");
  self.$require("hyperstack/component/while_loading");
  self.$require("hyperstack/component/free_render");
  self.$require("hyperstack/internal/component/rescue_wrapper");
  self.$require("hyperstack/internal/component/while_loading_wrapper");
  return self.$require("hyperstack/component/version");;
};

Opal.modules["react/router"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$imports']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'React');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Router');

      var $nesting = [self].concat($parent_nesting);

      return self.$imports("ReactRouter")
    })($nesting[0], $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'NativeLibrary'), $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["react/router/dom"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$imports']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'React');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Router');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DOM');

        var $nesting = [self].concat($parent_nesting);

        return self.$imports("ReactRouterDOM")
      })($nesting[0], $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'NativeLibrary'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["react/router/history"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$new', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'React');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Router');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'History');

        var $nesting = [self].concat($parent_nesting), $History_current$1, $History_initialize$2, $History_to_n$3;

        self.$$prototype["native"] = nil;
        
        self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
        Opal.defs(self, '$current', $History_current$1 = function $$current() {
          var self = this;

          return self.$new(History)
        }, $History_current$1.$$arity = 0);
        
        Opal.def(self, '$initialize', $History_initialize$2 = function $$initialize(native$) {
          var self = this;

          return (self["native"] = native$)
        }, $History_initialize$2.$$arity = 1);
        
        Opal.def(self, '$to_n', $History_to_n$3 = function $$to_n() {
          var self = this;

          return self["native"]
        }, $History_to_n$3.$$arity = 0);
        self.$alias_native("create_browser_history", "createBrowserHistory");
        self.$alias_native("create_hash_history", "createHashHistory");
        self.$alias_native("create_location", "createLocation");
        self.$alias_native("create_memory_history", "createMemoryHistory");
        return self.$alias_native("create_path", "createPath");
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/router/isomorphic_methods"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$prerender_footer', '$on_opal_server?', '$new', '$[]', '$raise', '$isomorphic_method', '$when_on_client', '$send_to_server', '$when_on_server', '$fullpath', '$request', '$controller', '$context']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Router');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'IsomorphicMethods');

          var $nesting = [self].concat($parent_nesting), $IsomorphicMethods_ctx$1, $IsomorphicMethods$2, $IsomorphicMethods$3;

          
          self.$include($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers'));
          Opal.defs(self, '$ctx', $IsomorphicMethods_ctx$1 = function $$ctx() {
            var self = this, $ret_or_1 = nil;
            if (self.ctx == null) self.ctx = nil;

            return (self.ctx = (function() {if ($truthy(($ret_or_1 = self.ctx))) {
              return $ret_or_1
            } else {
              return {};
            }; return nil; })())
          }, $IsomorphicMethods_ctx$1.$$arity = 0);
          $send(self, 'prerender_footer', [], ($IsomorphicMethods$2 = function(_controller){var self = $IsomorphicMethods$2.$$s == null ? this : $IsomorphicMethods$2.$$s, ctx_as_hash = nil;
            if (self.ctx == null) self.ctx = nil;

            
            
            if (_controller == null) {
              _controller = nil;
            };
            if ($truthy(self['$on_opal_server?']())) {
            } else {
              return nil;
            };
            ctx_as_hash = $$($nesting, 'Hash').$new(self.ctx);
            self.ctx = {};
            if ($truthy(ctx_as_hash['$[]']("url"))) {
              return self.$raise("" + "Hyperstack::Internal::Component::Redirect " + (ctx_as_hash['$[]']("url")) + " status: " + (ctx_as_hash['$[]']("status")))
            } else {
              return nil
            };}, $IsomorphicMethods$2.$$s = self, $IsomorphicMethods$2.$$arity = 1, $IsomorphicMethods$2));
          return $send(self, 'isomorphic_method', ["request_fullpath"], ($IsomorphicMethods$3 = function(f){var self = $IsomorphicMethods$3.$$s == null ? this : $IsomorphicMethods$3.$$s, $$4, $$5;

            
            
            if (f == null) {
              f = nil;
            };
            $send(f, 'when_on_client', [], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

              return window.location.pathname;}, $$4.$$s = self, $$4.$$arity = 0, $$4));
            f.$send_to_server();
            return $send(f, 'when_on_server', [], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

              return f.$context().$controller().$request().$fullpath()}, $$5.$$s = self, $$5.$$arity = 0, $$5));}, $IsomorphicMethods$3.$$s = self, $IsomorphicMethods$3.$$arity = 1, $IsomorphicMethods$3));
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/router/history"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$new', '$native_block', '$to_n', '$native_listen', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Router');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'History');

        var $nesting = [self].concat($parent_nesting), $History_initialize$1, $History_to_n$2, $History_location$3, $History_block$4, $History_listen$6;

        self.$$prototype["native"] = nil;
        
        self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
        
        Opal.def(self, '$initialize', $History_initialize$1 = function $$initialize(native$) {
          var self = this;

          return (self["native"] = native$)
        }, $History_initialize$1.$$arity = 1);
        
        Opal.def(self, '$to_n', $History_to_n$2 = function $$to_n() {
          var self = this;

          return self["native"]
        }, $History_to_n$2.$$arity = 0);
        
        Opal.def(self, '$location', $History_location$3 = function $$location() {
          var self = this;

          return $$($nesting, 'Location').$new(self["native"].location)
        }, $History_location$3.$$arity = 0);
        
        Opal.def(self, '$block', $History_block$4 = function $$block(message) {
          var $$5, $iter = $History_block$4.$$p, $yield = $iter || nil, self = this;

          if ($iter) $History_block$4.$$p = null;
          
          
          if (message == null) {
            message = nil;
          };
          if ($truthy(message)) {
            return self.$native_block(message.$to_n())
          } else {
            return $send(self, 'native_block', [], ($$5 = function(location, action){var self = $$5.$$s == null ? this : $$5.$$s;

              
              
              if (location == null) {
                location = nil;
              };
              
              if (action == null) {
                action = nil;
              };
              return Opal.yieldX($yield, [$$($nesting, 'Location').$new(location), action]);;}, $$5.$$s = self, $$5.$$arity = 2, $$5))
          };
        }, $History_block$4.$$arity = -1);
        
        Opal.def(self, '$listen', $History_listen$6 = function $$listen() {
          var $$7, $iter = $History_listen$6.$$p, $yield = $iter || nil, self = this;

          if ($iter) $History_listen$6.$$p = null;
          return $send(self, 'native_listen', [], ($$7 = function(location, action){var self = $$7.$$s == null ? this : $$7.$$s;

            
            
            if (location == null) {
              location = nil;
            };
            
            if (action == null) {
              action = nil;
            };
            return Opal.yieldX($yield, [$$($nesting, 'Location').$new(location), action]);;}, $$7.$$s = self, $$7.$$arity = 2, $$7))
        }, $History_listen$6.$$arity = 0);
        self.$alias_native("action");
        self.$alias_native("native_block", "block");
        self.$alias_native("create_href", "createHref");
        self.$alias_native("entries");
        self.$alias_native("go");
        self.$alias_native("go_back", "goBack");
        self.$alias_native("go_forward", "goForward");
        self.$alias_native("index");
        self.$alias_native("length");
        self.$alias_native("native_listen", "listen");
        self.$alias_native("push", "push");
        return self.$alias_native("replace", "replace");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/router/location"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$include', '$blank?', '$search', '$[]', '$map', '$split', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Router');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Location');

        var $nesting = [self].concat($parent_nesting), $Location_initialize$1, $Location_to_n$2, $Location_query$3;

        self.$$prototype["native"] = nil;
        
        self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
        
        Opal.def(self, '$initialize', $Location_initialize$1 = function $$initialize(native$) {
          var self = this;

          return (self["native"] = native$)
        }, $Location_initialize$1.$$arity = 1);
        
        Opal.def(self, '$to_n', $Location_to_n$2 = function $$to_n() {
          var self = this;

          return self["native"]
        }, $Location_to_n$2.$$arity = 0);
        
        Opal.def(self, '$query', $Location_query$3 = function $$query() {
          var $$4, self = this;

          
          if ($truthy(self.$search()['$blank?']())) {
            return $hash2([], {})};
          return $$($nesting, 'Hash')['$[]']($send(self.$search()['$[]']($range(1, -1, false)).$split("&"), 'map', [], ($$4 = function(part){var self = $$4.$$s == null ? this : $$4.$$s, $a, $b, name = nil, value = nil;

            
            
            if (part == null) {
              part = nil;
            };
            $b = part.$split("="), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
            return [decodeURIComponent(name), decodeURIComponent(value)];}, $$4.$$s = self, $$4.$$arity = 1, $$4)));
        }, $Location_query$3.$$arity = 0);
        self.$alias_native("pathname");
        self.$alias_native("search");
        self.$alias_native("hash");
        self.$alias_native("state");
        return self.$alias_native("key");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/router/match"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Router');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Match');

        var $nesting = [self].concat($parent_nesting), $Match_initialize$1, $Match_to_n$2;

        self.$$prototype["native"] = nil;
        
        self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
        
        Opal.def(self, '$initialize', $Match_initialize$1 = function $$initialize(native$) {
          var self = this;

          return (self["native"] = native$)
        }, $Match_initialize$1.$$arity = 1);
        
        Opal.def(self, '$to_n', $Match_to_n$2 = function $$to_n() {
          var self = this;

          return self["native"]
        }, $Match_to_n$2.$$arity = 0);
        self.$alias_native("params");
        self.$alias_native("is_exact", "isExact");
        self.$alias_native("path");
        return self.$alias_native("url");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/router/class_methods"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$positive?', '$count', '$first', '$send', '$new', '$to_n', '$history', '$private', '$create_browser_history', '$current', '$create_hash_history', '$create_memory_history']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Router');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_history$1, $ClassMethods_location$2, $ClassMethods_browser_history$3, $ClassMethods_hash_history$4, $ClassMethods_memory_history$5;

          
          
          Opal.def(self, '$history', $ClassMethods_history$1 = function $$history($a) {
            var $post_args, args, self = this, $ret_or_1 = nil;
            if (self.__history_type == null) self.__history_type = nil;
            if (self.__history == null) self.__history = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            if ($truthy(args.$count()['$positive?']())) {
              return (self.__history_type = args.$first())
            } else if ($truthy(self.__history_type)) {
              return (self.__history = (function() {if ($truthy(($ret_or_1 = self.__history))) {
                return $ret_or_1
              } else {
                return self.$send("" + (self.__history_type) + "_history")
              }; return nil; })())
            } else {
              return nil
            };
          }, $ClassMethods_history$1.$$arity = -1);
          
          Opal.def(self, '$location', $ClassMethods_location$2 = function $$location() {
            var self = this;

            return $$$($$$($$($nesting, 'Hyperstack'), 'Router'), 'Location').$new(self.$history().$to_n().location)
          }, $ClassMethods_location$2.$$arity = 0);
          self.$private();
          
          Opal.def(self, '$browser_history', $ClassMethods_browser_history$3 = function $$browser_history() {
            var self = this, $ret_or_2 = nil;
            if (self.__browser_history == null) self.__browser_history = nil;

            return (self.__browser_history = (function() {if ($truthy(($ret_or_2 = self.__browser_history))) {
              return $ret_or_2
            } else {
              return $$$($$$($$($nesting, 'React'), 'Router'), 'History').$current().$create_browser_history()
            }; return nil; })())
          }, $ClassMethods_browser_history$3.$$arity = 0);
          
          Opal.def(self, '$hash_history', $ClassMethods_hash_history$4 = function $$hash_history($a) {
            var $post_args, args, self = this, $ret_or_3 = nil;
            if (self.__hash_history == null) self.__hash_history = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return (self.__hash_history = (function() {if ($truthy(($ret_or_3 = self.__hash_history))) {
              return $ret_or_3
            } else {
              return $send($$$($$$($$($nesting, 'React'), 'Router'), 'History').$current(), 'create_hash_history', Opal.to_a(args))
            }; return nil; })());
          }, $ClassMethods_hash_history$4.$$arity = -1);
          return (Opal.def(self, '$memory_history', $ClassMethods_memory_history$5 = function $$memory_history($a) {
            var $post_args, args, self = this, $ret_or_4 = nil;
            if (self.__memory_history == null) self.__memory_history = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return (self.__memory_history = (function() {if ($truthy(($ret_or_4 = self.__memory_history))) {
              return $ret_or_4
            } else {
              return $send($$$($$$($$($nesting, 'React'), 'Router'), 'History').$current(), 'create_memory_history', Opal.to_a(args))
            }; return nil; })());
          }, $ClassMethods_memory_history$5.$$arity = -1), nil) && 'memory_history';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/router/helpers"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_n', '$tap', '$[]=', '$-', '$[]', '$delete', '$Link', '$to_proc', '$any?', '$&', '$keys', '$observed!', '$NavLink', '$ctx', '$Redirect', '$new', '$lambda', '$format_params', '$create_element', '$values', '$Route', '$Switch']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Router');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'Helpers');

          var $nesting = [self].concat($parent_nesting), $Helpers_Link$1, $Helpers_NavLink$3, $Helpers_Redirect$4, $Helpers_format_params$5, $Helpers_Route$6, $Helpers_Switch$9;

          
          
          Opal.def(self, '$Link', $Helpers_Link$1 = function $$Link(to, opts) {
            var $iter = $Helpers_Link$1.$$p, children = $iter || nil, $$2, self = this, $writer = nil;

            if ($iter) $Helpers_Link$1.$$p = null;
            
            
            if ($iter) $Helpers_Link$1.$$p = null;;
            
            if (opts == null) {
              opts = $hash2([], {});
            };
            
            $writer = ["to", $send($hash2([], {}), 'tap', [], ($$2 = function(hash){var self = $$2.$$s == null ? this : $$2.$$s;

              
              
              if (hash == null) {
                hash = nil;
              };
              
              $writer = ["pathname", to];
              $send(hash, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy(opts['$[]']("search"))) {
                
                $writer = ["search", opts.$delete("search")];
                $send(hash, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(opts['$[]']("hash"))) {
                
                $writer = ["hash", opts.$delete("hash")];
                $send(hash, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else {
                return nil
              };}, $$2.$$s = self, $$2.$$arity = 1, $$2)).$to_n()];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send($$$($$$($$($nesting, 'React'), 'Router'), 'DOM'), 'Link', [opts], children.$to_proc());
          }, $Helpers_Link$1.$$arity = -2);
          
          Opal.def(self, '$NavLink', $Helpers_NavLink$3 = function $$NavLink(to, opts) {
            var $iter = $Helpers_NavLink$3.$$p, children = $iter || nil, self = this, $writer = nil;

            if ($iter) $Helpers_NavLink$3.$$p = null;
            
            
            if ($iter) $Helpers_NavLink$3.$$p = null;;
            
            if (opts == null) {
              opts = $hash2([], {});
            };
            
            $writer = ["to", to.$to_n()];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(["active_class", "active_style", "active"]['$&'](opts.$keys())['$any?']())) {
              
              if ($truthy(opts['$[]']("active_class"))) {
                
                $writer = ["activeClassName", opts.$delete("active_class").$to_n()];
                $send(opts, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(opts['$[]']("active_style"))) {
                
                $writer = ["activeStyle", opts.$delete("active_style").$to_n()];
                $send(opts, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(opts['$[]']("active"))) {
                
                $writer = ["isActive", opts.$delete("active").$to_n()];
                $send(opts, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              $$$($$($nesting, 'State'), 'Mapper')['$observed!']($$$($$$($$($nesting, 'Hyperstack'), 'Router'), 'Location'));};
            return $send($$$($$$($$($nesting, 'React'), 'Router'), 'DOM'), 'NavLink', [opts], children.$to_proc());
          }, $Helpers_NavLink$3.$$arity = -2);
          
          Opal.def(self, '$Redirect', $Helpers_Redirect$4 = function $$Redirect(to, opts) {
            var self = this, $writer = nil, status = nil, $ret_or_1 = nil;

            
            
            if (opts == null) {
              opts = $hash2([], {});
            };
            
            $writer = ["to", to.$to_n()];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            status = opts.$delete("status");
            status = (function() {if ($truthy(($ret_or_1 = status))) {
              return $ret_or_1
            } else {
              return 302
            }; return nil; })();
            $$($nesting, 'IsomorphicMethods').$ctx().status = status;
            return $$$($$($nesting, 'React'), 'Router').$Redirect(opts);
          }, $Helpers_Redirect$4.$$arity = -2);
          
          Opal.def(self, '$format_params', $Helpers_format_params$5 = function $$format_params(e, $a) {
            var $post_args, $rest_arg, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            $rest_arg = $post_args;;
            return $hash2(["match", "location", "history"], {"match": $$$($$$($$($nesting, 'Hyperstack'), 'Router'), 'Match').$new(e.match), "location": $$$($$$($$($nesting, 'Hyperstack'), 'Router'), 'Location').$new(e.location), "history": $$$($$$($$($nesting, 'Hyperstack'), 'Router'), 'History').$new(e.history)});
          }, $Helpers_format_params$5.$$arity = -2);
          
          Opal.def(self, '$Route', $Helpers_Route$6 = function $$Route(to, opts) {
            var $iter = $Helpers_Route$6.$$p, block = $iter || nil, $$7, $$8, self = this, $writer = nil, component = nil;

            if ($iter) $Helpers_Route$6.$$p = null;
            
            
            if ($iter) $Helpers_Route$6.$$p = null;;
            
            if (opts == null) {
              opts = $hash2([], {});
            };
            $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper')['$observed!']($$$($$$($$($nesting, 'Hyperstack'), 'Router'), 'Location'));
            
            $writer = ["path", to.$to_n()];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(opts['$[]']("mounts"))) {
              
              component = opts.$delete("mounts");
              
              $writer = ["component", $send(self, 'lambda', [], ($$7 = function($a){var self = $$7.$$s == null ? this : $$7.$$s, $post_args, e, route_params = nil;

                
                
                $post_args = Opal.slice.call(arguments, 0, arguments.length);
                
                e = $post_args;;
                route_params = $send(self, 'format_params', Opal.to_a(e));
                return $$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'ReactAPI').$create_element(component, route_params).$to_n();}, $$7.$$s = self, $$7.$$arity = -1, $$7))];
              $send(opts, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            if ($truthy(block)) {
              
              $writer = ["render", $send(self, 'lambda', [], ($$8 = function($a){var self = $$8.$$s == null ? this : $$8.$$s, $post_args, e, route_params = nil;

                
                
                $post_args = Opal.slice.call(arguments, 0, arguments.length);
                
                e = $post_args;;
                route_params = $send(self, 'format_params', Opal.to_a(e));
                return Opal.yieldX(block, Opal.to_a(route_params.$values())).$to_n();}, $$8.$$s = self, $$8.$$arity = -1, $$8))];
              $send(opts, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            return $$$($$($nesting, 'React'), 'Router').$Route(opts);
          }, $Helpers_Route$6.$$arity = -2);
          return (Opal.def(self, '$Switch', $Helpers_Switch$9 = function $$Switch() {
            var $iter = $Helpers_Switch$9.$$p, children = $iter || nil, self = this;

            if ($iter) $Helpers_Switch$9.$$p = null;
            
            
            if ($iter) $Helpers_Switch$9.$$p = null;;
            return $send($$$($$($nesting, 'React'), 'Router'), 'Switch', [], children.$to_proc());
          }, $Helpers_Switch$9.$$arity = 0), nil) && 'Switch';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/internal/router/instance_methods"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$history', '$class', '$location']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Internal');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Router');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $parent_nesting) {
          var self = $module($base, 'InstanceMethods');

          var $nesting = [self].concat($parent_nesting), $InstanceMethods_history$1, $InstanceMethods_location$2;

          
          
          Opal.def(self, '$history', $InstanceMethods_history$1 = function $$history() {
            var self = this;

            return self.$class().$history()
          }, $InstanceMethods_history$1.$$arity = 0);
          return (Opal.def(self, '$location', $InstanceMethods_location$2 = function $$location() {
            var self = this;

            return self.$class().$location()
          }, $InstanceMethods_location$2.$$arity = 0), nil) && 'location';
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/router/helpers"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$class_eval', '$param']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Router');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Helpers');

        var $nesting = [self].concat($parent_nesting), $Helpers_match$1, $Helpers_location$2, $Helpers_history$3, $Helpers_included$4;

        
        
        Opal.def(self, '$match', $Helpers_match$1 = function $$match() {
          var self = this;
          if (self._match_param == null) self._match_param = nil;

          return self._match_param
        }, $Helpers_match$1.$$arity = 0);
        
        Opal.def(self, '$location', $Helpers_location$2 = function $$location() {
          var self = this;
          if (self._location_param == null) self._location_param = nil;

          return self._location_param
        }, $Helpers_location$2.$$arity = 0);
        
        Opal.def(self, '$history', $Helpers_history$3 = function $$history() {
          var self = this;
          if (self._history_param == null) self._history_param = nil;

          return self._history_param
        }, $Helpers_history$3.$$arity = 0);
        return (Opal.defs(self, '$included', $Helpers_included$4 = function $$included(base) {
          var $$5, self = this;

          
          base.$include($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Router'), 'Helpers'));
          return $send(base, 'class_eval', [], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

            
            self.$param("match", $hash2(["default", "alias"], {"default": nil, "alias": "_match_param"}));
            self.$param("location", $hash2(["default", "alias"], {"default": nil, "alias": "_location_param"}));
            return self.$param("history", $hash2(["default", "alias"], {"default": nil, "alias": "_history_param"}));}, $$5.$$s = self, $$5.$$arity = 0, $$5));
        }, $Helpers_included$4.$$arity = 1), nil) && 'included';
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["hyperstack/router"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $lambda = Opal.lambda, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$on_opal_server?', '$__hyperstack_prerender_router', '$to_proc', '$__hyperstack_render_router', '$instance_eval', '$is_a?', '$respond_to?', '$acts_as_string?', '$render', '$to_s', '$history', '$class', '$Router', '$to_n', '$__eval_block', '$split', '$request_fullpath', '$StaticRouter', '$ctx', '$extend', '$include', '$class_eval', '$location', '$after_mount', '$listen', '$mutated!', '$before_unmount', '$call']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Hyperstack');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Router');

      var $nesting = [self].concat($parent_nesting), $Router___hyperstack_router_wrapper$1, $Router___eval_block$4, $Router___hyperstack_render_router$6, $Router___hyperstack_prerender_router$9, $Router_included$12;

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NoHistoryError');

        var $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], $$($nesting, 'StandardError'), $nesting);
      
      Opal.def(self, '$__hyperstack_router_wrapper', $Router___hyperstack_router_wrapper$1 = function $$__hyperstack_router_wrapper() {
        var $iter = $Router___hyperstack_router_wrapper$1.$$p, block = $iter || nil, $$2, $$3, self = this;

        if ($iter) $Router___hyperstack_router_wrapper$1.$$p = null;
        
        
        if ($iter) $Router___hyperstack_router_wrapper$1.$$p = null;;
        if ($truthy($$$($$$($$($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers')['$on_opal_server?']())) {
          return $lambda(($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

            return $send(self, '__hyperstack_prerender_router', [], block.$to_proc())}, $$2.$$s = self, $$2.$$arity = 0, $$2))
        } else {
          return $lambda(($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;

            return $send(self, '__hyperstack_render_router', [], block.$to_proc())}, $$3.$$s = self, $$3.$$arity = 0, $$3))
        };
      }, $Router___hyperstack_router_wrapper$1.$$arity = 0);
      
      Opal.def(self, '$__eval_block', $Router___eval_block$4 = function $$__eval_block(block) {
        var $$5, self = this, result = nil, $ret_or_1 = nil, $ret_or_2 = nil;

        
        result = $send(self, 'instance_eval', [], block.$to_proc());
        if ($truthy((function() {if ($truthy(($ret_or_1 = result['$is_a?']($$($nesting, 'String'))))) {
          return $ret_or_1
        } else {
          
          if ($truthy(($ret_or_2 = result['$respond_to?']("acts_as_string?")))) {
            return result['$acts_as_string?']()
          } else {
            return $ret_or_2
          };
        }; return nil; })())) {
          result = $send($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', ["span"], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

            return result.$to_s()}, $$5.$$s = self, $$5.$$arity = 0, $$5))};
        return result;
      }, $Router___eval_block$4.$$arity = 1);
      
      Opal.def(self, '$__hyperstack_render_router', $Router___hyperstack_render_router$6 = function $$__hyperstack_render_router() {
        var $iter = $Router___hyperstack_render_router$6.$$p, block = $iter || nil, $$7, self = this;

        if ($iter) $Router___hyperstack_render_router$6.$$p = null;
        
        
        if ($iter) $Router___hyperstack_render_router$6.$$p = null;;
        return $send(self, 'instance_eval', [], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s, $$8;

          
          if ($truthy(self.$history())) {
          } else {
            self.$class().$history("browser")
          };
          return $send($$$($$($nesting, 'React'), 'Router'), 'Router', [$hash2(["history"], {"history": self.$history().$to_n()})], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

            return self.$__eval_block(block)}, $$8.$$s = self, $$8.$$arity = 0, $$8));}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      }, $Router___hyperstack_render_router$6.$$arity = 0);
      
      Opal.def(self, '$__hyperstack_prerender_router', $Router___hyperstack_prerender_router$9 = function $$__hyperstack_prerender_router() {
        var $iter = $Router___hyperstack_prerender_router$9.$$p, block = $iter || nil, $$10, self = this;

        if ($iter) $Router___hyperstack_prerender_router$9.$$p = null;
        
        
        if ($iter) $Router___hyperstack_prerender_router$9.$$p = null;;
        return $send(self, 'instance_eval', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s, $a, $b, $$11, pathname = nil, search = nil, location = nil;

          
          $b = $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Router'), 'IsomorphicMethods').$request_fullpath().$split("?", 2), $a = Opal.to_ary($b), (pathname = ($a[0] == null ? nil : $a[0])), (search = ($a[1] == null ? nil : $a[1])), $b;
          location = $hash2(["pathname", "search"], {"pathname": pathname, "search": (function() {if ($truthy(search)) {
            return "" + "?" + (search)
          } else {
            return ""
          }; return nil; })()}).$to_n();
          return $send($$$($$($nesting, 'React'), 'Router'), 'StaticRouter', [$hash2(["location", "context"], {"location": location, "context": $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Router'), 'IsomorphicMethods').$ctx()})], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s;

            return self.$__eval_block(block)}, $$11.$$s = self, $$11.$$arity = 0, $$11));}, $$10.$$s = self, $$10.$$arity = 0, $$10));
      }, $Router___hyperstack_prerender_router$9.$$arity = 0);
      return (Opal.defs(self, '$included', $Router_included$12 = function $$included(base) {
        var $$13, self = this;

        
        base.$extend($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Router'), 'ClassMethods'));
        base.$include($$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'Router'), 'Helpers'));
        return $send(base, 'class_eval', [], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s, $history$14, $location$15, $$16, $$18;

          
          
          Opal.def(self, '$history', $history$14 = function $$history() {
            var self = this;

            return self.$class().$history()
          }, $history$14.$$arity = 0);
          
          Opal.def(self, '$location', $location$15 = function $$location() {
            var self = this;

            return self.$class().$location()
          }, $location$15.$$arity = 0);
          $send(self, 'after_mount', [], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s, $$17;

            return (self._react_router_unlisten = $send(self.$history(), 'listen', [], ($$17 = function(location, _action){var self = $$17.$$s == null ? this : $$17.$$s;

              
              
              if (location == null) {
                location = nil;
              };
              
              if (_action == null) {
                _action = nil;
              };
              return $$$($$$($$$($$($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper')['$mutated!']($$$($$$($$($nesting, 'Hyperstack'), 'Router'), 'Location'));}, $$17.$$s = self, $$17.$$arity = 2, $$17)))}, $$16.$$s = self, $$16.$$arity = 0, $$16));
          return $send(self, 'before_unmount', [], ($$18 = function(){var self = $$18.$$s == null ? this : $$18.$$s;
            if (self._react_router_unlisten == null) self._react_router_unlisten = nil;

            if ($truthy(self._react_router_unlisten)) {
              return self._react_router_unlisten.$call()
            } else {
              return nil
            }}, $$18.$$s = self, $$18.$$arity = 0, $$18));}, $$13.$$s = self, $$13.$$arity = 0, $$13));
      }, $Router_included$12.$$arity = 1), nil) && 'included';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.queue(function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$js_import', '$import']);
  
  self.$require("hyper-component");
  $$($nesting, 'Hyperstack').$js_import("hyperstack/router/react-router-source", $hash2(["defines"], {"defines": ["ReactRouter", "ReactRouterDOM", "History"]}));
  $$($nesting, 'Hyperstack').$import("hyper-router");
  
  self.$require("react/router");
  self.$require("react/router/dom");
  self.$require("react/router/history");
  self.$require("hyperstack/internal/router/isomorphic_methods");
  self.$require("hyperstack/router/history");
  self.$require("hyperstack/router/location");
  self.$require("hyperstack/router/match");
  self.$require("hyperstack/internal/router/class_methods");
  self.$require("hyperstack/internal/router/helpers");
  self.$require("hyperstack/internal/router/instance_methods");
  self.$require("hyperstack/router/helpers");
  return self.$require("hyperstack/router");;
});
